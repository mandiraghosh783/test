
  <h3 class="no-num no-toc">Stability</h3>

  <p>Different parts of this specification are at different levels of
  maturity.</p>

  <div id="stability"></div>

  <p class="big-issue">Some of the more major known issues are marked
  like this. There are many other issues that have been raised as
  well; the issues given in this document are not the only known
  issues! There are also some spec-wide issues that have not yet been
  addressed: case-sensitivity is a very poorly handled topic right
  now, and the firing of events needs to be unified (right now some
  bubble, some don't, they all use different text to fire events,
  etc). It would also be nice to unify the rules on downloading
  content when attributes change (e.g. <code title="">src</code>
  attributes) - should they initiate downloads when the element
  immediately, is inserted in the document, when active scripts end,
  etc. This matters e.g. if an attribute is set twice in a row (does
  it hit the network twice).</p>


  <h2 class="no-num no-toc" id="contents">Table of contents</h2>
  <!--toc-->
  <hr>


  <h2 id="introduction">Introduction</h2>

  <p><em>This section is non-normative.</em></p>

  <p>The World Wide Web's markup language has always been HTML. HTML
  was primarily designed as a language for semantically describing
  scientific documents, although its general design and adaptations
  over the years has enabled it to be used to describe a number of
  other types of documents.</p>

  <p>The main area that has not been adequately addressed by HTML is a
  vague subject referred to as Web Applications. This specification
  attempts to rectify this, while at the same time updating the HTML
  specifications to address issues raised in the past few years.</p>

  <h3>Scope</h3>

  <p><em>This section is non-normative.</em></p>

  <p>This specification is limited to providing a semantic-level
  markup language and associated semantic-level scripting APIs for
  authoring accessible pages on the Web ranging from static documents
  to dynamic applications.</p>

  <p>The scope of this specification does not include addressing
  presentation concerns (although default rendering rules for Web
  browsers are included at the end of this specification).</p>

  <p>The scope of this specification does not include documenting
  every HTML or DOM feature supported by Web browsers. Browsers
  support many features that are considered to be very bad for
  accessibility or that are otherwise inappropriate. For example, the
  <code>blink</code> element is clearly presentational and authors
  wishing to cause text to blink should instead use CSS.</p>

  <p>The scope of this specification is not to describe an entire
  operating system. In particular, hardware configuration software,
  image manipulation tools, and applications that users would be
  expected to use with high-end workstations on a daily basis are out
  of scope. In terms of applications, this specification is targeted
  specifically at applications that would be expected to be used by
  users on an occasional basis, or regularly but from disparate
  locations, with low CPU requirements. For instance online purchasing
  systems, searching systems, games (especially multiplayer online
  games), public telephone books or address books, communications
  software (e-mail clients, instant messaging clients, discussion
  software), document editing software, etc.</p>

  <p>For sophisticated cross-platform applications, there already
  exist several proprietary solutions (such as Mozilla's XUL, Adobe's
  Flash, or Microsoft's Silverlight). These solutions are evolving
  faster than any standards process could follow, and the requirements
  are evolving even faster. These systems are also significantly more
  complicated to specify, and are orders of magnitude more difficult
  to achieve interoperability with, than the solutions described in
  this document. Platform-specific solutions for such sophisticated
  applications (for example the MacOS X Core APIs) are even further
  ahead.</p>


  <h4>Relationship to HTML 4.01, XHTML 1.1, DOM2 HTML</h4>

  <p><em>This section is non-normative.</em></p>

  <p>This specification represents a new version of HTML4 and XHTML1,
  along with a new version of the associated DOM2 HTML API. Migration
  from HTML4 or XHTML1 to the format and APIs described in this
  specification should in most cases be straightforward, as care has
  been taken to ensure that backwards-compatibility is retained.</p>
  <!-- XXX refs -->

  <p>This specification will eventually supplant Web Forms 2.0 as
  well. <a href="#refsWF2">[WF2]</a></p>


  <h4>Relationship to XHTML2</h4>

  <p><em>This section is non-normative.</em></p>

  <p>XHTML2 <a href="#refsXHTML2">[XHTML2]</a> defines a new HTML
  vocabulary with better features for hyperlinks, multimedia content,
  annotating document edits, rich metadata, declarative interactive
  forms, and describing the semantics of human literary works such as
  poems and scientific papers.</p>

  <p>However, it lacks elements to express the semantics of many of
  the non-document types of content often seen on the Web. For
  instance, forum sites, auction sites, search engines, online shops,
  and the like, do not fit the document metaphor well, and are not
  covered by XHTML2.</p>

  <p><em>This</em> specification aims to extend HTML so that it is
  also suitable in these contexts.</p>

  <p>XHTML2 and this specification use different namespaces and
  therefore can both be implemented in the same XML processor.</p>


  <h4>Relationship to XUL, Flash, Silverlight, and other proprietary UI languages</h4>

  <p><em>This section is non-normative.</em></p>

  <p>This specification is independent of the various proprietary UI
  languages that various vendors provide. As an open, vender-neutral
  language, HTML provides for a solution to the same problems without
  the risk of vendor lock-in.</p>


  <h3>Structure of this specification</h3>

  <p><em>This section is non-normative.</em></p>

  <p>This specification is divided into the following important
  sections:</p>

  <dl>


   <dt><a href="#dom">The DOM</a></dt>

   <dd>The DOM, or Document Object Model, provides a base for the rest
   of the specification.</dd>


   <dt><a href="#semantics">The Semantics</a></dt>

   <dd>Documents are built from elements. These elements form a tree
   using the DOM. Each element also has a predefined meaning, which is
   explained in this section. User agent requirements for how to
   handle each element are also given, along with rules for authors on
   how to use the element.</dd>


   <dt><a href="#windows">Browsing Contexts</a></dt>

   <dd>HTML documents do not exist in a vacuum &mdash; this section
   defines many of the features that affect environments that deal
   with multiple pages, links between pages, and running scripts.</dd>


   <dt>APIs</dt>

   <dd><a href="#editing">The Editing APIs</a>: HTML documents can
   provide a number of mechanisms for users to modify content, which
   are described in this section.</dd>

   <dd><a href="#comms">The Communication APIs</a>: Applications
   written in HTML often require mechanisms to communicate with remote
   servers, as well as communicating with other applications from
   different domains running on the same client.</dd>

   <dd><a href="#repetition">Repetition Templates</a>: A mechanism to
   support repeating sections in forms.</dd>


   <dt><a href="#syntax">The Language Syntax</a></dt>

   <dd>All of these features would be for naught if they couldn't be
   represented in a serialised form and sent to other people, and so
   this section defines the syntax of HTML, along with rules for how
   to parse HTML.</dd>


  </dl>

  <p>There are also a couple of appendices, defining <a
  href="#wysiwyg">shims for WYSIWYG editors</a>, <a
  href="#rendering">rendering rules</a> for Web browsers, and listing
  <a href="#no">areas that are out of scope</a> for this
  specification.</p>


  <h4>How to read this specification</h4>

  <p>This specification should be read like all other specifications.
  First, it should be read cover-to-cover, multiple times. Then, it
  should be read backwards at least once. Then it should be read by
  picking random sections from the contents list and following all the
  cross-references.</p>


  <h3>Conformance requirements</h3>

  <p>All diagrams, examples, and notes in this specification are
  non-normative, as are all sections explicitly marked non-normative.
  Everything else in this specification is normative.</p>

  <p>The key words "MUST", "MUST NOT", "REQUIRED", <!--"SHALL", "SHALL
  NOT",--> "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and
  "OPTIONAL" in the normative parts of this document are to be
  interpreted as described in RFC2119. For readability, these words do
  not appear in all uppercase letters in this specification. <a
  href="#refsRFC2119">[RFC2119]</a></p> <!-- XXX but they should be
  marked up -->

  <p>Requirements phrased in the imperative as part of algorithms
  (such as "strip any leading space characters" or "return false and
  abort these steps") are to be interpreted with the meaning of the
  key word ("must", "should", "may", etc) used in introducing the
  algorithm.</p>

  <p>This specification describes the conformance criteria for user
  agents (relevant to implementors) and documents (relevant to
  authors and authoring tool implementors).</p>

  <p class="note">There is no implied relationship between document
  conformance requirements and implementation conformance
  requirements. User agents are not free to handle non-conformant
  documents as they please; the processing model described in this
  specification applies to implementations regardless of the
  conformity of the input documents.</p> <!--XXX quite possible that
  this is stated twice. check for whether this is a dupe. -->

  <p>User agents fall into several (overlapping) categories with
  different conformance requirements.</p>

  <dl>

   <dt id="interactive">Web browsers and other interactive user agents</dt>

   <dd>

    <p>Web browsers that support <span>XHTML</span> must process
    elements and attributes from the <span>HTML namespace</span> found
    in <span>XML documents</span> as described in this specification,
    so that users can interact with them, unless the semantics of
    those elements have been overridden by other specifications.</p>

    <p class="example">A conforming XHTML processor would, upon
    finding an XHTML <code>script</code> element in an XML document,
    execute the script contained in that element. However, if the
    element is found within an XSLT transformation sheet (assuming the
    UA also supports XSLT), then the processor would instead treat the
    <code>script</code> element as an opaque element that forms part
    of the transform.</p>

    <p>Web browsers that support <span title="HTML5">HTML</span> must
    process documents labelled as <code>text/html</code> as described
    in this specification, so that users can interact with them.</p>

   </dd>

   <dt id="non-interactive">Non-interactive presentation user agents</dt>

   <dd>

    <p>User agents that process HTML and XHTML documents purely to
    render non-interactive versions of them must comply to the same
    conformance criteria as Web browsers, except that they are exempt
    from requirements regarding user interaction.</p>

    <p class="note">Typical examples of non-interactive presentation
    user agents are printers (static UAs) and overhead displays
    (dynamic UAs). It is expected that most static non-interactive
    presentation user agents will also opt to <a
    href="#non-scripted">lack scripting support</a>.</p>

    <p class="example">A non-interactive but dynamic presentation UA
    would still execute scripts, allowing forms to be dynamically
    submitted, and so forth. However, since the concept of "focus" is
    irrelevant when the user cannot interact with the document, the UA
    would not need to support any of the focus-related DOM APIs.</p>

   </dd>

   <dt><dfn id="non-scripted">User agents with no scripting support</dfn></dt>

   <dd>

    <p>Implementations that do not support scripting (or which have
    their scripting features <span title="scripting is
    disabled">disabled</span>) are exempt from supporting the events
    and DOM interfaces mentioned in this specification. For the parts
    of this specification that are defined in terms of an events model
    or in terms of the DOM, such user agents must still act as if
    events and the DOM were supported.</p>

    <p class="note">Scripting can form an integral part of an
    application. Web browsers that do not support scripting, or that
    have scripting disabled, might be unable to fully convey the
    author's intent.</p>

   </dd>

   <dt>Conformance checkers</dt>

   <dd id="conformance-checkers">

    <p>Conformance checkers must verify that a document conforms to
    the applicable conformance criteria described in this
    specification. Conformance checkers are exempt from detecting
    errors that require interpretation of the author's intent (for
    example, while a document is non-conforming if the content of a
    <code>blockquote</code> element is not a quote, conformance
    checkers do not have to check that <code>blockquote</code>
    elements only contain quoted material).</p>

    <p>Conformance checkers must check that the input document
    conforms when <span>scripting is disabled</span>, and should also
    check that the input document conforms when <span>scripting is
    enabled</span>. (This is only a "SHOULD" and not a "MUST"
    requirement because it has been proven to be impossible. <a
    href="#refsHALTINGPROBLEM">[HALTINGPROBLEM]</a>)</p> <!-- XXX
    [Computable] On computable numbers, with an application to the
    Entscheidungsproblem. Alan M. Turing. In Proceedings of the London
    Mathematical Society, series 2, volume 42, pages 230-265. London
    Mathematical Society,
    1937. http://www.turingarchive.org/browse.php/B/12 (referenced:
    2007-03-03)
    -->

    <p>The term "HTML5 validator" can be used to refer to a
    conformance checker that itself conforms to the applicable
    requirements of this specification.</p>

    <div class="note">

     <p>XML DTDs cannot express all the conformance requirements of
     this specification. Therefore, a validating XML processor and a
     DTD cannot constitute a conformance checker. Also, since neither
     of the two authoring formats defined in this specification are
     applications of SGML, a validating SGML system cannot constitute
     a conformance checker either.</p>

     <p>To put it another way, there are three types of conformance
     criteria:</p>

     <ol>

      <li>Criteria that can be expressed in a DTD.</li>

      <li>Criteria that cannot be expressed by a DTD, but can still be
      checked by a machine.</li>

      <li>Criteria that can only be checked by a human.</li>

     </ol>

     <p>A conformance checker must check for the first two. A simple
     DTD-based validator only checks for the first class of errors and
     is therefore not a conforming conformance checker according to
     this specification.</p>

    </div>
   </dd>

   <dt>Data mining tools</dt>

   <dd id="data-mining">

    <p>Applications and tools that process HTML and XHTML documents
    for reasons other than to either render the documents or check
    them for conformance should act in accordance to the semantics of
    the documents that they process.</p>

    <p class="example">A tool that generates <span
    title="outline">document outlines</span> but increases the nesting
    level for each paragraph and does not increase the nesting level
    for each section would not be conforming.</p>

   </dd>

   <dt id="editors">Authoring tools and markup generators</dt>

   <dd>

    <p>Authoring tools and markup generators must generate conforming
    documents. Conformance criteria that apply to authors also apply
    to authoring tools, where appropriate.</p>

    <p>Authoring tools are exempt from the strict requirements of
    using elements only for their specified purpose, but only to the
    extent that authoring tools are not yet able to determine author
    intent.</p>

    <p class="example">For example, it is not conforming to use an
    <code>address</code> element for arbitrary contact information;
    that element can only be used for marking up contact information
    for the author of the document or section. However, since an
    authoring tools is likely unable to determine the difference, an
    authoring tool is exempt from that requirement.</p>

    <p class="note">In terms of conformance checking, an editor is
    therefore required to output documents that conform to the same
    extent that a conformance checker will verify.</p>

    <p>When an authoring tool is used to edit a non-conforming
    document, it may preserve the conformance errors in sections of
    the document that were not edited during the editing session
    (i.e. an editing tool is allowed to round-trip errorneous
    content). However, an authoring tool must not claim that the
    output is conformant if errors have been so preserved.</p>

    <p>Authoring tools are expected to come in two broad varieties:
    tools that work from structure or semantic data, and tools that
    work on a What-You-See-Is-What-You-Get media-specific editing
    basis (WYSIWYG).</p>

    <p>The former is the preferred mechanism for tools that author
    HTML, since the structure in the source information can be used to
    make informed choices regarding which HTML elements and attributes
    are most appropriate.</p>

    <p>However, WYSIWYG tools are legitimate, and this specification
    <span title="WYSIWYG editors">makes certain concessions to WYSIWYG
    editors</span>.</p>

    <p>All authoring tools, whether WYSIWYG or not, should make a best
    effort attempt at enabling users to create well-structured,
    semantically rich, media-independent content.</p>

   </dd>

  </dl>

  <p>Some conformance requirements are phrased as requirements on
  elements, attributes, methods or objects. Such requirements fall
  into two categories; those describing content model restrictions,
  and those describing implementation behaviour. The former category
  of requirements are requirements on documents and authoring
  tools. The second category are requirements on user agents.</p>

  <p>Conformance requirements phrased as algorithms or specific steps
  may be implemented in any manner, so long as the end result is
  equivalent. (In particular, the algorithms defined in this
  specification are intended to be easy to follow, and not intended to
  be performant.)</p>

  <p id="hardwareLimitations">User agents may impose
  implementation-specific limits on otherwise unconstrained inputs,
  e.g. to prevent denial of service attacks, to guard against running
  out of memory, or to work around platform-specific limitations.</p>

  <p>For compatibility with existing content and prior specifications,
  this specification describes two authoring formats: one based on XML
  (referred to as <dfn id="xhtml5" title="XHTML">XHTML5</dfn>), and
  one using a <a href="#parsing">custom format</a> inspired by SGML
  (referred to as <dfn id="html5">HTML5</dfn>). Implementations may
  support only one of these two formats, although supporting both is
  encouraged.</p>

  <p id="authors-using-xhtml"><span>XHTML</span> documents (<span>XML
  documents</span> using elements from the <span>HTML
  namespace</span>) that use the new features described in this
  specification and that are served over the wire (e.g. by HTTP) must
  be sent using an XML MIME type such as <code>application/xml</code>
  or <code>application/xhtml+xml</code> and must not be served as
  <code>text/html</code>. <a href="#refsRFC3023">[RFC3023]</a></p>

  <p>Such XML documents may contain a <code>DOCTYPE</code> if desired,
  but this is not required to conform to this specification.</p>

  <p class="note">According to the XML specification, XML processors
  are not guaranteed to process the external DTD subset referenced in
  the DOCTYPE. This means, for example, that using entities for
  characters in XHTML documents is unsafe (except for &amp;lt;,
  &amp;gt;, &amp;amp;, &amp;quot; and &amp;apos;). For
  interoperability, authors are advised to avoid optional features of
  XML.</p>

  <p id="authors-using-html"><span title="HTML5">HTML
  documents</span>, if they are served over the wire (e.g. by HTTP)
  must be labelled with the <code>text/html</code> MIME type.</p> <!--
  XXX update RFC 2854 -->

  <p id="entity-references">The language in this specification assumes
  that the user agent expands all entity references, and therefore
  does not include entity reference nodes in the DOM. If user agents
  do include entity reference nodes in the DOM, then user agents must
  handle them as if they were fully expanded when implementing this
  specification. For example, if a requirement talks about an
  element's child text nodes, then any text nodes that are children of
  an entity reference that is a child of that element would be used as
  well.</p> <!-- XXX unexpandable entities? -->


  <h4>Common conformance requirements for APIs exposed to
  JavaScript</h4>

  <p class="big-issue">A lot of arrays/lists/<span>collection</span>s
  in this spec assume zero-based indexes but use the term "<var
  title="">index</var>th" liberally. We should define those to be
  zero-based and be clearer about this.</p>

  <p>Unless other specified, if a DOM attribute that is a floating
  point number type (<code title="">float</code>) is assigned an
  Infinity or Not-a-Number value, a <code
  title="big-issue">NOT_SUPPORTED_ERR</code> exception must be
  raised.</p>

  <p>Unless other specified, if a DOM attribute that is a signed
  numeric type is assigned a negative value, a <code
  title="big-issue">NOT_SUPPORTED_ERR</code> exception must be
  raised.</p>

  <p>Unless other specified, if a method with an argument that is a
  floating point number type (<code title="">float</code>) is passed
  an Infinity or Not-a-Number value, a <code
  title="big-issue">NOT_SUPPORTED_ERR</code> exception must be
  raised.</p>

  <p>Unless other specified, if a method is passed fewer
  arguments than is defined for that method in its IDL definition,
  a <code title="big-issue">NOT_SUPPORTED_ERR</code> exception must be
  raised.</p>

  <p>Unless other specified, if a method is passed more arguments than
  is defined for that method in its IDL definition, the excess
  arguments must be ignored.</p> <!-- XXX When updating this spec for
  Bindings-For-DOM-compliance, also remove or consider the equivalent
  requirement in the canvas section for toDataURL() and
  getContext(). -->

  <p>Unless other specified, if a method is expecting, as one of its
  arguments, as defined by its IDL definition, an object implementing
  a particular interface <var title="">X</var>, and the argument
  passed is an object whose [[Class]] property is neither that
  interface <var title="">X</var>, nor the name of an interface <var
  title="">Y</var> where this specification requires that all objects
  implementing interface <var title="">Y</var> also implement
  interface <var title="">X</var>, nor the name of an interface that
  inherits from the expected interface <var title="">X</var>, then a
  <code title="">TYPE_MISMATCH_ERR</code> exception must be
  raised.</p>

  <p class="big-issue">Anything else? Passing the wrong type of
  object, maybe? Implied conversions to int/float?</p>
  

  <h4>Dependencies</h4>

  <p>This specification relies on several other underlying
  specifications.</p>

  <dl>

   <dt>XML</dt>

   <dd>

    <p>Implementations that support XHTML5 must support some version
    of XML, as well as its corresponding namespaces specification,
    because XHTML5 uses an XML serialisation with namespaces. <a
    href="#refsXML">[XML]</a> <a
    href="#refsXMLNAMES">[XMLNAMES]</a></p>

   </dd>

   <dt>XML Base</dt>

   <dd>

    <p id="xmlBase">User agents must follow the rules given by XML
    Base to resolve relative URIs in HTML and XHTML fragments. That
    is the mechanism used in this specification for resolving relative
    URIs in DOM trees. <a href="#refsXMLBASE">[XMLBASE]</a></p>

    <p class="note">It is possible for <code
    title="attr-xml-base">xml:base</code> attributes to be present
    even in HTML fragments, as such attributes can be added
    dynamically using script.</p>

   </dd>

   <dt>DOM</dt>

   <dd>

    <p>Implementations must support some version of DOM Core and DOM
    Events, because this specification is defined in terms of the DOM,
    and some of the features are defined as extensions to the DOM Core
    interfaces. <a href="#refsDOM3CORE">[DOM3CORE]</a> <a
    href="#refsDOM3CORE">[DOM3EVENTS]</a></p>

   </dd>

   <dt>ECMAScript</dt>

   <dd>

    <p>Implementations that use ECMAScript to implement the APIs
    defined in this specification must implement them in a manner
    consistent with the ECMAScript Bindings for DOM Specifications
    specification, as this specification uses that specification's
    terminology. <a href="#refsEBFD">[EBFD]</a></p>

   </dd>

  </dl>

  <p>This specification does not require support of any particular
  network transport protocols, style sheet language, scripting
  language, or any of the DOM and WebAPI specifications beyond those
  described above. However, the language described by this
  specification is biased towards CSS as the styling language,
  ECMAScript as the scripting language, and HTTP as the network
  protocol, and several features assume that those languages and
  protocols are in use.</p>

  <p class="note">This specification might have certain additional
  requirements on character encodings, image formats, audio formats,
  and video formats in the respective sections.</p>


  <h4>Features defined in other specifications</h4>

  <p>Some elements are defined in terms of their DOM
  <dfn><code>textContent</code></dfn> attribute. This is an attribute
  defined on the <code>Node</code> interface in DOM3 Core. <a
  href="#refsDOM3CORE">[DOM3CORE]</a></p>

  <p class="big-issue">Should textContent be defined differently for
  dir="" and &lt;bdo>? Should we come up with an alternative to
  textContent that handles those and other things, like alt=""?</p>

  <!-- This section is currently here exclusively so that we crossref
  to textContent. XXX also add event-click, event-change,
  event-DOMActivate, etc, here, and just have the section be a general
  "defined in other specifications" section -->

  <p>The interface <dfn><code>DOMTimeStamp</code></dfn> is defined in
  DOM3 Core. <a href="#refsDOM3CORE">[DOM3CORE]</a></p>

  <p>The term <dfn>activation behavior</dfn> is used as defined in the
  DOM3 Events specification. <a
  href="#refsDOM3EVENTS">[DOM3EVENTS]</a> <span class="big-issue">At
  the time of writing, DOM3 Events hadn't yet been updated to define
  that phrase.</span></p>

  <p id="alternate-style-sheets">The rules for handling alternative
  style sheets are defined in the CSS object model specification. <a
  href="#refsCSSOM">[CSSOM]</a></p>

  <p class="big-issue">See <a
  href="http://dev.w3.org/cvsweb/~checkout~/csswg/cssom/Overview.html?rev=1.35&amp;content-type=text/html;%20charset=utf-8">http://dev.w3.org/cvsweb/~checkout~/csswg/cssom/Overview.html?rev=1.35&amp;content-type=text/html;%20charset=utf-8</a></p>

  <p>Certain features are defined in terms of CSS &lt;color&gt;
  values. When the CSS value <code title="">currentColor</code> is
  specified in this context, the "computed value of the 'color'
  property" for the purposes of determining the computed value of the
  <code title="">currentColor</code> keyword is the computed value of
  the 'color' property on the element in question. <a
  href="#refsCSS3COLOR">[CSS3COLOR]</a></p>

  <p class="example">If a canvas gradient's <code
  title="dom-canvasgradient-addColorStop">addColorStop()</code> method
  is called with the <code title="">currentColor</code> keyword as the
  color, then the computed value of the 'color' property on the
  <code>canvas</code> element is the one that is used.</p>


  <h3>Terminology</h3>

  <p>This specification refers to both HTML and XML attributes and DOM
  attributes, often in the same context. When it is not clear which is
  being referred to, they are referred to as <dfn>content
  attributes</dfn> for HTML and XML attributes, and <dfn>DOM
  attributes</dfn> for those from the DOM. Similarly, the term
  "properties" is used for both ECMAScript object properties and CSS
  properties. When these are ambiguous they are qualified as object
  properties and CSS properties respectively.</p>

  <p id="html-namespace">To ease migration from HTML to XHTML, UAs
  conforming to this specification will place elements in HTML in the
  <code>http://www.w3.org/1999/xhtml</code> namespace, at least for
  the purposes of the DOM and CSS. The term "<dfn>elements in the HTML
  namespace</dfn>", or "<dfn>HTML elements</dfn>" for short, when used
  in this specification, thus refers to both HTML and XHTML
  elements.</p>

  <p>Unless otherwise stated, all elements defined or mentioned in
  this specification are in the
  <code>http://www.w3.org/1999/xhtml</code> namespace, and all
  attributes defined or mentioned in this specification have no
  namespace (they are in the per-element partition).</p>

  <p>The term <span>HTML documents</span> is sometimes used in
  contrast with <span>XML documents</span> to mean specifically
  documents that were parsed using an <span>HTML parser</span> (as
  opposed to using an XML parser or created purely through the
  DOM).</p>

  <p>Generally, when the specification states that a feature applies
  to HTML or XHTML, it also includes the other. When a feature
  specifically only applies to one of the two languages, it is called
  out by explicitly stating that it does not apply to the other
  format, as in "for HTML, ... (this does not apply to XHTML)".</p>

  <p>This specification uses the term <em>document</em> to refer to
  any use of HTML, ranging from short static documents to long essays
  or reports with rich multimedia, as well as to fully-fledged
  interactive applications.</p>

  <p>For readability, the term URI is used to refer to both ASCII URIs
  and Unicode IRIs, as those terms are defined by RFC 3986 and RFC
  3987 respectively. On the rare occasions where IRIs are not allowed
  but ASCII URIs are, this is called out explicitly. <a
  href="#refsRFC3986">[RFC3986]</a> <a
  href="#refsRFC3987">[RFC3987]</a></p>

  <p>The term <dfn>root element</dfn>, when not qualified to
  explicitly refer to the document's root element, means the furthest
  ancestor element node of whatever node is being discussed, or the
  node itself is there is none. When the node is a part of the
  document, then that is indeed the document's root element. However,
  if the node is not currently part of the document tree, the root
  element will be an orphaned node.</p>

  <p>An element is said to have been <dfn title="insert an element
  into a document">inserted into a document</dfn> when its <span>root
  element</span> changes and is now the document's <span>root
  element</span>.</p>

  <p>The term <dfn>tree order</dfn> means a pre-order, depth-first
  traversal of DOM nodes involved (through the <code
  title="">parentNode</code>/<code title="">childNodes</code>
  relationship).</p>

  <p>When it is stated that some element or attribute is <dfn
  title="ignore">ignored</dfn>, or treated as some other value, or
  handled as if it was something else, this refers only to the
  processing of the node after it is in the DOM. A user agent must not
  mutate the DOM in such situations.</p>

  <p>When an XML name, such as an attribute or element name, is
  referred to in the form
  <code><var title="">prefix</var>:<var title="">localName</var></code>, as in
  <code>xml:id</code> or <code>svg:rect</code>, it refers to a name
  with the local name <var title="">localName</var> and the namespace given by
  the prefix, as defined by the following table:</p>

  <dl>
   <dt><code title="">xml</code></dt>
   <dd><code>http://www.w3.org/XML/1998/namespace</code></dd>
   <dt><code title="">html</code></dt>
   <dd><code>http://www.w3.org/1999/xhtml</code></dd>
   <dt><code title="">svg</code></dt>
   <dd><code>http://www.w3.org/2000/svg</code></dd>
  </dl>

  <p>For simplicity, terms such as <em>shown</em>, <em>displayed</em>,
  and <em>visible</em> might sometimes be used when referring to the
  way a document is rendered to the user. These terms are not meant to
  imply a visual medium; they must be considered to apply to other
  media in equivalent ways.</p>

  <p>Various DOM interfaces are defined in this specification using
  pseudo-IDL. This looks like OMG IDL but isn't. For instance, method
  overloading is used, and types from the W3C DOM specifications are
  used without qualification. Language-specific bindings for these
  abstract interface definitions must be derived in the way consistent
  with W3C DOM specifications. Some interface-specific binding
  information for ECMAScript is included in this specification.</p>

  <p class="big-issue">The current situation with IDL blocks is
  pitiful. IDL is totally inadequate to properly represent what
  objects have to look like in JS; IDL can't say if a member is
  enumerable, what the indexing behaviour is, what the stringification
  behaviour is, what behaviour setting a member whose type is a
  particular interface should be (e.g. setting of document.location or
  element.className), what constructor an object implementing an
  interface should claim to have, how overloads work, etc. I think we
  should make the IDL blocks non-normative, and/or replace them with
  something else that is better for JS while still being clear on how
  it applies to other languages. However, we do need to have something
  that says what types the methods take as arguments, since we have to
  raise exceptions if they are wrong.</p>

  <p>The construction "a <code>Foo</code> object", where
  <code>Foo</code> is actually an interface, is sometimes used instead
  of the more accurate "an object implementing the interface
  <code>Foo</code>".</p>

  <p>A DOM attribute is said to be <em>getting</em> when its value is
  being retrieved (e.g. by author script), and is said to be
  <em>setting</em> when a new value is assigned to it.</p>

  <p>If a DOM object is said to be <dfn>live</dfn>, then that means
  that any attributes returning that object must always return the
  same object (not a new object each time), and the attributes and
  methods on that object must operate on the actual underlying data,
  not a snapshot of the data.</p>

  <!-- XXX should define "same instance of" to mean JS===. -->

  <p>The terms <em>fire</em> and <em>dispatch</em> are used
  interchangeably in the context of events, as in the DOM Events
  specifications. <a href="#refsDOM3EVENTS">[DOM3EVENTS]</a></p>

  <p>The term <dfn>text node</dfn> refers to any <code>Text</code>
  node, including <code>CDATASection</code> nodes (any
  <code>Node</code> with node type 3 or 4).</p>

  <p>Some of the algorithms in this specification, for historical
  reasons, require the user agent to <dfn>pause</dfn> until some
  condition has been met. While a user agent is paused, it must ensure
  that no scripts execute (e.g. no event handlers, no timers,
  etc). User agents should remain responsive to user input while
  paused, however.</p>


  <h4>HTML vs XHTML</h4>

  <p><em>This section is non-normative.</em></p>

  <p>This specification defines an abstract language for describing
  documents and applications, and some APIs for interacting with
  in-memory representations of resources that use this language.</p>

  <p>The in-memory representation is known as "DOM5 HTML", or "the
  DOM" for short.</p>

  <p>There are various concrete syntaxes that can be used to transmit
  resources that use this abstract language, two of which are defined
  in this specification.</p>

  <p>The first such concrete syntax is "HTML5". This is the format
  recommended for most authors. It is compatible with all legacy Web
  browsers. If a document is transmitted with the MIME type <code
  title="">text/html</code>, then it will be processed as an "HTML5"
  document by Web browsers.</p>

  <p>The second concrete syntax uses XML, and is known as
  "XHTML5". When a document is transmitted with an XML MIME type, such
  as <code title="">application/xhtml+xml</code>, then it is processed
  by an XML processor by Web browsers, and treated as an "XHTML5"
  document. Authors are reminded that the processing for XML and HTML
  differs; in particular, even minor syntax errors will prevent an XML
  document from being rendered fully, whereas they would be ignored in
  the "HTML5" syntax.</p>

  <p>The "DOM5 HTML", "HTML5", and "XHTML5" representations cannot all
  represent the same content. For example, namespaces cannot be
  represented using "HTML5", but they are supported in "DOM5 HTML" and
  "XHTML5". Similarly, documents that use the <code>noscript</code>
  feature can be represented using "HTML5", but cannot be represented
  with "XHTML5" and "DOM5 HTML". Comments that contain the string
  "<code title="">--&gt;</code>" can be represented in "DOM5 HTML" but
  not in "HTML5" and "XHTML5". And so forth.</p>


  <h2 id="dom">The Document Object Model</h2>

  <p>The Document Object Model (DOM) is a representation &mdash; a
  model &mdash; of a document and its content. <a
  href="#refsDOM3CORE">[DOM3CORE]</a> The DOM is not just an API; the
  conformance criteria of HTML implementations are defined, in this
  specification, in terms of operations on the DOM.</p>

  <p>This specification defines the language represented in the DOM by
  features together called DOM5 HTML. DOM5 HTML consists of DOM Core
  <code>Document</code> nodes and DOM Core <code>Element</code> nodes,
  along with text nodes and other content.</p>

  <p>Elements in the DOM represent things; that is, they have
  intrinsic <em>meaning</em>, also known as semantics.</p>

  <p class="example">For example, an <code>ol</code> element represents
  an ordered list.</p>

  <p>In addition, documents and elements in the DOM host APIs that
  extend the DOM Core APIs, providing new features to application
  developers using DOM5 HTML.</p>


  <h3>Documents</h3>

  <p>Every XML and HTML document in an HTML UA is represented by a
  <code>Document</code> object. <a
  href="#refsDOM3CORE">[DOM3CORE]</a></p>

  <p><code>Document</code> objects are assumed to be <dfn>XML
  documents</dfn> unless they are flagged as being <dfn>HTML
  documents</dfn> when they are created. Whether a document is an
  <span title="HTML documents">HTML document</span> or an <span
  title="XML documents">XML document</span> affects the behaviour of
  certain APIs, as well as a few CSS rendering rules. <a
  href="#refsCSS21">[CSS21]</a></p>

  <p class="note">A <code>Document</code> object created by the <code
  title="">createDocument()</code> API on the
  <code>DOMImplementation</code> object is initially an <span
  title="XML documents">XML document</span>, but can be made into an
  <span title="HTML documents">HTML document</span> by calling <code
  title="dom-document-open">document.open()</code> on it.</p>

  <p>All <code>Document</code> objects (in user agents implementing
  this specification) must also implement the
  <code>HTMLDocument</code> interface, available using
  binding-specific methods. (This is the case whether or not the
  document in question is an <span title="HTML documents">HTML
  document</span> or indeed whether it contains any <span>HTML
  elements</span> at all.) <code>Document</code> objects must also
  implement the document-level interface of any other namespaces found
  in the document that the UA supports. For example, if an HTML
  implementation also supports SVG, then the <code>Document</code>
  object must implement <code>HTMLDocument</code> and
  <code>SVGDocument</code>.</p>

  <p class="note">Because the <code>HTMLDocument</code> interface is
  now obtained using binding-specific casting methods instead of
  simply being the primary interface of the document object, it is no
  longer defined as inheriting from <code>Document</code>.</p>

  <pre class="idl">interface <dfn>HTMLDocument</dfn> {
  // <span>Resource metadata management</span>
  readonly attribute <span>Location</span> <span title="dom-document-location">location</span>;
  readonly attribute DOMString <span title="dom-document-URL">URL</span>;
           attribute DOMString <span title="dom-document-domain">domain</span>;
  readonly attribute DOMString <span title="dom-document-referrer">referrer</span>;
           attribute DOMString <span title="dom-document-cookie">cookie</span>;
  readonly attribute DOMString <span title="dom-document-lastModified">lastModified</span>;
  readonly attribute DOMString <span title="dom-document-compatMode">compatMode</span>;

  // <span>DOM tree accessors</span>
           attribute DOMString <span title="dom-document-title">title</span>;
           attribute DOMString <span title="dom-document-dir">dir</span>;
           attribute <span>HTMLElement</span> <span title="dom-document-body">body</span>;
  readonly attribute <span>HTMLCollection</span> <span title="dom-document-images">images</span>;
<!--  readonly attribute <span>HTMLCollection</span> <span title="dom-document-applets">applets</span>;
-->  readonly attribute <span>HTMLCollection</span> <span title="dom-document-links">links</span>;
  readonly attribute <span>HTMLCollection</span> <span title="dom-document-forms">forms</span>;
  readonly attribute <span>HTMLCollection</span> <span title="dom-document-anchors">anchors</span>;
  NodeList <span title="dom-document-getElementsByName">getElementsByName</span>(in DOMString elementName);
  NodeList <span title="dom-document-getElementsByClassName">getElementsByClassName</span>(in DOMString classNames);

  // <span>Dynamic markup insertion</span>
           attribute DOMString <span title="dom-innerHTML">innerHTML</span>;
  <span>HTMLDocument</span> <span title="dom-document-open">open</span>();
  <span>HTMLDocument</span> <span title="dom-document-open">open</span>(in DOMString type);
  <span>HTMLDocument</span> <span title="dom-document-open">open</span>(in DOMString type, in DOMString replace);
  <span>Window</span> <span title="dom-document-open">open</span>(in DOMString url, in DOMString name, in DOMString features);
  <span>Window</span> <span title="dom-document-open">open</span>(in DOMString url, in DOMString name, in DOMString features, in boolean replace);
  void <span title="dom-document-close">close</span>();
  void <span title="dom-document-write">write</span>(in DOMString text);
  void <span title="dom-document-writeln">writeln</span>(in DOMString text);

  // <span>Interaction</span>
  readonly attribute <span>Element</span> <span title="dom-document-activeElement">activeElement</span>;
  readonly attribute boolean <span title="dom-document-hasFocus">hasFocus</span>;

  // <span title="concept-command">Commands</span>
  readonly attribute <span>HTMLCollection</span> <span title="dom-document-commands">commands</span>;

  // <span>Editing</span>
           attribute boolean <span title="dom-document-designMode">designMode</span>;
  boolean <span title="dom-document-execCommand">execCommand</span>(in DOMString commandId);
  boolean <span title="dom-document-execCommand">execCommand</span>(in DOMString commandId, in boolean doShowUI);
  boolean <span title="dom-document-execCommand">execCommand</span>(in DOMString commandId, in boolean doShowUI, in DOMString value);
  boolean <span title="dom-document-queryCommandEnabled">queryCommandEnabled</span>(in DOMString commandId);
  boolean <span title="dom-document-queryCommandIndeterm">queryCommandIndeterm</span>(in DOMString commandId);
  boolean <span title="dom-document-queryCommandState">queryCommandState</span>(in DOMString commandId);
  boolean <span title="dom-document-queryCommandSupported">queryCommandSupported</span>(in DOMString commandId);
  DOMString <span title="dom-document-queryCommandValue">queryCommandValue</span>(in DOMString commandId);
  <span>Selection</span> <span title="dom-document-getSelection">getSelection</span>();

<!-- XXX we're not done here.
     XXX see e.g. http://lxr.mozilla.org/seamonkey/source/dom/public/idl/html/nsIDOMNSHTMLDocument.idl 
     XXX see e.g. http://trac.webkit.org/projects/webkit/browser/trunk/WebCore/dom/Document.cpp 
     XXX see e.g. http://trac.webkit.org/projects/webkit/browser/trunk/WebCore/html/HTMLDocument.cpp
  -->
};</pre>

  <p>Since the <code>HTMLDocument</code> interface holds methods and
  attributes related to a number of disparate features, the members of
  this interface are described in various different sections.</p>


  <h4>Security</h4>

  <p>User agents must raise a <span>security exception</span> whenever
  any of the members of an <code>HTMLDocument</code> object are
  accessed by scripts whose <span>origin</span> is not the same as the
  <code>Document</code>'s origin.</p>



  <h4><dfn>Resource metadata management</dfn></h4>

  <p>The <dfn title="dom-document-URL"><code>URL</code></dfn>
  attribute must return <span>the document's address</span><!-- XXX
  xref -->.</p>

  <p>The <dfn title="dom-document-domain"><code>domain</code></dfn>
  attribute must be initialised to <span>the document's domain</span>,
  if it has one, and null otherwise. On getting, the attribute must
  return its current value. On setting, if the new value is an allowed
  value (as defined below), the attribute's value must be changed to
  the new value. If the new value is not an allowed value, then a
  <span>security exception</span> must be raised instead.</p>

  <p>A new value is an allowed value for the <code
  title="dom-document-domain">document.domain</code> attribute if it
  is equal to the attribute's current value, or if the new value,
  prefixed by a U+002E FULL STOP ("."), exactly matches the end of the
  current value. If the current value is null, new values other than
  null will never be allowed.</p>

  <p>If the <code>Document</code> object's <span title="the document's
  address">address</span><!-- XXX xref --> is hierarchical and uses a
  server-based naming authority, then its <dfn title="the document's
  domain">domain</dfn> is the &lt;host&gt;/&lt;ihost&gt; part of that
  address. Otherwise, it has no domain.</p>

  <p class="note">The <code title="dom-document-domain">domain</code>
  attribute is used to enable pages on different hosts of a domain to
  access each others' DOMs<span class="big-issue">, though this is not
  yet defined by this specification</span>.</p><!-- XXX xref -->

  <p class="big-issue">we should handle IP addresses here</p>

  <!--XXX
    http://lxr.mozilla.org/seamonkey/source/content/html/document/src/nsHTMLDocument.cpp
    search for ::GetDomain ::SetDomain
    http://trac.webkit.org/projects/webkit/browser/trunk/WebCore/dom/Document.cpp
    search for ::domain ::setDomain
  -->


  <p>The <dfn
  title="dom-document-referrer"><code>referrer</code></dfn> attribute
  must return either the URI of the page which <span
  title="navigate">navigated</span> the <span>browsing context</span>
  to the current document (if any), or the empty string if there is no
  such originating page, or if the UA has been configured not to
  report referrers, or if the navigation was initiated for a
  <span>hyperlink</span> with a <code
  title="rel-noreferrer">noreferrer</code> keyword.</p>

  <p class="note">In the case of HTTP, the <code
  title="dom-document-referrer">referrer</code> DOM attribute will
  match the <code title="">Referer</code> (sic) header that was sent
  when fetching the current page.</p>


  <p>The <dfn title="dom-document-cookie"><code>cookie</code></dfn>
  attribute must, on getting, return the same string as the value of
  the <code title="">Cookie</code> HTTP header it would include if
  fetching the resource indicated by <span>the document's
  address</span> over HTTP, as per RFC 2109 section 4.3.4. <a
  href="#refsRFC2109">[RFC2109]</a></p>

  <p>On setting, the <code title="dom-document-cookie">cookie</code>
  attribute must cause the user agent to act as it would when
  processing cookies if it had just attempted to fetch <span>the
  document's address</span> over HTTP, and had received a response
  with a <code>Set-Cookie</code> header whose value was the specified
  value, as per RFC 2109 sections 4.3.1, 4.3.2, and 4.3.3. <a
  href="#refsRFC2109">[RFC2109]</a></p>

  <p class="note">Since the <code
  title="dom-document-cookie">cookie</code> attribute is accessible
  across frames, the path restrictions on cookies are only a tool to
  help manage which cookies are sent to which parts of the site, and
  are not in any way a security feature.</p>


  <p>The <dfn
  title="dom-document-lastModified"><code>lastModified</code></dfn>
  attribute, on getting, must return the date and time of the
  <code>Document</code>'s source file's last modification, in the
  user's local timezone, in the following format:</p>

  <ol>

   <li> The month component of the date. </li>

   <li> A U+002F SOLIDUS character ('/'). </li>

   <li> The day component of the date. </li>

   <li> A U+002F SOLIDUS character ('/'). </li>

   <li> The year component of the date. </li>

   <li> A U+0020 SPACE character. </li>

   <li> The hours component of the time. </li>

   <li> A U+003A COLON character (':'). </li>

   <li> The minutes component of the time. </li>

   <li> A U+003A COLON character (':'). </li>

   <li> The seconds component of the time. </li>

  </ol>

  <p>All the numeric components above, other than the year, must be
  given as two digits in the range U+0030 DIGIT ZERO to U+0039 DIGIT
  NINE representing the number in base ten, zero-padded if
  necessary.</p>

  <p>The <code>Document</code>'s source file's last modification date
  and time must be derived from relevant features of the networking
  protocols used, e.g. from the value of the HTTP <code
  title="">Last-Modified</code> header of the document, or from
  metadata in the filesystem for local files. If the last modification
  date and time are not known, the attribute must return the string
  <code title="">01/01/1970 00:00:00</code>.</p>


  <p>The <dfn
  title="dom-document-compatMode"><code>compatMode</code></dfn> DOM
  attribute must return the literal string "<code
  title="">CSS1Compat</code>" unless the document has been set to
  <dfn>quirks mode</dfn> by the <span>HTML parser</span>, in which
  case it must instead return the literal string "<code
  title="">BackCompat</code>". The document can also be set to
  <dfn>limited quirks mode</dfn> (also known as "almost standards"
  mode). By default, the document is set to <dfn>no quirks mode</dfn>
  (also known as "standards mode").</p>

  <div class="big-issue">

   <p>As far as parsing goes, the quirks I know of are:</p>

   <ul>

    <li>Comment parsing is different.</li>

    <li><code>p</code> can contain <code>table</code></li>

    <li>Safari and IE have special parsing rules for &lt;% ... %&gt;
    (even in standards mode, though clearly this should be
    quirks-only).</li>

   </ul>

  </div>



  <h3>Elements</h3>

  <p>The nodes representing <span>HTML elements</span> in the DOM must
  implement, and expose to scripts, the interfaces listed for them in
  the relevant sections of this specification. This includes
  <span>XHTML</span> elements in <span>XML documents</span>, even when
  those documents are in another context (e.g. inside an XSLT
  transform).</p>

  <p>The basic interface, from which all the <span>HTML
  elements</span>' interfaces inherit, and which must be used by
  elements that have no additional requirements, is the
  <code>HTMLElement</code> interface.</p>

  <pre class="idl">interface <dfn>HTMLElement</dfn> : <span>Element</span> {
  // <span>DOM tree accessors</span>
  NodeList <span title="dom-getElementsByClassName">getElementsByClassName</span>(in DOMString classNames);

  // <span>dynamic markup insertion</span>
           attribute DOMString <span title="dom-innerHTML">innerHTML</span>;

  // <span>metadata attributes</span>
           attribute DOMString <span title="dom-id">id</span>;
           attribute DOMString <span title="dom-title">title</span>;
           attribute DOMString <span title="dom-lang">lang</span>;
           attribute DOMString <span title="dom-dir">dir</span>;
           attribute <span>DOMString</span> <span title="dom-className">className</span>;
  readonly attribute <span>DOMTokenList</span> <span title="dom-classList">classList</span>;

  // <span>interaction</span>
           attribute boolean <span title="dom-irrelevant">irrelevant</span>;
           attribute long <span title="dom-tabindex">tabIndex</span>;
  void <span title="dom-click">click</span>();
  void <span title="dom-focus">focus</span>();
  void <span title="dom-blur">blur</span>();
  void <span title="dom-scrollIntoView">scrollIntoView</span>();
  void <span title="dom-scrollIntoView">scrollIntoView</span>(in boolean top);

  // <span title="concept-command">commands</span>
           attribute <span>HTMLMenuElement</span> <span title="dom-contextMenu">contextMenu</span>;

  // <span>editing</span>
           attribute boolean <span title="dom-draggable">draggable</span>;
           attribute DOMString <span title="dom-contentEditable">contentEditable</span>;
  readonly attribute DOMString <span title="dom-isContentEditable">isContentEditable</span>;

  // <span>data templates</span>
           attribute DOMString <span title="dom-template">template</span>;
  readonly attribute HTMLDataTemplateElement <span title="dom-templateElement">templateElement</span>;
           attribute DOMString <span title="dom-ref">ref</span>;
  readonly attribute Node <span title="dom-refNode">refNode</span>;
           attribute DOMString <span title="dom-registrationMark">registrationMark</span>;
  readonly attribute DocumentFragment <span title="dom-originalContent">originalContent</span>;

  // <span>event handler DOM attributes</span>
           attribute <span>EventListener</span> <span title="handler-onabort">onabort</span>;
           attribute <span>EventListener</span> <span title="handler-onbeforeunload">onbeforeunload</span>;
           attribute <span>EventListener</span> <span title="handler-onblur">onblur</span>;
           attribute <span>EventListener</span> <span title="handler-onchange">onchange</span>;
           attribute <span>EventListener</span> <span title="handler-onclick">onclick</span>;
           attribute <span>EventListener</span> <span title="handler-oncontextmenu">oncontextmenu</span>;
           attribute <span>EventListener</span> <span title="handler-ondblclick">ondblclick</span>;
           attribute <span>EventListener</span> <span title="handler-ondrag">ondrag</span>;
           attribute <span>EventListener</span> <span title="handler-ondragend">ondragend</span>;
           attribute <span>EventListener</span> <span title="handler-ondragenter">ondragenter</span>;
           attribute <span>EventListener</span> <span title="handler-ondragleave">ondragleave</span>;
           attribute <span>EventListener</span> <span title="handler-ondragover">ondragover</span>;
           attribute <span>EventListener</span> <span title="handler-ondragstart">ondragstart</span>;
           attribute <span>EventListener</span> <span title="handler-ondrop">ondrop</span>;
           attribute <span>EventListener</span> <span title="handler-onerror">onerror</span>;
           attribute <span>EventListener</span> <span title="handler-onfocus">onfocus</span>;
           attribute <span>EventListener</span> <span title="handler-onkeydown">onkeydown</span>;
           attribute <span>EventListener</span> <span title="handler-onkeypress">onkeypress</span>;
           attribute <span>EventListener</span> <span title="handler-onkeyup">onkeyup</span>;
           attribute <span>EventListener</span> <span title="handler-onload">onload</span>;
           attribute <span>EventListener</span> <span title="handler-onmessage">onmessage</span>;
           attribute <span>EventListener</span> <span title="handler-onmousedown">onmousedown</span>;
           attribute <span>EventListener</span> <span title="handler-onmousemove">onmousemove</span>;
           attribute <span>EventListener</span> <span title="handler-onmouseout">onmouseout</span>;
           attribute <span>EventListener</span> <span title="handler-onmouseover">onmouseover</span>;
           attribute <span>EventListener</span> <span title="handler-onmouseup">onmouseup</span>;
           attribute <span>EventListener</span> <span title="handler-onmousewheel">onmousewheel</span>;
           attribute <span>EventListener</span> <span title="handler-onresize">onresize</span>;
           attribute <span>EventListener</span> <span title="handler-onscroll">onscroll</span>;
           attribute <span>EventListener</span> <span title="handler-onselect">onselect</span>;
           attribute <span>EventListener</span> <span title="handler-onsubmit">onsubmit</span>;
           attribute <span>EventListener</span> <span title="handler-onunload">onunload</span>;

};</pre>

  <p>As with the <code>HTMLDocument</code> interface, the
  <code>HTMLElement</code> interface holds methods and attributes
  related to a number of disparate features, and the members of this
  interface are therefore described in various different sections of
  this specification.</p>


  <h4>Reflecting content attributes in DOM attributes</h4>

  <p>Some <span title="DOM attribute">DOM attributes</span> are
  defined to <dfn>reflect</dfn> a particular <span>content
  attribute</span>. This means that on getting, the DOM attribute
  returns the current value of the content attribute, and on setting,
  the DOM attribute changes the value of the content attribute to the
  given value.</p>

  <p>If a reflecting DOM attribute is a <code>DOMString</code>
  attribute whose content attribute is defined to contain a URI, then
  on getting, the DOM attribute must return the value of the content
  attribute, resolved to an absolute URI, and on setting, must set the
  content attribute to the specified literal value. If the content
  attribute is absent, the DOM attribute must return the default
  value, if the content attribute has one, or else the empty
  string.</p>

  <p>If a reflecting DOM attribute is a <code>DOMString</code>
  attribute whose content attribute is defined to contain one or more
  URIs, then on getting, the DOM attribute must <span title="split the
  string on spaces">split the content attribute on spaces</span> and
  return the concatenation of each token URI, resolved to an absolute
  URI, with a single U+0020 SPACE character between each URI; and on
  setting, must set the content attribute to the specified literal
  value. If the content attribute is absent, the DOM attribute must
  return the default value, if the content attribute has one, or else
  the empty string.</p>

  <p>If a reflecting DOM attribute is a <code>DOMString</code> whose
  content attribute is an <span>enumerated attribute</span>, and the
  DOM attribute is <dfn>limited to only known values</dfn>, then, on
  getting, the DOM attribute must return the value associated with the
  state the attribute is in (in its canonical case), or the empty
  string if the attribute is in a state that has no associated keyword
  value; and on setting, if the new value case-insensitively matches
  one of the keywords given for that attribute, then the content
  attribute must be set to that value, otherwise, if the new value is
  the empty string, then the content attribute must be removed,
  otherwise, the setter must raise a <code>SYNTAX_ERR</code>
  exception.</p>

  <p>If a reflecting DOM attribute is a <code>DOMString</code> but
  doesn't fall into any of the above categories, then the getting and
  setting must be done in a transparent, case-preserving manner.</p>

  <p>If a reflecting DOM attribute is a boolean attribute, then the
  DOM attribute must return true if the attribute is set, and false if
  it is absent. On setting, the content attribute must be removed if
  the DOM attribute is set to false, and must be set to have the same
  value as its name if the DOM attribute is set to true. (This
  corresponds to the rules for <span title="boolean attribute">boolean
  content attributes</span>.)</p>

  <p>If a reflecting DOM attribute is a signed integer type
  (<code>long</code>) then the content attribute must be parsed
  according to <span title="rules for parsing integers">the rules for
  parsing signed integers</span> first. If that fails, or if the
  attribute is absent, the default value must be returned instead, or
  0 if there is no default value. On setting, the given value must be
  converted to a string representing the number as a <span>valid
  integer</span> in base ten and then that string must be used as the
  new content attribute value.</p>

  <p>If a reflecting DOM attribute is an <em>unsigned</em> integer
  type (<code>unsigned long</code>) then the content attribute must be
  parsed according to <span title="rules for parsing non-negative
  integers">the rules for parsing unsigned integers</span> first. If
  that fails, or if the attribute is absent, the default value must be
  returned instead, or 0 if there is no default value. On setting, the
  given value must be converted to a string representing the number as
  a <span>valid non-negative integer</span> in base ten and then that
  string must be used as the new content attribute value.</p>

  <p>If a reflecting DOM attribute is an unsigned integer type
  (<code>unsigned long</code>) that is <dfn>limited to only positive
  non-zero numbers</dfn>, then the behavior is similar to the previous
  case, but zero is not allowed. On getting, the content attribute
  must first be parsed according to <span title="rules for parsing
  non-negative integers">the rules for parsing unsigned
  integers</span>, and if that fails, or if the attribute is absent,
  the default value must be returned instead, or 1 if there is no
  default value. On setting, if the value is zero, the user agent must
  fire an <code>INDEX_SIZE_ERR</code> exception. Otherwise, the given
  value must be converted to a string representing the number as a
  <span>valid non-negative integer</span> in base ten and then that
  string must be used as the new content attribute value.</p>

  <p>If a reflecting DOM attribute is a floating point number type
  (<code>float</code>) and the content attribute is defined to contain
  a time offset, then the content attribute must be parsed according
  to <span title="rules for parsing time offsets">the rules for
  parsing time ofsets</span> first. If that fails, or if the attribute
  is absent, the default value must be returned instead, or the
  not-a-number value (NaN) if there is no default value. On setting,
  the given value must be converted to a string using the <span>time
  offset serialisation rules</span>, and that string must be used as
  the new content attribute value.</p>

  <p>If a reflecting DOM attribute is of the type
  <code>DOMTokenList</code>, then on getting it must return a
  <code>DOMTokenList</code> object whose underlying string is the
  element's corresponding content attribute. When the
  <code>DOMTokenList</code> object mutates its underlying string, the
  attribute must itself be immediately mutated. When the attribute is
  absent, then the string represented by the <code>DOMTokenList</code>
  object is the empty string; when the object mutates this empty
  string, the user agent must first add the corresponding content
  attribute, and then mutate that attribute
  instead. <code>DOMTokenList</code> attributes are always
  read-only. The same <code>DOMTokenList</code> object must be
  returned every time for each attribute.</p>

  <p>If a reflecting DOM attribute has the type
  <code>HTMLElement</code>, or an interface that descends from
  <code>HTMLElement</code>, then, on getting, it must run the
  following algorithm (stopping at the first point where a value is
  returned):

  <ol>

   <li>If the corresponding content attribute is absent, then the
   DOM attribute must return null.</li>

   <li>Let <var title="">candidate</var> be the element that the <code
   title="">document.getElementById()</code> method would find if it
   was passed as its argument the current value of the corresponding
   content attribute.</li>

   <li>If <var title="">candidate</var> is null, or if it is not
   type-compatible with the DOM attribute, then the DOM attribute must
   return null.</li>

   <li>Otherwise, it must return <var title="">candidate</var>.</li>

  </ol>

  <p>On setting, if the given element has an <code
  title="attr-id">id</code> attribute, then the content attribute must
  be set to the value of that <code title="attr-id">id</code>
  attribute. Otherwise, the DOM attribute must be set to the empty
  string.</p><!-- XXX or raise an exception? -->




  <h3>Common DOM interfaces</h3>

  <h4>Collections</h4>

  <p>The <code>HTMLCollection</code>,
  <code>HTMLFormControlsCollection</code>, and
  <code>HTMLOptionsCollection</code> interfaces represent various
  lists of DOM nodes. Collectively, objects implementing these
  interfaces are called <dfn>collections</dfn>.</p>

  <p>When a <span title="collections">collection</span> is created, a
  filter and a root are associated with the collection.</p>

  <p class="example">For example, when the <code>HTMLCollection</code>
  object for the <code
  title="dom-document-images">document.images</code> attribute is
  created, it is associated with a filter that selects only
  <code>img</code> elements, and rooted at the root of the
  document.</p>

  <p>The <span>collection</span> then <dfn title="representated by the
  collection">represents</dfn> a <span>live</span> view of the subtree
  rooted at the collection's root, containing only nodes that match
  the given filter. The view is linear. In the absence of specific
  requirements to the contrary, the nodes within the collection must
  be sorted in <span>tree order</span>.</p>

  <p class="note">The <code title="dom-table-rows">rows</code> list is
  not in tree order.</p>

  <p>An attribute that returns a collection must return the same
  object every time it is retrieved.</p>


  <h5>HTMLCollection</h5>

  <p>The <code>HTMLCollection</code> interface represents a generic
  <span>collection</span> of elements.</p>

  <pre class="idl">interface <dfn>HTMLCollection</dfn> {
  readonly attribute unsigned long <span title="dom-HTMLCollection-length">length</span>;
  Element <span title="dom-HTMLCollection-item">item</span>(in unsigned long index);
  Element <span title="dom-HTMLCollection-namedItem">namedItem</span>(in DOMString name);
};</pre>

  <p>The <dfn
  title="dom-HTMLCollection-length"><code>length</code></dfn>
  attribute must return the number of nodes <span>represented by the
  collection</span>.</p>

  <p>The <dfn title="dom-HTMLCollection-item"><code>item(<var
  title="">index</var>)</code></dfn> method must return the <var
  title="">index</var>th node in the collection. If there is no <var
  title="">index</var>th node in the collection, then the method must
  return null.</p>

  <p>The <dfn
  title="dom-HTMLCollection-namedItem"><code>namedItem(<var
  title="">key</var>)</code></dfn> method must return the first node
  in the collection that matches the following requirements:</p>

  <ul>

   <li>It is an <code>a</code>, <code>applet</code>,
   <code>area</code>, <code>form</code>, <code>img</code>, or
   <code>object</code> element with a <code
   title="attr-name">name</code> attribute equal to <var
   title="">key</var>, or,</li>

   <li>It is an <span title="HTML elements">HTML element</span> of any
   kind with an <code title="attr-id">id</code> attribute equal to
   <var title="">key</var>. (Non-HTML elements, even if they have IDs,
   are not searched for the purposes of <code
   title="dom-HTMLCollection-namedItem">namedItem()</code>.)</li>

  </ul>

  <p>If no such elements are found, then the method must return
  null.</p>

  <p>In ECMAScript implementations, objects that implement the
  <code>HTMLCollection</code> interface must also have a [[Get]]
  method that, when invoked with a property name that is a number,
  acts like the <code title="dom-HTMLCollection-item">item()</code>
  method would when invoked with that argument, and when invoked with
  a property name that is a string, acts like the <code
  title="dom-HTMLCollection-namedItem">namedItem()</code> method would
  when invoked with that argument.</p>



  <h5>HTMLFormControlsCollection</h5>

  <p>The <code>HTMLFormControlsCollection</code> interface represents
  a <span>collection</span> of form controls.</p>

  <pre class="idl">interface <dfn>HTMLFormControlsCollection</dfn> {
  readonly attribute unsigned long <span title="dom-HTMLFormControlsCollection-length">length</span>;
  <span>HTMLElement</span> <span title="dom-HTMLFormControlsCollection-item">item</span>(in unsigned long index);
  Object <span title="dom-HTMLFormControlsCollection-namedItem">namedItem</span>(in DOMString name);
};</pre>

  <p>The <dfn
  title="dom-HTMLFormControlsCollection-length"><code>length</code></dfn>
  attribute must return the number of nodes <span>represented by the
  collection</span>.</p>

  <p>The <dfn
  title="dom-HTMLFormControlsCollection-item"><code>item(<var
  title="">index</var>)</code></dfn> method must return the <var
  title="">index</var>th node in the collection. If there is no <var
  title="">index</var>th node in the collection, then the method must
  return null.</p>

  <p>The <dfn
  title="dom-HTMLFormControlsCollection-namedItem"><code>namedItem(<var title="">key</var>)</code></dfn>
  method must act according to the following algorithm:

  <ol>

   <li>If, at the time the method is called, there is exactly one node
   in the collection that has either an <code
   title="attr-id">id</code> attribute or a <code
   title="attr-name">name</code> attribute equal to <var title="">key</var>,
   then return that node and stop the algorithm.</li>

   <li>Otherwise, if there are no nodes in the collection that have
   either an <code title="attr-id">id</code> attribute or a <code
   title="attr-name">name</code> attribute equal to <var
   title="">key</var>, then return null and stop the algorithm.</li>

   <li>Otherwise, create a <code>NodeList</code> object representing a
   live view of the <code>HTMLFormControlsCollection</code> object,
   further filtered so that the only nodes in the
   <code>NodeList</code> object are those that have either an <code
   title="attr-id">id</code> attribute or a <code
   title="attr-name">name</code> attribute equal to <var
   title="">key</var>. The nodes in the <code>NodeList</code> object
   must be sorted in <span>tree order</span>.</li>

   <li>Return that <code>NodeList</code> object.</li>

  </ol>

  <p>In the ECMAScript DOM binding, objects implementing the
  <code>HTMLFormControlsCollection</code> interface must support being
  dereferenced using the square bracket notation, such that
  dereferencing with an integer index is equivalent to invoking the
  <code title="dom-HTMLFormControlsCollection-item">item()</code>
  method with that index, and such that dereferencing with a string
  index is equivalent to invoking the <code
  title="dom-HTMLFormControlsCollection-namedItem">namedItem()</code>
  method with that index.</p>


<!--
http://software.hixie.ch/utilities/js/live-dom-viewer/?%3C%21DOCTYPE%20html%3E...%0A%3Cform%20name%3D%22a%22%3E%3Cinput%20id%3D%22x%22%20name%3D%22y%22%3E%3Cinput%20name%3D%22x%22%20id%3D%22y%22%3E%3C/form%3E%0A%3Cscript%3E%0A%20%20var%20x%3B%0A%20%20w%28x%20%3D%20document.forms%5B%27a%27%5D%5B%27x%27%5D%29%3B%0A%20%20w%28x.length%29%3B%0A%20%20x%5B0%5D.parentNode.removeChild%28x%5B0%5D%29%3B%0A%20%20w%28x.length%29%3B%0A%20%20w%28x%20%3D%3D%20document.forms%5B%27a%27%5D%5B%27x%27%5D%29%3B%0A%3C/script%3E%0A
-->


  <h5>HTMLOptionsCollection</h5>

  <p>The <code>HTMLOptionsCollection</code> interface represents
  a list of <code>option</code> elements.</p>

  <pre class="idl">interface <dfn>HTMLOptionsCollection</dfn> {
           attribute unsigned long <span title="dom-HTMLOptionsCollection-length">length</span>;
  HTMLOptionElement <span title="dom-HTMLOptionsCollection-item">item</span>(in unsigned long index);
  Object <span title="dom-HTMLOptionsCollection-namedItem">namedItem</span>(in DOMString name);
};</pre>

  <p>On getting, the <dfn
  title="dom-HTMLOptionsCollection-length"><code>length</code></dfn>
  attribute must return the number of nodes <span>represented by the
  collection</span>.</p>

  <p>On setting, the behaviour depends on whether the new value is
  equal to, greater than, or less than the number of nodes
  <span>represented by the collection</span> at that time. If the
  number is the same, then setting the attribute must do nothing. If
  the new value is greater, then <var title="">n</var> new
  <code>option</code> elements with no attributes and no child nodes
  must be appended to the <code>select</code> element on which the
  <code>HTMLOptionsCollection</code> is rooted, where <var
  title="">n</var> is the difference between the two numbers (new
  value minus old value). If the new value is lower, then the last
  <var title="">n</var> nodes in the collection must be removed from
  their parent nodes, where <var title="">n</var> is the difference
  between the two numbers (old value minus new value).</p>

  <p class="note">Setting <code
  title="dom-HTMLOptionsCollection-length">length</code> never removes
  or adds any <code>optgroup</code> elements, and never adds new
  children to existing <code>optgroup</code> elements (though it can
  remove children from them).</p>

  <p>The <dfn title="dom-HTMLOptionsCollection-item"><code>item(<var
  title="">index</var>)</code></dfn> method must return the <var
  title="">index</var>th node in the collection. If there is no <var
  title="">index</var>th node in the collection, then the method must
  return null.</p>

  <p>The <dfn
  title="dom-HTMLOptionsCollection-namedItem"><code>namedItem(<var title="">key</var>)</code></dfn>
  method must act according to the following algorithm:

  <ol>

   <li>If, at the time the method is called, there is exactly one node
   in the collection that has either an <code
   title="attr-id">id</code> attribute or a <code
   title="attr-name">name</code> attribute equal to <var
   title="">key</var>, then return that node and stop the
   algorithm.</li>

   <li>Otherwise, if there are no nodes in the collection that have
   either an <code title="attr-id">id</code> attribute or a <code
   title="attr-name">name</code> attribute equal to <var
   title="">key</var>, then return null and stop the algorithm.</li>

   <li>Otherwise, create a <code>NodeList</code> object representing a
   live view of the <code>HTMLOptionsCollection</code> object, further
   filtered so that the only nodes in the <code>NodeList</code> object
   are those that have either an <code title="attr-id">id</code>
   attribute or a <code title="attr-option-name">name</code> attribute
   equal to <var title="">key</var>. The nodes in the
   <code>NodeList</code> object must be sorted in <span>tree
   order</span>.</li>

   <li>Return that <code>NodeList</code> object.</li>

  </ol>

  <p>In the ECMAScript DOM binding, objects implementing the
  <code>HTMLOptionsCollection</code> interface must support being
  dereferenced using the square bracket notation, such that
  dereferencing with an integer index is equivalent to invoking the
  <code title="dom-HTMLOptionsCollection-item">item()</code>
  method with that index, and such that dereferencing with a string
  index is equivalent to invoking the <code
  title="dom-HTMLOptionsCollection-namedItem">namedItem()</code>
  method with that index.</p>

  <!-- see also http://ln.hixie.ch/?start=1161042744&count=1 -->

  <p class="big-issue">We may want to add <code>add()</code> and
  <code>remove()</code> methods here too because IE implements
  HTMLSelectElement and HTMLOptionsCollection on the same object, and
  so people use them almost interchangeably in the wild.</p>


  <h4>DOMTokenList</h4>

  <p>The <code>DOMTokenList</code> interface represents an interface
  to an underlying string that consists of an <span>unordered set of
  unique space-separated tokens</span>.</p>

  <p>Which string underlies a particular <code>DOMTokenList</code>
  object is defined when the object is created. It might be a content
  attribute (e.g. the string that underlies the <code
  title="dom-classList">classList</code> object is the <code
  title="attr-class">class</code> attribute), or it might be an
  anonymous string (e.g. when a <code>DOMTokenList</code> object is
  passed to an author-implemented callback in the
  <code>datagrid</code> APIs).</p>

  <pre class="idl">interface <dfn>DOMTokenList</dfn> {
  readonly attribute unsigned long <span title="dom-tokenlist-length">length</span>;
  DOMString <span title="dom-tokenlist-item">item</span>(in unsigned long index);
  boolean <span title="dom-tokenlist-has">has</span>(in DOMString token);
  void <span title="dom-tokenlist-add">add</span>(in DOMString token);
  void <span title="dom-tokenlist-remove">remove</span>(in DOMString token);
  boolean <span title="dom-tokenlist-toggle">toggle</span>(in DOMString token);
};</pre>

  <p>The <dfn title="dom-tokenlist-length"><code>length</code></dfn>
  attribute must return the number of <em>unique</em> tokens that
  result from <span title="split a string on spaces">splitting the
  underlying string on spaces</span>.</p>

  <p>The <dfn title="dom-tokenlist-item"><code>item(<var
  title="">index</var>)</code></dfn> method must <span title="split a
  string on spaces">split the underlying string on spaces</span>, sort
  the resulting list of tokens by Unicode codepoint<!-- XXX that's
  basically nonsense. What sort order do we want here? It should be
  the cheapest one possible that is well-defined for all Unicode. -->,
  remove exact duplicates, and then return the <var
  title="">index</var>th item in this list. If <var
  title="">index</var> is equal to or greater than the number of
  tokens, then the method must return null.</p>

  <p>In ECMAScript implementations, objects that implement the
  <code>DOMTokenList</code> interface must also have a [[Get]] method
  that, when invoked with a property name that is a number, acts like
  the <code title="dom-tokenlist-item">item()</code> method would when
  invoked with that argument.</p>


  <p>The <dfn title="dom-tokenlist-has"><code>has(<var
  title="">token</var>)</code></dfn> method must run the following
  algorithm:</p>

  <ol>

   <li>If the <var title="">token</var> argument contains any
   spaces<!-- XXX elaborate -->, then raise an
   <code>INVALID_CHARACTER_ERR</code> exception and stop the
   algorithm.</li>

   <li>Otherwise, <span title="split a string on spaces">split the
   underlying string on spaces</span> to get the list of tokens in the
   object's underlying string.</li>

   <li>If the token indicated by <var title="">token</var> is one of
   the tokens in the object's underlying string then return true and
   stop this algorithm.</li>

   <li>Otherwise, return false.</li>

  </ol>

  <p>The <dfn title="dom-tokenlist-add"><code>add(<var
  title="">token</var>)</code></dfn> method must run the following
  algorithm:</p>

  <ol>

   <li>If the <var title="">token</var> argument contains any
   spaces<!-- XXX elaborate -->, then raise an
   <code>INVALID_CHARACTER_ERR</code> exception and stop the
   algorithm.</li>

   <li>Otherwise, <span title="split a string on spaces">split the
   underlying string on spaces</span> to get the list of tokens in the
   object's underlying string.</li>

   <li>If the given <var title="">token</var> is already one of the
   tokens in the <code>DOMTokenList</code> object's underlying string
   then stop the algorithm.</li>

   <li>Otherwise, if the last character of the
   <code>DOMTokenList</code> object's underlying string is not a
   <span>space character</span>, then append a U+0020 SPACE character
   to the end of that string.</li>

   <li>Append the value of <var title="">token</var> to the end of the
   <code>DOMTokenList</code> object's underlying string.</li>

  </ol>

  <p>The <dfn title="dom-tokenlist-remove"><code>remove(<var
  title="">token</var>)</code></dfn> method must run the following
  algorithm:</p>

  <ol>

   <li>If the <var title="">token</var> argument contains any <span
   title="space character">spaces</span>, then raise an
   <code>INVALID_CHARACTER_ERR</code> exception and stop the
   algorithm.</li>

   <li>Otherwise, <span title="remove a token from a string">remove
   the given <var title="">token</var> from the underlying
   string</span>.</li>

  </ol>

  <p>The <dfn title="dom-tokenlist-toggle"><code>toggle(<var
  title="">token</var>)</code></dfn> method must run the following
  algorithm:</p>

  <ol>

   <li>If the <var title="">token</var> argument contains any
   spaces<!-- XXX elaborate -->, then raise an
   <code>INVALID_CHARACTER_ERR</code> exception and stop the
   algorithm.</li>

   <li>Otherwise, <span title="split a string on spaces">split the
   underlying string on spaces</span> to get the list of tokens in the
   object's underlying string.</li>

   <li>If the given <var title="">token</var> is already one of the
   tokens in the <code>DOMTokenList</code> object's underlying string
   then <span title="remove a token from a string">remove the given
   <var title="">token</var> from the underlying string</span>, and
   stop the algorithm, returning false.</li>

   <li>Otherwise, if the last character of the
   <code>DOMTokenList</code> object's underlying string is not a
   <span>space character</span>, then append a U+0020 SPACE character
   to the end of that string.</li>

   <li>Append the value of <var title="">token</var> to the end of the
   <code>DOMTokenList</code> object's underlying string.</li>

   <li>Return true.</li>

  </ol>

  <p>In the ECMAScript DOM binding, objects implementing the
  <code>DOMTokenList</code> interface must stringify to the object's
  underlying string representation.</p>


  <h4>DOM feature strings</h4>

  <p>DOM3 Core defines mechanisms for checking for interface support,
  and for obtaining implementations of interfaces, using <a
  href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#DOMFeatures">feature
  strings</a>. <a href="#refsDOM3CORE">[DOM3CORE]</a></p>

  <p>A DOM application can use the <dfn
  title="hasFeature"><code>hasFeature(<var title="">feature</var>,
  <var title="">version</var>)</code></dfn> method of the
  <code>DOMImplementation</code> interface with parameter values
  "<code title="">HTML</code>" and "<code>5.0</code>" (respectively)
  to determine whether or not this module is supported by the
  implementation. In addition to the feature string "<code
  title="">HTML</code>", the feature string "<code
  title="">XHTML</code>" (with version string "<code>5.0</code>") can
  be used to check if the implementation supports XHTML. User agents
  should respond with a true value when the <code>hasFeature</code>
  method is queried with these values. Authors are cautioned, however,
  that UAs returning true might not be perfectly compliant, and that
  UAs returning false might well have support for features in this
  specification; in general, therefore, use of this method is
  discouraged.</p>

  <p>The values "<code title="">HTML</code>" and "<code
  title="">XHTML</code>" (both with version "<code>5.0</code>") should
  also be supported in the context of the <code>getFeature()</code>
  and <code>isSupported()</code> methods, as defined by DOM3 Core.</p>

  <p class="note">The interfaces defined in this specification are not
  always supersets of the interfaces defined in DOM2 HTML; some
  features that were formerly deprecated, poorly supported, rarely
  used or considered unnecessary have been removed. Therefore it is
  not guarenteed that an implementation that supports "<code
  title="">HTML</code>" "<code>5.0</code>" also supports "<code
  title="">HTML</code>" "<code>2.0</code>".</p>




  <h3><dfn>DOM tree accessors</dfn></h3>

  <p><dfn>The <code>html</code> element</dfn> of a document is the
  document's root element, if there is one and it's an
  <code>html</code> element, or null otherwise.</p>

  <p><dfn>The <code>head</code> element</dfn> of a document is the
  first <code>head</code> element that is a child of <span>the
  <code>html</code> element</span>, if there is one, or null
  otherwise.</p>


  <p><dfn>The <code>title</code> element</dfn> of a document is the
  first <code>title</code> element in the document (in tree order), if
  there is one, or null otherwise.</p>

  <p>The <dfn id="document.title"
  title="dom-document-title"><code>title</code></dfn> attribute must,
  on getting, run the following algorithm:</p>

  <ol>

   <li><p>If the <span>root element</span> is an <code>svg</code>
   element in the "<code title="">http://www.w3.org/2000/svg</code>"
   namespace, and the user agent supports SVG, then the getter must
   return the value that would have been returned by the DOM attribute
   of the same name on the <code>SVGDocument</code>
   interface.</p></li>

   <li><p>Otherwise, it must return a concatenation of the data of all
   the child <span title="text node">text nodes</span> of <span>the
   <code>title</code> element</span>, in tree order, or the empty
   string if <span>the <code>title</code> element</span> is
   null.</p></li>

  </ol>

  <p>On setting, the following algorithm must be run:</p>

  <ol>

   <li><p>If the <span>root element</span> is an <code>svg</code>
   element in the "<code title="">http://www.w3.org/2000/svg</code>"
   namespace, and the user agent supports SVG, then the setter must
   defer to the setter for the DOM attribute of the same name on the
   <code>SVGDocument</code> interface. Stop the algorithm
   here.</p></li>

   <li>If <span>the <code>title</code> element</span> is null and
   <span>the <code>head</code> element</span> is null, then the
   attribute must do nothing. Stop the algorithm here.</li>

   <li>If <span>the <code>title</code> element</span> is null, then a
   new <code>title</code> element must be created and appended to
   <span>the <code>head</code> element</span>.</li>

   <li>The children of <span>the <code>title</code> element</span> (if
   any) must all be removed.</li>

   <li>A single <code>Text</code> node whose data is the new value
   being assigned must be appended to <span>the <code>title</code>
   element</span>.</li>

  </ol>

  <p>The <code title="dom-document-title">title</code> attribute on
  the <code>HTMLDocument</code> interface should shadow the attribute
  of the same name on the <code>SVGDocument</code> interface when the
  user agent supports both HTML and SVG.</p>


  <p><dfn>The body element</dfn> of a document is the first child of
  <span>the <code>html</code> element</span> that is either a
  <code>body</code> element or a <code>frameset</code> element. If
  there is no such element, it is null. If the body element is null,
  then when the specification requires that events be fired at "the
  body element", they must instead be fired at the
  <code>Document</code> object.</p>

  <p>The <dfn title="dom-document-body"><code>body</code></dfn>
  attribute, on getting, must return <span>the body element</span> of
  the document (either a <code>body</code> element, a
  <code>frameset</code> element, or null). On setting, the following
  algorithm must be run:</p>

  <ol>

   <li>If the new value is not a <code>body</code> or
   <code>frameset</code> element, then raise a
   <code>HIERARCHY_REQUEST_ERR</code> exception and abort these
   steps.</li>

   <li>Otherwise, if the new value is the same as <span>the body
   element</span>, do nothing. Abort these steps.</li>

   <li>Otherwise, if <span>the body element</span> is not null, then
   replace that element with the new value in the DOM, as if the root
   element's <code title="">replaceChild()</code> method had been
   called with the new value and <span title="the body element">the
   incumbent body element</span> as its two arguments respectively,
   then abort these steps.</li>

   <li>Otherwise, the <span>the body element</span> is null. Append
   the new value to the root element.</li>

  </ol>

  <!--XXX
    http://lxr.mozilla.org/seamonkey/source/content/html/document/src/nsHTMLDocument.cpp
    search for ::GetBody ::SetBody
    http://trac.webkit.org/projects/webkit/browser/trunk/WebCore/html/HTMLDocument.cpp
    search for ::setBody
    http://trac.webkit.org/projects/webkit/browser/trunk/WebCore/dom/Document.cpp
    search for ::body
  -->

  <p>The <dfn title="dom-document-images"><code>images</code></dfn>
  attribute must return an <code>HTMLCollection</code> rooted at the
  <code>Document</code> node, whose filter matches only
  <code>img</code> elements.</p>

  <p>The <dfn title="dom-document-links"><code>links</code></dfn>
  attribute must return an <code>HTMLCollection</code> rooted at the
  <code>Document</code> node, whose filter matches only <code>a</code>
  elements with <code title="attr-hyperlink-href">href</code>
  attributes and <code>area</code> elements with <code
  title="attr-hyperlink-href">href</code> attributes.</p>

  <p>The <dfn title="dom-document-forms"><code>forms</code></dfn>
  attribute must return an <code>HTMLCollection</code> rooted at the
  <code>Document</code> node, whose filter matches only
  <code>form</code> elements.</p>

  <p>The <dfn title="dom-document-anchors"><code>anchors</code></dfn>
  attribute must return an <code>HTMLCollection</code> rooted at the
  <code>Document</code> node, whose filter matches only <code>a</code>
  elements with <code title="attr-a-name">name</code> attributes.</p><!-- XXX note that such elements are
  non-conforming -->

  <p>The <dfn
  title="dom-document-getElementsByName"><code>getElementsByName(<var
  title="">name</var>)</code></dfn> method a string <var
  title="">name</var>, and must return a live <code>NodeList</code>
  containing all the <code>a</code>, <code>applet</code>,
  <code>button</code>, <code>form</code>, <!-- frame? frameset?
  XXX--><code>iframe</code>, <code>img</code>, <code>input</code>,
  <code>map</code>, <code>meta</code>, <code>object</code>,<!-- param?
  XXX--> <code>select</code>, and <code>textarea</code> elements in
  that document that have a <code title="">name</code> attribute whose
  value is equal<!-- XXX case sensitivity --> to the <var
  title="">name</var> argument.</p> <!-- XXX what about XHTML? -->

  <p>The <dfn
  title="dom-document-getElementsByClassName"><code>getElementsByClassName(<var
  title="">classNames</var>)</code></dfn> method takes a string that
  contains an <span>unordered set of unique space-separated
  tokens</span> representing classes. When called, the method must
  return a live <code>NodeList</code> object containing all the
  elements in the document that have all the classes specified in that
  argument, having obtained the classes by <span title="split a string
  on spaces">splitting a string on spaces</span>. If there are no
  tokens specified in the argument, then the method must return an
  empty <code>NodeList</code>.</p>

  <p>The <dfn
  title="dom-getElementsByClassName"><code>getElementsByClassName()</code></dfn>
  method on the <code>HTMLElement</code> interface must return a live
  <code>NodeList</code> with the nodes that the
  <code>HTMLDocument</code> <code
  title="dom-document-getElementsByClassName">getElementsByClassName()</code>
  method would return when passed the same argument(s), excluding any
  elements that are not descendants of the <code>HTMLElement</code>
  object on which the method was invoked.</p>

  <p>HTML, SVG, and MathML elements define which classes they are in
  by having an attribute in the per-element partition with the name
  <code title="">class</code> containing a space-separated list of
  classes to which the element belongs. Other specifications may also
  allow elements in their namespaces to be labelled as being in
  specific classes. UAs must not assume that all attributes of the
  name <code title="">class</code> for elements in any namespace work
  in this way, however, and must not assume that such attributes, when
  used as global attributes, label other elements as being in specific
  classes.</p>

  <div class="example">

   <p>Given the following XHTML fragment:</p>

   <pre>&lt;div id="example"&gt;
 &lt;p id="p1" class="aaa bbb"/&gt;
 &lt;p id="p2" class="aaa ccc"/&gt;
 &lt;p id="p3" class="bbb ccc"/&gt;
&lt;/div&gt;</pre>

   <p>A call to
   <code>document.getElementById('example').getElementsByClassName('aaa')</code>
   would return a <code>NodeList</code> with the two paragraphs
   <code>p1</code> and <code>p2</code> in it.</p>

   <p>A call to <code>getElementsByClassName('ccc&nbsp;bbb')</code>
   would only return one node, however, namely <code>p3</code>. A call
   to
   <code>document.getElementById('example').getElementsByClassName('bbb&nbsp;&nbsp;ccc&nbsp;')</code>
   would return the same thing.</p>

   <p>A call to <code>getElementsByClassName('aaa,bbb')</code> would
   return no nodes; none of the elements above are in the "aaa,bbb"
   class.</p>

  </div>

<!-- XXX
>         * xGetParentElementByClassName(rootElement, className, tagName) -
> Navigates upwards until we hit a parent element with the given class name and
> optional tag name.
-->

  <p class="note">The <code title="dom-document-dir">dir</code>
  attribute on the <code>HTMLDocument</code> interface is defined
  along with the <code title="attr-dir">dir</code> content
  attribute.</p>



  <h3><dfn>Dynamic markup insertion</dfn></h3>

  <p>The <code title="dom-document-write">document.write()</code>
  family of methods and the <code
  title="dom-innerHTML">innerHTML</code> family of DOM attributes
  enable script authors to dynamically insert markup into the
  document.</p>

  <p class="issue">bz argues that innerHTML should be called something
  else on XML documents and XML elements. Is the sanity worth the
  migration pain?</p>

  <p>Because these APIs interact with the parser, their behaviour
  varies depending on whether they are used with <span>HTML
  documents</span> (and the <span>HTML parser</span>) or XHTML in
  <span>XML documents</span> (and the <span>XML parser</span>). The
  following table cross-references the various versions of these
  APIs.</p>

  <table>
   <thead>
    <tr>
     <td></td>
     <th><dfn title="dom-document-write"><code>document.write()</code></dfn></th>
     <th><dfn title="dom-innerHTML"><code>innerHTML</code></dfn></th>
    </tr>
   </thead>
   <tbody>
    <tr>
     <th>For documents that are <span>HTML documents</span></th>
     <td><span title="dom-document-write-HTML"><code>document.write()</code> in HTML</span></td>
     <td><span title="dom-innerHTML-HTML"><code>innerHTML</code> in HTML</span></td>
    </tr>
    <tr>
     <th>For documents that are <span>XML documents</span></th>
     <td><span title="dom-document-write-XML"><code>document.write()</code> in XML</span></td>
     <td><span title="dom-innerHTML-XML"><code>innerHTML</code> in XML</span></td>
    </tr>
   </tbody>
  </table>

  <p>Regardless of the parsing mode, the <dfn
  title="dom-document-writeln"><code>document.writeln(...)</code></dfn>
  method must call the <code
  title="dom-document-write">document.write()</code> method with the
  same argument(s), and then call the <code
  title="dom-document-write">document.write()</code> method with, as
  its argument, a string consisting of a single line feed character
  (U+000A).</p>


  <h4>Controlling the input stream</h4>

  <p>The <dfn title="dom-document-open"><code>open()</code></dfn>
  method comes in several variants with different numbers of
  arguments.</p>

  <p>When called with two or fewer arguments, the method must act as
  follows:</p>

  <ol>

   <li><p>Let <var title="">type</var> be the value of the first
   argument, if there is one, or "<code>text/html</code>"
   otherwise.</p></li>

   <li><p>Let <var title="">replace</var> be true if there is a second
   argument and it has the value "replace"<!-- case-insensitive. XXX
   -->, and false otherwise.</p></li>

   <li>

    <p>If the document has an <span>active parser</span><!-- XXX xref
    --> that isn't a <span>script-created parser</span>, and the
    <span>insertion point</span> associated with that parser's
    <span>input stream</span> is not undefined (that is, it
    <em>does</em> point to somewhere in the input stream), then the
    method does nothing. Abort these steps and return the
    <code>Document</code> object on which the method was invoked.</p>

    <p class="note">This basically causes <code
    title="dom-document-open">document.open()</code> to be ignored
    when it's called in an inline script found during the parsing of
    data sent over the network, while still letting it have an effect
    when called asynchronously or on a document that is itself being
    spoon-fed using these APIs.</p>

   </li>

   <li><p class="big-issue">onbeforeunload, onunload</p></li>

   <li><p>If the document has an <span>active parser</span><!--XXX
   xref-->, then stop that parser, and throw away any pending content
   in the input stream. <span class="big-issue">what about if it
   doesn't, because it's either like a text/plain, or Atom, or PDF, or
   XHTML, or image document, or something?</span></p></li><!-- XXX see
   also innerHTML in HTML -->

   <li><p>Remove all child nodes of the document.</p></li>

   <li><p>Create a new <span>HTML parser</span> and associate it with
   the document. This is a <dfn>script-created parser</dfn> (meaning
   that it can be closed by the <code
   title="dom-document-open">document.open()</code> and <code
   title="dom-document-close">document.close()</code> methods, and
   that the tokeniser will wait for an explicit call to <code
   title="dom-document-close">document.close()</code> before emitting
   an end-of-file token).</p></li>

   <li>Mark the document as being an <span title="HTML documents">HTML
   document</span> (it might already be so-marked).</li>

   <!-- text/plain handling --><li><p>If <var title="">type</var> does
   not have the value "<code>text/html</code>"<!-- XXX matched how?
   -->, then act as if the tokeniser had emitted a <code>pre</code>
   element start tag, then set the <span>HTML parser</span>'s
   <span>tokenisation</span> stage's <span>content model flag</span>
   to <em>PLAINTEXT</em>.</p></li>

   <li>

    <p>If <var title="">replace</var> is false, then:

    <ol>

     <li>Remove all the entries in the <span>browsing context</span>'s
     <span>session history</span> after the <span>current entry</span>
     in its <code>Document</code>'s <code>History</code> object</li>

     <li>Remove any earlier entries that share the same
     <code>Document</code></li>

     <li>Add a new entry just before the last entry that is associated
     with the text that was parsed by the previous parser associated
     with the <code>Document</code> object, as well as the state of
     the document at the start of these steps. (This allows the user
     to step backwards in the session history to see the page before
     it was blown away by the <code
     title="dom-document-open">document.open()</code> call.)</li>

    </ol>

   </li>

   <li><p>Finally, set the <span>insertion point</span> to point at
   just before the end of the <span>input stream</span> (which at this
   point will be empty).</p></li>

   <li><p>Return the <code>Document</code> on which the method was
   invoked.</p></li>

  </ol>

  <p class="big-issue">We shouldn't hard-code <code>text/plain</code>
  there. We should do it some other way, e.g. hand off to the section
  on content-sniffing and handling of incoming data streams, the part
  that defines how this all works when stuff comes over the
  network.</p>

  <!-- XXX Should we support XML/XHTML as a type to that method? -->

  <p>When called with three or more arguments, the <code
  title="dom-document-open">open()</code> method on the
  <code>HTMLDocument</code> object must call the <code
  title="dom-open">open()</code> method on the <code>Window</code>
  interface of the object returned by the <code
  title="dom-document-defaultView">defaultView</code> attribute of the
  <code>DocumentView</code> interface of the <code>HTMLDocument</code>
  object, with the same arguments as the original call to the <code
  title="dom-document-open">open()</code> method, and return whatever
  that method returned. If the <code
  title="dom-document-defaultView">defaultView</code> attribute of the
  <code>DocumentView</code> interface of the <code>HTMLDocument</code>
  object is null, then the method must raise an
  <code>INVALID_ACCESS_ERR</code> exception.</p>

  <p>The <dfn title="dom-document-close"><code>close()</code></dfn>
  method must do nothing if there is no <span>script-created
  parser</span> associated with the document. If there is such a
  parser, then, when the method is called, the user agent must insert
  an <span>explicit "EOF" character</span> at the <span>insertion
  point</span> of the parser's <span>input stream</span>.</p>


  <h4>Dynamic markup insertion in HTML</h4>

  <p>In HTML, the <dfn
  title="dom-document-write-HTML"><code>document.write(...)</code></dfn>
  method must act as follows:</p>

  <ol>

   <li>

    <p>If the <span>insertion point</span> is undefined, the <code
    title="dom-document-open">open()</code> method must be called
    (with no arguments) on the <code title="Document">document</code>
    object. The <span>insertion point</span> will point at just before
    the end of the (empty) <span>input stream</span>.</p>

   </li>

   <li>

    <p>The string consisting of the concatenation of all the arguments
    to the method must be inserted into the <span>input
    stream</span><!-- XXX xref --> just before the <span>insertion
    point</span>.</p>

   </li>

   <li>

    <p>If there is <span title="the script that will execute as soon
    as the parser resumes">a script that will execute as soon as the
    parser resumes</span>, then the method must now return without
    further processing of the <span>input stream</span>.</p>

   </li>

   <li>

    <p>Otherwise, the tokeniser must process the characters that were
    inserted, one at a time, processing resulting tokens as they are
    emitted, and stopping when the tokeniser reaches the insertion
    point or when the processing of the tokeniser is aborted by the
    tree construction stage (this can happen if a <code>script</code>
    start tag token is emitted by the tokeniser).

    <p class="note">If the <code
    title="dom-document-write-HTML">document.write()</code> method was
    called from script executing inline (i.e. executing because the
    parser parsed a set of <code>script</code> tags), then this is a
    <a href="#nestedParsing">reentrant invocation of the
    parser</a>.</p>

   </li>

   <li>

    <p>Finally, the method must return.</p>

   </li>

  </ol>

  <p>In HTML, the <dfn
  title="dom-innerHTML-HTML"><code>innerHTML</code></dfn> DOM
  attribute of all <code>HTMLElement</code> and
  <code>HTMLDocument</code> nodes returns a serialisation of the
  node's children using the <span>HTML syntax</span><!-- XXX xref
  -->. On setting, it replaces the node's children with new nodes that
  result from parsing the given value. The formal definitions
  follow.</p>

  <p>On getting, the <code title="dom-innerHTML-HTML">innerHTML</code>
  DOM attribute must return the result of running the <span>HTML
  fragment serialisation algorithm</span> on the node.</p>

  <p>On setting, if the node is a document, the <code
  title="dom-innerHTML-HTML">innerHTML</code> DOM attribute must run
  the following algorithm:</p>

  <ol>

   <li>

    <p>If the document has an <span>active parser</span><!--XXX
    xref-->, then stop that parser, and throw away any pending content
    in the input stream. <span class="big-issue">what about if it
    doesn't, because it's either like a text/plain, or Atom, or PDF,
    or XHTML, or image document, or something?</span></p><!-- XXX see
    also document.open() -->

   </li>

   <li>

    <p>Remove the children nodes of the <code>Document</code> whose
    <code title="dom-innerHTML-HTML">innerHTML</code> attribute is
    being set.</p>

   </li>

   <li>

    <p>Create a new <span>HTML parser</span>, in its initial state,
    and associate it with the <code>Document</code> node.</p>

   </li>

<!-- redundant, the document is forcably already so labelled if we get here
   <li>

    <p>Mark the <code>Document</code> object as being an <span
    title="HTML documents">HTML document</span>.</p>

   </li>
-->

   <li>

    <p>Place into the <span>input stream</span> for the <span>HTML
    parser</span> just created the string being assigned into the
    <code title="dom-innerHTML-HTML">innerHTML</code> attribute.</p>

   </li>

   <li>

    <p>Start the parser and let it run until it has consumed all the
    characters just inserted into the input stream. (The
    <code>Document</code> node will have been populated with elements
    and a <code title="event-load">load</code> event will have fired
    on <span title="the body element">its body element</span>.)</p>

   </li>

  </ol>

  <p>Otherwise, if the node is an element, then setting the <code
  title="dom-innerHTML-HTML">innerHTML</code> DOM attribute must cause
  the following algorithm to run instead:</p>

  <ol>

   <li>

    <p>Invoke the <span>HTML fragment parsing algorithm</span>, with
    the element whose <code
    title="dom-innerHTML-HTML">innerHTML</code> attribute is being set
    as the <var title="">context</var> element, and the string being
    assigned into the <code
    title="dom-innerHTML-HTML">innerHTML</code> attribute as the <var
    title="">input</var>. Let <var title="">new children</var> be the
    result of this algorithm.</p>

   </li>

   <li>

    <p>Remove the children of the element whose <code
    title="dom-innerHTML-HTML">innerHTML</code> attribute is being
    set.</p>

   </li>

   <li>

    <p>Let <var title="">target document</var> be the <code
    title="">ownerDocument</code> of the <code>Element</code> node
    whose <code title="dom-innerHTML-HTML">innerHTML</code> attribute
    is being set.</p>

   </li>

   <li>

    <p>Set the <code title="">ownerDocument</code> of all the nodes in
    <var title="">new children</var> to the <var title="">target
    document</var>.</p>

   </li>

   <li>

    <p>Append all the <var title="">new children</var> nodes to the
    node whose <code title="dom-innerHTML-HTML">innerHTML</code>
    attribute is being set, preserving their order.</p>

   </li>

  </ol>

  <p class="note"><code>script</code> elements inserted using <code
  title="dom-innerHTML-HTML">innerHTML</code> do not execute when they
  are inserted.</p>

  <!-- XXX must make sure we spec that innerHTML causes mutation
  events to fire, but document.write() doesn't. (the latter is already
  req-stated in the parser section, btw) -->

  <!-- http://msdn.microsoft.com/workshop/author/dhtml/reference/properties/innerhtml.asp -->
  <!-- http://lxr.mozilla.org/seamonkey/source/content/html/content/src/nsGenericHTMLElement.cpp#879
       note script execution disabled
       http://lxr.mozilla.org/seamonkey/source/content/base/src/nsContentUtils.cpp#3308
       http://trac.webkit.org/projects/webkit/browser/trunk/WebCore/html/HTMLElement.cpp#L295
       http://trac.webkit.org/projects/webkit/browser/trunk/WebCore/html/HTMLElement.cpp#L242
       http://trac.webkit.org/projects/webkit/browser/trunk/WebCore/html/HTMLTokenizer.cpp#L1742
   -->

  <h4>Dynamic markup insertion in XML</h4>

  <p>In an XML context, the <dfn
  title="dom-document-write-XML"><code>document.write()</code></dfn>
  method must raise an <code>INVALID_ACCESS_ERR</code> exception.</p>

<!--
  For XHTML: content must be well-formed. Where does
  it insert? Immediately after the script that called document.write()?</p>
  how do we handle async scripts vs sync scripts?

Consider:
data:text/xml,<script xmlns="http://www.w3.org/1999/xhtml"><![CDATA[ document.write('<foo>Test</foo>'); ]]></script>
data:text/xml,<script xmlns="http://www.w3.org/1999/xhtml"><![CDATA[ alert('test'); alert(document.write); try { document.write('<foo>Test</foo>'); alert(document.childNodes.length); } catch (e) { alert(e); } ]]></script>

-->

  <p>On the other hand, however, the <dfn
  title="dom-innerHTML-XML"><code>innerHTML</code></dfn> attribute is
  indeed usable in an XML context.</p>

  <p>In an XML context, the <code
  title="dom-innerHTML-XML">innerHTML</code> DOM attribute on
  <code>HTMLElement</code>s must return a string in the form of an <a
  href="http://www.w3.org/TR/xml/#wf-entities">internal general parsed
  entity</a>, and on <code>HTMLDocument</code>s must return a string
  in the form of a <a
  href="http://www.w3.org/TR/xml/#sec-well-formed">document
  entity</a>. The string returned must be XML namespace-well-formed
  and must be an isomorphic serialisation of all of that node's child
  nodes, in document order. User agents may adjust prefixes and
  namespace declarations in the serialisation (and indeed might be
  forced to do so in some cases to obtain namespace-well-formed
  XML). If any of the elements in the serialisation are in the null
  namespace, the default namespace in scope for those elements must be
  explicitly declared as the empty string. <a
  href="#refsXML">[XML]</a> <a href="#refsXMLNS">[XMLNS]</a></p>

  <p>If any of the following cases are found in the DOM being
  serialised, the user agent must raise an
  <code>INVALID_STATE_ERR</code> exception:</p>

  <ul>

   <li>A <code>Document</code> node with no child element nodes.</li>

   <li>A <code>DocumentType</code> node that has an external subset
   public identifier or an external subset system identifier that
   contains both a U+0022 QUOTATION MARK ('"') and a U+0027 APOSTROPHE
   ("'").</li>

   <li>A node with a prefix or local name containing a U+003A COLON
   (":").</li>

   <li>An <code>Attr</code> node, <code>Text</code> node,
   <code>CDATASection</code> node, <code>Comment</code> node, or
   <code>ProcessingInstruction</code> node whose data contains
   characters that are not matched by the XML <code
   title="">Char</code> production. <a href="#refsXML">[XML]</a></li>

   <li>A <code>CDATASection</code> node whose data contains the string
   "<code title="">]]&gt;</code>".</li>

   <li>A <code>Comment</code> node whose data contains two adjacent
   U+002D HYPHEN-MINUS (-) characters or ends with such a
   character.</li>

   <li>A <code>ProcessingInstruction</code> node whose target name is
   the string "<code title="">xml</code>" (case insensitively)<!--
   ASCII -->.</li>

   <li>A <code>ProcessingInstruction</code> node whose target name
   contains a U+003A COLON (":").</li>

   <li>A <code>ProcessingInstruction</code> node whose data contains
   the string "<code title="">?></code>".</li>

  </ul>

  <p class="note">These are the only ways to make a DOM
  unserialisable. The DOM enforces all the other XML constraints; for
  example, trying to set an attribute with a name that contains an
  equals sign (=) will raised an <code>INVALID_CHARACTER_ERR</code>
  exception.</p>

  <p>On setting, in an XML context, the <code
  title="dom-innerHTML-XML">innerHTML</code> DOM attribute on
  <code>HTMLElement</code>s and <code>HTMLDocument</code>s must run
  the following algorithm:</p>

  <ol>

   <li>

    <p>The user agent must create a new <span>XML parser</span>.</p>

   </li>

   <li>

    <p>If the <code title="dom-innerHTML-XML">innerHTML</code>
    attribute is being set on an element, the user agent must
    <span>feed the parser</span> just created the string corresponding
    to the start tag of that element, declaring all the namespace
    prefixes that are in scope on that element in the DOM, as well as
    declaring the default namespace (if any) that is in scope on that
    element in the DOM.</p>

   </li>

   <li>

    <p>The user agent must <span>feed the parser</span> just created
    the string being assigned into the <code
    title="dom-innerHTML-XML">innerHTML</code> attribute.</p>

   </li>

   <li>

    <p>If the <code title="dom-innerHTML-XML">innerHTML</code>
    attribute is being set on an element, the user agent must
    <span>feed the parser</span> the string corresponding to the end
    tag of that element.</p>

   </li>

   <li>

    <p>If the parser found a well-formedness error, the attribute's
    setter must raise a <code>SYNTAX_ERR</code> exception and abort
    these steps.</p>

   </li>

   <li>

    <p>The user agent must remove the children nodes of the node whose
    <code title="dom-innerHTML-XML">innerHTML</code> attribute is
    being set.</p>

   </li>

   <li>

    <p>If the attribute is being set on a <code>Document</code> node,
    let <var title="">new children</var> be the children of the
    document, preserving their order. Otherwise, the attribute is
    being set on an <code>Element</code> node; let <var title="">new
    children</var> be the children of the the document's root element,
    preserving their order.</p>

   </li>

   <li>

    <p>If the attribute is being set on a <code>Document</code> node,
    let <var title="">target document</var> be that
    <code>Document</code> node. Otherwise, the attribute is being set
    on an <code>Element</code> node; let <var title="">target
    document</var> be the <code title="">ownerDocument</code> of that
    <code>Element</code>.</p>

   </li>

   <li>

    <p>Set the <code title="">ownerDocument</code> of all the nodes in
    <var title="">new children</var> to the <var title="">target
    document</var>.</p>

   </li>

   <li>

    <p>Append all the <var title="">new children</var> nodes to the
    node whose <code title="dom-innerHTML-XML">innerHTML</code>
    attribute is being set, preserving their order.</p>

   </li>

  </ol>

  <p class="note"><code>script</code> elements inserted using <code
  title="dom-innerHTML-XML">innerHTML</code> do not execute when they
  are inserted.</p>



  <h3>APIs in HTML documents</h3>
  <!-- XXX case-sensitivity training required here. -->

  <p>For <span>HTML documents</span>, and for <span>HTML
  elements</span> in <span>HTML documents</span>, certain APIs defined
  in DOM3 Core become case-insensitive or case-changing, as sometimes
  defined in DOM3 Core, and as summarised or required below. <a
  href="#refsDOM3CORE">[DOM3CORE]</a>.</p>

  <p>This does not apply to <span>XML documents</span> or to elements
  that are not in the <span>HTML namespace</span> despite being in
  <span>HTML documents</span>.</p>

  <dl>

   <dt><code title="">Element.tagName</code>, <code
   title="">Node.nodeName</code>, and <code
   title="">Node.localName</code></dt>

   <dd>

    <p>These attributes return tag names in all uppercase<!-- XXX
    xref--> and attribute names in all lowercase<!-- XXX xref -->,
    regardless of the case with which they were created.</p>

   </dd>


   <dt><code title="">Document.createElement()</code></dt>

   <dd>

    <p>The canonical form of HTML markup is all-lowercase; thus, this
    method will lowercase<!-- XXX xref --> the argument before
    creating the requisite element. Also, the element created must be
    in the <span>HTML namespace</span>.</p>

    <p class="note">This doesn't apply to <code
    title="">Document.createElementNS()</code>. Thus, it is possible,
    by passing this last method a tag name in the wrong case, to
    create an element that claims to have the tag name of an element
    defined in this specification, but doesn't support its interfaces,
    because it really has another tag name not accessible from the DOM
    APIs.</p>

   </dd>


   <dt><code title="">Element.setAttributeNode()</code></dt>

   <dd>

    <p>When an <code>Attr</code> node is set on an <span title="HTML
    elements">HTML element</span>, it must have its name
    lowercased<!-- XXX xref --> before the element is affected.</p>

    <p class="note">This doesn't apply to <code
    title="">Document.setAttributeNodeNS()</code>.</p>

   </dd>


   <dt><code title="">Element.setAttribute()</code></dt>

   <dd>

    <p>When an attribute is set on an <span title="HTML elements">HTML
    element</span>, the name argument must be lowercased<!-- XXX xref
    --> before the element is affected.</p>

    <p class="note">This doesn't apply to <code
    title="">Document.setAttributeNS()</code>.</p>

   </dd>


   <dt><code title="">Document.getElementsByTagName()</code> and <code
   title="">Element.getElementsByTagName()</code></dt>

   <dd>

    <p>These methods (but not their namespaced counterparts) must
    compare the given argument case-insensitively<!-- XXX xref -->
    when looking at <span title="HTML elements">HTML elements</span>,
    and case-sensitively otherwise.</p>

    <p class="note">Thus, in an <span title="HTML documents">HTML
    document</span> with nodes in multiple namespaces, these methods
    will be both case-sensitive and case-insensitive at the same
    time.</p>

   </dd>


   <dt><code title="">Document.renameNode()</code></dt>

   <dd>

    <p>If the new namespace is the <span>HTML namespace</span>, then
    the new qualified name must be lowercased before the rename takes
    place.<!-- XXX xref --></p>

   </dd>
   

  </dl>




  <h2 id="semantics">Semantics and structure of HTML elements</h2>


  <h3 id="semantics-intro">Introduction</h3>

  <p><em>This section is non-normative.</em></p>

  <p class="big-issue">An introduction to marking up a document.</p>


  <h3>Common microsyntaxes</h3>

  <p>There are various places in HTML that accept particular data
  types, such as dates or numbers. This section describes what the
  conformance criteria for content in those formats is, and how to
  parse them.</p>

  <!-- XXX need to define how to handle U+000A LINE FEED and U+000D
  CARRIAGE RETURN in attributes (for HTML) -->

  <p class="big-issue">Need to go through the whole spec and make sure
  all the attribute values are clearly defined either in terms of
  microsyntaxes or in terms of other specs, or as "Text" or some
  such.</p>


  <h4>Common parser idioms</h4>

  <p>The <dfn title="space character">space characters</dfn>, for the
  purposes of this specification, are U+0020 SPACE, U+0009 CHARACTER
  TABULATION (tab), U+000A LINE FEED (LF), U+000B LINE TABULATION,
  U+000C FORM FEED (FF), and U+000D CARRIAGE RETURN (CR).</p>

  <p>Some of the micro-parsers described below follow the pattern of
  having an <var title="">input</var> variable that holds the string
  being parsed, and having a <var title="">position</var> variable
  pointing at the next character to parse in <var
  title="">input</var>.</p>

  <p>For parsers based on this pattern, a step that requires the user
  agent to <dfn>collect a sequence of characters</dfn> means that the
  following algorithm must be run, with <var title="">characters</var>
  being the set of characters that can be collected:</p>

  <ol>

   <li><p>Let <var title="">input</var> and <var
   title="">position</var> be the same variables as those of the same
   name in the algorithm that invoked these steps.</p></li>

   <li><p>Let <var title="">result</var> be the empty string.</p></li>

   <li><p>While <var title="">position</var> doesn't point past the
   end of <var title="">input</var> and the character at <var
   title="">position</var> is one of the <var
   title="">characters</var>, append that character to the end of <var
   title="">result</var> and advance <var title="">position</var> to
   the next character in <var title="">input</var>.</p></li>

   <li><p>Return <var title="">result</var>.</p></li>

  </ol>

  <p>The step <dfn>skip whitespace</dfn> means that the user agent
  must <span>collect a sequence of characters</span> that are <span
  title="space character">space characters</span>. The step <dfn>skip
  Zs characters</dfn> means that the user agent must <span>collect a
  sequence of characters</span> that are in the Unicode character
  class Zs. In both cases, the collected characters are not used. <a
  href="#refsUNICODE">[UNICODE]</a></p>


  <h4>Boolean attributes</h4>

  <p>A number of attributes in HTML5 are <dfn title="boolean
  attribute">boolean attributes</dfn>. The presence of a boolean
  attribute on an element represents the true value, and the absence
  of the attribute represents the false value.</p>

  <p>If the attribute is present, its value must either be the empty
  string or the attribute's canonical name, exactly, with no leading
  or trailing whitespace, and in lowercase.</p>


  <h4>Numbers</h4>

  <h5>Unsigned integers</h5>

  <p>A string is a <dfn>valid non-negative integer</dfn> if it
  consists of one of more characters in the range U+0030 DIGIT ZERO
  (0) to U+0039 DIGIT NINE (9).</p>

  <p>The <dfn>rules for parsing non-negative integers</dfn> are as
  given in the following algorithm. When invoked, the steps must be
  followed in the order given, aborting at the first step that returns
  a value. This algorithm will either return zero, a positive integer,
  or an error. Leading spaces are ignored. Trailing spaces and indeed
  any trailing garbage characters are ignored.</p>

  <ol>

   <li><p>Let <var title="">input</var> be the string being
   parsed.</p></li>

   <li><p>Let <var title="">position</var> be a pointer into <var
   title="">input</var>, initially pointing at the start of the
   string.</p></li>

   <li><p>Let <var title="">value</var> have the value 0.</li>

   <li><p><span>Skip whitespace.</span></p></li>

   <li><p>If <var title="">position</var> is past the end of <var
   title="">input</var>, return an error.</p></li>

   <li><p>If the next character is not one of U+0030 DIGIT ZERO (0)
   .. U+0039 DIGIT NINE (9), then return an error.</p></li>

   <!-- Ok. At this point we know we have a number. It might have
   trailing garbage which we'll ignore, but it's a number, and we
   won't return an error. -->

   <li>

    <p>If the next character is one of U+0030 DIGIT ZERO (0) .. U+0039
    DIGIT NINE (9):</p>

    <ol>

     <li>Multiply <var title="">value</var> by ten.</li>

     <li>Add the value of the current character (0..9) to <var
     title="">value</var>.</li>

     <li>Advance <var title="">position</var> to the next
     character.</li>

     <li>If <var title="">position</var> is not past the end of <var
     title="">input</var>, return to the top of step 7 in the overall
     algorithm (that's the step within which these substeps find
     themselves).</li>

    </ol>

   </li>

   <li><p>Return <var title="">value</var>.</p></li>

  </ol>


  <h5>Signed integers</h5>

  <p>A string is a <dfn>valid integer</dfn> if it consists of one of
  more characters in the range U+0030 DIGIT ZERO (0) to U+0039 DIGIT
  NINE (9), optionally prefixed with a U+002D HYPHEN-MINUS ("-")
  character.</p>

  <p>The <dfn>rules for parsing integers</dfn> are similar to the
  rules for non-negative integers, and are as given in the following
  algorithm. When invoked, the steps must be followed in the order
  given, aborting at the first step that returns a value. This
  algorithm will either return an integer or an error. Leading spaces
  are ignored. Trailing spaces and trailing garbage characters are
  ignored.</p>

  <ol>

   <li><p>Let <var title="">input</var> be the string being
   parsed.</p></li>

   <li><p>Let <var title="">position</var> be a pointer into <var
   title="">input</var>, initially pointing at the start of the
   string.</p></li>

   <li><p>Let <var title="">value</var> have the value 0.</p></li>

   <li><p>Let <var title="">sign</var> have the value
   "positive".</p></li>

   <li><p><span>Skip whitespace.</span></p></li>

   <li><p>If <var title="">position</var> is past the end of <var
    title="">input</var>, return an error.</p></li>

   <li>

    <p>If the character indicated by <var title="">position</var> (the
    first character) is a U+002D HYPHEN-MINUS ("-") character:</p>

    <ol>

     <li>Let <var title="">sign</var> be "negative".</li>

     <li>Advance <var title="">position</var> to the next
     character.</li>

     <li>If <var title="">position</var> is past the end of <var
     title="">input</var>, return an error.</li>

    </ol>

   </li>

   <li><p>If the next character is not one of U+0030 DIGIT ZERO (0)
   .. U+0039 DIGIT NINE (9), then return an error.</p></li>

   <!-- Ok. At this point we know we have a number. It might have
   trailing garbage which we'll ignore, but it's a number, and we
   won't return an error. -->

   <li>

    <p>If the next character is one of U+0030 DIGIT ZERO (0) .. U+0039
    DIGIT NINE (9):</p>

    <ol>

     <li>Multiply <var title="">value</var> by ten.</li>

     <li>Add the value of the current character (0..9) to <var
     title="">value</var>.</li>

     <li>Advance <var title="">position</var> to the next
     character.</li>

     <li>If <var title="">position</var> is not past the end of <var
     title="">input</var>, return to the top of step 9 in the overall
     algorithm (that's the step within which these substeps find
     themselves).</li>

    </ol>

   </li>

   <li><p>If <var title="">sign</var> is "positive", return <var
   title="">value</var>, otherwise return 0-<var
   title="">value</var>.</p></li>

  </ol>


  <h5>Real numbers</h5>

  <p>A string is a <dfn>valid floating point number</dfn> if it
  consists of one of more characters in the range U+0030 DIGIT ZERO
  (0) to U+0039 DIGIT NINE (9), optionally with a single U+002E FULL
  STOP (".") character somewhere (either before these numbers, in
  between two numbers, or after the numbers), all optionally prefixed
  with a U+002D HYPHEN-MINUS ("-") character.</p>

  <p>The <dfn>rules for parsing floating point number values</dfn> are
  as given in the following algorithm. As with the previous
  algorithms, when this one is invoked, the steps must be followed in
  the order given, aborting at the first step that returns a
  value. This algorithm will either return a number or an
  error. Leading spaces are ignored. Trailing spaces and garbage
  characters are ignored.</p>

  <ol>

   <li><p>Let <var title="">input</var> be the string being
   parsed.</p></li>

   <li><p>Let <var title="">position</var> be a pointer into <var
   title="">input</var>, initially pointing at the start of the
   string.</p></li>

   <li><p>Let <var title="">value</var> have the value 0.</li>

   <li><p>Let <var title="">sign</var> have the value "positive".</li>

   <li><p><span>Skip whitespace.</span></p></li>

   <li><p>If <var title="">position</var> is past the end of <var
    title="">input</var>, return an error.</p></li>

   <li>

    <p>If the character indicated by <var title="">position</var> (the
    first character) is a U+002D HYPHEN-MINUS ("-") character:</p>

    <ol>

     <li>Let <var title="">sign</var> be "negative".</li>

     <li>Advance <var title="">position</var> to the next
     character.</li>

     <li>If <var title="">position</var> is past the end of <var
     title="">input</var>, return an error.</li>

    </ol>

   </li>

   <li><p>If the next character is not one of U+0030 DIGIT ZERO (0)
   .. U+0039 DIGIT NINE (9) or U+002E FULL STOP ("."), then return an
   error.</p></li>

   <li><p>If the next character is U+002E FULL STOP ("."), but either
   that is the last character or the character after that one is not
   one of U+0030 DIGIT ZERO (0) .. U+0039 DIGIT NINE (9), then return
   an error.</p></li>

   <!-- Ok. At this point we know we have a number. It might have
   trailing garbage which we'll ignore, but it's a number, and we
   won't return an error. -->

   <li>

    <p>If the next character is one of U+0030 DIGIT ZERO (0) .. U+0039
    DIGIT NINE (9):</p>

    <ol>

     <li>Multiply <var title="">value</var> by ten.</li>

     <li>Add the value of the current character (0..9) to <var
     title="">value</var>.</li>

     <li>Advance <var title="">position</var> to the next
     character.</li>

     <li>If <var title="">position</var> is past the end of <var
     title="">input</var>, then if <var title="">sign</var> is
     "positive", return <var title="">value</var>, otherwise return
     0-<var title="">value</var>.</li>

     <li>Otherwise return to the top of step 10 in the overall
     algorithm (that's the step within which these substeps find
     themselves).</li>

    </ol>

   </li>

   <li><p>Otherwise, if the next character is not a U+002E FULL STOP
   ("."), then if <var title="">sign</var> is "positive", return <var
   title="">value</var>, otherwise return 0-<var
   title="">value</var>.</p></li>

   <li><p>The next character is a U+002E FULL STOP ("."). Advance <var
   title="">position</var> to the character after that.</p></li>

   <li><p>Let <var title="">divisor</var> be 1.</p></li>

   <li>

    <p>If the next character is one of U+0030 DIGIT ZERO (0) .. U+0039
    DIGIT NINE (9):</p>

    <ol>

     <li>Multiply <var title="">divisor</var> by ten.</li>

     <li>Add the value of the current character (0..9) divided by <var
     title="">divisor</var>, to <var title="">value</var>.</li>

     <li>Advance <var title="">position</var> to the next
     character.</li>

     <li>If <var title="">position</var> is past the end of <var
     title="">input</var>, then if <var title="">sign</var> is
     "positive", return <var title="">value</var>, otherwise return
     0-<var title="">value</var>.</li>

     <li>Otherwise return to the top of step 14 in the overall
     algorithm (that's the step within which these substeps find
     themselves).</li>

    </ol>

   </li>

   <li><p>Otherwise, if <var title="">sign</var> is "positive", return
   <var title="">value</var>, otherwise return 0-<var
   title="">value</var>.</p></li>

  </ol>


  <h5>Ratios</h5>

  <p class="note">The algorithms described in this section are used by
  the <code>progress</code> and <code>meter</code> elements.</p>

  <p>A <dfn>valid denominator punctuation character</dfn> is one of
  the characters from the table below. There is <dfn title="values
  associated with denominator punctuation characters">a value
  associated with each denominator punctuation character</dfn>, as
  shown in the table below.</p>

  <table>
   <thead>
    <tr>
     <th colspan="2">Denominator Punctuation Character</th>
     <th>Value</th>
    </tr>
   </thead>
   <tbody>
    <tr>
     <td>U+0025 PERCENT SIGN</td>
     <td>&#x0025;</td>
     <td>100</td>
    </tr>
    <tr>
     <td>U+066A ARABIC PERCENT SIGN</td>
     <td>&#x066A;</td>
     <td>100</td>
    </tr>
    <tr>
     <td>U+FE6A SMALL PERCENT SIGN</td>
     <td>&#xFE6A;</td>
     <td>100</td>
    </tr>
    <tr>
     <td>U+FF05 FULLWIDTH PERCENT SIGN</td>
     <td>&#xFF05;</td>
     <td>100</td>
    </tr>
    <tr>
     <td>U+2030 PER MILLE SIGN</td>
     <td>&#x2030;</td>
     <td>1000</td>
    </tr>
    <tr>
     <td>U+2031 PER TEN THOUSAND SIGN</td>
     <td>&#x2031;</td>
     <td>10000</td>
    </tr>
   </tbody>
  </table>

  <p>The <dfn>steps for finding one or two numbers of a ratio in a
  string</dfn> are as follows:</p>

  <ol>

   <li>If the string is empty, then return nothing and abort these
   steps.</li>

   <li><span>Find a number</span> in the string according to the
   algorithm below, starting at the start of the string.</li>

   <li>If the sub-algorithm in step 2 returned nothing or returned an
   error condition, return nothing and abort these steps.</li>

   <li>Set <var title="">number1</var> to the number returned by the
   sub-algorithm in step 2.</li>

   <li>Starting with the character immediately after the last one
   examined by the sub-algorithm in step 2, skip any characters in the
   string that are in the Unicode character class Zs (this might match
   zero characters). <a href="#refsUNICODE">[UNICODE]</a></li>

   <li>If there are still further characters in the string, and the
   next character in the string is a <span>valid denominator
   punctuation character</span>, set <var title="">denominator</var>
   to that character.</li>

   <li>If the string contains any other characters in the range U+0030
   DIGIT ZERO to U+0039 DIGIT NINE, but <var title="">denominator</var> was
   given a value in the step 6, return nothing and abort these
   steps.</li>

   <li>Otherwise, if <var title="">denominator</var> was given a value in step
   6, return <var title="">number1</var> and <var title="">denominator</var> and abort
   these steps.</li>

   <li><span>Find a number</span> in the string again, starting
   immediately after the last character that was examined by the
   sub-algorithm in step 2.</li>

   <li>If the sub-algorithm in step 9 returned nothing or an error
   condition, return nothing and abort these steps.</li>

   <li>Set <var title="">number2</var> to the number returned by the
   sub-algorithm in step 9.</li>

   <li>If there are still further characters in the string, and the
   next character in the string is a <span>valid denominator
   punctuation character</span>, return nothing and abort these
   steps.</li>

   <li>If the string contains any other characters in the range U+0030
   DIGIT ZERO to U+0039 DIGIT NINE, return nothing and abort these
   steps.</li>
 
   <li>Otherwise, return <var title="">number1</var> and
   <var title="">number2</var>.</li>

  </ol>

  <!-- XXX again, this should say "positive number" -->
  <p>The algorithm to <dfn>find a number</dfn> is as follows. It is
  given a string and a starting position, and returns either nothing,
  a number, or an error condition.</p>

  <ol>

   <li>Starting at the given starting position, ignore all characters
   in the given string until the first character that is either a
   U+002E FULL STOP or one of the ten characters in the range U+0030
   DIGIT ZERO to U+0039 DIGIT NINE.</li>

   <li>If there are no such characters, return nothing and abort these
   steps.</li>

   <li>Starting with the character matched in step 1, collect all the
   consecutive characters that are either a U+002E FULL STOP or one of
   the ten characters in the range U+0030 DIGIT ZERO to U+0039 DIGIT
   NINE, and assign this string of one or more characters to
   <var title="">string</var>.</li>

   <li>If <var title="">string</var> contains more than one U+002E FULL STOP
   character then return an error condition and abort these
   steps.</li>

   <li>Parse <var title="">string</var> according to the <span>rules for
   parsing floating point number values</span>, to obtain
   <var title="">number</var>. This step cannot fail (<var title="">string</var> is
   guarenteed to be a <span>valid floating point number</span>).</li>

   <li>Return <var title="">number</var>.</li>

  </ol>


  <h5 id="percentages-and-dimensions">Percentages and dimensions</h5>

  <p class="big-issue"><dfn>valid positive non-zero integers</dfn>
  <dfn>rules for parsing dimension values</dfn> (only used by
  height/width on img, embed, object &mdash; lengths in css pixels or
  percentages)</p>



  <h5>Lists of integers</h5>

  <p>A <dfn>valid list of integers</dfn> is a number of <span
  title="valid integer">valid integers</span> separated by U+002C
  COMMA characters, with no other characters (e.g. no <span
  title="space character">space characters</span>). In addition, there
  might be restrictions on the number of integers that can be given,
  or on the range of values allowed.</p>

  <p>The <dfn>rules for parsing a list of integers</dfn> are as
  follows:</p>

  <ol>

   <li><p>Let <var title="">input</var> be the string being
   parsed.</p></li>

   <li><p>Let <var title="">position</var> be a pointer into <var
   title="">input</var>, initially pointing at the start of the
   string.</p></li>

   <li><p>Let <var title="">numbers</var> be an initially empty list
   of integers. This list will be the result of this
   algorithm.</p></li>

   <li><p>If there is a character in the string <var
   title="">input</var> at position <var title="">position</var>, and
   it is either U+002C COMMA character or a U+0020 SPACE character,
   then advance <var title="">position</var> to the next character in
   <var title="">input</var>, or to beyond the end of the string if
   there are no more characters.</p></li>

   <li><p>If <var title="">position</var> points to beyond the end of
   <var title="">input</var>, return <var title="">numbers</var> and
   abort.</p></li>

   <li><p>If the character in the string <var title="">input</var> at
   position <var title="">position</var> is a U+002C COMMA character
   or a U+0020 SPACE character, return to step 4.</li>

   <li><p>Let <var title="">negated</var> be false.</p></li>
   <li><p>Let <var title="">value</var> be 0.</p></li>
   <li><p>Let <var title="">multiple</var> be 1.</p></li>
   <li><p>Let <var title="">started</var> be false.</p></li>
   <li><p>Let <var title="">finished</var> be false.</p></li>
   <li><p>Let <var title="">bogus</var> be false.</p></li>

   <li><p><em>Parser:</em> If the character in the string <var
   title="">input</var> at position <var title="">position</var>
   is:</p>

    <dl class="switch">

     <!-- XXX this doesn't quite match what IE does: http://www.hixie.ch/tests/adhoc/html/flow/image-maps/004-demo.html
          I couldn't work out a pattern to IE's results. Let me know if you can see one. -->

     <dt>A U+002D HYPHEN-MINUS character</dt>

     <dd>

      <p>Follow these substeps:</p>

      <ol>

       <li>If <var title="">finished</var> is true, skip to the next
       step in the overall set of steps.</li>

       <li>If <var title="">started</var> is true or if <var
       title="">bogus</var> is true, let <var title="">negated</var>
       be false.</li>

       <li>Otherwise, if <var title="">started</var> is false and if <var
       title="">bogus</var> is false, let <var title="">negated</var>
       be true.</li>

       <li>Let <var title="">started</var> be true.</li>

      </ol>

     </dd>


     <dt>A character in the range U+0030 DIGIT ZERO .. U+0039 DIGIT
     NINE</dt>

     <dd>

      <p>Follow these substeps:</p>

      <ol>

       <li>If <var title="">finished</var> is true, skip to the next
       step in the overall set of steps.</li>

       <li>Let <var title="">n</var> be the value of the digit,
       interpreted in base ten, multiplied by <var
       title="">multiple</var>.</li>

       <li>Add <var title="">n</var> to <var title="">value</var>.</li>

       <li>If <var title="">value</var> is greater than zero, multiply
       <var title="">multiple</var> by ten.</li>

       <li>Let <var title="">started</var> be true.</li>

      </ol>

     </dd>


     <dt>A U+002C COMMA character</dt>
     <dt>A U+0020 SPACE character</dt>

     <dd>

      <p>Follow these substeps:</p>

      <ol>

       <li>If <var title="">started</var> is false, return the <var
       title="">numbers</var> list and abort.</li>

       <li>If <var title="">negated</var> is true, then negate <var
       title="">value</var>.</li>

       <li>Append <var title="">value</var> to the <var
       title="">numbers</var> list.</li>

       <li>Jump to step 4 in the overall set of steps.</li>

      </ol>

     </dd>


     <dt>A U+002E FULL STOP  character</dt>

     <dd>

      <p>Follow these substeps:</p>

      <ol>

       <li>Let <var title="">finished</var> be true.</li>

      </ol>

     </dd>


     <dt>Any other character</dt>

     <dd>

      <p>Follow these substeps:</p>

      <ol>

       <li>If <var title="">finished</var> is true, skip to the next
       step in the overall set of steps.</li>

       <li>Let <var title="">negated</var> be false.</li>

       <li>Let <var title="">bogus</var> be true.</li>

       <li>If <var title="">started</var> is true, then return the
       <var title="">numbers</var> list, and abort. (The value in <var
       title="">value</var> is not appended to the list first; it is
       dropped.)</li>

      </ol>

     </dd>

    </dl>   

   </li>

   <li><p>Advance <var title="">position</var> to the next character
   in <var title="">input</var>, or to beyond the end of the string if
   there are no more characters.</p></li>

   <li><p>If <var title="">position</var> points to a character (and
   not to beyond the end of <var title="">input</var>), jump to the
   big <em>Parser</em> step above.</p></li>

   <li><p>If <var title="">negated</var> is true, then negate <var
   title="">value</var>.</li>

   <li><p>If <var title="">started</var> is true, then append <var
   title="">value</var> to the <var title="">numbers</var> list,
   return that list, and abort.</li>

   <li><p>Return the <var title="">numbers</var> list and
   abort.</p></li>

  </ol>



  <h4>Dates and times</h4>

  <p>In the algorithms below, the <dfn>number of days in month <var
  title="">month</var> of year <var title="">year</var></dfn> is:
  <em>31</em> if <var title="">month</var> is 1, 3, 5, 7, 8, 10, or
  12; <em>30</em> if <var title="">month</var> is 4, 6, 9, or 11;
  <em>29</em> if <var title="">month</var> is 2 and <var
  title="">year</var> is a number divisible by 400, or if <var
  title="">year</var> is a number divisible by 4 but not by 100; and
  <em>28</em> otherwise. This takes into account leap years in the
  Gregorian calendar. <a
  href="#refsGREGORIAN">[GREGORIAN]</a></p>

  <h5>Specific moments in time</h5>

  <p>A string is a <dfn>valid datetime</dfn> if it has four digits
  (representing the year), a literal hyphen, two digits (representing
  the month), a literal hyphen, two digits (representing the day),
  optionally some spaces, either a literal T or a space, optionally
  some more spaces, two digits (for the hour), a colon, two digits
  (the minutes), optionally the seconds (which, if included, must
  consist of another colon, two digits (the integer part of the
  seconds), and optionally a decimal point followed by one or more
  digits (for the fractional part of the seconds)), optionally some
  spaces, and finally either a literal Z (indicating the time zone is
  UTC), or, a plus sign or a minus sign followed by two digits, a
  colon, and two digits (for the sign, the hours and minutes of the
  timezone offset respectively); with the month-day combination being
  a valid date in the given year according to the Gregorian calendar,
  the hour values (<var title="">h</var>) being in the range
  0&nbsp;&le;&nbsp;<var title="">h</var>&nbsp;&le;&nbsp;23, the minute
  values (<var title="">m</var>) in the range 0&nbsp;&le;&nbsp;<var
  title="">m</var>&nbsp;&le;&nbsp;59, and the second value (<var
  title="">s</var>) being in the range 0&nbsp;&le;&nbsp;<var
  title="">h</var>&nbsp;&lt;&nbsp;60. <a
  href="#refsGREGORIAN">[GREGORIAN]</a></p>

  <!--XXX [GREGORIAN] should point to
  <dd id="refsGREGORIAN">[GREGORIAN]</dd>
  <dd>(Non-normative) <cite>Inter Gravissimas</cite>, A. Lilius, C. Clavius. Gregory XIII Papal Bulls, February 1582.</dd>
  -->

  <p>The digits must be characters in the range U+0030 DIGIT ZERO (0)
  to U+0039 DIGIT NINE (9), the hyphens must be a U+002D HYPHEN-MINUS
  characters, the T must be a U+0054 LATIN CAPITAL LETTER T, the
  colons must be U+003A COLON characters, the decimal point must be a
  U+002E FULL STOP, the Z must be a U+005A LATIN CAPITAL LETTER Z, the
  plus sign must be a U+002B PLUS SIGN, and the minus U+002D (same as
  the hyphen).</p>

  <div class="example">

   <p>The following are some examples of dates written as <span
   title="valid datetime">valid datetimes</span>.</p>

   <dl>

    <dt>"<code>0037-12-13 00:00 Z</code>"</dt>

    <dd>Midnight UTC on the birthday of Nero (the Roman Emperor).</dd>

    <dt>"<code>1979-10-14T12:00:00.001-04:00</code>"</dt>

    <dd>One millisecond after noon on October 14th 1979, in the time
    zone in use on the east coast of North America during daylight
    saving time.</dd>

    <dt>"<code>8592-01-01 T 02:09 +02:09</code>"</dt>

    <dd>Midnight UTC on the 1st of January, 8592. The time zone
    associated with that time is two hours and nine minutes ahead of
    UTC.</dd>

   </dl>

   <p>Several things are notable about these dates:</p>

   <ul>

    <li>Years with fewer than four digits have to be
    zero-padded. The date "37-12-13" would not be a valid date.</li>

    <li>To unambiguously identify a moment in time prior to the
    introduction of the Gregorian calendar, the date has to be first
    converted to the Gregorian calendar from the calendar in use at
    the time (e.g. from the Julian calendar). The date of Nero's
    birth is the 15th of December 37, in the Julian Calendar, which
    is the 13th of December 37 in the Gregorian Calendar.</li> <!--
    XXX this might not be true. I can't find a reference that gives
    his birthday with an explicit statement about the calendar being
    used. However, it seems unlikely that it would be given in the
    Gregorian calendar, so I assume sites use the Julian one. -->

    <li>The time and timezone components are not optional.</li>

    <li>Dates before the year 0 or after the year 9999 can't be
    represented as a datetime in this version of HTML.</li>

    <li>Time zones differ based on daylight savings time.</li>

   </ul>

  </div>

  <p class="note">Conformance checkers can use the algorithm below to
  determine if a datetime is a valid datetime or not.</p>

  <p>To <dfn id="datetime-parser">parse a string as a datetime
  value</dfn>, a user agent must apply the following algorithm to the
  string. This will either return a time in UTC, with associated
  timezone information for round tripping or display purposes, or
  nothing, indicating the value is not a <span>valid
  datetime</span>. If at any point the algorithm says that it "fails",
  this means that it returns nothing.</p>

  <ol>

   <li><p>Let <var title="">input</var> be the string being
   parsed.</p></li>

   <li><p>Let <var title="">position</var> be a pointer into <var
   title="">input</var>, initially pointing at the start of the
   string.</p></li>

   <li><p><span>Collect a sequence of characters</span> in the range
   U+0030 DIGIT ZERO (0) to U+0039 DIGIT NINE (9). If the collected
   sequence is not exactly four characters long, then fail. Otherwise,
   interpret the resulting sequence as a base ten integer. Let that
   number be the <var title="">year</var>.</p></li>

   <li><p>If <var title="">position</var> is beyond the end of <var
   title="">input</var> or if the character at <var
   title="">position</var> is not a U+002D HYPHEN-MINUS character,
   then fail. Otherwise, move <var title="">position</var> forwards
   one character.</p></li>

   <li><p><span>Collect a sequence of characters</span> in the range
   U+0030 DIGIT ZERO (0) to U+0039 DIGIT NINE (9). If the collected
   sequence is not exactly two characters long, then fail. Otherwise,
   interpret the resulting sequence as a base ten integer. Let that
   number be the <var title="">month</var>.</p></li>

   <li>If <var title="">month</var> is not a number in the range
   1&nbsp;&le;&nbsp;<var title="">month</var>&nbsp;&le;&nbsp;12, then fail.</li>

   <li><p>Let <var title="">maxday</var> be the <span>number of days
   in month <var title="">month</var> of year <var
   title="">year</var></span>.</p></li>

   <li><p>If <var title="">position</var> is beyond the end of <var
   title="">input</var> or if the character at <var
   title="">position</var> is not a U+002D HYPHEN-MINUS character,
   then fail. Otherwise, move <var title="">position</var> forwards
   one character.</p></li>

   <li><p><span>Collect a sequence of characters</span> in the range
   U+0030 DIGIT ZERO (0) to U+0039 DIGIT NINE (9). If the collected
   sequence is not exactly two characters long, then fail. Otherwise,
   interpret the resulting sequence as a base ten integer. Let that
   number be the <var title="">day</var>.</p></li>

   <li><p>If <var title="">day</var> is not a number in the range
   1&nbsp;&le;&nbsp;<var title="">month</var>&nbsp;&le;&nbsp;<var
   title="">maxday</var>, then fail.</li>

   <li><p><span>Collect a sequence of characters</span> that are
   either U+0054 LATIN CAPITAL LETTER T characters or <span
   title="space character">space characters</span>. If the collected
   sequence is zero characters long, or if it contains more than one
   U+0054 LATIN CAPITAL LETTER T character, then fail.</p></li>

   <li><p><span>Collect a sequence of characters</span> in the range
   U+0030 DIGIT ZERO (0) to U+0039 DIGIT NINE (9). If the collected
   sequence is not exactly two characters long, then fail. Otherwise,
   interpret the resulting sequence as a base ten integer. Let that
   number be the <var title="">hour</var>.</p></li>

   <li>If <var title="">hour</var> is not a number in the range
   0&nbsp;&le;&nbsp;<var title="">hour</var>&nbsp;&le;&nbsp;23, then fail.</li>

   <li><p>If <var title="">position</var> is beyond the end of <var
   title="">input</var> or if the character at <var
   title="">position</var> is not a U+003A COLON character,
   then fail. Otherwise, move <var title="">position</var> forwards
   one character.</p></li>

   <li><p><span>Collect a sequence of characters</span> in the range
   U+0030 DIGIT ZERO (0) to U+0039 DIGIT NINE (9). If the collected
   sequence is not exactly two characters long, then fail. Otherwise,
   interpret the resulting sequence as a base ten integer. Let that
   number be the <var title="">minute</var>.</p></li>

   <li>If <var title="">minute</var> is not a number in the range
   0&nbsp;&le;&nbsp;<var title="">minute</var>&nbsp;&le;&nbsp;59, then fail.</li>

   <li><p>Let <var title="">second</var> be a string with the value
   "0".</p></li>

   <li><p>If <var title="">position</var> is beyond the end of <var
   title="">input</var>, then fail.</p></li>

   <li><p>If the character at <var title="">position</var> is a U+003A
   COLON, then:</p>

    <ol>

     <li><p>Advance <var title="">position</var> to the next character
     in <var title="">input</var>.</p></li>

     <li><p>If <var title="">position</var> is beyond the end of <var
     title="">input</var>, or at the last character in <var
     title="">input</var>, or if the next <em>two</em> characters in
     <var title="">input</var> starting at <var
     title="">position</var> are not two characters both in the range
     U+0030 DIGIT ZERO (0) to U+0039 DIGIT NINE (9), then
     fail.</p></li>

     <li><p><span>Collect a sequence of characters</span> that are
     either characters in the range U+0030 DIGIT ZERO (0) to U+0039
     DIGIT NINE (9) or U+002E FULL STOP characters. If the collected
     sequence has more than one U+002E FULL STOP characters, or if the
     last character in the sequence is a U+002E FULL STOP character,
     then fail. Otherwise, let the collected string be <var
     title="">second</var> instead of its previous value.</p></li>

    </ol>

   </li>

   <li><p>Interpret <var title="">second</var> as a base ten number
   (possibly with a fractional part). Let that number be <var
   title="">second</var> instead of the string version.</p></li>

   <li>If <var title="">second</var> is not a number in the range
   0&nbsp;&le;&nbsp;<var title="">hour</var>&nbsp;&lt;&nbsp;60, then fail. (The
   values 60 and 61 are not allowed: leap seconds cannot be
   represented by datetime values.)</li>

   <li><p>If <var title="">position</var> is beyond the end of <var
   title="">input</var>, then fail.</p></li>

   <li><p><span>Skip whitespace.</span></p></li>

   <li><p>If the character at <var title="">position</var> is a
   U+005A LATIN CAPITAL LETTER Z, then:</p>

    <ol>

     <li><p>Let <var title="">timezone<sub title="">hours</sub></var> be
     0.</p></li>

     <li><p>Let <var title="">timezone<sub title="">minutes</sub></var> be
     0.</p></li>

     <li><p>Advance <var title="">position</var> to the next character
     in <var title="">input</var>.</p></li>

    </ol>

   </li>

   <li><p>Otherwise, if the character at <var title="">position</var>
   is either a U+002B PLUS SIGN ("+") or a U+002D HYPHEN-MINUS ("-"),
   then:</p>

    <ol>

     <li><p>If the character at <var title="">position</var> is a
     U+002B PLUS SIGN ("+"), let <var title="">sign</var> be
     "positive". Otherwise, it's a U+002D HYPHEN-MINUS ("-"); let <var
     title="">sign</var> be "negative".</p></li>

     <li><p>Advance <var title="">position</var> to the next character
     in <var title="">input</var>.</p></li>

     <li><p><span>Collect a sequence of characters</span> in the range
     U+0030 DIGIT ZERO (0) to U+0039 DIGIT NINE (9). If the collected
     sequence is not exactly two characters long, then
     fail. Otherwise, interpret the resulting sequence as a base ten
     integer. Let that number be the <var
     title="">timezone<sub title="">hours</sub></var>.</p></li>

     <li>If <var title="">timezone<sub title="">hours</sub></var> is not a
     number in the range 0&nbsp;&le;&nbsp;<var
     title="">timezone<sub title="">hours</sub></var>&nbsp;&le;&nbsp;23, then
     fail.</li>

     <li>If <var title="">sign</var> is "negative", then negate <var
     title="">timezone<sub title="">hours</sub></var>.</li>

     <li><p>If <var title="">position</var> is beyond the end of <var
     title="">input</var> or if the character at <var
     title="">position</var> is not a U+003A COLON character, then
     fail. Otherwise, move <var title="">position</var> forwards one
     character.</p></li>

     <li><p><span>Collect a sequence of characters</span> in the range
     U+0030 DIGIT ZERO (0) to U+0039 DIGIT NINE (9). If the collected
     sequence is not exactly two characters long, then
     fail. Otherwise, interpret the resulting sequence as a base ten
     integer. Let that number be the <var
     title="">timezone<sub title="">minutes</sub></var>.</p></li>

     <li>If <var title="">timezone<sub title="">minutes</sub></var> is not a
     number in the range 0&nbsp;&le;&nbsp;<var
     title="">timezone<sub title="">minutes</sub></var>&nbsp;&le;&nbsp;59, then
     fail.</li>

     <li>If <var title="">sign</var> is "negative", then negate <var
     title="">timezone<sub title="">minutes</sub></var>.</li>

    </ol>

   </li>

   <li><p>If <var title="">position</var> is <em>not</em> beyond the
   end of <var title="">input</var>, then fail.</p></li>

   <li><p>Let <var title="">time</var> be the moment in time at year
   <var title="">year</var>, month <var title="">month</var>, day <var
   title="">day</var>, hours <var title="">hour</var>, minute <var
   title="">minute</var>, second <var title="">second</var>,
   subtracting <var title="">timezone<sub title="">hours</sub></var>
   hours and <var title="">timezone<sub title="">minutes</sub></var>
   minutes. That moment in time is a moment in the UTC
   timezone.</p></li>

   <li><p>Let <var title="">timezone</var> be <var
   title="">timezone<sub title="">hours</sub></var> hours and <var
   title="">timezone<sub title="">minutes</sub></var> minutes from
   UTC.</p></li>

   <li><p>Return <var title="">time</var> and <var
   title="">timezone</var>.</p></li>

  </ol>


  <h5>Vaguer moments in time</h5>

  <p>This section defines <dfn title="date or time string">date or
  time strings</dfn>. There are two kinds, <dfn title="date or time
  string in content">date or time strings in content</dfn>, and <dfn
  title="date or time string in attributes">date or time strings in
  attributes</dfn>. The only difference is in the handling of
  whitespace characters.</p>

  <p>To parse a <span>date or time string</span>, user agents must use
  the following algorithm. A <span>date or time string</span> is a
  <em>valid</em> date or time string if the following algorithm, when
  run on the string, doesn't say the string is invalid.</p>

  <p>The algorithm may return nothing (in which case the string will
  be invalid), or it may return a date, a time, a date and a time, or
  a date and a time and and a timezone. Even if the algorithm returns
  one or more values, the string can still be invalid.</p>

  <ol>

   <!-- INIT -->
   <li><p>Let <var title="">input</var> be the string being
   parsed.</p></li>

   <li><p>Let <var title="">position</var> be a pointer into <var
   title="">input</var>, initially pointing at the start of the
   string.</p></li>

   <li><p>Let <var title="">results</var> be the collection of results
   that are to be returned (one or more of a date, a time, and a
   timezone), initially empty. If the algorithm aborts at any point,
   then whatever is currently in <var title="">results</var> must be
   returned as the result of the algorithm.</p></li>

   <!-- LEADING WHITESPACE -->
   <li><p>For the "in content" variant: <span>skip Zs
   characters</span>; for the "in attributes" variant: <span>skip
   whitespace</span>.</p></li><!-- XXX skip whitespace in attribute?
   really? -->

   <!-- YEAR or HOUR -->
   <li><p><span>Collect a sequence of characters</span> in the range
   U+0030 DIGIT ZERO (0) to U+0039 DIGIT NINE (9). If the collected
   sequence is empty, then the string is invalid; abort these
   steps.</p></li>

   <li><p>Let the sequence of characters collected in the last step be
   <var title="">s</var>.</p></li>

   <li><p>If <var title="">position</var> is past the end of <var
   title="">input</var>, the string is invalid; abort these
   steps.</p></li>

   <li><p>If the character at <var title="">position</var> is
   <em>not</em> a U+003A COLON character, then:</p>

    <!-- DATE -->
    <ol>

     <li><p>If the character at <var title="">position</var> is not a
     U+002D HYPHEN-MINUS ("-") character either, then the string is
     invalid, abort these steps.</p></li>

     <!-- YEAR -->
     <li><p>If the sequence <var title="">s</var> is not exactly four
     digits long, then the string is invalid. (This does not stop the
     algorithm, however.)</p></li>

     <li><p>Interpret the sequence of characters collected in step 5 as
     a base ten integer, and let that number be <var
     title="">year</var>.</p></li>

     <li><p>Advance <var title="">position</var> past the U+002D
     HYPHEN-MINUS ("-") character.</p></li>

     <!-- MONTH -->
     <li><p><span>Collect a sequence of characters</span> in the range
     U+0030 DIGIT ZERO (0) to U+0039 DIGIT NINE (9). If the collected
     sequence is empty, then the string is invalid; abort these
     steps.</p></li>

     <li><p>If the sequence collected in the last step is not exactly
     two digits long, then the string is invalid.</p></li>

     <li><p>Interpret the sequence of characters collected two steps ago
     as a base ten integer, and let that number be <var
     title="">month</var>.</p></li>

     <li>If <var title="">month</var> is not a number in the range
     1&nbsp;&le;&nbsp;<var title="">month</var>&nbsp;&le;&nbsp;12, then
     the string is invalid, abort these steps.</li>

     <li><p>Let <var title="">maxday</var> be the <span>number of days
     in month <var title="">month</var> of year <var
     title="">year</var></span>.</p></li>

     <li><p>If <var title="">position</var> is past the end of <var
     title="">input</var>, or if the character at <var
     title="">position</var> is <em>not</em> a U+002D HYPHEN-MINUS ("-")
     character, then the string is invalid, abort these
     steps. Otherwise, advance <var title="">position</var> to the next
     character.</p></li>

     <!-- DAY -->
     <li><p><span>Collect a sequence of characters</span> in the range
     U+0030 DIGIT ZERO (0) to U+0039 DIGIT NINE (9). If the collected
     sequence is empty, then the string is invalid; abort these
     steps.</p></li>

     <li><p>If the sequence collected in the last step is not exactly
     two digits long, then the string is invalid.</p></li>

     <li><p>Interpret the sequence of characters collected two steps
     ago as a base ten integer, and let that number be <var
     title="">day</var>.</p></li>

     <li><p>If <var title="">day</var> is not a number in the range
     1&nbsp;&le;&nbsp;<var title="">day</var>&nbsp;&le;&nbsp;<var
     title="">maxday</var>, then the string is invalid, abort these
     steps.</p></li>

     <li><p>Add the date represented by <var title="">year</var>, <var
     title="">month</var>, and <var title="">day</var> to the <var
     title="">results</var>.</p></li>

     <!-- XXX we should allow the algorithm to abort here without
     error, with just a date. -->

     <!-- WHITESPACE -->
     <li><p>For the "in content" variant: <span>skip Zs
     characters</span>; for the "in attributes" variant: <span>skip
     whitespace</span>.</p></li>

     <li><p>If the character at <var title="">position</var> is a U+0054
     LATIN CAPITAL LETTER T, then move <var title="">position</var>
     forwards one character.</p></li>

     <li><p>For the "in content" variant: <span>skip Zs
     characters</span>; for the "in attributes" variant: <span>skip
     whitespace</span>.</p></li>

     <!-- at this point, if <var title="">position</var> points to a
     number, we know that we passed at least one space or a T, because
     otherwise the number would have been slurped up in the last
     "collect" step. -->

     <!-- HOUR -->
     <li><p><span>Collect a sequence of characters</span> in the range
     U+0030 DIGIT ZERO (0) to U+0039 DIGIT NINE (9). If the collected
     sequence is empty, then the string is invalid; abort these
     steps.</p></li>

     <li><p>Let <var title="">s</var> be the sequence of characters
     collected in the last step.</p></li>

    </ol>

   </li>

   <!-- TIME -->

   <li><p>If <var title="">s</var> is not exactly two digits long,
   then the string is invalid.</p></li>

   <li><p>Interpret the sequence of characters collected two steps
   ago as a base ten integer, and let that number be <var
   title="">hour</var>.</p></li>

   <li><p>If <var title="">hour</var> is not a number in the range
   0&nbsp;&le;&nbsp;<var title="">hour</var>&nbsp;&le;&nbsp;23, then
   the string is invalid, abort these steps.</p></li>

   <li><p>If <var title="">position</var> is past the end of <var
   title="">input</var>, or if the character at <var
   title="">position</var> is <em>not</em> a U+003A COLON character,
   then the string is invalid, abort these steps. Otherwise, advance
   <var title="">position</var> to the next character.</p></li>

   <!-- MINUTE -->
   <li><p><span>Collect a sequence of characters</span> in the range
   U+0030 DIGIT ZERO (0) to U+0039 DIGIT NINE (9). If the collected
   sequence is empty, then the string is invalid; abort these
   steps.</p></li>

   <li><p>If the sequence collected in the last step is not exactly
   two digits long, then the string is invalid.</p></li>

   <li><p>Interpret the sequence of characters collected two steps
   ago as a base ten integer, and let that number be <var
   title="">minute</var>.</p></li>

   <li><p>If <var title="">minute</var> is not a number in the range
   0&nbsp;&le;&nbsp;<var title="">minute</var>&nbsp;&le;&nbsp;59, then
   the string is invalid, abort these steps.</p></li>

   <!-- SECOND -->
   <li><p>Let <var title="">second</var> be 0. It may be changed to
   another value in the next step.</p></li>

   <li><p>If <var title="">position</var> is not past the end of <var
   title="">input</var> and the character at <var
   title="">position</var> is a U+003A COLON character, then:</p>

    <ol>

     <li><p><span>Collect a sequence of characters</span> that are
     either characters in the range U+0030 DIGIT ZERO (0) to U+0039
     DIGIT NINE (9) or are U+002E FULL STOP. If the collected sequence
     is empty, or contains more than one U+002E FULL STOP character,
     then the string is invalid; abort these steps.</p></li>

     <li><p>If the first character in the sequence collected in the
     last step is not in the range U+0030 DIGIT ZERO (0) to U+0039
     DIGIT NINE (9), then the string is invalid.</p></li>

     <li><p>Interpret the sequence of characters collected two steps
     ago as a base ten number (possibly with a fractional part), and
     let that number be <var title="">second</var>.</p></li>

     <li><p>If <var title="">second</var> is not a number in the range
     0&nbsp;&le;&nbsp;<var title="">minute</var>&nbsp;&lt;&nbsp;60,
     then the string is invalid, abort these steps.</p></li>

    </ol>

   </li>

   <li><p>Add the time represented by <var title="">hour</var>, <var
   title="">minute</var>, and <var title="">second</var> to the <var
   title="">results</var>.</p></li>

   <!-- TIME ZONE -->

   <li><p>If <var title="">results</var> has both a date and a time,
   then:</p>

    <ol>

     <li><p>For the "in content" variant: <span>skip Zs
     characters</span>; for the "in attributes" variant: <span>skip
     whitespace</span>.</p></li>

     <li><p>If <var title="">position</var> is past the end of <var
     title="">input</var>, then skip to the next step in the overall
     set of steps.</p>

     <!-- UTC -->
     <li><p>Otherwise, if the character at <var
     title="">position</var> is a U+005A LATIN CAPITAL LETTER Z,
     then:</p>

      <ol>

       <li><p>Add the timezone corresponding to UTC (zero offset) to
       the <var title="">results</var>.</p></li>

       <li><p>Advance <var title="">position</var> to the next character
       in <var title="">input</var>.</p></li>

       <li><p>Skip to the next step in the overall set of
       steps.</p></li>

      </ol>

     </li>

     <!-- EXPLICIT TIMEZONE OFFSET -->
     <li><p>Otherwise, if the character at <var
     title="">position</var> is either a U+002B PLUS SIGN ("+") or a
     U+002D HYPHEN-MINUS ("-"), then:</p>

      <ol>

       <!-- SIGN -->
       <li><p>If the character at <var title="">position</var> is a
       U+002B PLUS SIGN ("+"), let <var title="">sign</var> be
       "positive". Otherwise, it's a U+002D HYPHEN-MINUS ("-"); let
       <var title="">sign</var> be "negative".</p></li>

       <!-- HOURS -->
       <li><p>Advance <var title="">position</var> to the next
       character in <var title="">input</var>.</p></li>

       <li><p><span>Collect a sequence of characters</span> in the
       range U+0030 DIGIT ZERO (0) to U+0039 DIGIT NINE (9). If the
       collected sequence is not exactly two characters long, then
       the string is invalid.</p></li>

       <li><p>Interpret the sequence collected in the last step as a
       base ten number, and let that number be <var
       title="">timezone<sub title="">hours</sub></var>.</p></li>

       <li>If <var title="">timezone<sub title="">hours</sub></var> is not a
       number in the range 0&nbsp;&le;&nbsp;<var
       title="">timezone<sub title="">hours</sub></var>&nbsp;&le;&nbsp;23, then
       the string is invalid; abort these steps.</li>

       <li>If <var title="">sign</var> is "negative", then negate <var
       title="">timezone<sub title="">hours</sub></var>.</li>

       <li><p>If <var title="">position</var> is beyond the end of
       <var title="">input</var> or if the character at <var
       title="">position</var> is not a U+003A COLON character, then
       the string is invalid; abort these steps. Otherwise, move <var
       title="">position</var> forwards one character.</p></li>

       <!-- MINUTES -->
       <li><p><span>Collect a sequence of characters</span> in the range
       U+0030 DIGIT ZERO (0) to U+0039 DIGIT NINE (9). If the collected
       sequence is not exactly two characters long, then the string is invalid.</p></li>

       <li><p>Interpret the sequence collected in the last step as a
       base ten number, and let that number be <var
       title="">timezone<sub title="">minutes</sub></var>.</p></li>

       <li>If <var title="">timezone<sub title="">minutes</sub></var> is not a
       number in the range 0&nbsp;&le;&nbsp;<var
       title="">timezone<sub title="">minutes</sub></var>&nbsp;&le;&nbsp;59,
       then the string is invalid; abort these steps.</li>

       <li><p>Add the timezone corresponding to an offset of <var
       title="">timezone<sub title="">hours</sub></var> hours and <var
       title="">timezone<sub title="">minutes</sub></var> minutes to the <var
       title="">results</var>.</p></li>

       <li><p>Skip to the next step in the overall set of
       steps.</p></li>

      </ol>

     </li>

     <li><p>Otherwise, the string is invalid; abort these
     steps.</p></li>

    </ol>

   </li>

   <li><p>For the "in content" variant: <span>skip Zs
   characters</span>; for the "in attributes" variant: <span>skip
   whitespace</span>.</p></li>

   <li><p>If <var title="">position</var> is <em>not</em> past the end
   of <var title="">input</var>, then the string is invalid.</p>

   <li><p>Abort these steps (the string is parsed).</p></li>

  </ol>


  <h4>Time offsets</h4>

  <p class="big-issue"><dfn>valid time offset</dfn>, <dfn>rules for
  parsing time offsets</dfn>, <dfn>time offset serialisation
  rules</dfn>; in the format "5d4h3m2s1ms" or "3m 9.2s" or "00:00:00.00"
  or similar.</p>



  <h4>Tokens</h4>

  <p>A <dfn>set of space-separated tokens</dfn> is a set of zero or
  more words separated by one or more <span title="space
  character">space characters</span>, where words consist of any
  string of one or more characters, none of which are <span
  title="space character">space characters</span>.</p>

  <p>A string containing a <span>set of space-separated tokens</span>
  may have leading or trailing <span title="space character">space
  characters</span>.</p>

  <p>An <dfn>unordered set of unique space-separated tokens</dfn> is a
  <span>set of space-separated tokens</span> where none of the words
  are duplicated.</p>

  <p>An <dfn>ordered set of unique space-separated tokens</dfn> is a
  <span>set of space-separated tokens</span> where none of the words
  are duplicated but where the order of the tokens is meaningful.</p>

  <p>When a user agent has to <dfn>split a string on spaces</dfn>, it
  must use the following algorithm:</p>

  <ol>

   <li><p>Let <var title="">input</var> be the string being
   parsed.</p></li>

   <li><p>Let <var title="">position</var> be a pointer into <var
   title="">input</var>, initially pointing at the start of the
   string.</p></li>

   <li><p>Let <var title="">tokens</var> be a list of tokens,
   initially empty.</p></li>

   <li><p><span>Skip whitespace</span></p></li>

   <li><p>While <var title="">position</var> is not past the end of
   <var title="">input</var>:</p>

    <ol>

     <li><p><span>Collect a sequence of characters</span> that are not
     <span title="space character">space characters</span>.</p></li>

     <li><p>Add the string collected in the previous step to <var
     title="">tokens</var>.</p></li>

     <li><p><span>Skip whitespace</span></p></li>

    </ol>

   </li>

   <li><p>Return <var title="">tokens</var>.</p></li>  

  </ol>

  <p>When a user agent has to <dfn>remove a token from a string</dfn>,
  it must use the following algorithm:</p>

  <ol>

   <li><p>Let <var title="">input</var> be the string being
   modified.</p></li>

   <li><p>Let <var title="">token</var> be the token being removed. It
   will not contain any <span title="space character">space
   characters</span>.</p></li>

   <li><p>Let <var title="">output</var> be the output string,
   initially empty.</p></li>

   <li><p>Let <var title="">position</var> be a pointer into <var
   title="">input</var>, initially pointing at the start of the
   string.</p></li>

   <li><p>If <var title="">position</var> is beyond the end of <var
   title="">input</var>, set the string being modified to <var
   title="">output</var>, and abort these steps.</p></li>

   <li><p>If the character at <var title="">position</var> is a
   <span>space character</span>:

    <ol>

     <li><p>Append the character at <var title="">position</var> to
     the end of <var title="">output</var>.</p></li>

     <li><p>Increment <var title="">position</var> so it points at the
     next character in <var title="">input</var>.</p></li>

     <li><p>Return to step 5 in the overall set of steps.</p></li>

    </ol>

   </li>

   <li><p>Otherwise, the character at <var title="">position</var> is
   the first character of a token. <span>Collect a sequence of
   characters</span> that are not <span title="space character">space
   characters</span>, and let that be <var title="">s</var>.</p></li>

   <li><p>If <var title="">s</var> is exactly equal to <var
   title="">token</var>, then:</p>

    <ol>

     <li><p><span>Skip whitespace</span> (in <var
     title="">input</var>).</p></li>

     <li><p>Remove any <span title="space character">space
     characters</span> currently at the end of <var
     title="">output</var>.</p></li>

     <li><p>If <var title="">position</var> is not past the end of
     <var title="">input</var>, and <var title="">output</var> is not
     the empty string, append a single U+0020 SPACE character at the
     end of <var title="">output</var>.</p></li>

    </ol>

   </li>

   <li><p>Otherwise, append <var title="">s</var> to the end of <var
   title="">output</var>.</p></li>

   <li><p>Return to step 6 in the overall set of steps.</p></li>

  </ol>

  <p class="note">This causes any occurrences of the token to be
  removed from the string, and any spaces that were surrounding the
  token to be collapsed to a single space, except at the start and end
  of the string, where such spaces are removed.</p>



  <h4>Keywords and enumerated attributes</h4>

  <p>Some attributes are defined as taking one of a finite set of
  keywords. Such attributes are called <dfn title="enumerated
  attribute">enumerated attributes</dfn>. The keywords are each
  defined to map to a particular <em>state</em> (several keywords
  might map to the same state, in which case some of the keywords are
  synonyms of each other; additionally, some of the keywords can be
  said to be non-conforming, and are only in the specification for
  historical reasons). In addition, two default states can be
  given. The first is the <em>invalid value default</em>, the second
  is the <em>missing value default</em>.</p>

  <p>If an enumerated attribute is specified, the attribute's value
  must be one of the given keywords that are not said to be
  non-conforming, with no leading or trailing whitespace. The keyword
  may use any mix of uppercase and lowercase letters.<!-- XXX should
  say "uppercase and lowercase ASCII letters" or some such --></p>

  <p>When the attribute is specified, if its value
  <span>case-insensitively</span><!-- XXX ascii case folding -->
  matches one of the given keywords then that keyword's state is the
  state that the attribute represents. If the attribute value matches
  none of the given keywords, but the attribute has an <em>invalid
  value default</em>, then the attribute represents that
  state. Otherwise, if the attribute value matches none of the
  keywords but there is a <em>missing value default</em> state
  defined, then <em>that</em> is the state represented by the
  attribute. Otherwise, there is no default, and invalid values must
  simply be ignored.</p>

  <p>When the attribute is <em>not</em> specified, if there is a
  <em>missing value default</em> state defined, then that is the state
  represented by the (missing) attribute. Otherwise, the absence of
  the attribute means that there is no state represented.</p>

  <p class="note">The empty string can be one of the keywords in some
  cases. For example the <code
  title="attr-contenteditable">contenteditable</code> attribute has
  two states: <em>true</em>, matching the <code title="">true</code>
  keyword and the empty string, <em>false</em>, matching <code
  title="">false</code> and all other keywords (it's the <em>invalid
  value default</em>). It could further be thought of as having a
  third state <em>inherit</em>, which would be the default when the
  attribute is not specified at all (the <em>missing value
  default</em>), but for various reasons that isn't the way this
  specification actually defines it.</p>


  <h4 id="syntax-references">References</h4>

  <p>A <dfn>valid hashed ID reference</dfn> to an element of type <var
  title="">type</var> is a string consisting of a U+0023 NUMBER SIGN
  (<code title="">#</code>) character followed by a string which
  exactly matches the value of the <code title="attr-id">id</code>
  attribute of an element in the document with type <var
  title="">type</var>.</p>

  <p>The <dfn>rules for parsing a hashed ID reference</dfn> to an
  element of type <var title="">type</var> are as follows:</p>

  <ol>

   <li><p>If the string being parsed does not contain a U+0023 NUMBER
   SIGN character, or if the first such character in the string is the
   last character in the string, then return null and abort these
   steps.</p></li>

   <li><p>Let <var title="">s</var> be the string from the character
   immediately after the first U+0023 NUMBER SIGN character in the
   string being parsed up to the end of that string.</p></li>

   <li><p>Return the first element of type <var title="">type</var>
   that has an <code title="attr-id">id</code> or <code
   title="">name</code> attribute whose value <!-- Unicode,
   apparently: <annevk> seems IE might be Unicode case-insensitive for
   ID [and name] values (related to <map> anyway, and at least for the
   character &euml; --> case-insensitively matches <var
   title="">s</var>.</p></li>

  </ol>




  <h3>Documents and document fragments</h3>

  <h4>Semantics</h4>

  <p>Elements, attributes, and attribute values in HTML are defined
  (by this specification) to have certain meanings (semantics). For
  example, the <code>ol</code> element represents an ordered list, and
  the <code title="lang">lang</code> attribute represents the language
  of the content.</p>

  <p>Authors must only use elements, attributes, and attribute values
  for their appropriate semantic purposes.</p>

  <div class="example">
   <p>For example, the following document is non-conforming, despite
   being syntactically correct:</p>

   <pre>&lt;!DOCTYPE html&gt;
&lt;html lang="en-GB"&gt;
 &lt;head&gt; &lt;title&gt; Demonstration &lt;/title&gt; &lt;/head&gt;
 &lt;body&gt;
  &lt;table&gt;
   &lt;tr&gt; &lt;td&gt; My favourite animal is the cat. &lt;/td&gt; &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &mdash;&lt;a href="http://example.org/~ernest/"&gt;&lt;cite&gt;Ernest&lt;/cite&gt;&lt;/a&gt;,
     in an essay from 1992
    &lt;/td&gt;
   &lt;/tr&gt;
  &lt;/table&gt;
 &lt;/body&gt;
&lt;/html&gt;</pre>

   <p>...because the data placed in the cells is clearly not tabular
   data (and the <code>cite</code> element mis-used). A corrected
   version of this document might be:</p>

   <pre>&lt;!DOCTYPE html&gt;
&lt;html lang="en-GB"&gt;
 &lt;head&gt; &lt;title&gt; Demonstration &lt;/title&gt; &lt;/head&gt;
 &lt;body&gt;
  &lt;blockquote&gt;
   &lt;p&gt; My favourite animal is the cat. &lt;/p&gt;
  &lt;/blockquote&gt;
  &lt;p&gt;
   &mdash;&lt;a href="http://example.org/~ernest/"&gt;Ernest&lt;/a&gt;,
   in an essay from 1992
  &lt;/p&gt;
 &lt;/body&gt;
&lt;/html&gt;</pre>

   <p>This next document fragment, intended to represent the heading
   of a corporate site, is similarly non-conforming because the second
   line is not intended to be a heading of a subsection, but merely a
   subheading or subtitle (a subordinate heading for the same
   section).</p>

   <pre>&lt;body&gt;
 &lt;h1&gt;ABC Company&lt;/h1&gt;
 &lt;h2&gt;Leading the way in widget design since 1432&lt;/h2&gt;
 ...</pre>

   <p>The <code>header</code> element should be used in these kinds of
   situations:</p>

   <pre>&lt;body&gt;
 &lt;header&gt;
  &lt;h1&gt;ABC Company&lt;/h1&gt;
  &lt;h2&gt;Leading the way in widget design since 1432&lt;/h2&gt;
 &lt;/header&gt;
 ...</pre>

  </div>

  <p>Through scripting and using other mechanisms, the values of
  attributes, text, and indeed the entire structure of the document
  may change dynamically while a user agent is processing it. The
  semantics of a document at an instant in time are those represented
  by the state of the document at that instant in time, and the
  semantics of a document can therefore change over time. User agents
  must update their presentation of the document as this occurs.</p>

  <p class="example">HTML has a <code>progress</code> element that
  describes a progress bar. If its "value" attribute is dynamically
  updated by a script, the UA would update the rendering to show the
  progress changing.</p>


  <h4>Structure</h4>

  <p>All the elements in this specification have a defined content
  model, which describes what nodes are allowed inside the elements,
  and thus what the structure of an HTML document or fragment must
  look like. Authors must only put elements inside an element if that
  element allows them to be there according to its content model.</p>

  <p class="note">As noted in the conformance and terminology
  sections, for the purposes of determining if an element matches its
  content model or not, <span title="text
  node"><code>CDATASection</code> nodes in the DOM are treated as
  equivalent to <code>Text</code> nodes</span>, and <a
  href="#entity-references">entity reference nodes are treated as if
  they were expanded in place</a>.</p>

  <p>The <span title="space character">space characters</span> are
  always allowed between elements. User agents represent these
  characters between elements in the source markup as text nodes in
  the DOM.<!-- not a conf criteria since the parser now requires this
  --> Empty <span title="text node">text nodes</span> and <span
  title="text node">text nodes</span> consisting of just sequences of
  those characters are considered <dfn>inter-element
  whitespace</dfn>.</p>

  <p><span>Inter-element whitespace</span>, comment nodes, and
  processing instruction nodes must be ignored when establishing
  whether an element matches its content model or not, and must be
  ignored when following algorithms that define document and element
  semantics.</p>

  <p>An element <var title="">A</var> is said to be <dfn>preceded or
  followed</dfn> by a second element <var title="">B</var> if <var
  title="">A</var> and <var title="">B</var> have the same parent node
  and there are no other element nodes or text nodes (other than
  <span>inter-element whitespace</span>) between them.</p>

  <p>Authors must only use <span>elements in the HTML namespace</span>
  in the contexts where they are allowed, as defined for each
  element. For XML compound documents, these contexts could be inside
  elements from other namespaces, if those elements are defined as
  providing the relevant contexts.</p>

  <div class="example">
   <p>The SVG specification defines the SVG <code>foreignObject</code>
   element as allowing foreign namespaces to be included, thus
   allowing compound documents to be created by inserting subdocument
   content under that element. <em>This</em> specification defines the
   XHTML <code>html</code> element as being allowed where subdocument
   fragments are allowed in a compound document. Together, these two
   definitions mean that placing an XHTML <code>html</code> element as
   a child of an SVG <code>foreignObject</code> element is
   conforming.</p>
  </div>



  <h4>Kinds of content</h4>

  <p>Each element in HTML falls into zero or more categories that
  group elements with similar characteristics together. The following
  categories are used in this specification:</p>

  <ul class="brief">
   <li><span>Metadata content</span></li>
   <li><span>Flow content</span></li>
   <li><span>Sectioning content</span></li>
   <li><span>Heading content</span></li>
   <li><span>Phrasing content</span></li>
   <li><span>Embedded content</span></li>
   <li><span>Form control content</span></li>
   <li><span>Interactive content</span></li>
<!--
   <li><span>Form content</span></li> XXX "Form control elements"
-->
  </ul>

  <!-- XXX xref check that all the above got a section defining them,
  however briefly -->

  <!-- XXX check that the element definitions also link to those
  sections -->

  <!-- XXX list all the elements for each kind of element in the
  sections below. -->

  <p>Some elements have unique requirements and do not fit into any
  particular category.</p>


  <h5>Metadata content</h5>

  <p><dfn>Metadata content</dfn> is content that sets up the
  presentation or behaviour of the rest of the content, or that sets
  up the relationship of the document with other documents, or that
  conveys other "out of band" information.</p>

  <p>Elements from other namespaces whose semantics are primarily
  metadata-related (e.g. RDF) are also <span>metadata
  content</span>.</p>


  <h5>Flow content</h5>

  <p>Most elements that are used in the body of documents and
  applications are categorised as <dfn>flow content</dfn>.</p>

  <p>As a general rule, elements whose content model allows any
  <span>flow content</span> should have either at least one
  descendant text node that is not <span>inter-element
  whitespace</span>, or at least one descendant element node that is
  <span>embedded content</span>. For the purposes of this requirement,
  <code>del</code> elements and their descendants must not be
  counted as contributing to the ancestors of the <code>del</code>
  element.</p>

  <p>This requirement is not a hard requirement, however, as there are
  many cases where an element can be empty legitimately, for example
  when it is used as a placeholder which will later be filled in by a
  script, or when the element is part of a template and would on most
  pages be filled in but on some pages is not relevant.</p>


  <h5>Sectioning content</h5>

  <p><dfn>Sectioning content</dfn> is content that defines the scope
  of <span title="heading content">headers</span>, <span
  title="footer">footers</span>, and <span title="address">contact
  information</span>.</p>

  <p>Each <span>sectioning content</span> element potentially has a
  heading. See the section on <span>headings and sections</span> for
  further details.</p>


  <h5>Heading content</h5>

  <p><dfn>Heading content</dfn> defines the header of a section
  (whether explicitly marked up using <span>sectioning content</span>
  elements, or implied by the heading content itself).</p>


  <h5>Phrasing content</h5>

  <p><dfn>Phrasing content</dfn> is the text of the document, as well
  as elements that mark up that text at the intra-paragraph
  level. Runs of <span>phrasing content</span> form <span
  title="paragraph">paragraphs</span>.</p>

  <p>All <span>phrasing content</span> is also <span>flow
  content</span>. Any content model that expects <span>flow
  content</span> also expects <span>phrasing content</span>.</p>

  <p>As a general rule, elements whose content model allows any
  <span>phrasing content</span> should have either at least one
  descendant text node that is not <span>inter-element
  whitespace</span>, or at least one descendant element node that is
  <span>embedded content</span>. For the purposes of this requirement,
  nodes that are descendants of <code>del</code> elements must not be
  counted as contributing to the ancestors of the <code>del</code>
  element.</p>

  <p class="note">Most elements that are categorised as phrasing
  content can only contain elements that are themselves categorised as
  phrasing content, not any flow content.</p>

  <p>Text nodes that are not <span>inter-element whitespace</span> are
  <span>phrasing content</span>.</p>


  <h5>Embedded content</h5>

  <p><dfn>Embedded content</dfn> is content that imports another
  resource into the document, or content from another vocabulary that
  is inserted into the document.</p>

  <p>All <span>embedded content</span> is also <span>phrasing
  content</span> (and <span>flow content</span>). Any content model
  that expects <span>phrasing content</span> (or <span>flow
  content</span>) also expects <span>embedded content</span>.</p>

  <p>Elements that are from namespaces other than the <span>HTML
  namespace</span> and that convey content but not metadata, are
  <span>embedded content</span> for the purposes of the content models
  defined in this specification. (For example, MathML, or SVG.)</p>

  <p>Some embedded content elements can have <dfn>fallback
  content</dfn>: content that is to be used when the external resource
  cannot be used (e.g. because it is of an unsupported format). The
  element definitions state what the fallback is, if any.</p>


  <h5>Interactive content</h5>

  <!-- Don't change the above <dfn> or the text below without checking
  all cross-references. Some of them refer specifically to the
  activation behavior stuff. -->

  <p class="big-issue">Parts of this section should eventually be
  moved to DOM3 Events.</p> <!-- but see comment above -->

<!--
TESTS:
http://software.hixie.ch/utilities/js/live-dom-viewer/?%3C%21DOCTYPE%20html%3E%0A%3Cp%20tabindex%3D1%3Etest%20%3Ca%20href%3D%22%22%3E%20%3Cem%3Etest%3C/em%3E%20%3C/a%3E%0A%3Cscript%3E%0A%20function%20test%20%28e%29%20%7B%20w%28e.type%20+%20%27%20on%20%27%20+%20e.target.tagName%20+%20%27%20through%20%27%20+%20e.currentTarget.tagName%29%3B%20%7D%0A%20document.getElementsByTagName%28%27a%27%29%5B0%5D.addEventListener%28%27click%27%2C%20test%2C%20false%29%3B%0A%20document.getElementsByTagName%28%27a%27%29%5B0%5D.addEventListener%28%27DOMActivate%27%2C%20test%2C%20false%29%3B%0A%20document.getElementsByTagName%28%27p%27%29%5B0%5D.addEventListener%28%27click%27%2C%20test%2C%20false%29%3B%0A%20document.getElementsByTagName%28%27p%27%29%5B0%5D.addEventListener%28%27DOMActivate%27%2C%20test%2C%20false%29%3B%0A%3C/script%3E%0A
http://software.hixie.ch/utilities/js/live-dom-viewer/?%3C%21DOCTYPE%20HTML%3E%0A%3Ca%20href%3Dhttp%3A//google.com/%20target%3Da%3EA%3C/a%3E%3Ca%20href%3Dhttp%3A//yahoo.com/%20target%3Db%3EB%3C/a%3E%3Cbr%3E%0A%3Ciframe%20name%3Da%3E%3C/iframe%3E%3Ciframe%20name%3Db%3E%3C/iframe%3E%0A%3Cscript%3E%0A%20var%20a%20%3D%20document.getElementsByTagName%28%27a%27%29%5B0%5D%3B%0A%20var%20b%20%3D%20document.getElementsByTagName%28%27a%27%29%5B1%5D%3B%0A%20a.appendChild%28b%29%3B%0A%3C/script%3E
http://software.hixie.ch/utilities/js/live-dom-viewer/?%3C%21DOCTYPE%20HTML%3E%0A%3Cform%20action%3D%22http%3A//google.com/%22%20onsubmit%3D%22w%28%27onsubmit%27%29%22%3E%3Cem%3EA%3C/em%3E%3C/form%3E%0A%3Cscript%3E%0Adocument.getElementsByTagName%28%27form%27%29%5B0%5D.attachEvent%28%27onsubmit%27%2C%20function%20%28%29%20%7B%20w%28%27submit%20fired%27%29%20%7D%29%3B%0Adocument.getElementsByTagName%28%27form%27%29%5B0%5D.fireEvent%28%27onsubmit%27%29%3B%0A%3C/script%3E
http://software.hixie.ch/utilities/js/live-dom-viewer/?%3C%21DOCTYPE%20HTML%3E%0A%3Cform%20action%3D%22http%3A//google.com/%22%3EX%3C/form%3E%0A%3Cscript%3E%0Avar%20evt%20%3D%20document.createEvent%28%22Events%22%29%3B%0Aevt.initEvent%28%22submit%22%2C%20true%2C%20true%29%3B%0Adocument.getElementsByTagName%28%27form%27%29%5B0%5D.dispatchEvent%28evt%29%3B%0A%3C/script%3E
-->

  <p><dfn>Interactive content</dfn> is content that is specifically
  intended for user interaction.</p>

  <p>Certain elements in HTML can be activated, for instance
  <code>a</code> elements, <code>button</code> elements, or
  <code>input</code> elements when their <code>type</code> attribute
  is set to <code>radio</code>. Activation of those elements can
  happen in various (UA-defined) ways, for instance via the mouse or
  keyboard.</p>

  <p>When activation is performed via some method other than clicking
  the pointing device, the default action of the event that triggers
  the activation must, instead of being activating the element
  directly, be to <span>fire a <code title="">click</code>
  event</span> on the same element.</p>

  <p>The default action of this <code title="event-click">click</code>
  event, or of the real <code title="event-click">click</code> event
  if the element was activated by clicking a pointing device, must be
  to <span title="fire a DOMActivate event">fire a further <code
  title="event-DOMActivate">DOMActivate</code> event</span> at the
  same element, whose own default action is to go through all the
  elements the <code title="event-DOMActivate">DOMActivate</code>
  event bubbled through (starting at the target node and going towards
  the <code>Document</code> node), looking for an element with an
  <span>activation behavior</span>; the first element, in reverse tree
  order, to have one, must have its activation behavior executed.</p>

  <p class="note">The above doesn't happen for arbitrary synthetic
  events dispatched by author script. However, the <code
  title="dom-click">click()</code> method can be used to make it
  happen programmatically.</p>

  <p>For certain form controls, this process is complicated further by
  <a
  href="http://www.whatwg.org/specs/web-forms/current-work/#the-click">changes
  that must happen around the click event</a>. <a
  href="#refsWF2">[WF2]</a></p> <!-- XXX WF2: when this is merged into
  this spec, update xrefs -->

  <p class="note">Most interactive elements have content models that
  disallow nesting interactive elements.</p>


  <h4>Transparent content models</h4>

  <p>Some elements are described as <dfn>transparent</dfn>; they have
  "transparent" as their content model. Some elements are described as
  <dfn>semi-transparent</dfn>; this means that part of their content
  model is "transparent" but that is not the only part of the content
  model that must be satisfied.</p>

  <p>When a content model includes a part that is "transparent", those
  parts must only contain content that would still be conformant if
  all transparent and semi-transparent elements in the tree were
  replaced, in their parent element, by the children in the
  "transparent" part of their content model, retaining order.</p>

  <p>When a transparent or semi-transparent element has no parent,
  then the part of its content model that is "transparent" must
  instead be treated as accepting any <span>flow content</span>.</p>


  <h4>Paragraphs</h4>

  <p>A <dfn>paragraph</dfn> is typically a block of text with one or more
  sentences that discuss a particular topic, as in typography, but can
  also be used for more general thematic grouping. For instance, an
  address is also a paragraph, as is a part of a form, a byline, or a
  stanza in a poem.</p>

  <p>Paragraphs in <span>flow content</span> are defined relative to
  what the document looks like without the <code>ins</code> and
  <code>del</code> elements complicating matters. Let <var
  title="">view</var> be a view of the DOM that replaces all
  <code>ins</code> and <code>del</code> elements in the document with
  their contents. Then, in <var title="">view</var>, for each run of
  <span>phrasing content</span> uninterrupted by other types of
  content, in an element that accepts content other than
  <span>phrasing content</span>, let <var title="">first</var> be the
  first node of the run, and let <var title="">last</var> be the last
  node of the run. For each run, a paragraph exists in the original
  DOM from immediately before <var title="">first</var> to immediately
  after <var title="">last</var>. (Paragraphs can thus span across
  <code>ins</code> and <code>del</code> elements.)</p>

  <p>A <span>paragraph</span> is also formed by <code>p</code>
  elements.</p>

  <p class="note">The <code>p</code> element can be used to wrap
  individual paragraphs when there would otherwise not be any content
  other than phrasing content to separate the paragraphs from each
  other.</p>

  <div class="example">

   <p>In the following example, there are two paragraphs in a
   section. There is also a header, which contains phrasing content
   that is not a paragraph. Note how the comments and
   <span>intra-element whitespace</span> do not form paragraphs.</p>

   <pre>&lt;section>
  &lt;h1>Example of paragraphs&lt;/h1>
  This is the &lt;em>first&lt;/em> paragraph in this example.
  &lt;p>This is the second.&lt;/p>
  &lt;!-- This is not a paragraph. -->
&lt;/section></pre>

   <p>The following example takes that markup and puts
   <code>ins</code> and <code>del</code> elements around some of the
   markup to show that the text was changed (though in this case, the
   changes don't really make much sense, admittedly). Notice how this
   example has exactly the same paragraphs as the previous one,
   despite the <code>ins</code> and <code>del</code> elements.</p>

   <pre>&lt;section>
  &lt;ins>&lt;h1>Example of paragraphs&lt;/h1>
  This is the &lt;em>first&lt;/em> paragraph in&lt;/ins> this example&lt;del>.
  &lt;p>This is the second.&lt;/p>&lt;/del>
  &lt;!-- This is not a paragraph. -->
&lt;/section></pre>

  </div>


  <h3>Global attributes</h3>

  <p>The following attributes are common to and may be specified on
  all <span>HTML elements</span> (even those not defined in this
  specification):</p>

  <dl class="element">
   <dt>Global attributes:</dt>
   <dd><code title="attr-class">class</code></dd>
   <dd><code title="attr-contenteditable">contenteditable</code></dd>
   <dd><code title="attr-contextmenu">contextmenu</code></dd>
   <dd><code title="attr-dir">dir</code></dd>
   <dd><code title="attr-draggable">draggable</code></dd>
   <dd><code title="attr-id">id</code></dd>
   <dd><code title="attr-irrelevant">irrelevant</code></dd>
   <dd><code title="attr-lang">lang</code></dd>
   <dd><code title="attr-ref">ref</code></dd>
   <dd><code title="attr-registrationmark">registrationmark</code></dd>
   <dd><code title="attr-tabindex">tabindex</code></dd>
   <dd><code title="attr-template">template</code></dd>
   <dd><code title="attr-title">title</code></dd>
  </dl>

  <p>In addition, the following <span>event handler content
  attributes</span> may be specified on any <span>HTML
  element</span>:</p>

  <dl class="element">
   <dt>Event handler content attributes:</dt>
   <dd><code title="handler-onabort">onabort</code></dd>
   <dd><code title="handler-onbeforeunload">onbeforeunload</code></dd>
   <dd><code title="handler-onblur">onblur</code></dd>
   <dd><code title="handler-onchange">onchange</code></dd>
   <dd><code title="handler-onclick">onclick</code></dd>
   <dd><code title="handler-oncontextmenu">oncontextmenu</code></dd>
   <dd><code title="handler-ondblclick">ondblclick</code></dd>
   <dd><code title="handler-ondrag">ondrag</code></dd>
   <dd><code title="handler-ondragend">ondragend</code></dd>
   <dd><code title="handler-ondragenter">ondragenter</code></dd>
   <dd><code title="handler-ondragleave">ondragleave</code></dd>
   <dd><code title="handler-ondragover">ondragover</code></dd>
   <dd><code title="handler-ondragstart">ondragstart</code></dd>
   <dd><code title="handler-ondrop">ondrop</code></dd>
   <dd><code title="handler-onerror">onerror</code></dd>
   <dd><code title="handler-onfocus">onfocus</code></dd>
   <dd><code title="handler-onkeydown">onkeydown</code></dd>
   <dd><code title="handler-onkeypress">onkeypress</code></dd>
   <dd><code title="handler-onkeyup">onkeyup</code></dd>
   <dd><code title="handler-onload">onload</code></dd>
   <dd><code title="handler-onmessage">onmessage</code></dd>
   <dd><code title="handler-onmousedown">onmousedown</code></dd>
   <dd><code title="handler-onmousemove">onmousemove</code></dd>
   <dd><code title="handler-onmouseout">onmouseout</code></dd>
   <dd><code title="handler-onmouseover">onmouseover</code></dd>
   <dd><code title="handler-onmouseup">onmouseup</code></dd>
   <dd><code title="handler-onmousewheel">onmousewheel</code></dd>
   <dd><code title="handler-onresize">onresize</code></dd>
   <dd><code title="handler-onscroll">onscroll</code></dd>
   <dd><code title="handler-onselect">onselect</code></dd>
   <dd><code title="handler-onsubmit">onsubmit</code></dd>
   <dd><code title="handler-onunload">onunload</code></dd>
  </dl>


  <h4>The <dfn title="attr-id"><code>id</code></dfn> attribute</h4>

  <p>The <code title="attr-id">id</code> attribute represents its
  element's unique identifier. The value must be unique in the subtree
  within which the element finds itself and must contain at least one
  character. The value must not contain any <span title="space
  character">space characters</span>.</p>

  <!-- space characters are disallowed because space-separated lists
  of IDs otherwise would not be able to reach all valid IDs -->

  <p>If the value is not the empty string, user agents must associate
  the element with the given value (exactly, including any space
  characters) for the purposes of ID matching within the subtree the
  element finds itself (e.g. for selectors in CSS or for the
  <code>getElementById()</code> method in the DOM).</p>

  <p>Identifiers are opaque strings. Particular meanings should not be
  derived from the value of the <code title="attr-id">id</code>
  attribute.</p>

  <p>This specification doesn't preclude an element having multiple
  IDs, if other mechanisms (e.g. DOM Core methods) can set an
  element's ID in a way that doesn't conflict with the <code
  title="attr-id">id</code> attribute.</p>

  <p>The <dfn title="dom-id"><code>id</code></dfn> DOM attribute must
  <span>reflect</span> the <code title="attr-id">id</code> content
  attribute.</p>


  <h4>The <dfn title="attr-title"><code>title</code></dfn> attribute</h4>

  <p>The <code title="attr-title">title</code> attribute represents
  advisory information for the element, such as would be appropriate
  for a tooltip. On a link, this could be the title or a description
  of the target resource; on an image, it could be the image credit or
  a description of the image; on a paragraph, it could be a footnote
  or commentary on the text; on a citation, it could be further
  information about the source; and so forth. The value is text.</p>

  <p>If this attribute is omitted from an element, then it implies
  that the <code title="attr-title">title</code> attribute of the
  nearest ancestor <span title="HTML elements">HTML element</span>
  with a <code title="attr-title">title</code> attribute set is also
  relevant to this element. Setting the attribute overrides this,
  explicitly stating that the advisory information of any ancestors is
  not relevant to this element.  Setting the attribute to the empty
  string indicates that the element has no advisory information.</p>

  <p>If the <code title="attr-title">title</code> attribute's value
  contains U+000A LINE FEED (LF) characters, the content is split into
  multiple lines. Each U+000A LINE FEED (LF) character represents a
  line break.</p>

  <p>Some elements, such as <code>link</code> and <code>dfn</code>,
  define additional semantics for the <code
  title="attr-title">title</code> attribute beyond the semantics
  described above.</p>

  <p>The <dfn title="dom-title"><code>title</code></dfn> DOM attribute
  must <span>reflect</span> the <code title="attr-title">title</code>
  content attribute.</p>


  <h4>The <dfn title="attr-lang"><code>lang</code></dfn> (HTML only)
  and <dfn title="attr-xml-lang"><code>xml:lang</code></dfn> (XML
  only) attributes</h4>

  <p>The <code title="attr-lang">lang</code> attribute specifies the
  primary <dfn>language</dfn> for the element's contents and for any
  of the element's attributes that contain text. Its value must be a
  valid RFC 3066 language code, or the empty string. <a
  href="#refsRFC3066">[RFC3066]</a></p>

  <p>The <code title="attr-xml-lang">xml:lang</code> attribute is
  defined in XML. <a href="#refsXML">[XML]</a></p>

  <p>If these attributes are omitted from an element, then it implies
  that the language of this element is the same as the language of the
  parent element. Setting the attribute to the empty string indicates
  that the primary language is unknown.</p>

  <p>The <code title="attr-lang">lang</code> attribute may only be
  used on elements of <span>HTML documents</span>.  Authors must not
  use the <code title="attr-lang">lang</code> attribute in <span>XML
  documents</span>.</p>

  <p>The <code title="attr-xml-lang">xml:lang</code> attribute may
  only be used on elements of <span>XML documents</span>.  Authors
  must not use the <code title="attr-xml-lang">xml:lang</code>
  attribute in <span>HTML documents</span>.</p> <!-- technically this
  is redundant with the XML spec -->

  <p>To determine the language of a node, user agents must look at the
  nearest ancestor element (including the element itself if the node
  is an element) that has an <code
  title="attr-xml-lang">xml:lang</code> attribute set or is an <span
  title="HTML elements">HTML element</span> and has a <code
  title="attr-lang">lang</code> attribute set. That attribute
  specifies the language of the node.</p>

  <p>If both the <code title="attr-xml-lang">xml:lang</code> attribute
  and the <code title="attr-lang">lang</code> attribute are set on an
  element, user agents must use the <code
  title="attr-xml-lang">xml:lang</code> attribute, and the <code
  title="attr-lang">lang</code> attribute must be <span
  title="ignore">ignored</span> for the purposes of determining the
  element's language.</p>

  <p>If no explicit language is given for the <span>root
  element</span>, then language information from a higher-level
  protocol (such as HTTP), if any, must be used as the final
  fallback language. In the absence of any language information, the
  default value is unknown (the empty string).</p>

  <p>User agents may use the element's language to determine proper
  processing or rendering (e.g. in the selection of appropriate
  fonts or pronounciations, or for dictionary selection). <!--User
  agents must not use the element's language to determine text
  directionality. (commented out because text directionality is a
  rendering-level concern.)--></p>

  <p>The <dfn title="dom-lang"><code>lang</code></dfn> DOM attribute
  must <span>reflect</span> the <code title="attr-lang">lang</code>
  content attribute.</p>


  <h4>The <dfn title="attr-dir"><code>dir</code></dfn> attribute</h4>

  <p>The <code title="attr-dir">dir</code> attribute specifies the
  element's text directionality. The attribute is an <span>enumerated
  attribute</span> with the keyword <code title="">ltr</code> mapping
  to the state <em>ltr</em>, and the keyword <code title="">rtl</code>
  mapping to the state <em>rtl</em>. The attribute has no
  defaults.</p>

  <p>If the attribute has the state <em>ltr</em>, the element's
  directionality is left-to-right. If the attribute has the state
  <em>rtl</em>, the element's directionality is
  right-to-left. Otherwise, the element's directionality is the same
  as its parent element, or <em>ltr</em> if there is no parent
  element.</p>

  <p>The processing of this attribute depends on the presentation
  layer. For example, CSS 2.1 defines a mapping from this attribute to
  the CSS 'direction' and 'unicode-bidi' properties, and defines
  rendering in terms of those properties.</p>

  <p>The <dfn title="dom-dir"><code>dir</code></dfn> DOM attribute on
  an element must <span>reflect</span> the <code
  title="attr-dir">dir</code> content attribute of that element,
  <span>limited to only known values</span>.</p>

  <p>The <dfn title="dom-document-dir"><code>dir</code></dfn> DOM
  attribute on <code>HTMLDocument</code> objects must
  <span>reflect</span> the <code title="attr-dir">dir</code> content
  attribute of <span>the <code>html</code> element</span>, if any,
  <span>limited to only known values</span>. If there is no such
  element, then the attribute must return the empty string and do
  nothing on setting.</p>


  <h4 id="classes">The <dfn title="attr-class"><code>class</code></dfn> attribute</h4>

  <p>Every <span title="HTML elements">HTML element</span> may have a
  <code title="attr-class">class</code> attribute specified.</p>

  <p>The attribute, if specified, must have a value that is an
  <span>unordered set of unique space-separated tokens</span>
  representing the various classes that the element belongs to.</p>

  <p>The classes that an <span title="HTML elements">HTML
  element</span> has assigned to it consists of all the classes
  returned when the value of the <code title="attr-class">class</code>
  attribute is <span title="split a string on spaces">split on
  spaces</span>.</p>

  <p class="note">Assigning classes to an element affects class
  matching in selectors in CSS, the <code
  title="dom-document-getElementsByClassName">getElementsByClassName()</code>
  method in the DOM, and other such features.</p>

  <p>Authors may use any value in the <code
  title="attr-class">class</code> attribute, but are encouraged to use
  the values that describe the nature of the content, rather than
  values that describe the desired presentation of the
  content.</p>

  <p>The <dfn title="dom-className"><code>className</code></dfn> and
  <dfn title="dom-classList"><code>classList</code></dfn> DOM
  attributes must both <span>reflect</span> the <code
  title="attr-class">class</code> content attribute.</p>


  <h4>The <dfn title="attr-irrelevant"><code>irrelevant</code></dfn> attribute</h4>

  <p>All elements may have the <code
  title="attr-irrelevant">irrelevant</code> content attribute
  set. The <code title="attr-irrelevant">irrelevant</code> attribute
  is a <span>boolean attribute</span>. When specified on an element,
  it indicates that the element is not yet, or is no longer,
  relevant. User agents should not render elements that have the <code
  title="attr-irrelevant">irrelevant</code> attribute specified.</p>

  <div class="example">

   <p>In the following skeletal example, the attribute is used to hide
   the Web game's main screen until the user logs in:</p>

   <pre>  &lt;h1>The Example Game&lt;/h1>
  &lt;section id="login">
   &lt;h2>Login&lt;/h2>
   &lt;form>
    ...
    &lt;!-- calls login() once the user's credentials have been checked -->
   &lt;/form>
   &lt;script>
    function login() {
      // switch screens
      document.getElementById('login').irrelevant = true;
      document.getElementById('game').irrelevant = false;
    }
   &lt;/script>
  &lt;/section>
  &lt;section id="game" irrelevant>
   ...
  &lt;/section></pre>

  </div>


  <p>The <code title="attr-irrelevant">irrelevant</code> attribute
  must not be used to hide content that could legitimately be shown in
  another presentation. For example, it is incorrect to use <code
  title="attr-irrelevant">irrelevant</code> to hide panels in a
  tabbed dialog, because the tabbed interface is merely a kind of
  overflow presentation &mdash; showing all the form controls in one
  big page with a scrollbar would be equivalent, and no less
  correct.</p>

  <p>Elements in a section hidden by the <code
  title="attr-irrelevant">irrelevant</code> attribute are still
  active, e.g. scripts and form controls in such sections still render
  execute and submit respectively. Only their presentation to the user
  changes.</p>

  <p>The <dfn title="dom-irrelevant"><code>irrelevant</code></dfn> DOM
  attribute must <span>reflect</span> the content attribute of the
  same name.</p>


  <h3><dfn>Interaction</dfn></h3>

<!--
ELEMENT
           attribute long <span title="dom-tabindex">tabIndex</span>;
  void <span title="dom-click">click</span>();
  void <span title="dom-focus">focus</span>();
  void <span title="dom-blur">blur</span>();
  void <span title="dom-scrollIntoView">scrollIntoView</span>();
  void <span title="dom-scrollIntoView">scrollIntoView</span>(in boolean top);

DOCUMENT
  readonly attribute <span>Element</span> <span title="dom-document-activeElement">activeElement</span>;
  readonly attribute boolean <span title="dom-document-hasFocus">hasFocus</span>;
-->


  <h4>Activation</h4>

  <p>The <dfn title="dom-click">click()</dfn> method must <span>fire a
  <code>click</code> event</span> at the element, whose default action
  is the <span title="fire a DOMActivate event">firing of a further
  <code title="event-DOMActivate">DOMActivate</code> event</span> at
  the same element, whose own default action is to go through all the
  elements the <code title="event-DOMActivate">DOMActivate</code>
  event bubbled through (starting at the target node and going towards
  the <code>Document</code> node), looking for an element with an
  <span>activation behavior</span>; the first element, in reverse tree
  order, to have one, must have its activation behavior executed.</p>


  <h4>Focus</h4>

  <p>When an element is <em>focused</em>, key events received by the
  document must be targeted at that element. There is always an
  element focused; in the absence of other elements being focused, the
  document's root element is it.</p>

  <p>Which element within a document currently has focus is
  independent of whether or not the document itself has the <em>system
  focus</em>.</p>

  <p>Some focusable elements might take part in <em>sequential focus
  navigation</em>.</p>


  <h5 id="focus-management">Focus management</h5>

  <p>The <dfn title="dom-focus"><code>focus()</code></dfn> and <dfn
  title="dom-blur"><code>blur()</code></dfn> methods must focus and
  unfocus the element respectively, if the element is focusable.</p>

  <p>Some elements, most notably <code>area</code>, can correspond to
  more than one distinct focusable area. When such an element is
  focused using the <code title="dom-focus">focus()</code> method, the
  first such region in tree order is the one that must be focused.</p>

  <p class="big-issue">Well that clearly needs more.</p>
  <!-- XXX e.g. should the click, focus, blur methods be recursible? -->

  <p>The <dfn
  title="dom-document-activeElement"><code>activeElement</code></dfn>
  attribute must return the element in the document that has focus. If
  no element specifically has focus, this must return <span>the
  <code>body</code> element</span>.</p>

  <p>The <dfn
  title="dom-document-hasFocus"><code>hasFocus</code></dfn> attribute
  must return true if the document, one of its nested <span
  title="browsing context">browsing contexts</span>, or any element in
  the document or its browsing contexts currently has the system
  focus.</p>


  <h5>Sequential focus navigation</h5>

  <p class="issue">This section on the <code>tabindex</code> attribute
  needs to be checked for backwards-compatibility.</p>

  <p>The <dfn title="attr-tabindex"><code>tabindex</code></dfn>
  attribute specifies the relative order of elements for the purposes
  of sequential focus navigation. The name "tab index" comes from the
  common use of the "tab" key to navigate through the focusable
  elements. The term "tabbing" refers to moving forward through the
  focusable elements.</p>

  <p>The <code title="attr-tabindex">tabindex</code> attribute, if
  specified, must have a value that is a <span>valid
  integer</span>.</p>

  <p>If the attribute is specified, it must be parsed using the
  <span>rules for parsing integers</span>. If parsing the value
  returns an error, the attribute is ignored for the purposes of focus
  management (as if it wasn't specified).</p>

  <p>A positive integer or zero specifies the index of the element in
  the current scope's tab order. Elements with the same index are
  sorted in <span>tree order</span> for the purposes of tabbing.</p>

  <p id="negative-tabindex">A negative integer specifies that the
  element should be removed from the tab order. If the element does
  normally take focus, it may still be focused using other means (e.g.
  it could be focused by a click).</p>

  <p>If the attribute is absent (or invalid), then the user agent must
  treat the element as if it had the value 0 or the value -1, based on
  platform conventions.</p>

  <p class="example">For example, a user agent might default
  <code>textarea</code> elements to 0, and <code>button</code>
  elements to -1, making text fields part of the tabbing cycle but
  buttons not.</p>

  <p>When an element that does not normally take focus (i.e. whose
  default value would be -1) has the <code
  title="attr-tabindex">tabindex</code> attribute specified with a
  positive value, then it should be added to the tab order and should
  be made focusable. When focused, the element matches the CSS
  <code>:focus</code> pseudo-class and key events are dispatched on
  that element in response to keyboard input.</p>

  <p>The <dfn title="dom-tabIndex"><code>tabIndex</code></dfn> DOM
  attribute reflects the value of the <code
  title="attr-tabIndex">tabIndex</code> content attribute. If the
  attribute is not present (or has an invalid value) then the DOM
  attribute must return the UA's default value for that element, which
  will be either 0 (for elements in the tab order) or -1 (for elements
  not in the tab order).</p>



<!--XXX
  <h5>The <dfn><code>DocumentFocus</code></dfn> interface</h5>

  <p>The <code>DocumentFocus</code> interface contains methods for
  moving focus around the document. It can be obtained from objects
  that implement the <code>Document</code> interface using
  binding-specific casting methods.</p>

  <pre class="idl">interface <dfn>DocumentFocus</dfn> {
  void moveFocusForward();
  void moveFocusBackward();
  void moveFocusUp();
  void moveFocusRight();
  void moveFocusDown();
  void moveFocusLeft();
};</pre>

  <p>The <dfn><code>currentFocus</code></dfn> attribute returns the
  element to which key events will be sent when the document receives
  key events.</p>

  <p>The <dfn><code>moveFocusForward</code></dfn> method uses the
  <code>'nav-index'</code> property and the <code>tabindex</code>
  attribute to find the next focusable element and focuses it.</p>

  <p>The <dfn><code>moveFocusBackward</code></dfn> method uses the
  <code>'nav-index'</code> property and the <code>tabindex</code>
  attribute to find the previous focusable element and focuses
  it.</p>

  <p>The <dfn><code>moveFocusUp</code></dfn> method uses the
  <code>'nav-up'</code> property and the <code>tabindex</code>
  attribute to find an appropriate focusable element and focuses
  it.</p>

  <p>In a similar manner, the <dfn><code>moveFocusRight</code></dfn>,
  <dfn><code>moveFocusDown</code></dfn>, and
  <dfn><code>moveFocusLeft</code></dfn> methods use the
  <code>'nav-right'</code>, <code>'nav-down'</code>, and
  <code>'nav-left'</code> properties (respectively), and the
  <code>tabindex</code> attribute, to find an appropriate focusable
  element and focus it.</p>

  <p>The <code>'nav-index'</code>, <code>'nav-up'</code>,
  <code>'nav-right'</code>, <code>'nav-down'</code>, and
  <code>'nav-left'</code> properties are defined in <a
  href="#refsCSS3UI">[CSS3UI]</a>.</p>

Other things to look at are IE's focus APIs (document.activeElement,
document.hasFocus, HTMLElement.setActive(), onBeforeActivate,
onActivate, onBeforeDeactivate, onDeactivate, document.hasFocus):
   https://bugzilla.mozilla.org/show_bug.cgi?id=296471
   https://bugzilla.mozilla.org/show_bug.cgi?id=296469
   http://msdn.microsoft.com/workshop/author/dhtml/reference/properties/activeelement.asp
   http://msdn.microsoft.com/workshop/author/dhtml/reference/methods/setactive.asp
   http://msdn.microsoft.com/workshop/author/dhtml/reference/events/onbeforeactivate.asp
   http://msdn.microsoft.com/workshop/author/dhtml/reference/methods/focus.asp
-->


  <h4>Scrolling elements into view</h4>

  <p>The <dfn title="dom-scrollIntoView"><code>scrollIntoView([<var
  title="">top</var>])</code></dfn> method, when called, must cause
  the element on which the method was called to have the attention of
  the user called to it.</p>

  <p class="note">In a speech browser, this could happen by having the
  current playback position move to the start of the given
  element.</p>

  <p>In visual user agents, if the argument is present and has the
  value false, the user agent should scroll the element into view such
  that both the bottom and the top of the element are in the viewport,
  with the bottom of the element aligned with the bottom of the
  viewport. If it isn't possible to show the entire element in that
  way, or if the argument is omitted or is true, then the user agent
  must instead simply align the top of the element with the top of
  the viewport.</p>

  <p>Non-visual user agents may ignore the argument, or may treat it
  in some media-specific manner most useful to the user.</p>

  <!-- XXX maybe this should move to CSSOM -->




  <h3>The root element</h3>

  <h4>The <dfn><code>html</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd>None.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>As the root element of a document.</dd>
   <dd>Wherever a subdocument fragment is allowed in a compound document.</dd>
   <dt>Content model:</dt>
   <dd>A <code>head</code> element followed by a <code>body</code> element.</dd>
   <dt>Element-specific attributes:</dt>
   <dd><code title="attr-html-manifest">manifest</code></dd>
   <!--<dd><code title="attr-html-xmlns">xmlns</code></dd>-->
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
<!--
   <dd>
    <pre class="idl">interface <dfn>HTMLHtmlElement</dfn> : <span>HTMLElement</span> {
};</pre>
   </dd>
-->
  </dl>

  <p>The <code>html</code> element represents the root of an HTML
  document.</p>

  <p>The <dfn title="attr-html-manifest"><code>manifest</code></dfn>
  attribute gives the address of the document's <span>application
  cache</span> <span
  title="concept-appcache-manifest">manifest</span>, if there is
  one. If the attribute is present, the attribute's value must be a
  valid URI (or IRI).</p>

  <p>The <code title="attr-html-manifest">manifest</code> attribute
  only <span title="concept-appcache-init-with-attribute">has an
  effect</span> during the early stages of document load. Changing the
  attribute dynamically thus has no effect (and thus, no DOM API is
  provided for this attribute). Furthermore, as it is processed before
  any <code>base</code> elements are seen, its value is not subject to
  being made relative to any base URI.</p>

  <p>Though it has absolutely no effect and no meaning, the
  <code>html</code> element, in <span>HTML documents</span>, may have
  an <code title="">xmlns</code> attribute specified, if, and only if,
  it has the exact value
  "<code>http://www.w3.org/1999/xhtml</code>". This does not apply to
  <span>XML documents</span>.</p>

  <p class="note">In HTML, the <code title="">xmlns</code> attribute
  has absolutely no effect. It is basically a talisman. It is allowed
  merely to make migration to and from XHTML mildly easier. When
  parsed by an <span>HTML parser</span>, the attribute ends up in the
  null namespace, not the "<code>http://www.w3.org/2000/xmlns/</code>"
  namespace like namespace declaration attributes in XML do.</p>

  <p class="note">In XML, an <code title="">xmlns</code> attribute is
  part of the namespace declaration mechanism, and an element cannot
  actually have an <code title="">xmlns</code> attribute in the null
  namespace specified.</p>


  <h3>Document metadata</h3>

  <h4>The <dfn><code>head</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd>None.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>As the first element in an <code>html</code> element.</dd>
   <dt>Content model:</dt>
   <dd>One or more elements of <span>metadata content</span>, of which exactly one is a <code>title</code> element.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>head</code> element collects the document's
  metadata.</p>


  <h4>The <dfn><code>title</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Metadata content</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>In a <code>head</code> element containing no other <code>title</code> elements.</dd>
   <dt>Content model:</dt>
   <dd>Text.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>title</code> element represents the document's title or
  name. Authors should use titles that identify their documents even
  when they are used out of context, for example in a user's history
  or bookmarks, or in search results. The document's title is often
  different from its first header, since the first header does not
  have to stand alone when taken out of context.</p>

  <p>There must be no more than one <code>title</code> element per
  document.</p>

  <p>The <code>title</code> element must not contain any
  elements.</p>

  <div class="example">

   <p>Here are some examples of appropriate titles, contrasted with
   the top-level headers that might be used on those same pages.</p>

   <pre>  &lt;title>Introduction to The Mating Rituals of Bees&lt;/title>
    ...
  &lt;h1>Introduction&lt;/h1>
  &lt;p>This companion guide to the highly successful
  &lt;cite>Introduction to Medieval Bee-Keeping&lt;/cite> book is...
</pre>

   <p>The next page might be a part of the same site. Note how the
   title describes the subject matter unambiguously, while the first
   header assumes the reader knowns what the context is and therefore
   won't wonder if the dances are Salsa or Waltz:</p>

   <pre>  &lt;title>Dances used during bee mating rituals&lt;/title>
    ...
  &lt;h1>The Dances&lt;/h1></pre>

  </div>

  <p>The string to use as the document's title is given by the <code
  title="dom-document-title">document.title</code> DOM attribute. User
  agents should use the document's title when referring to the
  document in their user interface.</p>


  <h4>The <dfn><code>base</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Metadata content</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>In a <code>head</code> element containing no other <code>base</code> elements.</dd>
   <dt>Content model:</dt>
   <dd>Empty.</dd>
   <dt>Element-specific attributes:</dt>
   <dd><code title="attr-base-href">href</code></dd>
   <dd><code title="attr-base-target">target</code></dd>
   <dt>DOM interface:</dt>
   <dd>
<pre class="idl">interface <dfn>HTMLBaseElement</dfn> : <span>HTMLElement</span> {
           attribute DOMString <span title="dom-base-href">href</span>;
           attribute DOMString <span title="dom-base-target">target</span>;
};</pre>
   </dd>
  </dl>

  <p>The <code>base</code> element allows authors to specify the
  document's base URI for the purposes of resolving relative URIs, and
  the name of the default <span>browsing context</span> for the
  purposes of <span>following hyperlinks</span>.</p>

  <p>There must be no more than one <code>base</code> element per
  document.</p>

  <p>A <code>base</code> element must have either an <code
  title="attr-base-href">href</code> attribute, a <code
  title="attr-base-target">target</code> attribute, or both.</p>

  <p>The <dfn title="attr-base-href"><code>href</code></dfn> content
  attribute, if specified, must contain a URI (or IRI).</p>

  <p>A <code>base</code> element, if it has an <code
  title="attr-base-href">href</code> attribute, must come before any
  other elements in the tree that have attributes with URIs (except
  the <code>html</code> element and its <code
  title="attr-html-manifest">manifest</code> attribute).</p>

  <p>User agents must use the value of the <code
  title="att-base-href">href</code> attribute of the first
  <code>base</code> element that is both a child of <span>the
  <code>head</code> element</span> and has an <code
  title="att-base-href">href</code> attribute, if there is such an
  element, as the document entity's base URI for the purposes of
  section 5.1.1 of RFC 3986 ("Establishing a Base URI": "Base URI
  Embedded in Content"). This base URI from RFC 3986 is referred to by
  the algorithm given in XML Base, which <a href="#xmlBase">is a
  normative part of this specification</a>. <a
  href="#refsRFC3986">[RFC3986]</a></p>

  <p>If the base URI given by this attribute is a relative URI, it
  must be resolved relative to the higher-level base URIs (i.e. the
  base URI from the encapsulating entity or the URI used to retrieve
  the entity) to obtain an absolute base URI. All <code
  title="attr-xml-base">xml:base</code> attributes must be ignored
  when resolving relative URIs in this <code
  title="attr-base-href">href</code> attribute.</p>

  <p class="note">If there are multiple <code>base</code> elements
  with <code title="att-base-href">href</code> attributes, all but the
  first are ignored.</p>

  <p>The <dfn title="attr-base-target"><code>target</code></dfn>
  attribute, if specified, must contain a <span>valid browsing context
  name</span>. User agents use this name when <span>following
  hyperlinks</span>.</p>

  <p>A <code>base</code> element, if it has a <code
  title="attr-base-target">target</code> attribute, must come before
  any elements in the tree that represent <span
  title="hyperlink">hyperlinks</span>.</p>

  <p>The <dfn title="dom-base-href"><code>href</code></dfn> and <dfn
  title="dom-base-target"><code>target</code></dfn> DOM attributes
  must <span>reflect</span> the content attributes of the same
  name.</p>


  <h4>The <dfn><code>link</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Metadata content</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>metadata content</span> is expected.</dd>
   <dd>In a <code>noscript</code> element that is a child of a <code>head</code> element.</dd>
   <dt>Content model:</dt>
   <dd>Empty.</dd>
   <dt>Element-specific attributes:</dt>
   <dd><code title="attr-link-href">href</code></dd>
   <dd><code title="attr-link-rel">rel</code></dd>
   <dd><code title="attr-link-media">media</code></dd>
   <dd><code title="attr-link-hreflang">hreflang</code></dd>
   <dd><code title="attr-link-type">type</code></dd>
   <dd>Also, the <code title="attr-link-title">title</code> attribute has special semantics on this element.</dd>
   <dt>DOM interface:</dt>
   <dd>
<pre class="idl">interface <dfn>HTMLLinkElement</dfn> : <span>HTMLElement</span> {
           attribute boolean <span title="dom-link-disabled">disabled</span>;
           attribute DOMString <span title="dom-link-href">href</span>;
           attribute DOMString <span title="dom-link-rel">rel</span>;
  readonly attribute DOMTokenList <span title="dom-link-relList">relList</span>;
           attribute DOMString <span title="dom-link-media">media</span>;
           attribute DOMString <span title="dom-link-hreflang">hreflang</span>;
           attribute DOMString <span title="dom-link-type">type</span>;
};</pre>
    <p>The <code>LinkStyle</code> interface must also be implemented
    by this element, the <span>styling processing model</span> defines
    how. <a href="#refsCSSOM">[CSSOM]</a></p>
   </dd>
  </dl>

  <p>The <code>link</code> element allows authors to link their
  document to other resources.</p>

  <p>The destination of the link is given by the <dfn
  title="attr-link-href"><code>href</code></dfn> attribute, which must
  be present and must contain a URI (or IRI). If the <code
  title="attr-link-href">href</code> attribute is absent, then the
  element does not define a link.</p>

  <p>The type of link indicated (the relationship) is given by the
  value of the <dfn title="attr-link-rel"><code>rel</code></dfn>
  attribute, which must be present, and must have a value that is a
  <span>set of space-separated tokens</span>. The <a
  href="#linkTypes">allowed values and their meanings</a> are defined
  in a later section. If the <code title="attr-link-rel">rel</code>
  attribute is absent, or if the value used is not allowed according
  to the definitions in this specification, then the element does not
  define a link.</p>

  <p>Two categories of links can be created using the
  <code>link</code> element. <dfn title="external resource link">Links
  to external resources</dfn> are links to resources that are to be
  used to augment the current document, and <dfn title="hyperlink
  link">hyperlink links</dfn> are <span title="hyperlink">links to
  other documents</span>. The <a href="#linkTypes">link types
  section</a> defines whether a particular link type is an external
  resource or a hyperlink. One element can create multiple links (of
  which some might be external resource links and some might be
  hyperlinks). User agents should process the links on a per-link
  basis, not a per-element basis.</p>

  <p>The exact behaviour for links to external resources depends on
  the exact relationship, as defined for the relevant link type. Some
  of the attributes control whether or not the external resource is to
  be applied (as defined below). For external resources that are
  represented in the DOM (for example, style sheets), the DOM
  representation must be made available even if the resource is not
  applied. (However, user agents may opt to only fetch such resources
  when they are needed, instead of pro-actively downloading all the
  external resources that are not applied.)</p>

  <p>HTTP semantics must be followed when fetching external
  resources. (For example, redirects must be followed and 404
  responses must cause the external resource to not be applied.)</p>

  <p>Interactive user agents should provide users with a means to
  <span title="following hyperlinks">follow the hyperlinks</span>
  created using the <code>link</code> element, somewhere within their
  user interface. The exact interface is not defined by this
  specification, but it should include the following information
  (obtained from the element's attributes, again as defined below), in
  some form or another (possibly simplified), for each hyperlink
  created with each <code>link</code> element in the document:</p>

  <ul> <!-- the order here is the order that makes most sense for a UI -->

   <li>The relationship between this document and the resource (given
   by the <code title="attr-link-rel">rel</code> attribute)</li>

   <li>The title of the resource (given by the <code
   title="attr-link-title">title</code> attribute).</li>

   <li>The URI of the resource (given by the <code
   title="attr-link-href">href</code> attribute).</li>

   <li>The language of the resource (given by the <code
   title="attr-link-hreflang">hreflang</code> attribute).</li>

   <li>The optimum media for the resource (given by the <code
   title="attr-link-media">media</code> attribute).</li>

  </ul>

  <p>User agents may also include other information, such as the type
  of the resource (as given by the <code
  title="attr-link-type">type</code> attribute).</p>

  <p>The <dfn title="attr-link-media"><code>media</code></dfn>
  attribute says which media the resource applies to. The value must
  be a valid media query. <a href="#refsMQ">[MQ]</a></p>

  <p>If the link is a <span title="hyperlink link">hyperlink</span>
  then the <code title="attr-link-media">media</code> attribute is
  purely advisory, and describes for which media the document in
  question was designed.</p>

  <p>However, if the link is an <span>external resource link</span>,
  then the <code title="attr-link-media">media</code> attribute is
  prescriptive. The user agent must only apply the external resource
  to <span>views</span><!-- XXX xref --> while their state match the
  listed media.</p>

  <p id="default-media">The default, if the <code
  title="attr-link-media">media</code> attribute is omitted, is
  <code>all</code>, meaning that by default links apply to all
  media.</p>

  <p>The <dfn title="attr-link-hreflang"><code>hreflang</code></dfn>
  attribute on the <code>link</code> element has the same semantics as
  the <span title="attr-hyperlink-hreflang"><code>hreflang</code>
  attribute on hyperlink elements</span>.</p>

  <p>The <dfn title="attr-link-type"><code>type</code></dfn> attribute
  gives the MIME type of the linked resource. It is purely advisory.
  The value must be a valid MIME type, optionally with parameters. <a
  href="#refsRFC2046">[RFC2046]</a></p>

  <p>For <span title="external resource link">external resource
  links</span>, user agents may use the type given in this attribute
  to decide whether or not to consider using the resource at all. If
  the UA does not support the given MIME type for the given link
  relationship, then the UA may opt not to download and apply the
  resource.</p>

  <p>User agents must not consider the <code
  title="attr-link-type">type</code> attribute authoritative &mdash;
  upon fetching the resource, user agents must not use metadata
  included in the link to the resource to determine its type.</p>

  <p>If the attribute is omitted, then the UA must fetch the resource
  and determine its type <span title="Content-Type">from its
  Content-Type metadata</span> to determine if it supports (and can
  apply) that external resource. If no type metadata is specified, but
  the external resource link type has a default type defined, then the
  user agent must assume that the resource is of that type.</p>

  <div class="example">

   <p>If a document contains four style sheet links labelled as
   follows:</p>

   <pre>&lt;link rel="stylesheet" href="A" type="text/plain"&gt;
&lt;link rel="stylesheet" href="B" type="text/css"&gt;
&lt;link rel="stylesheet" href="C"&gt;</pre>

   <p>...then a compliant UA that supported only CSS style sheets
   would fetch the B and C files, and skip the A file (since
   <code>text/plain</code> is not the MIME type for CSS style
   sheets).</p>

   <p>For files B and C, it would then check the actual types returned
   by the UA. For those that are sent as <code>text/css</code>, it
   would apply the styles, but for those labelled as
   <code>text/plain</code>, or any other type, it would not.</p>

   <p>If one the two files was returned without a
   <span>Content-Type</span> metadata, or with a syntactically
   incorrect type like <code
   title="">Content-Type:&nbsp;"null"</code>, then the default type
   for <code title="rel-stylesheet">stylesheet</code> links would kick
   in. Since that default type is <code title="">text/css</code>, the
   style sheet <em>would</em> nonetheless be applied.</p>

  </div>

<!--(to be deleted) (charset dropped)
  <p>The <dfn title="attr-link-charset"><code>charset</code></dfn>
  attribute gives the character encoding of the linked resource. It is
  purely advisory. The value must be a valid character encoding name.
  <a href="#refsIANACHARSET">[IANACHARSET]</a></p>

  <p>For <span title="external resource link">external resource
  links</span>, user agents may use the character encoding given in
  this attribute to decide whether or not to consider using the
  resource at all. If the UA does not support the given encoding for
  the given link relationship, then the UA may opt not to download and
  apply the resource.</p>

  <p>However, once the resource has been fetched, user agents must
  follow the rules for that resource type when determining the actual
  character encoding.</p>
-->

  <p>The <dfn title="attr-link-title"><code>title</code></dfn>
  attribute gives the title of the link. With one exception, it is
  purely advisory. The value is text. The exception is for style sheet
  links, where the <code title="attr-link-title">title</code>
  attribute defines <span>alternative style sheet sets</span>.</p>

  <p class="note">The <code title="attr-link-title">title</code>
  attribute on <code>link</code> elements differs from the global
  <code title="attr-title">title</code> attribute of most other
  elements in that a link without a title does not inherit the title
  of the parent element: it merely has no title.</p>

  <p>Some versions of HTTP defined a <code title="">Link:</code>
  header, to be processed like a series of <code>link</code> elements.
  When processing links, those must be taken into consideration as
  well. For the purposes of ordering, links defined by HTTP headers
  must be assumed to come before any links in the document, in the
  order that they were given in the HTTP entity header. Relative URIs
  in these headers must be resolved according to the rules given in
  HTTP, not relative to base URIs set by the document (e.g. using a
  <code>base</code> element or <code
  title="attr-xml-base">xml:base</code> attributes). <a
  href="#refsRFC2616">[RFC2616]</a> <a
  href="#refsRFC2068">[RFC2068]</a></p>

  <p>The DOM attributes <dfn
  title="dom-link-href"><code>href</code></dfn>, <dfn
  title="dom-link-rel"><code>rel</code></dfn>, <dfn
  title="dom-link-media"><code>media</code></dfn>, <dfn
  title="dom-link-hreflang"><code>hreflang</code></dfn>, and <dfn
  title="dom-link-type"><code>type</code></dfn> each must
  <span>reflect</span> the respective content attributes of the same
  name.</p>

  <p>The DOM attribute <dfn
  title="dom-link-rellist"><code>relList</code></dfn> must
  <span>reflect</span> the <code title="attr-link-rel">rel</code>
  content attribute.</p>

  <p>The DOM attribute <dfn
  title="dom-link-disabled"><code>disabled</code></dfn> only applies
  to style sheet links. When the <code>link</code> element defines a
  style sheet link, then the <code
  title="dom-link-disabled">disabled</code> attribute behaves as
  defined <span title="dom-linkstyle-disabled">for the alternative
  style sheets DOM</span>. For all other <code>link</code> elements it
  always return false and does nothing on setting.</p>


  <h4 id="meta">The <dfn><code>meta</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Metadata content</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>If the <code title="attr-meta-charset">charset</code> attribute is present, or if the element is in the <span title="attr-meta-http-equiv-content-type">Encoding declaraton state</span>: as the first element in a <code>head</code> element.</dd>
   <dd>If the <code title="attr-meta-http-equiv">http-equiv</code> attribute is present, and the element is not in the <span title="attr-meta-http-equiv-content-type">Encoding declaraton state</span>: in a <code>head</code> element.</dd>
   <dd>If the <code title="attr-meta-http-equiv">http-equiv</code> attribute is present, and the element is not in the <span title="attr-meta-http-equiv-content-type">Encoding declaraton state</span>: in a <code>noscript</code> element that is a child of a <code>head</code> element.</dd>
   <dd>If the <code title="attr-meta-name">name</code> attribute is present: where <span>metadata content</span> is expected.</dd>
   <dt>Content model:</dt>
   <dd>Empty.</dd>
   <dt>Element-specific attributes:</dt>
   <dd><code title="attr-meta-name">name</code></dd>
   <dd><code title="attr-meta-http-equiv">http-equiv</code></dd>
   <dd><code title="attr-meta-content">content</code></dd>
   <dd><code title="attr-meta-charset">charset</code> (<span title="HTML documents">HTML</span> only)</dd>
   <dt>DOM interface:</dt>
   <dd>
<pre class="idl">interface <dfn>HTMLMetaElement</dfn> : <span>HTMLElement</span> {
           attribute DOMString <span title="dom-meta-content">content</span>;
           attribute DOMString <span title="dom-meta-name">name</span>;
           attribute DOMString <span title="dom-meta-httpEquiv">httpEquiv</span>;
};</pre>
   </dd>
  </dl>

  <p>The <code>meta</code> element represents various kinds of
  metadata that cannot be expressed using the <code>title</code>,
  <code>base</code>, <code>link</code>, <code>style</code>, and
  <code>script</code> elements.</p>

  <p>The <code>meta</code> element can represent document-level
  metadata with the <code title="attr-meta-name">name</code>
  attribute, pragma directives with the <code
  title="attr-meta-http-equiv">http-equiv</code> attribute, and the
  file's <span>character encoding declaration</span> when an HTML
  document is serialised to string form (e.g. for transmission over
  the network or for disk storage) with the <code
  title="attr-meta-charset">charset</code> attribute.</p>

  <p>Exactly one of the <code title="attr-meta-name">name</code>,
  <code title="attr-meta-http-equiv">http-equiv</code>, and <code
  title="attr-meta-charset">charset</code> attributes must be
  specified.</p>

  <p>If either <code title="attr-meta-name">name</code> or <code
  title="attr-meta-http-equiv">http-equiv</code> is specified, then
  the <code title="attr-meta-content">content</code> attribute must
  also be specified. Otherwise, it must be omitted.</p>

  <p>The <dfn title="attr-meta-charset"><code>charset</code></dfn>
  attribute specifies the character encoding used by the
  document. This is called a <span>character encoding
  declaration</span>.</p>

  <p>The <code title="attr-meta-charset">charset</code> attribute may
  be specified in <span title="HTML5">HTML documents</span> only, it
  must not be used in <span title="XHTML">XML documents</span>. If the
  <code title="attr-meta-charset">charset</code> attribute is
  specified, the element must be the first element in <span>the
  <code>head</code> element</span> of the file.</p>

  <p>The <dfn title="attr-meta-content"><code>content</code></dfn>
  attribute gives the value of the document metadata or pragma
  directive when the element is used for those purposes. The allowed
  values depend on the exact context, as described in subsequent
  sections of this specification.</p>

  <p>If a <code>meta</code> element has a <dfn
  title="attr-meta-name"><code>name</code></dfn> attribute, it sets
  document metadata. Document metadata is expressed in terms of
  name/value pairs, the <code title="attr-meta-name">name</code>
  attribute on the <code>meta</code> element giving the name, and the
  <code title="attr-meta-content">content</code> attribute on the same
  element giving the value. The name specifies what aspect of metadata
  is being set; valid names and the meaning of their values are
  described in the following sections.  If a <code>meta</code> element
  has no <code title="attr-meta-content">content</code> attribute,
  then the value part of the metadata name/value pair is the empty
  string.</p>

  <p>If a <code>meta</code> element has the <code
  title="attr-meta-http-equiv">http-equiv</code> attribute specified,
  it must be either in a <code>head</code> element or in a
  <code>noscript</code> element that itself is in a <code>head</code>
  element. If a <code>meta</code> element does not have the <code
  title="attr-meta-http-equiv">http-equiv</code> attribute specified,
  it must be in a <code>head</code> element.</p>

  <p>The DOM attributes <dfn
  title="dom-meta-name"><code>name</code></dfn> and <dfn
  title="dom-meta-content"><code>content</code></dfn> must
  <span>reflect</span> the respective content attributes of the same
  name. The DOM attribute <dfn
  title="dom-meta-httpEquiv"><code>httpEquiv</code></dfn> must reflect
  the content attribute <code
  title="attr-meta-http-equiv">http-equiv</code>.</p>


  <h5>Standard metadata names</h5>

  <p>This specification defines a few names for the <code
  title="attr-meta-name">name</code> attribute of the
  <code>meta</code> element.</p>

  <dl>

   <dt><dfn title="meta-generator">generator</dfn></dt>

   <dd><p>The value must be a free-form string that identifies the
   software used to generate the document. This value must not be used
   on hand-authored pages. WYSIWYG editors have <span title="WYSIWYG
   signature">additional constraints</span> on the value used with
   this metadata name.</p></dd>

   <dt><dfn title="meta-dns">dns</dfn></dt>

   <dd><p>The value must be an <span>ordered set of unique
   space-separated tokens</span>, each word of which is a host
   name. The list allows authors to provide a list of host names that
   the user is expected to subsequently need. User agents may,
   according to user preferences and prevailing network conditions,
   pre-emptively resolve the given DNS names (extracting the names
   from the value using the <span title="split a string on
   spaces">rules for splitting a string on spaces</span>), thus
   precaching the DNS information for those hosts and potentially
   reducing the time between page loads for subsequent user
   interactions. Higher priority should be given to host names given
   earlier in the list.</p></dd>

  </dl>


  <h5>Other metadata names</h5>

  <p><dfn title="concept-meta-extensions">Extensions to the predefined
  set of metadata names</dfn> may be registered in the <a
  href="http://wiki.whatwg.org/wiki/MetaExtensions">WHATWG Wiki
  MetaExtensions page</a>.

  <p>Anyone is free to edit the WHATWG Wiki MetaExtensions page at any
  time to add a type. These new names must be specified with the
  following information:</p>

  <dl>

   <dt>Keyword</dt>

   <dd><p>The actual name being defined. The name should not be
   confusingly similar to any other defined name (e.g. differing only
   in case).</p></dd>


   <dt>Brief description</dt>

   <dd><p>A short description of what the metadata name's meaning is,
   including the format the value is required to be in.</p></dd>


   <dt>Link to more details</dt>

   <dd>A link to a more detailed description of the metadata name's
   semantics and requirements. It could be another page on the Wiki,
   or a link to an external page.</dd>


   <dt>Synonyms</dt>

   <dd><p>A list of other names that have exactly the same processing
   requirements. Authors should not use the names defined to be
   synonyms, they are only intended to allow user agents to support
   legacy content.</p></dd>


   <dt>Status</dt>

   <dd>

    <p>One of the following:</p>

    <dl>

     <dt>Proposal</dt>

     <dd>The name has not received wide peer review and
     approval. Someone has proposed it and is using it.</dd>

     <dt>Accepted</dt>

     <dd>The name has received wide peer review and approval. It has a
     specification that unambiguously defines how to handle pages that
     use the name, including when they use it in incorrect ways.</dd>

     <dt>Unendorsed</dt>

     <dd>The metadata name has received wide peer review and it has
     been found wanting. Existing pages are using this keyword, but
     new pages should avoid it. The "brief description" and "link to
     more details" entries will give details of what authors should
     use instead, if anything.</dd>

    </dl>

    <p>If a metadata name is added with the "proposal" status and
    found to be redundant with existing values, it should be removed
    and listed as a synonym for the existing value.</p>

   </dd>

  </dl>

  <p>Conformance checkers must use the information given on the WHATWG
  Wiki MetaExtensions page to establish if a value not explicitly
  defined in this specification is allowed or not. When an author uses
  a new type not defined by either this specification or the Wiki
  page, conformance checkers should offer to add the value to the
  Wiki, with the details described above, with the "proposal"
  status.</p>

  <p>This specification does not define how new values will get
  approved. It is expected that the Wiki will have a community that
  addresses this.</p>

  <p>Metadata names whose values are to be URIs must not be proposed
  or accepted. Links must be represented using the <code>link</code>
  element, not the <code>meta</code> element.</p>


  <h5>Pragma directives</h5>

  <p>When the <dfn
  title="attr-meta-http-equiv"><code>http-equiv</code></dfn> attribute
  is specified on a <code>meta</code> element, the element is a pragma
  directive.</p>

  <p>The <dfn
  title="attr-meta-http-equiv"><code>http-equiv</code></dfn> attribute
  is an <span>enumerated attribute</span>. The following table lists
  the keywords defined for this attribute. The states given in the
  first cell of the the rows with keywords give the states to which
  those keywords map.<!-- Some of the keywords are non-conforming, as
  noted in the last column.--></p>

  <table>
   <thead>
    <tr>
     <th>State
     <th>Keywords
<!--     <th>Notes-->
   <tbody>
<!-- things that are neither conforming nor do anything are commented out
    <tr>
     <td><span title="attr-meta-http-equiv-content-language">Content-Language</span>
     <td><code title="">Content-Language</code>
     <td>Non-conforming [ XXX but maybe we should make this an alternative to <html lang="">? ]
-->
    <tr>
     <td><span title="attr-meta-http-equiv-content-type">Encoding declaration</span>
     <td><code title="">Content-Type</code>
<!--     <td>Non-conforming -->
<!--
    <tr>
     <td><span title="attr-meta-http-equiv-content-script-type">Content-Script-Type</span>
     <td><code title="">Content-Script-Type</code>
     <td>Non-conforming
    <tr>
     <td><span title="attr-meta-http-equiv-content-style-type">Content-Style-Type</span>
     <td><code title="">Content-Style-Type</code>
     <td>Non-conforming
-->
    <tr>
     <td><span title="attr-meta-http-equiv-default-style">Default style</span>
     <td><code title="">default-style</code>
<!--     <td>-->
    <tr>
     <td><span title="attr-meta-http-equiv-refresh">Refresh</span>
     <td><code title="">refresh</code>
<!--     <td>-->
  </table>

<!--
DATA: According to Henri's validator stats, here are common
non-conforming values used by people who validate (sample of 400
pages):

COUNT ERROR
   20 Bad value "Content-Language" for attribute "http-equiv" on element "meta".
   17 Bad value "Content-Style-Type" for attribute "http-equiv" on element "meta".
   12 Bad value "Expires" for attribute "http-equiv" on element "meta".
   11 Bad value "Pragma" for attribute "http-equiv" on element "meta".
   11 Bad value "imagetoolbar" for attribute "http-equiv" on element "meta".
   10 Bad value "Content-Script-Type" for attribute "http-equiv" on element "meta".
   10 Bad value "content-language" for attribute "http-equiv" on element "meta".
 [...]
http://hsivonen.iki.fi/test/moz/analysis.txt

Here's some more data, this time from Philip`, on a sample of 15k pages.

  COUNT VALUE
   1181 Content-Language
    430 Content-Style-Type
    342 imagetoolbar
    276 content-language
    269 Pragma
    260 expires
    227 Expires
    211 pragma
    146 Content-Script-Type
    132 keywords
    119 Page-Enter
    116 description
    106 reply-to
    102 Cache-Control
   [...]
http://philip.html5.org/data/meta-http-equiv.txt

These numbers are low; further study is required to establish what
people expect to have work and what is necessary.
-->

  <p>When a <code>meta</code> element is inserted into the document,
  if its <code title="attr-meta-http-equiv">http-equiv</code>
  attribute is present and represents one of the above states, then
  the user agent must run the algorithm appropriate for that state, as
  described in the following list:</p>

  <dl>

   <dt><dfn title="attr-meta-http-equiv-content-type">Encoding declaration state</dfn>

   <dd>

    <p>The <span title="attr-meta-http-equiv-content-type">Encoding
    declaration state's</span> user agent requirements are all handled
    by the parsing section of the specification. The state is just an
    alternative form of setting the <code
    title="meta-charset">charset</code> attribute: it is a
    <span>character encoding declaration</span>.</p>

    <p>For <code>meta</code> elements in the <span
    title="attr-meta-http-equiv-content-type">Encoding declaraton
    state</span>, the <code title="attr-meta-content">content</code>
    attribute must have a value that is a case-insensitive<!-- ASCII
    XXX--> match of a string that consists of the literal string
    "<code title="">text/html;</code>", optionally followed by any
    number of <span title="space character">space characters</span>,
    followed by the literal string "<code title="">charset=</code>",
    followed by the character encoding name of <a href="#charset">the
    character encoding declaration</a>.</p>

    <p>If the document contains a <code>meta</code> element in the
    <span title="attr-meta-http-equiv-content-type">Encoding
    declaraton state</span> then that element must be the first
    element in the document's <code>head</code> element, and the
    document must not contain a <code>meta</code> element with the
    <code title="attr-meta-charset">charset</code> attribute
    present.</p>

    <p>The <span title="attr-meta-http-equiv-content-type">Encoding
    declaraton state</span> may be used in <span title="HTML5">HTML
    documents</span> only, elements in that state must not be used in
    <span title="XHTML">XML documents</span>.</p>

   </dd>

   <dt><dfn title="attr-meta-http-equiv-default-style">Default style state</dfn>

   <dd>

    <ol>

     <li class="big-issue">...</li>

    </ol>

   </dd>

   <dt><dfn title="attr-meta-http-equiv-refresh">Refresh state</dfn>

   <dd>

    <ol>
     <!-- TESTS: http://www.hixie.ch/tests/adhoc/html/meta/refresh/ -->

     <li><p>If another <code>meta</code> element in the <span
     title="attr-meta-http-equiv-refresh">Refresh state</span> has
     already been successfully processed (i.e. when it was inserted
     the user agent processed it and reached the last step of this
     list of steps), then abort these steps.</p></li>

     <li><p>If the <code>meta</code> element has no <code
     title="attr-meta-content">content</code> attribute, or if that
     attribute's value is the empty string, then abort these
     steps.</p></li>

     <li><p>Let <var title="">input</var> be the value of the
     element's <code title="attr-meta-content">content</code>
     attribute.</p></li>

     <li><p>Let <var title="">position</var> point at the first
     character of <var title="">input</var>.</p></li>

     <li><p><span>Skip whitespace</span>.</p></li>

     <li><p><span title="collect a sequence of characters">Collect a
     sequence of characters</span> in the range U+0030 DIGIT ZERO to
     U+0039 DIGIT NINE, and parse the resulting string using the
     <span>rules for parsing non-negative integers</span>. If the
     sequence of characters collected is the empty string, then no
     number will have been parsed; abort these steps. Otherwise, let
     <var title="">time</var> be the parsed number.</p></li>

     <li><p><span title="collect a sequence of characters">Collect a
     sequence of characters</span> in the range U+0030 DIGIT ZERO to
     U+0039 DIGIT NINE and U+002E FULL STOP ("<code
     title="">.</code>"). Ignore any collected characters.</p></li>

     <li><p><span>Skip whitespace</span>.</p></li>

     <li><p>Let <var title="">url</var> be the address of the current
     page.</p></li>

     <li><p>If the character in <var title="">input</var> pointed to
     by <var title="">position</var> is a U+003B SEMICOLON ("<code
     title="">;</code>"), then advance <var title="">position</var> to
     the next character. Otherwise, jump to the last step.</p></li>

     <li><p><span>Skip whitespace</span>.</p></li>

     <li><p>If the character in <var title="">input</var> pointed to
     by <var title="">position</var> is one of U+0055 LATIN CAPITAL
     LETTER U or U+0075 LATIN SMALL LETTER U, then advance <var
     title="">position</var> to the next character. Otherwise, jump to
     the last step.</p></li>

     <li><p>If the character in <var title="">input</var> pointed to
     by <var title="">position</var> is one of U+0052 LATIN CAPITAL
     LETTER R or U+0072 LATIN SMALL LETTER R, then advance <var
     title="">position</var> to the next character. Otherwise, jump to
     the last step.</p></li>

     <li><p>If the character in <var title="">input</var> pointed to
     by <var title="">position</var> is one of U+004C LATIN CAPITAL
     LETTER L or U+006C LATIN SMALL LETTER L, then advance <var
     title="">position</var> to the next character. Otherwise, jump to
     the last step.</p></li>

     <li><p><span>Skip whitespace</span>.</p></li>

     <li><p>If the character in <var title="">input</var> pointed to
     by <var title="">position</var> is a U+003D EQUALS SIGN ("<code
     title="">=</code>"), then advance <var title="">position</var> to
     the next character. Otherwise, jump to the last step.</p></li>

     <li><p><span>Skip whitespace</span>.</p></li>

     <li><p>Let <var title="">url</var> be equal to the substring of
     <var title="">input</var> from the character at <var
     title="">position</var> to the end of the string.</p></li>

     <li><p>Strip any trailing <span title="space character">space
     characters</span> from the end of <var
     title="">url</var>.</p></li>

     <li><p>Strip any U+0009 CHARACTER TABULATION, U+000A LINE FEED
     (LF), and U+000D CARRIAGE RETURN (CR) characters from <var
     title="">url</var>.</p></li>

     <li><p>Resolve the <var title="">url</var> value to an absolute
     URI using the base URI of the <code>meta</code> element.</p></li>

     <li>

      <p>Perform one or more of the following steps:</p>

      <ul>

       <li><p>Set a timer so that in <var title="">time</var> seconds,
       adjusted to take into account user or user agent preferences,
       if the user has not canceled the redirect, the user agent <span
       title="navigate">navigates</span> the document's browsing
       context to <var title="">url</var>, with <span>replacement
       enabled</span>.</p></li>

       <li><p>Provide the user with an interface that, when selected,
       <span>navigates</span> a <span>browsing context</span> to <var
       title="">url</var>.</p></li>

       <li><p>Do nothing.</p></li>

      </ul>

      <p>In addition, the user agent may, as with anything, inform the
      user of any and all aspects of its operation, including the
      state of any timers, the destinations of any timed redirects,
      and so forth.</p>

     </li>

    </ol>

    <p>For <code>meta</code> elements in the <span
    title="attr-meta-http-equiv-refresh">Refresh state</span>, the
    <code title="attr-meta-content">content</code> attribute must have
    a value consisting either of:

    <ul>

     <li> just a <span>valid non-negative integer</span>, or</li>

     <li> a <span>valid non-negative integer</span>, followed by a
     U+003B SEMICOLON (<code title="">;</code>), followed by one or
     more <span title="space character">space characters</span>,
     followed by either a U+0055 LATIN CAPITAL LETTER U or a U+0075
     LATIN SMALL LETTER U, a U+0052 LATIN CAPITAL LETTER R or a U+0072
     LATIN SMALL LETTER R, a U+004C LATIN CAPITAL LETTER L or a U+006C
     LATIN SMALL LETTER L, a U+003D EQUALS SIGN (<code
     title="">=</code>), and then a valid URI (or IRI).</li>

    </ul>

    <p>In the former case, the integer represents a number of seconds
    before the page is to be reloaded; in the latter case the integer
    represents a number of seconds before the page is to be replaced
    by the page at the given URI.</p>

   </dd>

  </dl>

  <p>There must not be more than one <code>meta</code> element with
  any particular state in the document at a time.</p>


  <h5 id="charset">Specifying the document's character encoding</h5>

  <!-- XXX maybe the rest should move to "writing html" section,
  though if we do then we have to duplicate the requirements in the
  parsing section for conformance checkers -->

  <p>A <dfn>character encoding declaration</dfn> is a mechanism by
  which the character encoding used to store or transmit a document is
  specified.</p>

  <p>The following restrictions apply to character encoding
  declarations:</p>

  <ul>

   <li>The character encoding name given must be the name of the
   character encoding used to serialise the file.</li>

   <li>The value must be a valid character encoding name, and must be
   the preferred name for that encoding. <a
   href="#refsIANACHARSET">[IANACHARSET]</a> <!-- XXX
   http://www.iana.org/assignments/character-sets --></li>

   <li>The encoding name must be serialised without the use of
   character entity references or character escapes of any kind.</li>

  </ul>

  <p>If the document does not start with a BOM, and if its encoding is
  not explicitly given by <span title="Content-Type">Content-Type
  metadata</span>, then the character encoding used must be a superset
  of US-ASCII (specifically, ANSI_X3.4-1968) for bytes in the range
  0x09 - 0x0D, 0x20, 0x21, 0x22, 0x26, 0x27, 0x2C - 0x3F, 0x41 - 0x5A,
  and 0x61 - 0x7A<!-- XXX #refs RFC1345 ? --> <!-- is that list ok? do
  any character sets we want to support do things outside that range?
  -->, and, in addition, if that encoding isn't US-ASCII itself, then
  the encoding must be specified using a <code>meta</code> element
  with a <code title="attr-meta-charset">charset</code> attribute or a
  <code>meta</code> element in the <span
  title="attr-meta-http-equiv-content-type">Encoding declaraton
  state</span>.</p>

  <p>Authors should not use JIS_X0212-1990, x-JIS0208, and encodings
  based on EBCDIC. Authors should not use UTF-32. Authors must not use
  the CESU-8, UTF-7, BOCU-1 and SCSU encodings. <a
  href="#refsCESU8">[CESU8]</a> <a href="#refsUTF7">[UTF7]</a> <a
  href="#refsBOCU1">[BOCU1]</a> <a href="#refsSCSU">[SCSU]</a></p>
  <!-- XXX ref JIS_X0212-1990, x-JIS0208, EBCDIC, UTF-32 -->

  <p>Authors are encouraged to use UTF-8. Conformance checkers may
  advise against authors using legacy encodings.</p>

  <p>In XHTML, the XML declaration should be used for inline character
  encoding information, if necessary.</p>


  <h4>The <dfn><code>style</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Metadata content</span>.</dd>
   <dd>If the <code title="attr-style-scoped">scoped</code> attribute is present: <span>flow content</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>If the <code title="attr-style-scoped">scoped</code> attribute is absent: where <span>metadata content</span> is expected.</dd>
   <dd>If the <code title="attr-style-scoped">scoped</code> attribute is absent: in a <code>noscript</code> element that is a child of a <code>head</code> element.</dd>
   <dd>If the <code title="attr-style-scoped">scoped</code> attribute is present: where <span>flow content</span> is expected, but before any sibling elements other than <code>style</code> elements and before any text nodes other than <span>inter-element whitespace</span>.</dd>
   <dt>Content model:</dt>
   <dd>Depends on the value of the <code title="attr-style-type">type</code> attribute.</dd>
   <dt>Element-specific attributes:</dt>
   <dd><code title="attr-style-media">media</code></dd>
   <dd><code title="attr-style-type">type</code></dd>
   <dd><code title="attr-style-scoped">scoped</code></dd>
   <dd>Also, the <code title="attr-style-title">title</code> attribute has special semantics on this element.</dd>
   <dt>DOM interface:</dt>
   <dd>
<pre class="idl">interface <dfn>HTMLStyleElement</dfn> : <span>HTMLElement</span> {
           attribute boolean <code title="dom-style-disabled">disabled</code>;
           attribute DOMString <code title="dom-style-media">media</code>;
           attribute DOMString <code title="dom-style-type">type</code>;
           attribute boolean <code title="dom-style-scoped">scoped</code>;
};</pre>
    <p>The <code>LinkStyle</code> interface must also be implemented
    by this element, the <span>styling processing model</span> defines
    how. <a href="#refsCSSOM">[CSSOM]</a></p>
   </dd>
  </dl>

  <p>The <code>style</code> element allows authors to embed style
  information in their documents. The <code>style</code> element is
  one of several inputs to the <span>styling processing
  model</span>.</p>

  <p>If the <dfn title="attr-style-type"><code>type</code></dfn>
  attribute is given, it must contain a valid MIME type, optionally
  with parameters, that designates a styling language. <a
  href="#refsRFC2046">[RFC2046]</a> If the attribute is absent, the
  type defaults to <code>text/css</code>. <a
  href="#refsRFC2318">[RFC2138]</a></p>

  <!-- XXX this is the second time we have this paragraph here... -->
  <p>When examining types to determine if they support the language,
  user agents must not ignore unknown MIME parameters &mdash; types
  with unknown parameters must be assumed to be unsupported.</p>

  <p>The <dfn title="attr-style-media"><code>media</code></dfn>
  attribute says which media the styles apply to. The value must be a
  valid media query. <a href="#refsMQ">[MQ]</a> User agents must only
  apply the styles to <span>views</span> while their state match the
  listed media. <a href="#refsDOM3VIEWS">[DOM3VIEWS]</a></p>

  <p id="style-default-media">The default, if the <code
  title="attr-style-media">media</code> attribute is omitted, is
  <code>all</code>, meaning that by default styles apply to all
  media.</p>

  <p>The <dfn title="attr-style-scoped"><code>scoped</code></dfn>
  attribute is a <span>boolean attribute</span>. If the attribute is
  present, then the user agent must only apply the specified style
  information to the <code>style</code> element's parent element (if
  any), and that element's child nodes. Otherwise, the specified
  styles must, if applied, be applied to the entire document.</p>

  <p>If the <code title="attr-style-scoped">scoped</code> attribute is
  not specified, the <code>style</code> element must be the child of a
  <code>head</code> element or of a <code>noscript</code> element that
  is a child of a <code>head</code> element.</p>

  <p>If the <code title="attr-style-scoped">scoped</code> attribute
  <em>is</em> specified, then the <code>style</code> element must be
  the child of a <span>flow content</span> element, before any text
  nodes other than <span>inter-element whitespace</span>, and before
  any elements other than other <code>style</code> elements.</p>

  <p id="title-on-style">The <dfn
  title="attr-style-title"><code>title</code></dfn> attribute on
  <code>style</code> elements defines <span>alternative style sheet
  sets</span>. If the <code>style</code> element has no <code
  title="attr-style-title">title</code> attribute, then it has no
  title; the <code title="attr-title">title</code> attribute of
  ancestors does not apply to the <code>style</code> element.</p> <!--
  XXX xref -->

  <p class="note">The <code title="attr-style-title">title</code>
  attribute on <code>style</code> elements, like the <code
  title="attr-link-title">title</code> attribute on <code>link</code>
  elements, differs from the global <code
  title="attr-title">title</code> attribute in that a
  <code>style</code> block without a title does not inherit the title
  of the parent element: it merely has no title.</p>

  <p>All descendant elements must be processed, according to their
  semantics, before the <code>style</code> element itself is
  evaluated. For styling languages that consist of pure text, user
  agents must evaluate <code>style</code> elements by passing the
  concatenation of the contents of all the <span title="text
  node">text nodes</span> that are direct children of the
  <code>style</code> element (not any other nodes such as comments or
  elements), in <span>tree order</span>, to the style system. For
  XML-based styling languages, user agents must pass all the children
  nodes of the <code>style</code> element to the style system.</p>

  <p class="note">This specification does not specify a style system,
  but CSS is expected to be supported by most Web browsers. <a
  href="#refsCSS21">[CSS21]</a></p>

  <p>The <dfn title="dom-style-media"><code>media</code></dfn>, <dfn
  title="dom-style-type"><code>type</code></dfn> and <dfn
  title="dom-style-scoped"><code>scoped</code></dfn> DOM attributes
  must <span>reflect</span> the respective content attributes of the
  same name.</p>

  <p>The DOM <dfn
  title="dom-style-disabled"><code>disabled</code></dfn> attribute
  behaves as defined <span title="dom-linkstyle-disabled">for the
  alternative style sheets DOM</span>.</p>

  <h4 id="styling"><dfn title="styling processing model">Styling</dfn></h4>

  <p>The <code>link</code> and <code>style</code> elements can provide
  styling information for the user agent to use when rendering the
  document. The DOM Styling specification specifies what styling
  information is to be used by the user agent and how it is to be
  used. <a href="#refsCSSOM">[CSSOM]</a></p>

  <p>The <code>style</code> and <code>link</code> elements implement
  the <code>LinkStyle</code> interface. <a
  href="#refsCSSOM">[CSSOM]</a></p>

  <p>For <code>style</code> elements, if the user agent does not
  support the specified styling language, then the <code
  title="dom-LinkStyle-sheet">sheet</code> attribute of the element's
  <code>LinkStyle</code> interface must return null. Similarly,
  <code>link</code> elements that do not represent <span
  title="rel-stylesheet">external resource links that contribute to
  the styling processing model</span> (i.e. that do not have a <code
  title="rel-stylesheet">stylesheet</code> keyword in their <code
  title="attr-link-rel">rel</code> attribute), and <code>link</code>
  elements whose specified resource has not yet been downloaded, or is
  not in a supported styling language, must have their
  <code>LinkStyle</code> interface's <code
  title="dom-LinkStyle-sheet">sheet</code> attribute return null.</p>

  <p>Otherwise, the <code>LinkStyle</code> interface's <code
  title="dom-LinkStyle-sheet">sheet</code> attribute must return a
  <code>StyleSheet</code> object with the attributes implemented as
  follows: <a href="#refsCSSOM">[CSSOM]</a></p>

  <dl>

   <dt>The content type (<code title="dom-stylesheet-type">type</code> DOM attribute)</dt>

   <dd><p>The content type must be the same as the style's specified
   type. For <code>style</code> elements, this is the same as the
   <code title="attr-style-type">type</code> content attribute's
   value, or <code title="">text/css</code> if that is omitted. For
   <code>link</code> elements, this is the <span
   title="Content-Type">Content-Type metadata of the specified
   resource</span>.</p></dd>

   <dt>The location (<code title="dom-stylesheet-href">href</code> DOM attribute)</dt>

   <dd><p>For <code>link</code> elements, the location must be the URI
   given by the element's <code title="attr-link-href">href</code>
   content attribute. For <code>style</code> elements, there is no
   location.</p></dd>

   <dt>The intended destination media for style information (<code title="dom-stylesheet-media">media</code> DOM attribute)</dt>

   <dd><p>The media must be the same as the value of the element's
   <code title="">media</code> content attribute.</p></dd>

   <dt>The style sheet title (<code title="dom-stylesheet-title">title</code> DOM attribute)</dt>

   <dd><p>The title must be the same as the value of the element's
   <code title="">title</code> content attribute. If the attribute is
   absent, then the style sheet does not have a title. The title is
   used for defining <dfn>alternative style sheet sets</dfn>.</p></dd>

  </dl>

  <p>The <dfn
  title="dom-LinkStyle-disabled"><code>disabled</code></dfn> DOM
  attribute on <code>link</code> and <code>style</code> elements must
  return false and do nothing on setting, if the <code
  title="dom-linkstyle-sheet">sheet</code> attribute of their
  <code>LinkStyle</code> interface is null. Otherwise, it must return
  the value of the <code>StyleSheet</code> interface's <code
  title="dom-stylesheet-disabled">disabled</code> attribute on
  getting, and forward the new value to that same attribute on
  setting.</p>

  <!-- <p class="big-issue">Need more here - defining preferred
  stylesheets, alternative stylesheets, persistent stylesheets, ordering
  of stylesheets, dynamic additions/removals, how it maps to
  .styleSheets, HTTP Link: headers, and the stuff about the alternative
  stylesheet API.</p> XXX that will all be covered by Anne's spec -->



  <h3>Sections</h3>

  <p id="applyToSection">Some elements, for example
  <code>address</code> elements, are scoped to their nearest ancestor
  <span>sectioning content</span>. For such elements <var
  title="">x</var>, the elements that apply to a <span>sectioning
  content</span> element <var title="">e</var> are all the <var
  title="">x</var> elements whose nearest <span>sectioning
  content</span> ancestor is <var title="">e</var>.</p>


  <h4>The <dfn><code>body</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Sectioning content</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>As the second element in an <code>html</code> element.</dd>
   <dt>Content model:</dt>
   <dd><span>Flow content</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>body</code> element represents the main content of the
  document.</p>

  <p>In conforming documents, there is only one <code>body</code>
  element. The <code title="dom-document-body">document.body</code>
  DOM attribute provides scripts with easy access to a document's
  <code>body</code> element.</p>

  <p class="note">Some DOM operations (for example, parts of the
  <span>drag and drop</span> model) are defined in terms of "<span>the
  body element</span>". This refers to a particular element in the
  DOM, as per the definition of the term, and not any arbitrary
  <code>body</code> element.</p>


  <h4>The <dfn><code>section</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Flow content</span>.</dd>
   <dd><span>Sectioning content</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>flow content</span> is expected.</dd>
   <dt>Content model:</dt>
   <dd><span>Flow content</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>section</code> element represents a generic document or
  application section. A section, in this context, is a thematic
  grouping of content, typically with a header, possibly with a
  footer.</p>

  <p class="example">Examples of sections would be chapters, the
  various tabbed pages in a tabbed dialog box, or the numbered
  sections of a thesis. A Web site's home page could be split into
  sections for an introduction, news items, contact information.</p>


  <h4>The <dfn><code>nav</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Flow content</span>.</dd>
   <dd><span>Sectioning content</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>flow content</span> is expected.</dd>
   <dt>Content model:</dt>
   <dd><span>Flow content</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>nav</code> element represents a section of a page that
  links to other pages or to parts within the page: a section with
  navigation links. Not all groups of links on a page need to be in a
  <code>nav</code> element &mdash; only sections that consist of
  primary navigation blocks are appropriate for the <code>nav</code>
  element. In particular, it is common for footers to have a list of
  links to various key parts of a site, but the <code>footer</code>
  element is more appropriate in such cases.</p>

  <div class="example">

   <p>In the following example, the page has several places where
   links are present, but only one of those places is considered a
   navigation section.</p>

   <pre>&lt;body>
 &lt;header>
  &lt;h1>Wake up sheeple!&lt;/h1>
  &lt;p>&lt;a href="news.html">News&lt;/a> -
     &lt;a href="blog.html">Blog&lt;/a> -
     &lt;a href="forums.html">Forums&lt;/a>&lt;/p>
 &lt;/header>
 &lt;nav>
  &lt;h1>Navigation&lt;/h1>
  &lt;ul>
   &lt;li>&lt;a href="articles.html">Index of all articles&lt;/a>&lt;li>
   &lt;li>&lt;a href="today.html">Things sheeple need to wake up for today&lt;/a>&lt;li>
   &lt;li>&lt;a href="successes.html">Sheeple we have managed to wake&lt;/a>&lt;li>
  &lt;/ul>
 &lt;/nav>
 &lt;article>
  &lt;p>...<em>page content would be here</em>...&lt;/p>
 &lt;/article>
 &lt;footer>
  &lt;p>Copyright &copy; 2006 The Example Company&lt;/p>
  &lt;p>&lt;a href="about.html">About&lt;/a> -
     &lt;a href="policy.html">Privacy Policy&lt;/a> -
     &lt;a href="contact.html">Contact Us&lt;/a>&lt;/p>
 &lt;/footer>
&lt;/body></pre>

  </div>


  <h4>The <dfn><code>article</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Flow content</span>.</dd>
   <dd><span>Sectioning content</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>flow content</span> is expected.</dd>
   <dt>Content model:</dt>
   <dd><span>Flow content</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None.</dd>
<!--
XXX attributes to give the date authored, date published
-->
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>article</code> element represents a section of a page
  that consists of a composition that forms an independent part of a
  document, page, or site. This could be a forum post, a magazine or
  newspaper article, a Web log entry, a user-submitted comment, or any
  other independent item of content.</p>

  <p class="note">An <code>article</code> element is "independent" in
  that its contents could stand alone, for example in syndication.
  However, the element is still associated with its ancestors; for
  instance, contact information that <a
  href="#applyToSection">applies</a> to a parent <code>body</code>
  element still covers the <code>article</code> as well.</p> <!-- XXX
  or should we apply the rules in the last paragraph to all articles?
  -->

  <p>When <code>article</code> elements are nested, the inner
  <code>article</code> elements represent articles that are in
  principle related to the contents of the outer article. For
  instance, a Web log entry on a site that accepts user-submitted
  comments could represent the comments as <code>article</code>
  elements nested within the <code>article</code> element for the Web
  log entry.</p>

  <p>Author information associated with an <code>article</code>
  element (q.v. the <code>address</code> element) does not apply to
  nested <code>article</code> elements.</p>



  <h4>The <dfn><code>aside</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Flow content</span>.</dd>
   <dd><span>Sectioning content</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>flow content</span> is expected.</dd>
   <dt>Content model:</dt>
   <dd><span>Flow content</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>aside</code> element represents a section of a page
  that consists of content that is tangentially related to the content
  around the <code>aside</code> element, and which could be considered
  separate from that content. Such sections are often represented as
  sidebars in printed typography.</p>

  <div class="example">

   <p>The following example shows how an aside is used to mark up
   background material on Switzerland in a much longer news story on Europe.</p>

   <pre>&lt;aside>
 &lt;h1>Switzerland&lt;/h1>
 &lt;p>Switzerland, a land-locked country in the middle of geographic
 Europe, has not joined the geopolitical European Union, though it is
 a signatory to a number of European treaties.&lt;/p>
&lt;/aside></pre>

  </div>

  <div class="example">

   <p>The following example shows how an aside is used to mark up
   a pull quote in a longer article.</p>

   <pre>...

&lt;p>He later joined a large company, continuing on the same work.
&lt;q>I love my job. People ask me what I do for fun when I'm not at
work. But I'm paid to do my hobby, so I never know what to
answer. Some people wonder what they would do if they didn't have to
work... but I know what I would do, because I was unemployed for a
year, and I filled that time doing exactly what I do
now.&lt;/q>&lt;/p>

&lt;aside>
 &lt;q> People ask me what I do for fun when I'm not at work. But I'm
 paid to do my hobby, so I never know what to answer. &lt;/q>
&lt;/aside>

&lt;p>Of course his work &mdash; or should that be hobby? &mdash;
isn't his only passion. He also enjoys other pleasures.&lt;/p>

...</pre>

  </div>



  <h4>The <dfn><code>h1</code></dfn>, <dfn><code>h2</code></dfn>,
  <dfn><code>h3</code></dfn>, <dfn><code>h4</code></dfn>,
  <dfn><code>h5</code></dfn>, and <dfn><code>h6</code></dfn>
  elements</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Flow content</span>.</dd>
   <dd><span>Heading content</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>flow content</span> is expected.</dd>
   <dt>Content model:</dt>
   <dd><span>Phrasing content</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>These elements define headers for their sections.</p>

  <p>The semantics and meaning of these elements are defined in the
  section on <span>headings and sections</span>.</p>

  <p>These elements have a <dfn>rank</dfn> given by the number in
  their name. The <code>h1</code> element is said to have the highest
  rank, the <code>h6</code> element has the lowest rank, and two
  elements with the same name have equal rank.</p>


  <h4>The <dfn><code>header</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Flow content</span>.</dd>
   <dd><span>Heading content</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>flow content</span> is expected.</dd>
   <dt>Content model:</dt>
   <dd><span>Flow content</span>, including at least one descendant
   that is <span>heading content</span>, but no <span>sectioning
   content</span> descendants, no <code>header</code> element
   descendants, and no <code>footer</code> element descendants.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>header</code> element represents the header of a
  section. The element is typically used to group a set of
  <code>h1</code>-<code>h6</code> elements to mark up a page's title
  with its subtitle or tagline. However, <code>header</code> elements
  may contain more than just the section's headings and subheadings
  &mdash; for example it would be reasonable for the header to include
  version history information.

  <p>For the purposes of document summaries, outlines, and the like,
  <code>header</code> elements are equivalent to the highest <span
  title="rank">ranked</span> <code>h1</code>-<code>h6</code> element
  descendant of the <code>header</code> element (the first such
  element if there are multiple elements with that
  <span>rank</span>).</p>

  <p>Other heading elements in the <code>header</code> element
  indicate subheadings or subtitles.</p>

  <p>The <span>rank</span> of a <code>header</code> element is the
  same as for an <code>h1</code> element (the highest rank).</p>

  <p>The section on <span>headings and sections</span>
  defines how <code>header</code> elements are assigned to individual
  sections.</p>

  <div class="example">

   <p>Here are some examples of valid headers. In each case, the
   emphasised text represents the text that would be used as the
   header in an application extracting header data and ignoring
   subheadings.</p>

   <pre>&lt;header&gt;
 &lt;h1&gt;<strong>The reality dysfunction</strong>&lt;/h1&gt;
 &lt;h2&gt;Space is not the only void&lt;/h2&gt;
&lt;/header&gt;</pre>

   <pre>&lt;header&gt;
 &lt;h1&gt;<strong>Dr. Strangelove</strong>&lt;/h1&gt;
 &lt;h2&gt;Or: How I Learned to Stop Worrying and Love the Bomb&lt;/h2&gt;
&lt;/header&gt;</pre>

   <pre>&lt;header&gt;
 &lt;p&gt;Welcome to...&lt;/p&gt;
 &lt;h1&gt;<strong>Voidwars!</strong>&lt;/h1&gt;
&lt;/header&gt;</pre>

   <pre>&lt;header&gt;
 &lt;h1&gt;<strong>Scalable Vector Graphics (SVG) 1.2</strong>&lt;/h1&gt;
 &lt;h2&gt;W3C Working Draft 27 October 2004&lt;/h2&gt;
 &lt;dl&gt;
  &lt;dt&gt;This version:&lt;/dt&gt;
  &lt;dd&gt;&lt;a href="http://www.w3.org/TR/2004/WD-SVG12-20041027/"&gt;http://www.w3.org/TR/2004/WD-SVG12-20041027/&lt;/a&gt;&lt;/dd&gt;
  &lt;dt&gt;Previous version:&lt;/dt&gt;
  &lt;dd&gt;&lt;a href="http://www.w3.org/TR/2004/WD-SVG12-20040510/"&gt;http://www.w3.org/TR/2004/WD-SVG12-20040510/&lt;/a&gt;&lt;/dd&gt;
  &lt;dt&gt;Latest version of SVG 1.2:&lt;/dt&gt;
  &lt;dd&gt;&lt;a href="http://www.w3.org/TR/SVG12/"&gt;http://www.w3.org/TR/SVG12/&lt;/a&gt;&lt;/dd&gt;
  &lt;dt&gt;Latest SVG Recommendation:&lt;/dt&gt;
  &lt;dd&gt;&lt;a href="http://www.w3.org/TR/SVG/"&gt;http://www.w3.org/TR/SVG/&lt;/a&gt;&lt;/dd&gt;
  &lt;dt&gt;Editor:&lt;/dt&gt;
  &lt;dd&gt;Dean Jackson, W3C, &lt;a href="mailto:dean@w3.org"&gt;dean@w3.org&lt;/a&gt;&lt;/dd&gt;
  &lt;dt&gt;Authors:&lt;/dt&gt;
  &lt;dd&gt;See &lt;a href="#authors"&gt;Author List&lt;/a&gt;&lt;/dd&gt;
 &lt;/dl&gt;
 &lt;p class="copyright"&gt;&lt;a href="http://www.w3.org/Consortium/Legal/ipr-notic <em>...</em>
&lt;/header&gt;</pre>
  </div>


  <h4>The <dfn><code>footer</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Flow content</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>flow content</span> is expected.</dd>
   <dt>Content model:</dt>
   <dd><span>Flow content</span>, but with no <span>heading
   content</span> descendants, no <span>sectioning content</span>
   descendants, and no <code>footer</code> element descendants.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>footer</code> element represents the footer for the
  section it <a href="#applyToSection">applies</a> to. A footer
  typically contains information about its section such as who wrote
  it, links to related documents, copyright data, and the like.</p>

  <p>Contact information for the section given in a
  <code>footer</code> should be marked up using the
  <code>address</code> element.</p>

  <p>Footers don't necessarily have to appear at the end of a section,
  though they usually do.</p>

  <div class="example">

   <p>Here is a page with two footers, one at the top and one at the
   bottom, with the same content:</p>

   <pre>&lt;body>
 &lt;footer>&lt;a href="../">Back to index...&lt;/a>&lt;/footer>
 &lt;h1>Lorem ipsum&lt;/h1>
 &lt;p>A dolor sit amet, consectetur adipisicing elit, sed do eiusmod
 tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim
 veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex
 ea commodo consequat. Duis aute irure dolor in reprehenderit in
 voluptate velit esse cillum dolore eu fugiat nulla
 pariatur. Excepteur sint occaecat cupidatat non proident, sunt in
 culpa qui officia deserunt mollit anim id est laborum.&lt;/p>
 &lt;footer>&lt;a href="../">Back to index...&lt;/a>&lt;/footer>
&lt;/body></pre>

  </div>


  <h4>The <dfn><code>address</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Flow content</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>flow content</span> is expected.</dd>
   <dt>Content model:</dt>
   <dd><span>Flow content</span>, but with no <span>heading
   content</span> descendants, no <span>sectioning content</span>
   descendants, no <code>footer</code> element descendants, and no
   <code>address</code> element descendants.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>address</code> element represents the contact
  information for the section it <a href="#applyToSection">applies</a>
  to. If it applies to <span>the <code>body</code> element</span>,
  then it instead applies to the document as a whole.</p>

  <div class="example">
   <p>For example, a page at the W3C Web site related to HTML might
   include the following contact information:</p>
   <pre>&lt;ADDRESS>
 &lt;A href="../People/Raggett/">Dave Raggett&lt;/A>, 
 &lt;A href="../People/Arnaud/">Arnaud Le Hors&lt;/A>, 
 contact persons for the &lt;A href="Activity">W3C HTML Activity&lt;/A>
&lt;/ADDRESS></pre>
  </div>

  <p>The <code>address</code> element must not be used to represent
  arbitrary addresses (e.g. postal addresses), unless those addresses
  are contact information for the section. (The <code>p</code> element
  is the appropriate element for marking up such addresses.)</p>

  <p>The <code>address</code> element must not contain information
  other than contact information.</p>

  <div class="example">
   <p>For example, the following is non-conforming use of the
   <code>address</code> element:</p>
   <pre>&lt;ADDRESS>Last Modified: 1999/12/24 23:37:50&lt;/ADDRESS></pre>
  </div>

  <p>Typically, the <code>address</code> element would be included
  with other information in a <code>footer</code> element.</p>

  <p>To determine the contact information for a <span>sectioning
  content</span> element (such as a document's <code>body</code>
  element, which would give the contact information for the page), UAs
  must collect all the <code>address</code> elements that <a
  href="#applyToSection">apply</a> to that <span>sectioning
  content</span> element and its ancestor <span>sectioning
  content</span> elements. The contact information is the collection
  of all the information given by those elements.</p> <!-- XXX
  exception for nested article elements? -->

  <p class="note">Contact information for one <span>sectioning
  content</span> element, e.g.  an <code>aside</code> element, does
  not apply to its ancestor elements, e.g. the page's
  <code>body</code>.</p>



  <h4><dfn>Headings and sections</dfn></h4>

  <p>The <code>h1</code>-<code>h6</code> elements and the
  <code>header</code> element are headings.</p>

  <p>The first element of <span>heading content</span> in an element
  of <span>sectioning content</span> gives the header for that
  section. Subsequent headers of equal or higher <span>rank</span>
  start new (implied) sections, headers of lower <span>rank</span>
  start subsections that are part of the previous one.</p>

  <p><span>Sectioning content</span> elements are always considered
  subsections of their nearest ancestor element of <span>sectioning
  content</span>, regardless of what implied sections other headings
  may have created.</p>

  <p>Certain elements are said to be <dfn title="sectioning
  root">sectioning roots</dfn>, including <code>blockquote</code> and
  <code>td</code> elements. These elements can have their own
  outlines, but the sections and headers inside these elements do not
  contribute to the outlines of their ancestors.</p>

  <div class="example">
   <p>For the following fragment:</p>
   <pre>&lt;body&gt;
 &lt;h1&gt;Foo&lt;/h1&gt;
 &lt;h2&gt;Bar&lt;/h2&gt;
 &lt;blockquote&gt;
  &lt;h3&gt;Bla&lt;/h3&gt;
 &lt;/blockquote&gt;
 &lt;p&gt;Baz&lt;/p&gt;
 &lt;h2&gt;Quux&lt;/h2&gt;
 &lt;section&gt;
  &lt;h3&gt;Thud&lt;/h3&gt;
 &lt;/section&gt;
 &lt;p&gt;Grunt&lt;/p&gt;
&lt;/body&gt;</pre>
   <p>...the structure would be:</p>
   <ol>
    <li>
     Foo (heading of explicit <code>body</code> section, containing the "Grunt" paragraph)
     <ol>
      <li>
       Bar (heading starting implied section, containing a block quote and the "Baz" paragraph)
      </li>
      <li>
       Quux (heading starting implied section)
      </li>
      <li>
       Thud (heading of explicit <code>section</code> section)
      </li>
     </ol>
    </li>
   </ol>
   <p>Notice how the <code>section</code> ends the earlier implicit
   section so that a later paragraph ("Grunt") is back at the top
   level.</p>
  </div>

  <p>Sections may contain headers of any <span>rank</span>, but
  authors are strongly encouraged to either use only <code>h1</code>
  elements, or to use elements of the appropriate <span>rank</span>
  for the section's nesting level.</p>

  <p>Authors are also encouraged to explictly wrap sections in
  elements of <span>sectioning content</span>, instead of relying on
  the implicit sections generated by having multiple heading in one
  element of <span>sectioning content</span>.</p>

  <div class="example">
   <p>For example, the following is correct:</p>

   <pre>&lt;body&gt;
 &lt;h4&gt;Apples&lt;/h4&gt;
 &lt;p&gt;Apples are fruit.&lt;/p&gt;
 &lt;section&gt;
  &lt;h2&gt;Taste&lt;/h2&gt;
  &lt;p&gt;They taste lovely.&lt;/p&gt;
  &lt;h6&gt;Sweet&lt;/h6&gt;
  &lt;p&gt;Red apples are sweeter than green ones.&lt;/p&gt;
  &lt;h1&gt;Color&lt;/h1&gt;
  &lt;p&gt;Apples come in various colors.&lt;/p&gt;
 &lt;/section&gt;
&lt;/body&gt;</pre>

   <p>However, the same document would be more clearly expressed
   as:</p>

   <pre>&lt;body&gt;
 &lt;h1&gt;Apples&lt;/h1&gt;
 &lt;p&gt;Apples are fruit.&lt;/p&gt;
 &lt;section&gt;
  &lt;h2&gt;Taste&lt;/h2&gt;
  &lt;p&gt;They taste lovely.&lt;/p&gt;
  &lt;section&gt;
   &lt;h3&gt;Sweet&lt;/h3&gt;
   &lt;p&gt;Red apples are sweeter than green ones.&lt;/p&gt;
  &lt;/section&gt;
 &lt;/section&gt;
 &lt;section&gt;
  &lt;h2&gt;Color&lt;/h2&gt;
  &lt;p&gt;Apples come in various colors.&lt;/p&gt;
 &lt;/section&gt;
&lt;/body&gt;</pre>

   <p>Both of the documents above are semantically identical and would
   produce the same outline in compliant user agents.</p>

  </div>


  <h5 id="outlines">Creating an outline</h5>

  <p>This section defines an algorithm for creating an
  <dfn>outline</dfn> for a <span>sectioning content</span> element or
  a <span>sectioning root</span> element. It is defined in terms of a
  walk over the nodes of a DOM tree, in tree order, with each node
  being visited when it is <i>entered</i> and when it is <i>exited</i>
  during the walk.</p>

  <p>The outline for a <span>sectioning content</span> element or a
  <span>sectioning root</span> element consists of a list of one or
  more potentially nested sections. Each section can have one heading
  associated with it. The algorithm for the outline also associates
  each node in the DOM tree with a particular section and potentially
  a heading. (The sections in the outline aren't <code>section</code>
  elements, though some may correspond to such elements &mdash; they
  are merely conceptual sections.)</p>

  <p>The algorithm that must be followed during a walk of a DOM
  subtree rooted at a <span>sectioning content</span> element or a
  <span>sectioning root</span> element to determine that element's
  outline is as follows:</p>

  <ol>

   <li><p>Let <var title="">current outlinee</var> be null. (It holds
   the element whose outline is being created.)</p></li>

   <li><p>Let <var title="">current section</var> be null. (It holds a
   pointer to a section, so that elements in the DOM can all be
   associated with a section.)</p></li>

   <li><p>Create a stack to hold elements, which is used to handle
   nesting. Initialise this stack to empty.</p></li>

   <li>

    <p>As you walk over the DOM in <span>tree order</span>, trigger
    the first relevant step below for each element as you enter and
    exit it.</p>

    <dl class="switch">

     <dt>If the top of the stack is an element, and you are exiting
     that element</dt>

     <dd>

      <p class="note">The element being exited is a <span>heading
      content</span> element.</p>

      <p>Pop that element from the stack.</p>

     </dd>


     <dt>If the top of the stack is a <span>heading content</span>
     element</dt>

     <dd><p>Do nothing.</p></dd>


     <dt>When entering a <span>sectioning content</span> element or a
     <span>sectioning root</span> element</dt>

     <dd>

      <p>If <var title="">current outlinee</var> is not null, push
      <var title="">current outlinee</var> onto the stack.</p>

      <p>Let <var title="">current outlinee</var> be the element
      that is being entered.</p>

      <p>Let <var title="">current section</var> be a newly created
      section for the <var title="">current outlinee</var>
      element.</p>

      <p>Let there be a new outline for the new <var title="">current
      outlinee</var>, initialised with just the new <var
      title="">current section</var> as the only section in the
      outline.</p>

     </dd>


     <dt>When exiting a <span>sectioning content</span> element, if
     the stack is not empty</dt>

     <dd>

      <p>Pop the top element from the stack, and let the <var
      title="">current outlinee</var> be that element.</p>

      <p>Let <var title="">current section</var> be the last section
      in the outline of the <var title="">current outlinee</var>
      element.</p>

      <p>Append the outline of the <span>sectioning content</span>
      element being exited to the <var title="">current
      section</var>. (This does not change which section is the last
      section in the outline.)</p>

     </dd>


     <dt>When exiting a <span>sectioning root</span> element, if the
     stack is not empty</dt>

     <dd>

      <p>Run these steps:</p>

      <ol>

       <li><p>Pop the top element from the stack, and let the <var
       title="">current outlinee</var> be that element.</p></li>

       <li><p>Let <var title="">current section</var> be the last
       section in the outline of the <var title="">current
       outlinee</var> element.</p></li>

       <li><p><i>Loop:</i> If <var title="">current section</var> has
       no child sections, stop these steps.</p></li>

       <li><p>Let <var title="">current section</var> be the last
       child section of the current <var title="">current
       section</var>.</p></li>

       <li><p>Go back to the substep labelled <i>Loop</i>.</p></li>

      </ol>

     </dd>


     <dt>When exiting a <span>sectioning content</span> element or a
     <span>sectioning root</span> element</dt>

     <dd>

      <p class="note">The <var title="">current outlinee</var> is
      the element being exited.</p>

      <p>Let <var title="">current section</var> be the first section
      in the outline of the <var title="">current outlinee</var>
      element.</p>

      <p>Skip to the next step in the overall set of steps. (The walk
      is over.)</p>

     </dd>


     <dt>If the <var title="">current outlinee</var> is null.</dt>

     <dd><p>Do nothing.</p></dd>


     <dt>When entering a <span>heading content</span> element</dt>

     <dd>

      <p>If the <var title="">current section</var> has no heading,
      let the element being entered be the heading for the <var
      title="">current section</var>.</p>

      <p>Otherwise, if the element being entered has a rank equal to
      or greater than the heading of the <var title="">current
      section</var>, then create a new section and append it to the
      outline of the <var title="">current outlinee</var> element, so
      that this new section is the new last section of that
      outline. Let <var title="">current section</var> be that new
      section. Let the element being entered be the new heading for
      the <var title="">current section</var>.</p>

      <p>Otherwise, run these substeps:</p>

      <ol>

       <li><p>Let <var title="">candidate section</var> be <var
       title="">current section</var>.</p></li>

       <li><p>If the element being entered has a rank lower than the
       rank of the heading of the <var title="">candidate
       section</var>, then create a new section, and append it to <var
       title="">candidate section</var>. (This does not change which
       section is the last section in the outline.) Let <var
       title="">current section</var> be this new section.  Let the
       element being entered be the new heading for the <var
       title="">current section</var>. Abort these substeps.</p>

       <li><p>Let <var title="">candidate section</var> be the section
       that contains the previous <var title="">candidate
       section</var> in the outline of <var title="">current
       outlinee</var>.</p></li>

       <li><p>Return to step 2.</p></li>

      </ol>

      <p>Push the element being entered onto the stack. (This causes
      the algorithm to skip any descendants of the element.)</p>

     </dd>


     <dt>Otherwise</dt>

     <dd><p>Do nothing.</p></dd>

    </dl>

    <p id="associatedSection">In addition, whenever you exit a node,
    after doing the steps above, if <var title="">current
    section</var> is not null, associate the node with the section
    <var title="">current section</var>.</p>

   </li>

   <li><p>If the <var title="">current outlinee</var> is null,
   then there was no <span>sectioning content</span> element or
   <span>sectioning root</span> element in the DOM. There is no
   outline. Abort these steps.</p></li>

   <li><p>Associate any nodes that were not associated a section in
   the steps above with <var title="">current outlinee</var> as their
   section.</p></li>

   <li><p>Associate all nodes with the heading of the section which
   which they are associated, if any.</p></li>

   <li><p>If <var title="">current outlinee</var> is <span>the
   <code>body</code> element</span>, then the outline created for that
   element is the outline of the entire document.</p></li>

  </ol>

  <p>The tree of sections created by the algorithm above, or a proper
  subset thereof, must be used when generating document outlines, for
  example when generating tables of contents.</p>

  <p>When creating an interactive table of contents, entries should
  jump the user to the relevant <span>sectioning content</span>
  element, if the section was created for a real element in the
  original document, or to the relevant <span>heading content</span>
  element, if the section in the tree was generated for a heading in
  the above process.</p>

  <p class="note">Selecting the first section of the document
  therefore always takes the user to the top of the document,
  regardless of where the first header in the <code>body</code> is to
  be found.</p> <!-- XXX assuming there is a body, anyway -->

  <div class="note">

   <p>The following JavaScript function shows how the tree walk could
   be implemented. The <var title="">root</var> argument is the root
   of the tree to walk, and the <var title="">enter</var> and <var
   title="">exit</var> arguments are callbacks that are called with
   the nodes as they are entered and exited. <a
   href="#refsECMA262">[ECMA262]</a></p>

   <pre>function (root, enter, exit) {
  var node = root;
  start: do while (node) {
    enter(node);
    if (node.firstChild) {
      node = node.firstChild;
      continue start;
    }
    while (node) {
      exit(node);
      if (node.nextSibling) {
        node = node.nextSibling;
        continue start;
      }
      if (node == root)
        node = null;
      else
        node = node.parentNode;
    }
  }
}</pre>

  </div>


  <h5>Distinguishing site-wide headings from page headings</h5>

  <p>Given the <span>outline</span> of a document, but ignoring any
  sections created for <code>nav</code> and <code>aside</code>
  elements, and any of their descendants, if the only root of the tree
  is <span>the <code>body</code> element</span>'s section, and it has
  only a single subsection which is created by an <code>article</code>
  element, then the heading of <span>the <code>body</code>
  element</span> should be assumed to be a site-wide heading, and the
  heading of the <code>article</code> element should be assumed to be
  the page's heading.</p>

  <p>If a page starts with a heading that is common to the whole site,
  the document must be authored such that, in the document's
  <span>outline</span>, ignoring any sections created for
  <code>nav</code> and <code>aside</code> elements and any of their
  descendants, the tree has only one root section, <span>the
  <code>body</code> element</span>'s section, its heading is the
  site-wide heading, <span>the <code>body</code> element</span> has
  just one subsection, that subsection is created by an
  <code>article</code> element, and that <code>article</code>'s
  heading is the page heading.</p>

  <p>If a page does not contain a site-wide heading, then the page
  must be authored such that, in the document's <span>outline</span>,
  ignoring any sections created for <code>nav</code> and
  <code>aside</code> elements and any of their descendants, either
  <span>the <code>body</code> element</span> has no subsections, or it
  has more than one subsection, or it has a single subsection but that
  subsection is not created by an <code>article</code> element, or
  there is more than one section at the root of the outline.</p>

  <p class="note">Conceptually, a site is thus a document with many
  articles &mdash; when those articles are split into many pages, the
  heading of the original single page becomes the heading of the site,
  repeated on every page.</p>



  <h3>Grouping content</h3><!-- XXX ew, find a better section name -->

  <h4>The <dfn><code>p</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Flow content</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>flow content</span> is expected.</dd>
   <dt>Content model:</dt>
   <dd><span>Phrasing content</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>p</code> element represents a
  <span>paragraph</span>.</p>

  <div class="example">
   <p>The following examples are conforming HTML fragments:</p>
   <pre>&lt;p&gt;The little kitten gently seated himself on a piece of
carpet. Later in his life, this would be referred to as the time the
cat sat on the mat.&lt;/p&gt;</pre>
   <pre>&lt;fieldset&gt;
 &lt;legend&gt;Personal information&lt;/legend&gt;
 &lt;p&gt;
   &lt;label&gt;Name: &lt;input name="n"&gt;&lt;/label&gt;
   &lt;label&gt;&lt;input name="anon" type="checkbox"&gt; Hide from other users&lt;/label&gt;
 &lt;/p&gt;
 &lt;p&gt;&lt;label&gt;Address: &lt;textarea name="a"&gt;&lt;/textarea&gt;&lt;/label&gt;&lt;/p&gt;
&lt;/fieldset&gt;</pre>
   <pre>&lt;p&gt;There was once an example from Femley,&lt;br&gt;
Whose markup was of dubious quality.&lt;br&gt;
The validator complained,&lt;br&gt;
So the author was pained,&lt;br&gt;
To move the error from the markup to the rhyming.&lt;/p&gt;</pre>
  </div>

  <p>The <code>p</code> element should not be used when a more
  specific element is more appropriate.</p>

  <div class="example">

   <p>The following example is technically correct:</p>

<pre>&lt;section&gt;
 &lt;!-- ... --&gt;
 &lt;p&gt;Last modified: 2001-04-23&lt;/p&gt;
 &lt;p&gt;Author: fred@example.com&lt;/p&gt;
&lt;/section&gt;</pre>

   <p>However, it would be better marked-up as:</p>

<pre>&lt;section&gt;
 &lt;!-- ... --&gt;
 &lt;footer&gt;Last modified: 2001-04-23&lt;/footer&gt;
 &lt;address&gt;Author: fred@example.com&lt;/address&gt;
&lt;/section&gt;</pre>

   <p>Or:</p>

<pre>&lt;section&gt;
 &lt;!-- ... --&gt;
 &lt;footer&gt;
  &lt;p&gt;Last modified: 2001-04-23&lt;/p&gt;
  &lt;address&gt;Author: fred@example.com&lt;/address&gt;
 &lt;/footer&gt;
&lt;/section&gt;</pre>

  </div>


  <h4>The <dfn><code>hr</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Flow content</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>flow content</span> is expected.</dd>
   <dt>Content model:</dt>
   <dd>Empty.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>hr</code> element represents a
  <span>paragraph</span>-level thematic break, e.g. a scene change in
  a story, or a transition to another topic within a section of a
  reference book.</p>


  <h4>The <dfn><code>br</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Phrasing content</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>phrasing content</span> is expected.</dd>
   <dt>Content model:</dt>
   <dd>Empty.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>br</code> element represents a line break.</p>

  <p><code>br</code> elements must be empty. Any content inside
  <code>br</code> elements must not be considered part of the
  surrounding text.</p>

  <p><code>br</code> elements must only be used for line breaks that
  are actually part of the content, as in poems or addresses.</p>

  <div class="example">

  <p>The following example is correct usage of the <code>br</code>
  element:</p>

   <pre>&lt;p&gt;P. Sherman&lt;br&gt;
42 Wallaby Way&lt;br&gt;
Sydney&lt;/p&gt;</pre>

  </div>

  <p><code>br</code> elements must not be used for separating thematic
  groups in a paragraph.</p>

  <div class="example">

   <p>The following examples are non-conforming, as they abuse the
   <code>br</code> element:</p>

   <pre>&lt;p&gt;&lt;a ...&gt;34 comments.&lt;/a&gt;&lt;br&gt;
&lt;a ...&gt;Add a comment.&lt;a&gt;&lt;/p&gt;</pre>

   <pre>&lt;p&gt;Name: &lt;input name="name"&gt;&lt;br&gt;
Address: &lt;input name="address"&gt;&lt;/p&gt;</pre>

   <p>Here are alternatives to the above, which are correct:</p>

   <pre>&lt;p&gt;&lt;a ...&gt;34 comments.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a ...&gt;Add a comment.&lt;a&gt;&lt;/p&gt;</pre>

   <pre>&lt;p&gt;Name: &lt;input name="name"&gt;&lt;/p&gt;
&lt;p&gt;Address: &lt;input name="address"&gt;&lt;/p&gt;</pre>

   <!-- XXX should have labels in the examples above -->

  </div>

  <p>If a <span>paragraph</span> consists of nothing but a single
  <code>br</code> element, it represents a placeholder blank line
  (e.g. as in a template). Such blank lines must not be used for
  presentation purposes.</p> <!-- XXX i'm uncomfortable about
  this. The use case is editing, e.g. contentEditable, where a user
  has created a new paragraph but not added any text to it yet. Such
  content shouldn't go over the wire, though. We need to make it
  illegal while still defining what it means. Maybe. -->


  <h4>The <dfn><code>pre</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Flow content</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>flow content</span> is expected.</dd>
   <dt>Content model:</dt>
   <dd><span>Phrasing content</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>pre</code> element represents a block of preformatted
  text, in which structure is represented by typographic conventions
  rather than by elements.</p>

  <p class="note"><strong>In the <span title="">HTML
  serialisation</span><!-- XXX xref -->, a leading newline character
  immediately following the <code>pre</code> element start tag is
  stripped.</strong></p>

  <p>Some examples of cases where the <code>pre</code> element could
  be used:</p>

  <ul>

   <li>Including an e-mail, with paragraphs indicated by blank lines,
   lists indicated by lines prefixed with a bullet, and so on.</li>

   <li>Including fragments of computer code, with structure indicated
   according to the conventions of that language.</li>

   <li>Displaying ASCII art.</li> <!-- XXX need a note about non-visual UAs -->

  </ul>

  <p>To represent a block of computer code, the <code>pre</code>
  element can be used with a <code>code</code> element; to represent a
  block of computer output the <code>pre</code> element can be used
  with a <code>samp</code> element. Similarly, the <code>kbd</code>
  element can be used within a <code>pre</code> element to indicate
  text that the user is to enter.</p>

  <div class="example">

   <p>In the following snippet, a sample of computer code is
   presented.</p>

   <pre>&lt;p>This is the &lt;code>Panel&lt;/code> constructor:&lt;/p>
&lt;pre>&lt;code>function Panel(element, canClose, closeHandler) {
  this.element = element;
  this.canClose = canClose;
  this.closeHandler = function () { if (closeHandler) closeHandler() };
}&lt;/code>&lt;/pre></pre>

  </div>

  <div class="example">

   <p>In the following snippet, <code>samp</code> and <code>kbd</code>
   elements are mixed in the contents of a <code>pre</code> element to
   show a session of Zork I.</p>

   <pre>&lt;pre>&lt;samp>You are in an open field west of a big white house with a boarded
front door.
There is a small mailbox here.

>&lt;/samp> &lt;kbd>open mailbox&lt;/kbd>

&lt;samp>Opening the mailbox reveals:
A leaflet.

>&lt;/samp>&lt;/pre></pre>

  </div>

  <div class="example">

   <p>The following shows a contemporary poem that uses the
   <code>pre</code> element to preserve its unusual formatting, which
   forms an intrinsic part of the poem itself.</p>

   <pre>&lt;pre>                maxling

it is with a          heart
               heavy

that i admit loss of a feline
        so           loved

a friend lost to the
        unknown
                                (night)

~cdr 11dec07&lt;/pre></pre>

  </div>


  <h4>The <dfn><code>dialog</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Flow content</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>flow content</span> is expected.</dd>
   <dt>Content model:</dt>
   <dd>Zero or more pairs of <code>dt</code> and <code>dd</code>
   elements.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>dialog</code> element represents a conversation.</p>

  <p>Each part of the conversation must have an explicit talker (or
  speaker) given by a <code>dt</code> element, and a discourse (or
  quote) given by a <code>dd</code> element.</p>

  <div class="example">
   <p>This example demonstrates this using an extract from Abbot and
   Costello's famous sketch, <cite>Who's on first</cite>:</p>
<pre>&lt;dialog>
 &lt;dt> Costello
 &lt;dd> Look, you gotta first baseman?
 &lt;dt> Abbott
 &lt;dd> Certainly.
 &lt;dt> Costello
 &lt;dd> Who's playing first?
 &lt;dt> Abbott
 &lt;dd> That's right.
 &lt;dt> Costello
 &lt;dd> When you pay off the first baseman every month, who gets the money?
 &lt;dt> Abbott
 &lt;dd> Every dollar of it. 
&lt;/dialog></pre>
  </div>

  <p class="note">Text in a <code>dt</code> element in a
  <code>dialog</code> element is implicitly the source of the text
  given in the following <code>dd</code> element, and the contents of
  the <code>dd</code> element are implicitly a quote from that
  speaker. There is thus no need to include <code>cite</code>,
  <code>q</code>, or <code>blockquote</code> elements in this
  markup. Indeed, a <code>q</code> element inside a <code>dd</code>
  element in a conversation would actually imply the people talking
  were themselves quoting another work. See the <code>cite</code>,
  <code>q</code>, and <code>blockquote</code> elements for other ways
  to cite or quote.</p>


  <h4>The <dfn><code>blockquote</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Flow content</span>.</dd>
   <dd><span>Sectioning root</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>flow content</span> is expected.</dd>
   <dt>Content model:</dt>
   <dd><span>Flow content</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd><code title="attr-blockquote-cite">cite</code></dd>
   <dt>DOM interface:</dt>
   <dd>
<pre class="idl">interface <dfn>HTMLQuoteElement</dfn> : <span>HTMLElement</span> {
           attribute DOMString <span title="dom-quote-cite">cite</span>;
};</pre>
    <p class="note">The <code>HTMLQuoteElement</code> interface is
    also used by the <code>q</code> element.</p>
   </dd>
  </dl>

  <p>The <code>blockquote</code> element represents a section that is
  quoted from another source.</p>

  <p>Content inside a <code>blockquote</code> must be quoted from
  another source, whose URI, if it has one, should be cited in the
  <dfn title="attr-blockquote-cite"><code>cite</code></dfn>
  attribute.</p>

  <p>If the <code title="attr-blockquote-cite">cite</code> attribute
  is present, it must be a URI (or IRI). User agents should allow
  users to follow such citation links.</p>

  <p>If a <code>blockquote</code> element is <span>preceded or
  followed</span> by a single <span>paragraph</span> that contains a
  single <code>cite</code> element and that is itself not
  <span>preceded or followed</span> by another <code>blockquote</code>
  element and does not itself have a <code>q</code> element
  descendant, then, the title of the work given by that
  <code>cite</code> element gives the source of the quotation
  contained in the <code>blockquote</code> element.</p>

  <p>The <dfn title="dom-quote-cite"><code>cite</code></dfn> DOM
  attribute <code>reflects</code> the element's <code
  title="">cite</code> content attribte.

  <p class="note">The best way to represent a conversation is not with
  the <code>cite</code> and <code>blockquote</code> elements, but with
  the <code>dialog</code> element.</p>



  <h4>The <dfn><code>ol</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Flow content</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>flow content</span> is expected.</dd>
<!--XXXSPAN
   <dd>As the only child of a <code>span</code> element.</dd>
-->
   <dt>Content model:</dt>
   <dd>Zero or more <code>li</code> elements.</dd>
   <dt>Element-specific attributes:</dt>
   <dd><code title="attr-ol-reversed">reversed</code></dd>
   <dd><code title="attr-ol-start">start</code></dd>
   <dt>DOM interface:</dt>
   <dd>
<pre class="idl">interface <dfn>HTMLOListElement</dfn> : <span>HTMLElement</span> {
           attribute boolean <span title="dom-ol-reversed">reversed</span>;
           attribute long <span title="dom-ol-start">start</span>;
};</pre>
   </dd>
  </dl>

  <p>The <code>ol</code> element represents a list of items, where the
  items have been intentionally ordered, such that changing the order
  would change the meaning of the document.</p>

  <p>The items of the list are the <code>li</code> element child nodes
  of the <code>ol</code> element, in <span>tree order</span>.</p>

  <p>The <dfn title="attr-ol-reversed"><code>reversed</code></dfn>
  attribute is a <span>boolean attribute</span>. If present, it
  indicates that the list is an ascending list. If the attribute is
  present, the list is a descending list.</p>

  <p>The <dfn title="attr-ol-start"><code>start</code></dfn>
  attribute, if present, must be a <span>valid integer</span> giving
  the ordinal value of the first list item.</p>

  <p>If the <code title="attr-ol-start">start</code> attribute is
  present, user agents must <span title="rules for parsing
  integers">parse it as an integer</span>, in order to determine the
  attribute's value. The default value, used if the attribute is
  missing or if the value cannot be converted to a number according to
  the referenced algorithm, is 1 if the element has no <code
  title="attr-ol-reversed">reversed</code> attribute, and is the
  number of child <code>li</code> elements otherwise.</p>

  <p>The first item in the list has the ordinal value given by the
  <code>ol</code> element's <code title="attr-ol-start">start</code>
  attribute, unless that <code>li</code> element has a <code
  title="attr-li-value">value</code> attribute with a value that can
  be successfully parsed, in which case it has the ordinal value given
  by that <code title="attr-li-value">value</code> attribute.</p>

  <p>Each subsequent item in the list has the ordinal value given by
  its <code title="attr-li-value">value</code> attribute, if it has
  one, or, if it doesn't, the ordinal value of the previous item, plus
  one if the <code title="attr-ol-reversed">reversed</code> is absent,
  or minus one if it is present.</p>

  <p>The <dfn title="dom-ol-reversed"><code>reversed</code></dfn> DOM
  attribute must <span>reflect</span> the value of the <code
  title="attr-ol-reversed">reversed</code> content attribute.</p>

  <p>The <dfn title="dom-ol-start"><code>start</code></dfn> DOM
  attribute must <span>reflect</span> the value of the <code
  title="attr-ol-start">start</code> content attribute.</p>

  <!-- XXX resuming numbering of lists from previous lists? -->
  <!-- XXX counting up and down? -->
  <!-- XXX reverse-counted lists? -->

  <div class="example">

   <p>The following markup shows a list where the order matters, and
   where the <code>ol</code> element is therefore appropriate. Compare
   this list to the equivalent list in the <code>ul</code> section to
   see an example of the same items using the <code>ul</code>
   element.</p>

   <pre>&lt;p>I have lived in the following countries (given in the order of when
I first lived there):&lt;/p>
&lt;ol>
 &lt;li>Switzerland
 &lt;li>United Kingdom
 &lt;li>United States
 &lt;li>Norway
&lt;/ol></pre>

   <p>Note how changing the order of the list changes the meaning of
   the document. In the following example, changing the relative order
   of the first two items has changed the birthplace of the
   author:</p>

   <pre>&lt;p>I have lived in the following countries (given in the order of when
I first lived there):&lt;/p>
&lt;ol>
 &lt;li>United Kingdom
 &lt;li>Switzerland
 &lt;li>United States
 &lt;li>Norway
&lt;/ol></pre>

  </div>


  <h4>The <dfn><code>ul</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Flow content</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>flow content</span> is expected.</dd>
<!--XXXSPAN
   <dd>As the only child of a <code>span</code> element.</dd>
-->
   <dt>Content model:</dt>
   <dd>Zero or more <code>li</code> elements.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>ul</code> element represents a list of items, where the
  order of the items is not important &mdash; that is, where changing
  the order would not materially change the meaning of the
  document.</p>

  <p>The items of the list are the <code>li</code> element child nodes
  of the <code>ul</code> element.</p>

  <div class="example">

   <p>The following markup shows a list where the order does not
   matter, and where the <code>ul</code> element is therefore
   appropriate. Compare this list to the equivalent list in the
   <code>ol</code> section to see an example of the same items using
   the <code>ol</code> element.</p>

   <pre>&lt;p>I have lived in the following countries:&lt;/p>
&lt;ul>
 &lt;li>Norway
 &lt;li>Switzerland
 &lt;li>United Kingdom
 &lt;li>United States
&lt;/ul></pre>

   <p>Note that changing the order of the list does not change the
   meaning of the document. The items in the snippet above are given
   in alphabetical order, but in the snippet below they are given in
   order of the size of their current account balance in 2007, without
   changing the meaning of the document whatsoever:</p>

   <pre>&lt;p>I have lived in the following countries:&lt;/p>
&lt;ul>
 &lt;li>Switzerland
 &lt;li>Norway
 &lt;li>United Kingdom
 &lt;li>United States
&lt;/ul></pre>

  </div>


  <h4>The <dfn><code>li</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd>None.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>Inside <code>ol</code> elements.</dd>
   <dd>Inside <code>ul</code> elements.</dd>
   <dd>Inside <code>menu</code> elements.</dd>
   <dt>Content model:</dt>
   <dd>When the element is a child of a <code>menu</code> element: <span>phrasing content</span>.</dd>
<!--XXXSPAN
   <dd>When the element is a child of an <code>ol</code> or <code>ul/code> element that is itself the child of a <code>span</code> element: <span>phrasing content</span>.</dd>
-->
   <dd>Otherwise: <span>flow content</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>If the element is a child of an <code>ol</code> element: <code title="attr-li-value">value</code></dd>
   <dd>If the element is not the child of an <code>ol</code> element: None.</dd>
   <dt>DOM interface:</dt>
   <dd>
<pre class="idl">interface <dfn>HTMLLIElement</dfn> : <span>HTMLElement</span> {
           attribute long <span title="dom-li-value">value</span>;
};</pre>
   </dd>
  </dl>

  <p>The <code>li</code> element represents a list item. If its parent
  element is an <code>ol</code>, <code>ul</code>, or <code>menu</code>
  element, then the element is an item of the parent element's list,
  as defined for those elements. Otherwise, the list item has no
  defined list-related relationship to any other <code>li</code>
  element.</p>

  <p>The <dfn title="attr-li-value"><code>value</code></dfn>
  attribute, if present, must be a <span>valid integer</span> giving
  the ordinal value of the list item.</p>

  <p>If the <code title="attr-li-value">value</code> attribute is
  present, user agents must <span title="rules for parsing
  integers">parse it as an integer</span>, in order to determine the
  attribute's value. If the attribute's value cannot be converted to a
  number, the attribute must be treated as if it was absent. The
  attribute has no default value.</p>

  <p>The <code title="attr-li-value">value</code> attribute is
  processed relative to the element's parent <code>ol</code> element
  (q.v.), if there is one. If there is not, the attribute has no
  effect.</p>

  <p>The <dfn title="dom-li-value"><code>value</code></dfn> DOM
  attribute must <span>reflect</span> the value of the <code
  title="dom-li-value">value</code> content attribute.</p>

  <div class="example">
   <p>The following example, the top ten movies are listed (in reverse
   order). Note the way the list is given a title by using a
   <code>figure</code> element and its <code>legend</code>.</p>
   <pre>&lt;figure>
 &lt;legend>The top 10 movies of all time&lt;/legend>
 &lt;ol>
  &lt;li value="10">&lt;cite>Josie and the Pussycats&lt;/cite>, 2001&lt;/li>
  &lt;li value="9">&lt;cite lang="sh">&#x0426;&#x0440;&#x043d;&#x0430; &#x043c;&#x0430;&#x0447;&#x043a;&#x0430;, &#x0431;&#x0435;&#x043b;&#x0438; &#x043c;&#x0430;&#x0447;&#x043e;&#x0440;&lt;/cite>, 1998&lt;/li>
  &lt;li value="8">&lt;cite>A Bugs Life&lt;/cite>, 1998&lt;/li>
  &lt;li value="7">&lt;cite>Toy Story&lt;/cite>, 1995&lt;/li>
  &lt;li value="6">&lt;cite>Monsters, Inc&lt;/cite>, 2001&lt;/li>
  &lt;li value="5">&lt;cite>Cars&lt;/cite>, 2006&lt;/li>
  &lt;li value="4">&lt;cite>Toy Story 2&lt;/cite>, 1999&lt;/li>
  &lt;li value="3">&lt;cite>Finding Nemo&lt;/cite>, 2003&lt;/li>
  &lt;li value="2">&lt;cite>The Incredibles&lt;/cite>, 2004&lt;/li>
  &lt;li value="1">&lt;cite>Ratatouille&lt;/cite>, 2007&lt;/li>
 &lt;/ol>
&lt;/figure></pre>

   <p>The markup could also be written as follows, using the <code
   title="attr-ol-reversed">reversed</code> attribute on the
   <code>ol</code> element:</p>
 
   <pre>&lt;figure>
 &lt;legend>The top 10 movies of all time&lt;/legend>
 &lt;ol reversed>
  &lt;li>&lt;cite>Josie and the Pussycats&lt;/cite>, 2001&lt;/li>
  &lt;li>&lt;cite lang="sh">&#x0426;&#x0440;&#x043d;&#x0430; &#x043c;&#x0430;&#x0447;&#x043a;&#x0430;, &#x0431;&#x0435;&#x043b;&#x0438; &#x043c;&#x0430;&#x0447;&#x043e;&#x0440;&lt;/cite>, 1998&lt;/li>
  &lt;li>&lt;cite>A Bugs Life&lt;/cite>, 1998&lt;/li>
  &lt;li>&lt;cite>Toy Story&lt;/cite>, 1995&lt;/li>
  &lt;li>&lt;cite>Monsters, Inc&lt;/cite>, 2001&lt;/li>
  &lt;li>&lt;cite>Cars&lt;/cite>, 2006&lt;/li>
  &lt;li>&lt;cite>Toy Story 2&lt;/cite>, 1999&lt;/li>
  &lt;li>&lt;cite>Finding Nemo&lt;/cite>, 2003&lt;/li>
  &lt;li>&lt;cite>The Incredibles&lt;/cite>, 2004&lt;/li>
  &lt;li>&lt;cite>Ratatouille&lt;/cite>, 2007&lt;/li>
 &lt;/ol>
&lt;/figure></pre>
  </div>


  <h4>The <dfn><code>dl</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Flow content</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>flow content</span> is expected.</dd>
   <dt>Content model:</dt>
   <dd>Zero or more groups each consisting of one or more
   <code>dt</code> elements followed by one or mode <code>dd</code>
   elements.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>dl</code> element introduces an association list
  consisting of zero or more name-value groups (a description
  list). Each group must consist of one or more names (<code>dt</code>
  elements) followed by one or more values (<code>dd</code>
  elements).</p>

  <p>Name-value groups may be terms and definitions, metadata topics
  and values, or any other groups of name-value data.</p>

  <p>The values within a group are alternatives; multiple paragraphs
  forming part of the same value must all be given within the same
  <code>dd</code> element.</p>

  <p>The order of the list of groups, and of the names and values
  within each group, may be significant.</p>

  <p>If a <code>dl</code> element is empty, it contains no groups.</p>

  <p>If a <code>dl</code> element contains non-<span
  title="inter-element whitespace">whitespace</span> <span title="text
  node">text nodes</span>, or elements other than <code>dt</code> and
  <code>dd</code>, then those elements or <span title="text node">text
  nodes</span> do not form part of any groups in that <code>dl</code>,
  and the document is non-conforming.</p>

  <p>If a <code>dl</code> element contains only <code>dt</code>
  elements, then it consists of one group with names but no values,
  and the document is non-conforming.</p>

  <p>If a <code>dl</code> element contains only <code>dd</code>
  elements, then it consists of one group with values but no names,
  and the document is non-conforming.</p>

  <p>If a <code>dl</code> element starts with one or more
  <code>dd</code> elements, then the first group has no associated
  name.</p>

  <p>If a <code>dl</code> element ends with one or more
  <code>dt</code> elements, then the last group has no associated
  value.</p>

  <p class="note">Such mistakes are often due to accidentally using 
  <code>dd</code> elements in the place of <code>dt</code> elements
  and vice versa. Conformance checkers can spot such mistakes and
  might be able to advise authors how to correctly use the markup.</p>


  <div class="example">
   <p>In the following example, one entry ("Authors") is linked to two
   values ("John" and "Luke").</p>
   <pre>&lt;dl&gt;
 &lt;dt&gt; Authors
 &lt;dd&gt; John
 &lt;dd&gt; Luke
 &lt;dt&gt; Editor
 &lt;dd&gt; Frank
&lt;/dl&gt;</pre>
  </div>

  <div class="example">
   <p>In the following example, one definition is linked to two
   terms.</p>
   <pre>&lt;dl&gt;
 &lt;dt lang="en-US"&gt; &lt;dfn>color&lt;/dfn> &lt;/dt&gt;
 &lt;dt lang="en-GB"&gt; &lt;dfn>colour&lt;/dfn> &lt;/dt&gt;
 &lt;dd&gt; A sensation which (in humans) derives from the ability of
 the fine structure of the eye to distinguish three differently
 filtered analyses of a view. &lt;/dd&gt;
&lt;/dl&gt;</pre>
  </div>

  <div class="example">
   <p>The following example illustrates the use of the <code>dl</code>
   element to mark up metadata of sorts. At the end of the example,
   one group has two metadata labels ("Authors" and "Editors") and two
   values ("Robert Rothman" and "Daniel Jackson").</p>
   <pre>&lt;dl&gt;
 &lt;dt&gt; Last modified time &lt;/dt&gt;
 &lt;dd&gt; 2004-12-23T23:33Z &lt;/dd&gt;
 &lt;dt&gt; Recommended update interval &lt;/dt&gt;
 &lt;dd&gt; 60s &lt;/dd&gt;
 &lt;dt&gt; Authors &lt;/dt&gt;
 &lt;dt&gt; Editors &lt;/dt&gt;
 &lt;dd&gt; Robert Rothman &lt;/dd&gt;
 &lt;dd&gt; Daniel Jackson &lt;/dd&gt;
&lt;/dl&gt;</pre>
  </div>

  <div class="example">

   <p>The following example shows the <code>dl</code> element used to
   give a set of instructions. The order of the instructions here is
   important (in the other examples, the order of the blocks was not
   important).</p>

   <pre>&lt;p&gt;Determine the victory points as follows (use the
first matching case):&lt;/p&gt;
&lt;dl&gt;
 &lt;dt&gt; If you have exactly five gold coins &lt;/dt&gt;
 &lt;dd&gt; You get five victory points &lt;/dd&gt;
 &lt;dt&gt; If you have one or more gold coins, and you have one or more silver coins &lt;/dt&gt;
 &lt;dd&gt; You get two victory points &lt;/dd&gt;
 &lt;dt&gt; If you have one or more silver coins &lt;/dt&gt;
 &lt;dd&gt; You get one victory point &lt;/dd&gt;
 &lt;dt&gt; Otherwise &lt;/dt&gt;
 &lt;dd&gt; You get no victory points &lt;/dd&gt;
&lt;/dl&gt;</pre>
  </div>

  <p class="note">The <code>dl</code> element is inappropriate for
  marking up dialogue, since dialogue is ordered (each speaker/line
  pair comes after the next). For an example of how to mark up
  dialogue, see the <code>dialog</code> element.</p>


  <h4>The <dfn><code>dt</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd>None.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>Before <code>dd</code> or <code>dt</code> elements inside <code>dl</code> elements.</dd>
   <dd>Before a <code>dd</code> element inside a <code>dialog</code> element.</dd>
   <dt>Content model:</dt>
   <dd><span>Phrasing content</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>dt</code> element represents the term, or name, part of
  a term-description group in a description list (<code>dl</code>
  element), and the talker, or speaker, part of a talker-discourse
  pair in a conversation (<code>dialog</code> element).</p>

  <p class="note">The <code>dt</code> element itself, when used in a
  <code>dl</code> element, does not indicate that its contents are a
  term being defined, but this can be indicated using the
  <code>dfn</code> element.</p>


  <h4>The <dfn><code>dd</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd>None.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>After <code>dt</code> or <code>dd</code> elements inside <code>dl</code> elements.</dd>
   <dd>After a <code>dt</code> element inside a <code>dialog</code> element.</dd>
   <dt>Content model:</dt>
   <dd><span>Flow content</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>dd</code> element represents the description,
  definition, or value, part of a term-description group in a
  description list (<code>dl</code> element), and the discourse, or
  quote, part in a conversation (<code>dialog</code> element).</p>


  <h3>Text-level semantics</h3><!-- XXX ew, find a better section name -->

  <!-- XXX ruby (delayed until someone can define it with error handling rules) -->

  <h4>The <dfn><code>a</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Phrasing content</span>.</dd>
   <dd><span>Interactive content</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>phrasing content</span> is expected.</dd>
   <dt>Content model:</dt>
   <dd><span>Phrasing content</span>, but there must be no <span>interactive content</span> descendant.</dd>
   <dt>Element-specific attributes:</dt>
   <dd><code title="attr-hyperlink-href">href</code></dd>
   <dd><code title="attr-hyperlink-target">target</code></dd>
   <dd><code title="attr-hyperlink-ping">ping</code></dd>
   <dd><code title="attr-hyperlink-rel">rel</code></dd>
   <dd><code title="attr-hyperlink-media">media</code></dd>
   <dd><code title="attr-hyperlink-hreflang">hreflang</code></dd>
   <dd><code title="attr-hyperlink-type">type</code></dd>
   <dt>DOM interface:</dt>
   <dd>
<pre class="idl">interface <dfn>HTMLAnchorElement</dfn> : <span>HTMLElement</span> {
           attribute DOMString <span title="dom-a-href">href</span>;
           attribute DOMString <span title="dom-a-target">target</span>;
           attribute DOMString <span title="dom-a-ping">ping</span>;
           attribute DOMString <span title="dom-a-rel">rel</span>;
  readonly attribute DOMTokenList <span title="dom-a-relList">relList</span>;
           attribute DOMString <span title="dom-a-media">media</span>;
           attribute DOMString <span title="dom-a-hreflang">hreflang</span>;
           attribute DOMString <span title="dom-a-type">type</span>;
};</pre>
    <p>The <code title="command-ro">Command</code> interface must also be implemented by
    this element.</p>
   </dd>
  </dl>

  <p>If the <code>a</code> element has an <code
  title="attr-hyperlink-href">href</code> attribute, then it
  represents a <span>hyperlink</span>.</p>

  <p>If the <code>a</code> element has no <code
  title="attr-hyperlink-href">href</code> attribute, then the element
  is a placeholder for where a link might otherwise have been placed,
  if it had been relevant.</p>

  <p>The <code title="attr-hyperlink-target">target</code>, <code
  title="attr-hyperlink-ping">ping</code>, <code
  title="attr-hyperlink-rel">rel</code>, <code
  title="attr-hyperlink-media">media</code>, <code
  title="attr-hyperlink-hreflang">hreflang</code>, and <code
  title="attr-hyperlink-type">type</code> attributes must be omitted
  if the <code title="attr-hyperlink-href">href</code> attribute is
  not present.</p>

  <div class="example">
   <p>If a site uses a consistent navigation toolbar on every page,
   then the link that would normally link to the page itself could be
   marked up using an <code>a</code> element:</p>
   <pre>&lt;nav>
 &lt;ul>
  &lt;li> &lt;a href="/">Home&lt;/a> &lt;/li>
  &lt;li> &lt;a href="/news">News&lt;/a> &lt;/li>
  &lt;li> &lt;a>Examples&lt;/a> &lt;/li>
  &lt;li> &lt;a href="/legal">Legal&lt;/a> &lt;/li>
 &lt;/ul>
&lt;/nav></pre>
  </div>

  <p>Interactive user agents should allow users to <span
  title="following hyperlinks">follow hyperlinks</span> created using
  the <code>a</code> element. The <code
  title="attr-hyperlink-href">href</code>, <code
  title="attr-hyperlink-target">target</code> and <code
  title="attr-hyperlink-ping">ping</code> attributes decide how the
  link is followed. The <code title="attr-hyperlink-rel">rel</code>,
  <code title="attr-hyperlink-media">media</code>, <code
  title="attr-hyperlink-hreflang">hreflang</code>, and <code
  title="attr-hyperlink-type">type</code> attributes may be used to
  indicate to the user the likely nature of the target resource before
  the user follows the link.</p>

  <p>The <span>activation behavior</span> of <code>a</code> elements
  that represent <span>hyperlinks</span> is to run the following
  steps:</p>

  <ol>

   <li><p>If the <code title="event-DOMActivate">DOMActivate</code>
   event in question is not <span
   title="concept-events-trusted">trusted</span> (i.e. a <code
   title="dom-click">click()</code> method call was the reason for the
   event being dispatched), and the <code>a</code> element's <code
   title="attr-hyperlink-target">target</code> attribute is <span
   class="big-issue">...</span> then raise an
   <code>INVALID_ACCESS_ERR</code> exception and abort these
   steps.</p></li>

   <li><p>If the target of the <code
   title="event-DOMActivate">DOMActivate</code> event is an
   <code>img</code> element with an <code
   title="attr-img-ismap">ismap</code> attribute specified, then
   server-side image map processing must be performed, as follows:</p>

    <ol>

     <!-- http://software.hixie.ch/utilities/js/live-dom-viewer/?%3C%21DOCTYPE%20html%3E%0A...%3Ca%20href%3D%22%23%22%3E%3Cimg%20ismap%20usemap%3D%22%23a%22%20src%3D/resources/images/smallcats%3E%3C/a%3E%0A%3Cmap%20name%3Da%3E%3Carea%20shape%3Drect%20coords%3D0%2C0%2C50%2C50%20href%3Db%3E%3C/map%3E -->

     <li>If the <code title="event-DOMActivate">DOMActivate</code>
     event was dispatched as the result of a real
     pointing-device-triggered <code title="event-click">click</code>
     event on the <code>img</code> element, then let <var
     title="">x</var> be the distance in CSS pixels from the left edge
     of the image to the location of the click, and let <var
     title="">y</var> be the distance in CSS pixels from the top edge
     of the image to the location of the click. Otherwise, let <var
     title="">x</var> and <var title="">y</var> be zero.</li>

     <li>Let the <dfn><var>hyperlink suffix</var></dfn> be a U+003F
     QUESTION MARK character, the value of <var title="">x</var>
     expressed as a base-ten integer using ASCII digits (U+0030 DIGIT
     ZERO to U+0039 DIGIT NINE), a U+002C COMMA character, and the
     value of <var title="">y</var> expressed as a base-ten integer
     using ASCII digits.</li>

    </ol>

   </li>

   <li><p>Finally, the user agent must <span title="following
   hyperlinks">follow the hyperlink</span> defined by the
   <code>a</code> element. If the steps above defined a <var>hyperlink
   suffix</var>, then take that into account when following the
   hyperlink.</p></li>

  </ol>

  <p class="note">One way that a user agent can enable users to follow
  hyperlinks is by allowing <code>a</code> elements to be clicked, or
  focussed and activated by the keyboard. This <span
  title="interactive elements">will cause</span> the aforementioned
  <span>activation behavior</span> to be invoked.</p>

  <p>The DOM attributes <dfn
  title="dom-a-href"><code>href</code></dfn>, <dfn
  title="dom-a-ping"><code>ping</code></dfn>, <dfn
  title="dom-a-target"><code>target</code></dfn>, <dfn
  title="dom-a-rel"><code>rel</code></dfn>, <dfn
  title="dom-a-media"><code>media</code></dfn>, <dfn
  title="dom-a-hreflang"><code>hreflang</code></dfn>, and <dfn
  title="dom-a-type"><code>type</code></dfn>, must each
  <span>reflect</span> the respective content attributes of the same
  name.</p>

  <p>The DOM attribute <dfn
  title="dom-a-rellist"><code>relList</code></dfn> must
  <span>reflect</span> the <code title="attr-hyperlink-rel">rel</code>
  content attribute.</p>



  <h4>The <dfn><code>q</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Phrasing content</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>phrasing content</span> is expected.</dd>
   <dt>Content model:</dt>
   <dd><span>Phrasing content</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd><code title="attr-q-cite">cite</code></dd>
   <dt>DOM interface:</dt>
   <dd>
    The <code>q</code> element uses the <code>HTMLQuoteElement</code> interface.
   </dd>
  </dl>

  <p>The <code>q</code> element represents a part of a paragraph
  quoted from another source.</p>

  <p>Content inside a <code>q</code> element must be quoted from
  another source, whose URI, if it has one, should be cited in the
  <dfn title="attr-q-cite"><code>cite</code></dfn> attribute.</p>

  <p>If the <code title="attr-q-cite">cite</code> attribute is
  present, it must be a URI (or IRI). User agents should allow
  users to follow such citation links.</p>

  <p>If a <code>q</code> element is contained (directly or indirectly)
  in a <span>paragraph</span> that contains a single <code>cite</code>
  element and has no other <code>q</code> element descendants, then,
  the title of the work given by that <code>cite</code> element gives
  the source of the quotation contained in the <code>q</code>
  element.</p>

  <!-- XXX need examples -->


  <h4>The <dfn><code>cite</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Phrasing content</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>phrasing content</span> is expected.</dd>
   <dt>Content model:</dt>
   <dd><span>Phrasing content</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
   <!-- XXX should the cite element have a cite attribute? -->
  </dl>

  <p>The <code>cite</code> element represents the title of a work
  (e.g.
  a book,
  a paper,
  an essay,
  a poem,
  a score,
  a song,
  a script,
  a film,
  a TV show,
  a game,
  a sculpture,
  a painting,
  a theatre production,
  a play,
  an opera,
  a musical,
  an exhibition,
  etc). This can be a work that is being quoted or
  referenced in detail (i.e. a citation), or it can just be a work
  that is mentioned in passing.</p>

  <p>A person's name is not the title of a work &mdash; even if people
  call that person a piece of work &mdash; and the element must
  therefore not be used to mark up people's names. (In some cases, the
  <code>b</code> element might be appropriate for names; e.g. in a
  gossip article where the names of famous people are keywords
  rendered with a different style to draw attention to them. In other
  cases, if an element is <em>really</em> needed, the
  <code>span</code> element can be used.)</p>

  <p>A ship is similarly not a work, and the element must not be used
  to mark up ship names (the <code>i</code> element can be used for
  that purpose).</p>

  <div class="example">

   <p>This next example shows a typical use of the <code>cite</code>
   element:</p>

   <pre>&lt;p>My favourite book is &lt;cite>The Reality Dysfunction&lt;/cite> by
Peter F. Hamilton. My favourite comic is &lt;cite>Pearls Before
Swine&lt;/cite> by Stephan Pastis. My favourite track is &lt;cite>Jive
Samba&lt;/cite> by the Cannonball Adderley Sextet.&lt;/p></pre>

  </div>

  <div class="example">

   <p>This is correct usage:</p>

   <pre>&lt;p>According to the Wikipedia article &lt;cite>HTML&lt;/cite>, as it
stood in mid-February 2008, leaving attribute values unquoted is
unsafe. This is obviously an over-simplification.&lt;/p></pre>

   <p>The following, however, is incorrect usage, as the
   <code>cite</code> element here is containing far more than the
   title of the work:</p>

   <pre>&lt;p>According to &lt;cite>the Wikipedia article on HTML&lt;/cite>, as it
stood in mid-February 2008, leaving attribute values unquoted is
unsafe. This is obviously an over-simplification.&lt;/p></pre>

  </div>

  <div class="example">

   <p>The <code>cite</code> element is obviously a key part of any
   citation in a bibliography, but it is only used to mark the
   title:</p>

   <pre>&lt;p>&lt;cite>Universal Declaration of Human Rights&lt;/cite>, United Nations,
December 1948.  Adopted by General Assembly resolution 217 A (III).&lt;/p></pre>

  </div>

  <p class="note">A <em>citation</em> is not a <em>quote</em> (for
  which the <code>q</code> element is appropriate).</p>

  <div class="example">

   <p>This is incorrect usage, because <code>cite</code> is not for
   quotes:</p>

   <pre>&lt;p>&lt;cite>This is wrong!&lt;/cite>, said Ian.&lt;/p></pre>

   <p>This is also incorrect usage, because a person is not a
   work:</p>

   <pre>&lt;p>&lt;q>This is still wrong!&lt;/q>, said &lt;cite>Ian&lt;/cite>.&lt;/p></pre>

   <p>The correct usage does not use a <code>cite</code> element:</p>

   <pre>&lt;p>&lt;q>This is correct&lt;/q>, said Ian.&lt;/p></pre>

   <p>As mentioned above, the <code>b</code> element might be relevant
   for marking names as being keywords in certain kinds of
   documents:</p>

   <pre>&lt;p>And then &lt;b>Ian&lt;/b> said &lt;q>this might be right, in a
gossip column, maybe!&lt;/q>.&lt;/p></pre>

  </div>

  <p class="note">The <code>cite</code> element can apply to
  <code>blockquote</code> and <code>q</code> elements in certain cases
  described in the definitions of those elements.</p>

  <div class="example">

   <p>This next example shows the use of <code>cite</code> alongside
   <code>blockquote</code>:</p>

   <pre>&lt;p>His next piece was the aptly named &lt;cite>Sonnet 130&lt;/cite>:&lt;/p>
&lt;blockquote>
  &lt;p>My mistress' eyes are nothing like the sun,&lt;br>
  Coral is far more red, than her lips red,
  ...</pre>

  </div>


  <h4>The <dfn><code>em</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Phrasing content</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>phrasing content</span> is expected.</dd>
   <dt>Content model:</dt>
   <dd><span>Phrasing content</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>em</code> element represents stress emphasis of its
  contents.</p>

  <p>The level of emphasis that a particlar piece of content has is
  given by its number of ancestor <code>em</code> elements.</p>

  <p>The placement of emphasis changes the meaning of the sentence.
  The element thus forms an integral part of the content. The precise
  way in which emphasis is used in this way depends on the
  language.</p>

  <div class="example">

   <p>These examples show how changing the emphasis changes the
   meaning. First, a general statement of fact, with no emphasis:</p>

   <pre>&lt;p>Cats are cute animals.&lt;/p></pre>

   <p>By emphasising the first word, the statement implies that the
   kind of animal under discussion is in question (maybe someone is
   asserting that dogs are cute):</p>

   <pre>&lt;p>&lt;em>Cats&lt;/em> are cute animals.&lt;/p></pre>

   <p>Moving the emphasis to the verb, one highlights that the truth
   of the entire sentence is in question (maybe someone is saying cats
   are not cute):</p>

   <pre>&lt;p>Cats &lt;em>are&lt;/em> cute animals.&lt;/p></pre>

   <p>By moving it to the adjective, the exact nature of the cats
   is reasserted (maybe someone suggested cats were <em>mean</em>
   animals):</p>

   <pre>&lt;p>Cats are &lt;em>cute&lt;/em> animals.&lt;/p></pre>

   <p>Similarly, if someone asserted that cats were vegetables,
   someone correcting this might emphasise the last word:</p>

   <pre>&lt;p>Cats are cute &lt;em>animals&lt;/em>.&lt;/p></pre>

   <p>By emphasising the entire sentence, it becomes clear that the
   speaker is fighting hard to get the point across. This kind of
   emphasis also typically affects the punctuation, hence the
   exclamation mark here.</p>

   <pre>&lt;p>&lt;em>Cats are cute animals!&lt;/em>&lt;/p></pre>

   <p>Anger mixed with emphasising the cuteness could lead to markup
   such as:</p>

   <pre>&lt;p>&lt;em>Cats are &lt;em>cute&lt;/em> animals!&lt;/em>&lt;/p></pre>

  </div>

  <!-- XXX should say it is wrong to use as in:

   <p><em>Note</em>: ...</p>

  -->


  <h4>The <dfn><code>strong</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Phrasing content</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>phrasing content</span> is expected.</dd>
   <dt>Content model:</dt>
   <dd><span>Phrasing content</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>strong</code> element represents strong importance for
  its contents.</p>

  <p>The relative level of importance of a piece of content is given
  by its number of ancestor <code>strong</code> elements; each
  <code>strong</code> element increases the importance of its
  contents.</p>

  <p>Changing the importance of a piece of text with the
  <code>strong</code> element does not change the meaning of the
  sentence.</p>

  <div class="example">
   <p>Here is an example of a warning notice in a game, with the
   various parts marked up according to how important they are:</p>
   <!-- DO NOT REFLOW THIS EXAMPLE it has been carefully balanced -->
   <pre>&lt;p>&lt;strong>Warning.&lt;/strong> This dungeon is dangerous.
&lt;strong>Avoid the ducks.&lt;/strong> Take any gold you find.
&lt;strong>&lt;strong>Do not take any of the diamonds&lt;/strong>,
they are explosive and &lt;strong>will destroy anything within
ten meters.&lt;/strong>&lt;/strong> You have been warned.&lt;/p></pre>
  </div>


  <h4>The <dfn><code>small</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Phrasing content</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>phrasing content</span> is expected.</dd>
   <dt>Content model:</dt>
   <dd><span>Phrasing content</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>small</code> element represents small print (part of a
  document often describing legal restrictions, such as copyrights or
  other disadvantages), or other side comments.</p>

  <p class="note">The <code>small</code> element does not
  "de-emphasise" or lower the importance of text emphasised by the
  <code>em</code> element or marked as important with the
  <code>strong</code> element.</p>

  <div class="example">

   <p>In this example the footer contains contact information and a
   copyright.</p>

   <pre>&lt;footer>
 &lt;address>
  For more details, contact
  &lt;a href="mailto:js@example.com">John Smith&lt;/a>.
 &lt;/address>
 &lt;p>&lt;small>&copy; copyright 2038 Example Corp.&lt;/small>&lt;/p>
&lt;/footer></pre>

   <p>In this second example, the <code>small</code> element is used
   for a side comment.</p>

   <pre>&lt;p>Example Corp today announced record profits for the
second quarter &lt;small>(Full Disclosure: Foo News is a subsidiary of
Example Corp)&lt;/small>, leading to speculation about a third quarter
merger with Demo Group.&lt;/p></pre>

   <p>In this last example, the <code>small</code> element is marked
   as being <em>important</em> small print.</p>

   <pre>&lt;p>&lt;strong>&lt;small>Continued use of this service will result in a kiss.&lt;/small>&lt;/strong>&lt;/p></pre>

  </div>


  <h4>The <dfn><code>mark</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Phrasing content</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>phrasing content</span> is expected.</dd>
   <dt>Content model:</dt>
   <dd><span>Phrasing content</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>mark</code> element represents a run of text in one
  document marked or highlighted for reference purposes, due to its
  relevance in another context. When used in a quotation or other
  block of text referred to from the prose, it indicates a highlight
  that was not originally present but which has been added to bring
  the reader's attention to a part of the text that might not have
  been considered important by the original author when the block was
  originally written, but which is now under previously unexpected
  scrutiny. When used in the main prose of a document, it indicates a
  part of the document that has been highlighted due to its likely
  relevance to the user's current activity.</p>

  <p class="big-issue">The rendering section will eventually suggest
  that user agents provide a way to let users jump between
  <code>mark</code> elements. Suggested rendering is a neon yellow
  background highlight, though UAs maybe should allow this to be
  toggled.</p>

  <div class="example">
   <p>This example shows how the <code>mark</code> example can be used
   to bring attention to a particular part of a quotation:</p>
   <pre>&lt;p lang="en-US">Consider the following quote:&lt;/p>
&lt;blockquote lang="en-GB">
 &lt;p>Look around and you will find, no-one's really
 &lt;mark>colour&lt;/mark> blind.&lt;/p>
&lt;/blockquote>
&lt;p lang="en-US">As we can tell from the &lt;em>spelling&lt;/em> of the word,
the person writing this quote is clearly not American.&lt;/p></pre>
  </div>

  <div class="example">

   <p>Another example of the <code>mark</code> element is highlighting
   parts of a document that are matching some search string. If
   someone looked at a document, and the server knew that the user was
   searching for the word "kitten", then the server might return the
   document with one paragraph modified as follows:</p>

   <pre>&lt;p>I also have some &lt;mark>kitten&lt;/mark>s who are visiting me
these days. They're really cute. I think they like my garden! Maybe I
should adopt a &lt;mark>kitten&lt;/mark>.&lt;/p></pre>

  </div>

  <div class="example">

   <p>In the following snippet, a paragraph of text refers to a
   specific part of a code fragment.</p>

   <pre>&lt;p>The highlighted part below is where the error lies:&lt;/p>
&lt;pre>&lt;code>var i: Integer;
begin
   i := &lt;mark>1.1&lt;/mark>;
end.&lt;/code>&lt;/pre></pre>

  </div>

  <div class="example">

   <p>This is another example showing the use of <code>mark</code> to
   highlight a part of quoted text that was originally not
   emphasised. In this example, common typographic conventions have
   led the author to explicitly style <code>mark</code> elements in
   quotes to render in italics.</p>

   <pre>&lt;article>
 &lt;style>
  blockquote mark, q mark {
    font: inherit; font-style: italic;
    text-decoration: none;
    background: transparent; color: inherit;
  }
  .bubble em {
    font: inherit; font-size: larger;
    text-decoration: underline;
  }
 &lt;/style>
 &lt;h1>She knew&lt;/h1>
 &lt;p>Did you notice the subtle joke in the joke on panel 4?&lt;/p>
 &lt;blockquote>
  &lt;p class="bubble">I didn't &lt;em>want&lt;/em> to believe. &lt;mark>Of course
  on some level I realized it was a known-plaintext attack.&lt;/mark> But I
  couldn't admit it until I saw for myself.&lt;/p>
 &lt;/blockquote>
 &lt;p>(Emphasis mine.) I thought that was great. It's so pedantic, yet it
 explains everything neatly.&lt;/p>
&lt;/article></pre>

   <p>Note, incidentally, the distinction between the <code>em</code>
   element in this example, which is part of the original text being
   quoted, and the <code>mark</code> element, which is highlighting a
   part for comment.</p>

  </div>

  <div class="example">

   <p>The following example shows the difference between denoting the
   <em>importance</em> of a span of text (<code>strong</code>) as
   opposed to denoting the <em>relevance</em> of a span of text
   (<code>mark</code>). It is an extract from a textbook, where the
   extract has had the parts relevant to the exam highlighted. The
   safety warnings, important though they may be, are apparently not
   relevant to the exam.</p>

   <pre>&lt;h3>Wormhole Physics Introduction&lt;/h3>

&lt;p>&lt;mark>A wormhole in normal conditions can be held open for a
maximum of just under 39 minutes.&lt;/mark> Conditions that can increase
the time include a powerful energy source coupled to one or both of
the gates connecting the wormhole, and a large gravity well (such as a
black hole).&lt;/p>

&lt;p>&lt;mark>Momentum is preserved across the wormhole. Electromagnetic
radiation can travel in both directions through a wormhole,
but matter cannot.&lt;/mark>&lt;/p>

&lt;p>When a wormhole is created, a vortex normally forms.
&lt;strong>Warning: The vortex caused by the wormhole opening will
annihilate anything in its path.&lt;/strong> Vortexes can be avoided when
using sufficently advanced dialing technology.&lt;/p>

&lt;p>&lt;mark>An obstruction in a gate will prevent it from accepting a
wormhole connection.&lt;/mark>&lt;/p></pre>

  </div>



  <h4>The <dfn><code>dfn</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Phrasing content</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>phrasing content</span> is expected.</dd>
   <dt>Content model:</dt>
   <dd><span>Phrasing content</span>, but there must be no descendant <code>dfn</code> elements.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None, but the <code title="attr-dfn-title">title</code> attribute has special semantics on this element.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>dfn</code> element represents the defining instance of
  a term. The <span>paragraph</span>, <span title="dl">description
  list group</span>, or <span title="sectioning
  content">section</span> that contains the <code>dfn</code> element
  contains the definition for the term given by the contents of the
  <code>dfn</code> element.</p>

  <p><dfn>Defining term</dfn>: If the <code>dfn</code> element has a
  <dfn title="attr-dfn-title"><code>title</code></dfn> attribute, then
  the exact value of that attribute is the term being defined.
  Otherwise, if it contains exactly one element child node and no
  child <span title="text node">text nodes</span>, and that child
  element is an <code>abbr</code> element with a <code
  title="attr-abbr-title">title</code> attribute, then the exact value
  of <em>that</em> attribute is the term being defined. Otherwise, it
  is the exact <code>textContent</code> of the <code>dfn</code>
  element that gives the term being defined.</p>

  <!-- XXX that means <dfn>x \n x</dfn> won't match <span>x x</span> -->

  <p>If the <code title="attr-dfn-title">title</code> attribute of the
  <code>dfn</code> element is present, then it must only contain the
  term being defined.</p>

  <p>There must only be one <code>dfn</code> element per document for
  each term defined (i.e. there must not be any duplicate <span
  title="defining term">terms</span>).</p>

  <p class="note">The <code title="attr-title">title</code> attribute
  of ancestor elements does not affect <code>dfn</code> elements.</p>

  <p id="xrefs">The <code>dfn</code> element enables automatic
  cross-references.  Specifically, any <code>span</code>,
  <code>abbr</code>, <code>code</code>, <code>var</code>,
  <code>samp</code>, or <code>i</code> element that has a non-empty
  <code title="attr-title">title</code> attribute whose value exactly
  equals the <span title="defining term">term</span> of a
  <code>dfn</code> element in the same document, or which has no <code
  title="attr-title">title</code> attribute but whose
  <code>textContent</code> exactly equals the <span title="defining
  term">term</span> of a <code>dfn</code> element in the document, and
  that has no <span>interactive elements</span> or <code>dfn</code>
  elements either as ancestors or descendants, and has no other
  elements as ancestors that are themselves matching these conditions,
  should be presented in such a way that the user can jump from the
  element to the first <code>dfn</code> element giving the defining
  instance of that term.</p>

  <!-- XXX that means <dfn>x x</dfn> won't match <span>x \n x</span> -->

  <!-- need to mention that <span> is useful for cross-refs that don't
  actually use the term itself -->

  <div class="example">

   <p>In the following fragment, the term "GDO" is first defined in
   the first paragraph, then used in the second. A compliant UA could
   provide a link from the <code>abbr</code> element in the second
   paragraph to the <code>dfn</code> element in the first.</p>

   <pre>&lt;p>The &lt;dfn>&lt;abbr title="Garage Door Opener">GDO&lt;/abbr>&lt;/dfn>
is a device that allows off-world teams to open the iris.&lt;/p>
&lt;!-- ... later in the document: -->
&lt;p>Teal'c activated his &lt;abbr title="Garage Door Opener">GDO&lt;/abbr>
and so Hammond ordered the iris to be opened.&lt;/p></pre>

   <!-- XXX need some examples of nesting where the top element makes
   a crossref but the inner ones don't despite also matching the
   algorithm above -->

   <!-- XXX need some examples of duplicates being bad, of title
   attributes being bad, etc -->

  </div>

<!--
> One useful line of retreat would be to specify that in the following
> code, "the state of being happy" is unambiguously a definition of
> "happiness" and not of any other subset of the <dt>.
>
>     <dl>
>       <dt><dfn>happiness</dfn> /'h&aelig; p. nes/ <i><abbr>n.</abbr></i></dt>
>       <dd>the state of being happy</dd>
>     </dl>
>
> This could be encouraged by "dt dfn {font-weight: bold; font-style:
> normal;}" in browsers' default style sheets, which would be quite
> backward-compatible because of the rarity of <dt><dfn> up to now.
- mpt
-->



  <h4>The <dfn><code>abbr</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Phrasing content</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>phrasing content</span> is expected.</dd>
   <dt>Content model:</dt>
   <dd><span>Phrasing content</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None, but the <code title="attr-abbr-title">title</code> attribute has special semantics on this element.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>abbr</code> element represents an abbreviation or
  acronym. The <dfn title="attr-abbr-title"><code>title</code></dfn>
  attribute should be used to provide an expansion of the
  abbreviation. If present, the attribute must only contain an
  expansion of the abbreviation.</p>

  <div class="example">
   <p>The paragraph below contains an abbreviation marked up with the
   <code>abbr</code> element.</p>
   <pre>&lt;p>The &lt;abbr title="Web Hypertext Application Technology
Working Group">WHATWG&lt;/abbr> is a loose unofficial collaboration of
Web browser manufacturers and interested parties who wish to develop
new technologies designed to allow authors to write and deploy
Applications over the World Wide Web.&lt;/p></pre>
  </div>

  <p>The <code title="attr-abbr-title">title</code> attribute may be
  omitted if there is a <code>dfn</code> element in the document whose
  <span>defining term</span> is the abbreviation (the
  <code>textContent</code> of the <code>abbr</code> element).</p>

  <div class="example">

   <p>In the example below, the word "Zat" is used as an abbreviation
   in the second paragraph. The abbreviation is defined in the first,
   so the explanatory <code title="attr-abbr-title">title</code>
   attribute has been omitted. Because of the way <code>dfn</code>
   elements are defined, the second <code>abbr</code> element in this
   example would be connected (in some UA-specific way) to the
   first.</p>

   <pre>&lt;p>The &lt;dfn>&lt;abbr>Zat&lt;/abbr>&lt;/dfn>, short for Zat'ni'catel, is a weapon.&lt;/p>
&lt;p>Jack used a &lt;abbr>Zat&lt;/abbr> to make the boxes of evidence disappear.&lt;/p></pre>

  </div>


  <h4>The <dfn><code>time</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Phrasing content</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>phrasing content</span> is expected.</dd>
   <dt>Content model:</dt>
   <dd><span>Phrasing content</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd><code title="attr-time-datetime">datetime</code></dd>
   <dt>DOM interface:</dt>
   <dd>
<pre class="idl">interface <dfn>HTMLTimeElement</dfn> : <span>HTMLElement</span> {
           attribute DOMString <span title="dom-time-datetime">dateTime</span>;
  readonly attribute <span>DOMTimeStamp</span> <span title="dom-time-date">date</span>;
  readonly attribute <span>DOMTimeStamp</span> <span title="dom-time-time">time</span>;
  readonly attribute <span>DOMTimeStamp</span> <span title="dom-time-timezone">timezone</span>;
};</pre>
   </dd>
  </dl>

  <p>The <code>time</code> element represents a date and/or a time.</p>

  <p>The <dfn title="attr-time-datetime"><code>datetime</code></dfn>
  attribute, if present, must contain a <span>date or time
  string</span> that identifies the date or time being specified.</p>

  <p>If the <code title="attr-time-datetime">datetime</code> attribute is
  not present, then the date or time must be specified in the content
  of the element, such that parsing the element's
  <code>textContent</code> according to the rules for parsing <span
  title="date or time string in content">date or time strings in
  content</span> successfully extracts a date or time.</p>

  <p>The <dfn title="dom-time-datetime"><code>dateTime</code></dfn> DOM
  attribute must <span>reflect</span> the <code
  title="attr-time-datetime">datetime</code> content attribute.</p>

  <p>User agents, to obtain the <dfn
  title="concept-time-date">date</dfn>, <dfn
  title="concept-time-time">time</dfn>, and <dfn
  title="concept-time-timezone">timezone</dfn> represented by a
  <code>time</code> element, must follow these steps:</p>

  <ol>

   <li>If the <code title="attr-time-datetime">datetime</code>
   attribute is present, then parse it according to the rules for
   parsing <span title="date or time string in attributes">date or
   time strings in attributes</span>, and let the result be <var
   title="">result</var>.</li>

   <li>Otherwise, parse the element's <code>textContent</code>
   according to the rules for parsing <span title="date or time string
   in attributes">date or time strings in content</span>, and let the
   result be <var title="">result</var>.</li>

   <li>If <var title="">result</var> is empty (because the parsing
   failed), then the <span title="concept-time-date">date</span> is
   unknown, the <span title="concept-time-time">time</span> is unknown,
   and the <span title="concept-time-timezone">timezone</span> is
   unknown.</li>

   <li>Otherwise: if <var title="">result</var> contains a date, then
   that is the <span title="concept-time-date">date</span>; if <var
   title="">result</var> contains a time, then that is the <span
   title="concept-time-time">time</span>; and if <var
   title="">result</var> contains a timezone, then the timezone is the
   element's <span title="concept-time-timezone">timezone</span>. (A
   timezone can only be present if both a date and a time are also
   present.)</li>

  </ol>

  <p>The <dfn title="dom-time-date"><code>date</code></dfn> DOM attribute
  must return null if the <span title="concept-time-date">date</span> is
  unknown, and otherwise must return the time corresponding to
  midnight UTC (i.e. the first second) of the given <span
  title="concept-time-date">date</span>.</p>

  <p>The <dfn title="dom-time-time"><code>time</code></dfn> DOM attribute
  must return null if the <span title="concept-time-time">time</span> is
  unknown, and otherwise must return the time corresponding to the
  given <span title="concept-time-time">time</span> of 1970-01-01, with
  the timezone UTC.</p>

  <p>The <dfn title="dom-time-timezone"><code>timezone</code></dfn> DOM
  attribute must return null if the <span
  title="concept-time-timezone">timezone</span> is unknown, and otherwise
  must return the time corresponding to 1970-01-01 00:00 UTC in the
  given <span title="concept-time-timezone">timezone</span>, with the
  timezone set to UTC (i.e. the time corresponding to 1970-01-01 at
  00:00 UTC plus the offset corresponding to the timezone).</p>

  <div class="example">

   <p>In the following snippet:</p>

   <pre>&lt;p>Our first date was &lt;time datetime="2006-09-23">a saturday&lt;/time>.&lt;/p></pre>

   <p>...the <code>time</code> element's <code
   title="dom-time-date">date</code> attribute would have the value
   1,158,969,600,000ms, and the <code title="dom-time-time">time</code>
   and <code title="dom-time-timezone">timezone</code> attributes would
   return null.</p>


   <p>In the following snippet:</p>

   <pre>&lt;p>We stopped talking at &lt;time datetime="2006-09-24 05:00 -7">5am the next morning&lt;/time>.&lt;/p></pre>

   <p>...the <code>time</code> element's <code
   title="dom-time-date">date</code> attribute would have the value
   1,159,056,000,000ms, the <code title="dom-time-time">time</code>
   attribute would have the value 18,000,000ms, and the <code
   title="dom-time-timezone">timezone</code> attribute would return
   -25,200,000ms. To obtain the actual time, the three attributes can
   be added together, obtaining 1,159,048,800,000, which is the
   specified date and time in UTC.</p>


   <p>Finally, in the following snippet:</p>

   <pre>&lt;p>Many people get up at &lt;time>08:00&lt;/time>.&lt;/p></pre>

   <p>...the <code>time</code> element's <code
   title="dom-time-date">date</code> attribute would have the value null,
   the <code title="dom-time-time">time</code> attribute would have the
   value 28,800,000ms, and the <code
   title="dom-time-timezone">timezone</code> attribute would return
   null.</p>

  </div>

  <p class="big-issue">These APIs may be suboptimal. Comments on
  making them more useful to JS authors are welcome. The primary use
  cases for these elements are for marking up publication dates
  e.g. in blog entries, and for marking event dates in hCalendar
  markup. Thus the DOM APIs are likely to be used as ways to generate
  interactive calendar widgets or some such.</p>



  <h4>The <dfn><code>progress</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Phrasing content</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>phrasing content</span> is expected.</dd>
   <dt>Content model:</dt>
   <dd><span>Phrasing content</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd><code title="attr-progress-value">value</code></dd>
   <dd><code title="attr-progress-max">max</code></dd>
   <dt>DOM interface:</dt>
   <dd>
<pre class="idl">interface <dfn>HTMLProgressElement</dfn> : <span>HTMLElement</span> {
           attribute float <span title="dom-progress-value">value</span>;
           attribute float <span title="dom-progress-max">max</span>;
  readonly attribute float <span title="dom-progress-position">position</span>;
};</pre>
   </dd>
  </dl>

  <p>The <code>progress</code> element represents the completion
  progress of a task. The progress is either indeterminate, indicating
  that progress is being made but that it is not clear how much more
  work remains to be done before the task is complete (e.g. because
  the task is waiting for a remote host to respond), or the progress
  is a number in the range zero to a maximum, giving the fraction of
  work that has so far been completed.</p>

  <p>There are two attributes that determine the current task
  completion represented by the element.</p>

  <p>The <dfn title="attr-progress-value"><code>value</code></dfn>
  attribute specifies how much of the task has been completed, and the
  <dfn title="attr-progress-max"><code>max</code></dfn> attribute
  specifies how much work the task requires in total. The units are
  arbitrary and not specified.</p>

  <p>Instead of using the attributes, authors are recommended to
  simply include the current value and the maximum value inline as
  text inside the element.</p>

  <div class="example">
   <p>Here is a snippet of a Web application that shows the progress
   of some automated task:</p>
   <pre>&lt;section>
 &lt;h2>Task Progress&lt;/h2>
 &lt;p>&lt;label>Progress: &lt;progress>&lt;span id="p">0&lt;/span>%&lt;/progress>&lt;/p>
 &lt;script>
  var progressBar = document.getElementById('p');
  function updateProgress(newValue) {
    progressBar.textContent = newValue;
  }
 &lt;/script>
&lt;/section></pre>
   <p>(The <code>updateProgress()</code> method in this example would
   be called by some other code on the page to update the actual
   progress bar as the task progressed.)</p>
  </div>

  <p><strong>Author requirements</strong>: The <code
  title="attr-progress-max">max</code> and <code
  title="attr-progress-value">value</code> attributes, when present,
  must have values that are <span title="valid floating point
  number">valid floating point numbers</span>. The <code
  title="attr-progress-max">max</code> attribute, if present, must
  have a value greater than zero. The <code
  title="attr-progress-value">value</code> attribute, if present, must
  have a value equal to or greater than zero, and less than or equal
  to the value of the <code title="attr-progress-max">max</code>
  attribute, if present.</p>

  <p><strong>User agent requirements</strong>: User agents must parse
  the <code title="attr-progress-max">max</code> and <code
  title="attr-progress-value">value</code> attributes' values
  according to the <span>rules for parsing floating point number
  values</span>.</p>

  <p>If the <code title="attr-progress-value">value</code> attribute
  is omitted, then user agents must also parse the
  <code>textContent</code> of the <code>progress</code> element in
  question using the <span>steps for finding one or two numbers of a
  ratio in a string</span>. These steps will return nothing, one
  number, one number with a denominator punctuation character, or two
  numbers.</p>

  <p>Using the results of this processing, user agents must determine
  whether the progress bar is an indeterminate progress bar, or
  whether it is a determinate progress bar, and in the latter case,
  what its current and maximum values are, all as follows:</p>

  <ol>

   <li>If the <code title="attr-progress-max">max</code> attribute is
   omitted, and the <code title="attr-progress-value">value</code> is
   omitted, and the results of parsing the <code>textContent</code>
   was nothing, then the progress bar is an indeterminate progress
   bar. Abort these steps.</li>

   <li>Otherwise, it is a determinate progress bar.</li>

   <li>If the <code title="attr-progress-max">max</code> attribute is
   included, then, if a value could be parsed out of it, then the
   maximum value is that value.</li>

   <li>Otherwise, if the <code title="attr-progress-max">max</code>
   attribute is absent but the <code
   title="attr-progress-value">value</code> attribute is present, or,
   if the <code title="attr-progress-max">max</code> attribute is
   present but no value could be parsed from it, then the maximum is
   1.</li>

   <li>Otherwise, if neither attribute is included, then, if the
   <code>textContent</code> contained one number with an associated
   denominator punctuation character, then the maximum value is the
   <span>value associated with that denominator punctuation
   character</span>; otherwise, if the <code>textContent</code>
   contained two numbers, the maximum value is the higher of the two
   values; otherwise, the maximum value is 1.</li>

   <li>If the <code title="attr-progress-value">value</code> attribute
   is present on the element and a value could be parsed out of it,
   that value is the current value of the progress bar. Otherwise, if
   the attribute is present but no value could be parsed from it, the
   current value is zero.</li>

   <li>Otherwise if the <code title="attr-progress-value">value</code>
   attribute is absent and the <code
   title="attr-progress-max">max</code> attribute is present, then, if
   the <code>textContent</code> was parsed and found to contain just
   one number, with no associated denominator punctuation character,
   then the current value is that number. Otherwise, if the <code
   title="attr-progress-value">value</code> attribute is absent and
   the <code title="attr-progress-max">max</code> attribute is present
   then the current value is zero.</li>

   <li>Otherwise, if neither attribute is present, then the current
   value is the lower of the one or two numbers that were found in the
   <code>textContent</code> of the element.</li>

   <li>If the maximum value is less than or equal to zero, then it is
   reset to 1.</li>

   <li>If the current value is less than zero, then it is reset to
   zero.</li>

   <li>Finally, if the current value is greater than the maximum
   value, then the current value is reset to the maximum value.</li>

  </ol>

  <p><strong>UA requirements for showing the progress bar</strong>:
  When representing a <code>progress</code> element to the user, the
  UA should indicate whether it is a determinate or indeterminate
  progress bar, and in the former case, should indicate the relative
  position of the current value relative to the maximum value.</p>

  <p>The <dfn title="dom-progress-max"><code>max</code></dfn> and <dfn
  title="dom-progress-value"><code>value</code></dfn> DOM attributes
  must reflect the elements' content attributes of the same name. When
  the relevant content attributes are absent, the DOM attributes must
  return zero. The value parsed from the <code>textContent</code>
  never affects the DOM values.</p>

  <p class="big-issue">Would be cool to have the <code
  title="dom-progress-value">value</code> DOM attribute update the
  <code>textContent</code> in-line...</p>

  <p>If the progress bar is an indeterminate progress bar, then the
  <dfn title="dom-progress-position"><code>position</code></dfn> DOM
  attribute must return -1. Otherwise, it must return the result of
  dividing the current value by the maximum value.</p>



  <h4>The <dfn><code>meter</code></dfn> element</h4>
  <!-- Keep this after <progress> and NOT close to <time> -->

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Phrasing content</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>phrasing content</span> is expected.</dd>
   <dt>Content model:</dt>
   <dd><span>Phrasing content</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd><code title="attr-meter-value">value</code></dd>
   <dd><code title="attr-meter-min">min</code></dd>
   <dd><code title="attr-meter-low">low</code></dd>
   <dd><code title="attr-meter-high">high</code></dd>
   <dd><code title="attr-meter-max">max</code></dd>
   <dd><code title="attr-meter-optimum">optimum</code></dd>
   <dt>DOM interface:</dt>
   <dd>
<pre class="idl">interface <dfn>HTMLMeterElement</dfn> : <span>HTMLElement</span> {
           attribute long <span title="dom-meter-value">value</span>;
           attribute long <span title="dom-meter-min">min</span>;
           attribute long <span title="dom-meter-max">max</span>;
           attribute long <span title="dom-meter-low">low</span>;
           attribute long <span title="dom-meter-high">high</span>;
           attribute long <span title="dom-meter-optimum">optimum</span>;
};</pre>
   </dd>
  </dl>

  <p>The <code>meter</code> element represents a scalar measurement
  within a known range, or a fractional value; for example disk usage,
  the relevance of a query result, or the fraction of a voting
  population to have selected a particular candidate.</p>

  <p>This is also known as a gauge.</p>

  <p class="note">The <code>meter</code> element should not be used to
  indicate progress (as in a progress bar). For that role, HTML
  provides a separate <code>progress</code> element.</p>

  <p class="note">The <code>meter</code> element also does not
  represent a scalar value of arbitrary range &mdash; for example, it
  would be wrong to use this to report a weight, or height, unless
  there is a known maximum value.</p>

  <p>There are six attributes that determine the semantics of the
  gauge represented by the element.</p>

  <p>The <dfn title="attr-meter-min"><code>min</code></dfn> attribute
  specifies the lower bound of the range, and the <dfn
  title="attr-meter-max"><code>max</code></dfn> attribute specifies
  the upper bound. The <dfn
  title="attr-meter-value"><code>value</code></dfn> attribute
  specifies the value to have the gauge indicate as the "measured"
  value.</p>

  <p>The other three attributes can be used to segment the gauge's
  range into "low", "medium", and "high" parts, and to indicate which
  part of the gauge is the "optimum" part. The <dfn
  title="attr-meter-low"><code>low</code></dfn> attribute specifies
  the range that is considered to be the "low" part, and the <dfn
  title="attr-meter-high"><code>high</code></dfn> attribute specifies
  the range that is considered to be the "high" part. The <dfn
  title="attr-meter-optimum"><code>optimum</code></dfn> attribute
  gives the position that is "optimum"; if that is higher than the
  "high" value  then this indicates that the higher the value, the
  better; if it's lower than the "low" mark then it indicates that
  lower values are better, and naturally if it is in between then it
  indicates that neither high nor low values are good.</p>

  <p><strong>Authoring requirements</strong>: The recommended way of
  giving the value is to include it as contents of the element, either
  as two numbers (the higher number represents the maximum, the other
  number the current value), or as a percentage or similar (using one
  of the characters such as "%"), or as a fraction.</p>

  <p>The <code title="attr-meter-value">value</code>, <code
  title="attr-meter-min">min</code>, <code
  title="attr-meter-low">low</code>, <code
  title="attr-meter-high">high</code>, <code
  title="attr-meter-max">max</code>, and <code
  title="attr-meter-optimum">optimum</code> attributes are all
  optional. When present, they must have values that are <span
  title="valid floating point number">valid floating point
  numbers</span>.</p>

  <div class="example">

   <p>The following examples all represent a measurement of three
   quarters (of the maximum of whatever is being measured):</p>

   <pre>&lt;meter>75%&lt;/meter>
&lt;meter>750&#x2030;&lt;/meter>
&lt;meter>3/4&lt;/meter>
&lt;meter>6 blocks used (out of 8 total)&lt;/meter>
&lt;meter>max: 100; current: 75&lt;/meter>
&lt;meter>&lt;object data="graph75.png">0.75&lt;/object>&lt;/meter>
&lt;meter min="0" max="100" value="75">&lt;/meter></pre>

   <p>The following example is incorrect use of the element, because
   it doesn't give a range (and since the default maximum is 1, both
   of the gauges would end up looking maxed out):</p>

   <pre>&lt;p>The grapefruit pie had a radius of &lt;meter>12cm&lt;/meter>
and a height of &lt;meter>2cm&lt;/meter>.&lt;/p> &lt;!-- <strong>BAD!</strong> --></pre>

   <p>Instead, one would either not include the meter element, or use
   the meter element with a defined range to give the dimensions in
   context compared to other pies:</p>

   <pre>&lt;p>The grapefruit pie had a radius of 12cm and a height of
2cm.&lt;/p>
&lt;dl>
 &lt;dt>Radius: &lt;dd> &lt;meter min=0 max=20 value=12>12cm&lt;/meter>
 &lt;dt>Height: &lt;dd> &lt;meter min=0 max=10 value=2>2cm&lt;/meter>
&lt;/dl></pre>

  </div>

  <p>There is no explicit way to specify units in the
  <code>meter</code> element, but the units may be specified in the
  <code title="attr-title">title</code> attribute in freeform text.</p>

  <div class="example">

   <p>The example above could be extended to mention the units:</p>

   <pre>&lt;dl>
 &lt;dt>Radius: &lt;dd> &lt;meter min=0 max=20 value=12 title="centimeters">12cm&lt;/meter>
 &lt;dt>Height: &lt;dd> &lt;meter min=0 max=10 value=2 title="centimeters">2cm&lt;/meter>
&lt;/dl></pre>

  </div>

  <p><strong>User agent requirements</strong>: User agents must parse
  the <code title="attr-meter-min">min</code>, <code
  title="attr-meter-max">max</code>, <code
  title="attr-meter-value">value</code>, <code
  title="attr-meter-low">low</code>, <code
  title="attr-meter-high">high</code>, and <code
  title="attr-meter-optimum">optimum</code> attributes using the
  <span>rules for parsing floating point number values</span>.</p>

  <p>If the <code title="attr-meter-value">value</code> attribute has
  been omitted, the user agent must also process the
  <code>textContent</code> of the element according to the <span>steps
  for finding one or two numbers of a ratio in a string</span>. These
  steps will return nothing, one number, one number with a denominator
  punctuation character, or two numbers.</p>

  <p>User agents must then use all these numbers to obtain values for
  six points on the gauge, as follows. (The order in which these are
  evaluated is important, as some of the values refer to earlier
  ones.)</p>

  <dl>

   <dt>The minimum value</dt>

   <dd>
    <p>If the <code title="attr-meter-min">min</code> attribute is
    specified and a value could be parsed out of it, then the minimum
    value is that value. Otherwise, the minimum value is zero.</p>
   </dd>

   <dt>The maximum value</dt>

   <dd>

    <p>If the <code title="attr-meter-max">max</code> attribute is
    specified and a value could be parsed out of it, the maximum
    value is that value.</p>

    <p>Otherwise, if the <code title="attr-meter-max">max</code>
    attribute is specified but no value could be parsed out of it, or
    if it was not specified, but either or both of the <code
    title="attr-meter-min">min</code> or <code
    title="attr-meter-value">value</code> attributes <em>were</em>
    specified, then the maximum value is 1.</p>

    <p>Otherwise, none of the <code title="attr-meter-max">max</code>,
    <code title="attr-meter-min">min</code>, and <code
    title="attr-meter-value">value</code> attributes were
    specified. If the result of processing the
    <code>textContent</code> of the element was either nothing or just
    one number with no denominator punctuation character, then the
    maximum value is 1; if the result was one number but it had an
    associated denominator punctuation character, then the maximum
    value is the <span title="values associated with denominator
    punctuation characters">value associated with that denominator
    punctuation character</span>; and finally, if there were two
    numbers parsed out of the <code>textContent</code>, then the
    maximum is the higher of those two numbers.</p>

    <p>If the above machinations result in a maximum value less than
    the minimum value, then the maximum value is actually the same as
    the minimum value.</p>

   </dd>

   <dt>The actual value</dt>

   <dd>

    <p>If the <code title="attr-meter-value">value</code> attribute is
    specified and a value could be parsed out of it, then that value
    is the actual value.</p>

    <p>If the <code title="attr-meter-value">value</code> attribute is
    not specified but the <code title="attr-meter-max">max</code>
    attribute <em>is</em> specified and the result of processing the
    <code>textContent</code> of the element was one number with no
    associated denominator punctuation character, then that number is
    the actual value.</p>

    <p>If neither of the <code title="attr-meter-value">value</code>
    and <code title="attr-meter-max">max</code> attributes are
    specified, then, if the result of processing the
    <code>textContent</code> of the element was one number (with or
    without an associated denominator punctuation character), then
    that is the actual value, and if the result of processing the
    <code>textContent</code> of the element was two numbers, then the
    actual value is the lower of the two numbers found.</p>

    <p>Otherwise, if none of the above apply, the actual value is
    zero.</p>

    <p>If the above procedure results in an actual value less than
    the minimum value, then the actual value is actually the same as
    the minimum value.</p>

    <p>If, on the other hand, the result is an actual value greater
    than the maximum value, then the actual value is the maximum
    value.</p>

   </dd>

   <dt>The low boundary</dt>

   <dd>

    <p>If the <code title="attr-meter-low">low</code> attribute is
    specified and a value could be parsed out of it, then the low
    boundary is that value. Otherwise, the low boundary is the same as
    the minimum value.</p>

    <p>If the above results in a low boundary that is less than the
    minimum value, the low boundary is the minimum value.</p>

   </dd>

   <dt>The high boundary</dt>

   <dd>

    <p>If the <code title="attr-meter-high">high</code> attribute is
    specified and a value could be parsed out of it, then the high
    boundary is that value. Otherwise, the high boundary is the same
    as the maximum value.</p>

    <p>If the above results in a high boundary that is higher than the
    maximum value, the high boundary is the maximum value.</p>

   </dd>

   <dt>The optimum point</dt>

   <dd>

    <p>If the <code title="attr-meter-optimum">optimum</code>
    attribute is specified and a value could be parsed out of it, then
    the optimum point is that value. Otherwise, the optimum point is
    the midpoint between the minimum value and the maximum value.</p>

    <p>If the optimum point is then less than the minimum value, then
    the optimum point is actually the same as the minimum
    value. Similarly, if the optimum point is greater than the maximum
    value, then it is actually the maximum value instead.</p>

   </dd>

  </dl>

  <p>All of which should result in the following inequalities all
  being true:</p>

  <ul class="brief">
   <li>minimum value &le; actual value &le; maximum value</li>
   <li>minimum value &le; low boundary &le; high boundary &le; maximum value</li>
   <li>minimum value &le; optimum point &le; maximum value</li>
  </ul>

  <p><strong>UA requirements for regions of the gauge</strong>: If the
  optimum point is equal to the low boundary or the high boundary, or
  anywhere in between them, then the region between the low and high
  boundaries of the gauge must be treated as the optimum region, and
  the low and high parts, if any, must be treated as
  suboptimal. Otherwise, if the optimum point is less than the low
  boundary, then the region between the minimum value and the low
  boundary must be treated as the optimum region, the region between
  the low boundary and the high boundary must be treated as a
  suboptimal region, and the region between the high boundary and the
  maximum value must be treated as an even less good region. Finally,
  if the optimum point is higher than the high boundary, then the
  situation is reversed; the region between the high boundary and the
  maximum value must be treated as the optimum region, the region
  between the high boundary and the low boundary must be treated as a
  suboptimal region, and the remaining region between the low boundary
  and the minimum value must be treated as an even less good
  region.</p>

  <p><strong>UA requirements for showing the gauge</strong>: When
  representing a <code>meter</code> element to the user, the UA should
  indicate the relative position of the actual value to the minimum
  and maximum values, and the relationship between the actual value
  and the three regions of the gauge.</p>

  <div class="example">
   <p>The following markup:</p>
   <pre>
&lt;h3>Suggested groups&lt;/h3>
&lt;menu type="toolbar">
 &lt;a href="?cmd=hsg" onclick="hideSuggestedGroups()">Hide suggested groups&lt;/a>
&lt;/menu>
&lt;ul>
 &lt;li>
  &lt;p>&lt;a href="/group/comp.infosystems.www.authoring.stylesheets/view">comp.infosystems.www.authoring.stylesheets&lt;/a> -
     &lt;a href="/group/comp.infosystems.www.authoring.stylesheets/subscribe">join&lt;/a>&lt;/p>
  &lt;p>Group description: &lt;strong>Layout/presentation on the WWW.&lt;/strong>&lt;/p>
  &lt;p><strong>&lt;meter value="0.5">Moderate activity,&lt;/meter></strong> Usenet, 618 subscribers&lt;/p>
 &lt;/li>
 &lt;li>
  &lt;p>&lt;a href="/group/netscape.public.mozilla.xpinstall/view">netscape.public.mozilla.xpinstall&lt;/a> -
     &lt;a href="/group/netscape.public.mozilla.xpinstall/subscribe">join&lt;/a>&lt;/p>
  &lt;p>Group description: &lt;strong>Mozilla XPInstall discussion.&lt;/strong>&lt;/p>
  &lt;p><strong>&lt;meter value="0.25">Low activity,&lt;/meter></strong> Usenet, 22 subscribers&lt;/p>
 &lt;/li>
 &lt;li>
  &lt;p>&lt;a href="/group/mozilla.dev.general/view">mozilla.dev.general&lt;/a> -
     &lt;a href="/group/mozilla.dev.general/subscribe">join&lt;/a>&lt;/p>
  &lt;p><strong>&lt;meter value="0.25">Low activity,&lt;/meter></strong> Usenet, 66 subscribers&lt;/p>
 &lt;/li>
&lt;/ul>
</pre>
   <p>Might be rendered as follows:</p>
   <p><img src="images/sample-meter.png" alt="With the &lt;meter> elements rendered as inline green bars of varying lengths."></p>
  </div>

  <p>User agents may combine the value of the <code
  title="attr-title">title</code> attribute and the other attributes
  to provide context-sensitive help or inline text detailing the
  actual values.</p>

  <div class="example">
   <p>For example, the following snippet:</p>
   <pre>&lt;meter min=0 max=60 value=23.2 title=seconds>&lt;/meter></pre>
   <p>...might cause the user agent to display a gauge with a tooltip
   saying "Value: 23.2 out of 60." on one line and "seconds" on a
   second line.</p>
  </div>

  <p>The <dfn title="dom-meter-min"><code>min</code></dfn>, <dfn
  title="dom-meter-max"><code>max</code></dfn>, <dfn
  title="dom-meter-value"><code>value</code></dfn>, <dfn
  title="dom-meter-low"><code>low</code></dfn>, <dfn
  title="dom-meter-high"><code>high</code></dfn>, and <dfn
  title="dom-meter-optimum"><code>optimum</code></dfn> DOM attributes
  must reflect the elements' content attributes of the same name. When
  the relevant content attributes are absent, the DOM attributes must
  return zero. The value parsed from the <code>textContent</code>
  never affects the DOM values.</p>

  <p class="big-issue">Would be cool to have the <code
  title="dom-meter-value">value</code> DOM attribute update the
  <code>textContent</code> in-line...</p>

<!-- XXX
should we also look inside the title="" attribute?
   Disk usage: &lt;meter title="985MB of 986MB total" high="980">Full!&lt;/meter>
should we make the contents accessible in some way, e.g. as a tooltip?
-->



  <h4>The <dfn><code>code</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Phrasing content</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>phrasing content</span> is expected.</dd>
   <dt>Content model:</dt>
   <dd><span>Phrasing content</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None, but the <code title="attr-title">title</code> attribute has special semantics on this element when used with the <code>dfn</code> element.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>code</code> element represents a fragment of computer
  code. This could be an XML element name, a filename, a computer
  program, or any other string that a computer would recognise.</p>

  <p>Although there is no formal way to indicate the language of
  computer code being marked up, authors who wish to mark
  <code>code</code> elements with the language used, e.g. so that
  syntax highlighting scripts can use the right rules, may do so by
  adding a class prefixed with "<code title="">language-</code>" to
  the element.</p>

  <div class="example">

   <p>The following example shows how a block of code could be marked
   up using the <code>pre</code> and <code>code</code> elements.</p>

   <pre>&lt;pre>&lt;code class="language-pascal">var i: Integer;
begin
   i := 1;
end.&lt;/code>&lt;/pre></pre>

   <p>A class is used in that example to indicate the language
   used.</p>

  </div>

  <p class="note">See the <code>pre</code> element for more detais.</p>


  <h4>The <dfn><code>var</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Phrasing content</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>phrasing content</span> is expected.</dd>
   <dt>Content model:</dt>
   <dd><span>Phrasing content</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None, but the <code title="attr-title">title</code> attribute has special semantics on this element when used with the <code>dfn</code> element.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>var</code> element represents a variable. This could be
  an actual variable in a mathematical expression or programming
  context, or it could just be a term used as a placeholder in
  prose.</p>

  <div class="example">
   <p>In the paragraph below, the letter "n" is being used as a
   variable in prose:</p>
   <pre>&lt;p>If there are &lt;var>n&lt;/var> pipes leading to the ice
cream factory then I expect at &lt;em>least&lt;/em> &lt;var>n&lt;/var>
flavours of ice cream to be available for purchase!&lt;/p></pre>
  </div>


  <h4>The <dfn><code>samp</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Phrasing content</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>phrasing content</span> is expected.</dd>
   <dt>Content model:</dt>
   <dd><span>Phrasing content</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None, but the <code title="attr-title">title</code> attribute has special semantics on this element when used with the <code>dfn</code> element.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>samp</code> element represents (sample) output from a
  program or computing system.</p>

  <p class="note">See the <code>pre</code> and <code>kbd</code>
  elements for more detais.</p>

  <div class="example">
   <p>This example shows the <code>samp</code> element being used
   inline:</p>
   <pre>&lt;p>The computer said &lt;samp>Too much cheese in tray
two&lt;/samp> but I didn't know what that meant.&lt;/p></pre>

   <p>This second example shows a block of sample output. Nested
   <code>samp</code> and <code>kbd</code> elements allow for the
   styling of specific elements of the sample output using a
   style sheet.</p>

   <!-- XXX should those nested SAMPs be SPANs? -->
   <pre>&lt;pre>&lt;samp>&lt;samp class="prompt">jdoe@mowmow:~$&lt;/samp> &lt;kbd>ssh demo.example.com&lt;/kbd>
Last login: Tue Apr 12 09:10:17 2005 from mowmow.example.com on pts/1
Linux demo 2.6.10-grsec+gg3+e+fhs6b+nfs+gr0501+++p3+c4a+gr2b-reslog-v6.189 #1 SMP Tue Feb 1 11:22:36 PST 2005 i686 unknown

&lt;samp class="prompt">jdoe@demo:~$&lt;/samp> &lt;samp class="cursor">_&lt;/samp>&lt;/samp>&lt;/pre></pre>
  </div>


  <h4>The <dfn><code>kbd</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Phrasing content</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>phrasing content</span> is expected.</dd>
   <dt>Content model:</dt>
   <dd><span>Phrasing content</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>kbd</code> element represents user input (typically
  keyboard input, although it may also be used to represent other
  input, such as voice commands).</p>

  <p>When the <code>kbd</code> element is nested inside a
  <code>samp</code> element, it represents the input as it was echoed
  by the system.</p>

  <p>When the <code>kbd</code> element <em>contains</em> a
  <code>samp</code> element, it represents input based on system
  output, for example invoking a menu item.</p>

  <p>When the <code>kbd</code> element is nested inside another
  <code>kbd</code> element, it represents an actual key or other
  single unit of input as appropriate for the input mechanism.</p>

  <div class="example">
   <p>Here the <code>kbd</code> element is used to indicate keys to press:</p>
   <pre>&lt;p>To make George eat an apple, press &lt;kbd>&lt;kbd>Shift&lt;/kbd>+&lt;kbd>F3&lt;/kbd>&lt;/kbd>&lt;/p></pre>

   <p>In this second example, the user is told to pick a particular
   menu item. The outer <code>kbd</code> element marks up a block of
   input, with the inner <code>kbd</code> elements representing each
   individual step of the input, and the <code>samp</code> elements
   inside them indicating that the steps are input based on something
   being displayed by the system, in this case menu labels:</p>

   <pre>&lt;p>To make George eat an apple, select
    &lt;kbd>&lt;kbd>&lt;samp>File&lt;/samp>&lt;/kbd>|&lt;kbd>&lt;samp>Eat Apple...&lt;/samp>&lt;/kbd>&lt;/kbd>
&lt;/p></pre>
  </div>


  <h4>The <dfn><code>sub</code></dfn> and <dfn><code>sup</code></dfn> elements</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Phrasing content</span>.</dd>
   <dt>Contexts in which these elements may be used:</dt>
   <dd>Where <span>phrasing content</span> is expected.</dd>
   <dt>Content model:</dt>
   <dd><span>Phrasing content</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>sup</code> element represents a superscript and the
  <code>sub</code> element represents a subscript.</p>

  <p>These elements must only be used to mark up typographical
  conventions with specific meanings, not for typographical
  presentation for presentation's sake. For example, it would be
  inappropriate for the <code>sub</code> and <code>sup</code> elements
  to be used in the name of the LaTeX document preparation system. In
  general, authors should only use these elements if the
  <em>absence</em> of those elements would change the meaning of the
  content.</p>

  <p>When the <code>sub</code> element is used inside a
  <code>var</code> element, it represents the subscript that
  identifies the variable in a family of variables.</p>

  <div class="example">
   <pre>&lt;p>The coordinate of the &lt;var>i&lt;/var>th point is
(&lt;var>x&lt;sub>&lt;var>i&lt;/var>&lt;/sub>&lt;/var>, &lt;var>y&lt;sub>&lt;var>i&lt;/var>&lt;/sub>&lt;/var>).
For example, the 10th point has coordinate
(&lt;var>x&lt;sub>10&lt;/sub>&lt;/var>, &lt;var>y&lt;sub>10&lt;/sub>&lt;/var>).&lt;/p></pre>
  </div>

  <p>In certain languages, superscripts are part of the typographical
  conventions for some abbreviations.</p>

  <div class="example">
   <pre>&lt;p>The most beautiful women are
&lt;span lang="fr">&lt;abbr>M&lt;sup>lle&lt;/sup>&lt;/abbr> Gwendoline&lt;/span> and 
&lt;span lang="fr">&lt;abbr>M&lt;sup>me&lt;/sup>&lt;/abbr> Denise&lt;/span>.&lt;/p></pre>
  </div>

  <p>Mathematical expressions often use subscripts and superscripts.
  <!--Authors are encouraged to use MathML for marking up mathematics,
  but authors may opt to use <code>sub</code> and <code>sup</code> if
  detailed mathematical markup is not desired. <a
  href="#refsMathML">[MathML]</a>--></p> <!-- XXX -->

  <div class="example">
   <pre>&lt;var>E&lt;/var>=&lt;var>m&lt;/var>&lt;var>c&lt;/var>&lt;sup>2&lt;/sup></pre>
   <pre>f(&lt;var>x&lt;/var>, &lt;var>n&lt;/var>) = log&lt;sub>4&lt;/sub>&lt;var>x&lt;/var>&lt;sup>&lt;var>n&lt;/var>&lt;/sup></pre>
  </div>


  <h4>The <dfn><code>span</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Phrasing content</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>phrasing content</span> is expected.</dd>
   <dt>Content model:</dt>
   <dd><!--XXXSPAN Either: --><span>Phrasing content</span>.</dd>
<!--XXXSPAN   <dd>Or: A single <code>ol</code> or <code>ul</code> element.</dd>-->
   <dt>Element-specific attributes:</dt>
   <dd>None, but the <code title="attr-title">title</code> attribute has special semantics on this element when used with the <code>dfn</code> element.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>span</code> element doesn't mean anything on its own,
  but can be useful when used together with other attributes,
  e.g. <code title="attr-class">class</code>, <code
  title="attr-lang">lang</code>, or <code title="attr-dir">dir</code>,
  or when used in conjunction with the <code>dfn</code> element.</p>

<!--XXXSPAN
  <p>The <code>span</code> element may be used to include a list
  inline in a paragraph. (When used in this way, the list can only
  itself contain <span>phrasing content</span>.)</p>

  <div class="example">

   <p>In this example, the list is part of the paragraph:</p>

   ...

  </div>
-->


  <h4>The <dfn><code>i</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Phrasing content</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>phrasing content</span> is expected.</dd>
   <dt>Content model:</dt>
   <dd><span>Phrasing content</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None, but the <code title="attr-title">title</code> attribute has special semantics on this element when used with the <code>dfn</code> element.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>i</code> element represents a span of text in an
  alternate voice or mood, or otherwise offset from the normal prose,
  such as a taxonomic designation, a technical term, an idiomatic
  phrase from another language, a thought, a ship name, or some other
  prose whose typical typographic presentation is italicized.</p>

  <p>Terms in languages different from the main text should be
  annotated with <code title="attr-lang">lang</code> attributes (<code
  title="attr-xml-lang">xml:lang</code> in XML).</p>

  <div class="example">
   <p>The examples below show uses of the <code>i</code> element:</p>
   <pre>&lt;p>The &lt;i>felis silvestris catus&lt;/i> is cute.&lt;/p>
&lt;p>The term &lt;i>prose content&lt;/i> is defined above.&lt;/p>
&lt;p>There is a certain &lt;i lang="fr">je ne sais quoi&lt;/i> in the air.&lt;/p></pre>
   <p>In the following example, a dream sequence is marked up using
   <code>i</code> elements.</p>
   <pre>&lt;p>Raymond tried to sleep.&lt;/p>
&lt;p>&lt;i>The ship sailed away on Thursday&lt;/i>, he
dreamt. &lt;i>The ship had many people aboard, including a beautiful
princess called Carey. He watched her, day-in, day-out, hoping she
would notice him, but she never did.&lt;/i>&lt;/p>
&lt;p>&lt;i>Finally one night he picked up the courage to speak with
her&mdash;&lt;/i>&lt;/p>
&lt;p>Raymond woke with a start as the fire alarm rang out.&lt;/p></pre>
  </div>

  <p>The <code>i</code> element should be used as a last resort when
  no other element is more appropriate. In particular, citations
  should use the <code>cite</code> element, defining instances of
  terms should use the <code>dfn</code> element, stress emphasis
  should use the <code>em</code> element, importance should be denoted
  with the <code>strong</code> element, quotes should be marked up
  with the <code>q</code> element, and small print should use the
  <code>small</code> element.</p>

  <p class="note">Style sheets can be used to format <code>i</code>
  elements, just like any other element can be restyled. Thus, it is
  not the case that content in <code>i</code> elements will
  necessarily be italicised.</p>


  <h4>The <dfn><code>b</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Phrasing content</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>phrasing content</span> is expected.</dd>
   <dt>Content model:</dt>
   <dd><span>Phrasing content</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>b</code> element represents a span of text to be
  stylistically offset from the normal prose without conveying any
  extra importance, such as key words in a document abstract, product
  names in a review, or other spans of text whose typical typographic
  presentation is boldened.</p>

  <div class="example">
   <p>The following example shows a use of the <code>b</code> element
   to highlight key words without marking them up as important:</p>
   <pre>&lt;p>The &lt;b>frobonitor&lt;/b> and &lt;b>barbinator&lt;/b> components are fried.&lt;/p></pre>
  </div>

  <div class="example">
   <p>In the following example, objects in a text adventure are
   highlighted as being special by use of the <code>b</code>
   element.</p>
   <pre>&lt;p>You enter a small room. Your &lt;b>sword&lt;/b> glows
brighter. A &lt;b>rat&lt;/b> scurries past the corner wall.&lt;/p></pre>
  </div>

  <div class="example">
   <p>Another case where the <code>b</code> element is appropriate is
   in marking up the lede (or lead) sentence or paragraph. The
   following example shows how a <a
   href="http://news.bbc.co.uk/2/hi/uk_news/scotland/north_east/7101506.stm">BBC
   article about kittens adopting a rabbit as their own</a> could be
   marked up using HTML5 elements:</p>
   <pre>&lt;article>
 &lt;h2>Kittens 'adopted' by pet rabbit&lt;/h2>
 &lt;p>&lt;b>Six abandoned kittens have found an unexpected new
 mother figure &mdash; a pet rabbit.&lt;/b>&lt;/p>
 &lt;p>Veterinary nurse Melanie Humble took the three-week-old
 kittens to her Aberdeen home.&lt;/p>
<i>[...]</i></pre>
  </div>

  <p>The <code>b</code> element should be used as a last resort when
  no other element is more appropriate. In particular, headers should
  use the <code>h1</code> to <code>h6</code> elements, stress emphasis
  should use the <code>em</code> element, importance should be denoted
  with the <code>strong</code> element, and text marked or highlighted
  should use the <code>mark</code> element.</p>

  <div class="example">
   <p>The following would be <em>incorrect</em> usage:</p>
   <pre>&lt;p>&lt;b>WARNING!&lt;/b> Do not frob the barbinator!&lt;/p></pre>
   <p>In the previous example, the correct element to use would have
   been <code>strong</code>, not <code>b</code>.</p>
  </div>

  <p class="note">Style sheets can be used to format <code>b</code>
  elements, just like any other element can be restyled. Thus, it is
  not the case that content in <code>b</code> elements will
  necessarily be boldened.</p>


  <h4>The <dfn><code>bdo</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Phrasing content</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>phrasing content</span> is expected.</dd>
   <dt>Content model:</dt>
   <dd><span>Phrasing content</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None, but the <code title="attr-dir">dir</code> global attribute has special requirements on this element.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>bdo</code> element allows authors to override the
  Unicode bidi algorithm by explicitly specifying a direction
  override. <a href="#refsBIDI">[BIDI]</a></p>

  <p>Authors must specify the <code title="attr-dir">dir</code>
  attribute on this element, with the value <code>ltr</code> to
  specify a left-to-right override and with the value <code>rtl</code>
  to specify a right-to-left override.</p>

  <p>If the element has the <code title="attr-dir">dir</code>
  attribute set to the exact value <code>ltr</code>, then for the
  purposes of the bidi algorithm, the user agent must act as if there
  was a U+202D LEFT-TO-RIGHT OVERRIDE character at the start of the
  element, and a U+202C POP DIRECTIONAL FORMATTING at the end of the
  element.</p>

  <p>If the element has the <code title="attr-dir">dir</code>
  attribute set to the exact value <code>rtl</code>, then for the
  purposes of the bidi algorithm, the user agent must act as if there
  was a U+202E RIGHT-TO-LEFT OVERRIDE character at the start of the
  element, and a U+202C POP DIRECTIONAL FORMATTING at the end of the
  element.</p>

  <p>The requirements on handling the <code>bdo</code> element for the
  bidi algorithm may be implemented indirectly through the style
  layer. For example, an HTML+CSS user agent should implement these
  requirements by implementing the CSS <code>unicode-bidi</code>
  property. <a href="#refsCSS21">[CSS21]</a></p>

  <!-- XXX need examples -->



  <h4>Usage summary</h4>

  <p class="big-issue">We need to summarise the various elements, in
  particular to distinguish b/i/em/strong/var/q/mark/cite.</p>

  <!-- XXX when you do this, also reorder the elements in this section
  to bring the related ones closer together. -->


  <h3>Edits</h3>

  <p>The <code>ins</code> and <code>del</code> elements represent
  edits to the document.</p>

  <div class="note">

   <p>Since the <code>ins</code> and <code>del</code> elements do not
   affect <span title="paragraph">paragraphing</span>, it is possible,
   in some cases where paragraphs are <span
   title="paragraph">implied</span> (without explicit <code>p</code>
   elements), for an <code>ins</code> or <code>del</code> element to
   span both an entire paragraph or other non-<span>phrasing
   content</span> elements and part of another paragraph.</p>

   <p>For example:</p>

   <pre>&lt;section>
 &lt;ins>
  &lt;p>
   This is a paragraph that was inserted.
  &lt;/p>
  This is another paragraph whose first sentence was inserted
  at the same time as the paragraph above.
 &lt;/ins>
 This is a second sentence, which was there all along.
&lt;/section></pre>

   <p>By only wrapping some paragraphs in <code>p</code> elements, one
   can even get the end of one paragraph, a whole second paragraph,
   and the start of a third paragraph to be covered by the same
   <code>ins</code> or <code>del</code> element (though this is very
   confusing, and not considered good practice):</p>

   <pre>&lt;section>
 This is the first paragraph. &lt;ins>This sentence was
 inserted.
 &lt;p>This second paragraph was inserted.&lt;/p>
 This sentence was inserted too.&lt;/ins> This is the
 third paragraph in this example.
&lt;/section></pre>

   <p>However, due to the way <span title="paragraph">implied
   paragraphs</span> are defined, it is not possible to mark up the
   end of one paragraph and the start of the very next one using the
   same <code>ins</code> or <code>del</code> element. You instead have
   to use one (or two) <code>p</code> element(s) and two
   <code>ins</code> or <code>del</code> elements:

   <p>For example:</p>

   <pre>&lt;section>
 &lt;p>This is the first paragraph. &lt;del>This sentence was
 deleted.&lt;/p>
 &lt;p>&lt;del>This sentence was deleted too.&lt;/del> That
 sentence needed a separate &amp;lt;del> element.&lt;/p>
&lt;/section></pre>

  <p>Partly because of the confusion described above, authors are
  strongly recommended to always mark up all paragraphs with the
  <code>p</code> element, and to not have any <code>ins</code> or
  <code>del</code> elements that cross across any <span
  title="paragraph">implied paragraphs</span>.</p>

  </div>


  <h4>The <dfn><code>ins</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd>When the element only contains <span>phrasing content</span>: <span>phrasing content</span>.</dd>
   <dd>Otherwise: <span>flow content</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>When the element only contains <span>phrasing content</span>: where <span>phrasing content</span> is expected.</dd>
   <dd>Otherwise: where <span>flow content</span> is expected.</dd>
   <dt>Content model:</dt>
   <dd><span>Transparent</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd><code title="attr-mod-cite">cite</code></dd>
   <dd><code title="attr-mod-datetime">datetime</code></dd>
   <dt>DOM interface:</dt>
   <dd>Uses the <code>HTMLModElement</code> interface.</dd>
  </dl>

  <p>The <code>ins</code> element represents an addition to the
  document.</p>

  <div class="example">

   <p>The following represents the addition of a single paragraph:</p>

   <pre>&lt;aside>
 &lt;ins>
  &lt;p> I like fruit. &lt;/p>
 &lt;/ins>
&lt;/aside></pre>

   <p>As does this, because everything in the <code>aside</code>
   element here counts as <span>phrasing content</span> and therefore
   there is just one <span>paragraph</span>:</p>

   <pre>&lt;aside>
 &lt;ins>
  Apples are &lt;em>tasty&lt;/em>.
 &lt;/ins>
 &lt;ins>
  So are pears.
 &lt;/ins>
&lt;/aside></pre>

  </div>

  <p><code>ins</code> elements should not cross <span
  title="paragraph">implied paragraph</span> boundaries.</p>

  <div class="example">

   <p>The following example represents the addition of two paragraphs,
   the second of which was inserted in two parts. The first
   <code>ins</code> element in this example thus crosses a paragraph
   boundary, which is considered poor form.</p>

   <pre>&lt;aside>
 &lt;ins datetime="2005-03-16T00:00Z">
  &lt;p> I like fruit. &lt;/p>
  Apples are &lt;em>tasty&lt;/em>.
 &lt;/ins>
 &lt;ins datetime="2007-12-19T00:00Z">
  So are pears.
 &lt;/ins>
&lt;/aside></pre>

   <p>Here is a better way of marking this up. It uses more elements,
   but none of the elements cross implied paragraph boundaries.</p>

   <pre>&lt;aside>
 &lt;ins datetime="2005-03-16T00:00Z">
  &lt;p> I like fruit. &lt;/p>
 &lt;/ins>
 &lt;ins datetime="2005-03-16T00:00Z">
  Apples are &lt;em>tasty&lt;/em>.
 &lt;/ins>
 &lt;ins datetime="2007-12-19T00:00Z">
  So are pears.
 &lt;/ins>
&lt;/aside></pre>

   <!-- Those date's aren't random. They're the start and end of
   something. Can you guess what? -->

  </div>


  <h4>The <dfn><code>del</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd>When the element only contains <span>phrasing content</span>: <span>phrasing content</span>.</dd>
   <dd>Otherwise: <span>flow content</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>When the element only contains <span>phrasing content</span>: where <span>phrasing content</span> is expected.</dd>
   <dd>Otherwise: where <span>flow content</span> is expected.</dd>
   <dt>Content model:</dt>
   <dd><span>Transparent</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd><code title="attr-mod-cite">cite</code></dd>
   <dd><code title="attr-mod-datetime">datetime</code></dd>
   <dt>DOM interface:</dt>
   <dd>Uses the <code>HTMLModElement</code> interface.</dd>
  </dl>

  <p>The <code>del</code> element represents a removal from the
  document.</p>

  <p><code>del</code> elements should not cross <span
  title="paragraph">implied paragraph</span> boundaries.</p>


  <h4>Attributes common to <code>ins</code> and <code>del</code> elements</h4>

  <p>The <dfn title="attr-mod-cite"><code>cite</code></dfn> attribute
  may be used to specify a URI that explains the change. When that
  document is long, for instance the minutes of a meeting, authors are
  encouraged to include a fragment identifier pointing to the specific
  part of that document that discusses the change.</p>

  <p>If the <code title="attr-mod-cite">cite</code> attribute is
  present, it must be a URI (or IRI) that explains the change. User
  agents should allow users to follow such citation links.</p>

  <p>The <dfn title="attr-mod-datetime"><code>datetime</code></dfn>
  attribute may be used to specify the time and date of the change.</p>

  <p>If present, the <code title="attr-mod-datetime">datetime</code>
  attribute must be a <span>valid datetime</span> value.</p>

  <p>User agents must parse the <code
  title="attr-mod-datetime">datetime</code> attribute according to the
  <span>parse a string as a datetime value</span> algorithm. If that
  doesn't return a time, then the modification has no associated
  timestamp (the value is non-conforming; it is not a <span>valid
  datetime</span>). Otherwise, the modification is marked as having
  been made at the given datetime. User agents should use the
  associated timezone information to determine which timezone to
  present the given datetime in.</p>

  <p>The <code>ins</code> and <code>del</code> elements must implement
  the <code>HTMLModElement</code> interface:</p>

  <pre class="idl">interface <dfn>HTMLModElement</dfn> : <span>HTMLElement</span> {
           attribute DOMString <span title="dom-mod-cite">cite</span>;
           attribute DOMString <span title="dom-mod-datetime">dateTime</span>;
};</pre>

  <p>The <dfn title="dom-mod-cite"><code>cite</code></dfn> DOM
  attribute must reflect the element's ><code
  title="attr-mod-cite">cite</code> content attribute. The <dfn
  title="dom-mod-datetime"><code>dateTime</code></dfn> DOM attribute
  must reflect the element's <code title="">datetime</code> content
  attribute.</p>



  <h3>Embedded content</h3>

  <h4>The <dfn><code>figure</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Flow content</span>.</dd>
   <dd><span>Sectioning root</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>flow content</span> is expected.</dd>
   <dt>Content model:</dt>
   <dd>Either: one <code>legend</code> element followed by <span>flow content</span>.</dd>
   <dd>Or: <span>Flow content</span> followed by one <code>legend</code> element.</dd>
   <dd>Or: <span>Flow content</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>figure</code> element represents some <span>flow
  content</span>, optionally with a caption, which can be moved away
  from the main flow of the document without affecting the document's
  meaning.</p>

  <p>The element can thus be used to annotate illustrations, diagrams,
  photos, code listings, etc, that are referred to from the main
  content of the document, but that could, without affecting the flow
  of the document, be moved away from that primary content, e.g. to
  the side of the page, to dedicated pages, or to an appendix.</p>

  <p>The first <code>legend</code> element child of the element, if
  any, represents the caption of the <code>figure</code> element's
  contents. If there is no child <code>legend</code> element, then
  there is no caption.</p>

  <p>The remainder of the element's contents, if any, represents the
  content.</p>

  <div class="example">

   <p>This example shows the <code>figure</code> element to mark up a
   code listing.</p>

   <pre>&lt;p>In &lt;a href="#l4">listing 4&lt;/a> we see the primary core interface
API declaration.&lt;/p>
&lt;figure id="l4">
 &lt;legend>Listing 4. The primary core interface API declaration.&lt;/legend>
 &lt;pre>&lt;code>interface PrimaryCore {
  boolean verifyDataLine();
  void sendData(in sequence&amp;lt;byte> data);
  void initSelfDestruct();
}&lt;/code>&lt;/pre>
&lt;/figure>
&lt;p>The API is designed to use UTF-8.&lt;/p></pre>

  </div>

  <div class="example">

   <p>Here we see a <code>figure</code> element to mark up a
   photo.</p>

   <pre>&lt;figure>
 &lt;img src="bubbles-work.jpeg"
      alt="Bubbles, sitting in his office chair, works on his
           latest project intently.">
 &lt;legend>Bubbles at work&lt;/legend>
&lt;/figure></pre>

  </div>

  <div class="example">

   <p>In this example, we see an image that is <em>not</em>
   a figure, as well as an image and a video that are.</p>

   <pre>&lt;h2>Malinko's comics&lt;/h2>

&lt;p>This case centered on some sort of "intellectual property"
infringement related to a comic (see Exhibit A). The suit started
after a trailer ending with these words:&lt;/p>

&lt;img src="promblem-packed-action.png" alt="ROUGH COPY! Promblem-Packed Action!">

&lt;p>...was aired. A lawyer, armed with a Bigger Notebook, launched a
pre-emptive strike using snowballs. A complete copy of the trailer is
included with Exhibit B.&lt;/p>

&lt;figure>
 &lt;img src="ex-a.png" alt="Two squiggles on a dirty piece of paper.">
 &lt;legend>Exhibit A. The alleged &lt;cite>rough copy&lt;/cite> comic.&lt;/legend>
&lt;/figure>

&lt;figure>
 &lt;video src="ex-b.mov">&lt;/video>
 &lt;legend>Exhibit A. The alleged &lt;cite>rough copy&lt;/cite> comic.&lt;/legend>
&lt;/figure>

&lt;p>The case was resolved out of court.&lt;/p></pre>

  </div>

  <div class="example">

   <p>Here, a part of a poem is marked up using
   <code>figure</code>.</p>

   <pre>&lt;figure>
 &lt;p>'Twas brillig, and the slithy toves&lt;br>
Did gyre and gimble in the wabe;&lt;br>
All mimsy were the borogoves,&lt;br>
And the mome raths outgrabe.&lt;/p>
 &lt;legend>&lt;cite>Jabberwocky&lt;/cite> (first verse). Lewis Carroll, 1832-98&lt;/legend>
&lt;/figure></pre>

  </div>

  <div class="example">

   <p>In this example, which could be part of a much larger work
   discussing a castle, the figure has three images in it.</p>

   <pre>&lt;figure>
 &lt;img src="castle1423.jpeg" title="Etching. Anonymous, ca. 1423."
      alt="The castle has one tower, and a tall wall around it.">
 &lt;img src="castle1858.jpeg" title="Oil-based paint on canvas. Maria Towle, 1858."
      alt="The castle now has two towers and two walls.">
 &lt;img src="castle1999.jpeg" title="Film photograph. Peter Jankle, 1999."
      alt="The castle lies in ruins, the original tower all that remains in one piece.">
 &lt;legend>The castle through the ages: 1423, 1858, and 1999 respectively.&lt;/legend>
&lt;/figure></pre>

  </div>


  <h4>The <dfn><code>img</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Embedded content</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>embedded content</span> is expected.</dd>
   <dt>Content model:</dt>
   <dd>Empty.</dd>
   <dt>Element-specific attributes:</dt>
   <dd><code title="attr-img-alt">alt</code></dd>
   <dd><code title="attr-img-src">src</code></dd>
   <dd><code title="attr-hyperlink-usemap">usemap</code></dd>
   <dd><code title="attr-img-ismap">ismap</code></dd>
   <dd><code title="attr-dim-width">width</code></dd>
   <dd><code title="attr-dim-height">height</code></dd>
   <dt>DOM interface:</dt>
   <dd>
<pre class="idl">interface <dfn>HTMLImageElement</dfn> : <span>HTMLElement</span> {
           attribute DOMString <span title="dom-img-alt">alt</span>;
           attribute DOMString <span title="dom-img-src">src</span>;
           attribute DOMString <span title="dom-img-useMap">useMap</span>;
           attribute boolean <span title="dom-img-isMap">isMap</span>;
           attribute long <span title="dom-img-width">width</span>;
           attribute long <span title="dom-img-height">height</span>;
  readonly attribute boolean <span title="dom-img-complete">complete</span>;
};</pre>
    <p class="note">An instance of <code>HTMLImageElement</code> can
    be obtained using the <code title="dom-image">Image</code>
    constructor.</p>
   </dd>
  </dl>

  <p>An <code>img</code> element represents an image.</p>

  <p>The image given by the <dfn
  title="attr-img-src"><code>src</code></dfn> attribute is the
  embedded content, and the value of the <dfn
  title="attr-img-alt"><code>alt</code></dfn> attribute is the
  <code>img</code> element's <span>fallback content</span>.</p>

  <p><strong>Authoring requirements</strong>: The <code
  title="attr-img-src">src</code> attribute must be present, and must
  contain a URI (or IRI).</p>

  <p class="big-issue">Should we restrict the URI to pointing to an
  image? What's an image? Is PDF an image? (Safari supports PDFs in
  &lt;img> elements.) How about SVG? (Opera supports those). WMFs?
  XPMs? HTML?</p>

  <p>The requirements for the <code title="attr-img-alt">alt</code>
  attribute depend on what the image is intended to represent:</p>

  <dl>

   <dt>A phrase or paragraph with an alternative graphical representation</dt>

   <dd>

    <p>Sometimes something can be more clearly stated in graphical
    form, for example as a flowchart, a diagram, a graph, or a simple
    map showing directions. In such cases, an image can be given using
    the <code>img</code> element, but the lesser textual version must
    still be given, so that users who are unable to view the image
    (e.g. because they have a very slow connection, or because they
    are using a text-only browser, or because they are listening to
    the page being read out by a hands-free automobile voice Web
    browser, or simply because they are blind) are still able to
    understand the message being conveyed.</p>

    <p>The text must be given in the <code
    title="attr-img-alt">alt</code> attribute, and must convey the
    same message as the the image specified in the <code
    title="attr-img-src">src</code> attribute.</p>

    <div class="example">

     <p>In the following example we have <a
     href="images/parsing-model-overview.png">a flowchart</a> in image
     form, with text in the <code title="attr-img-alt">alt</code>
     attribute rephrasing the flowchart in prose form:</p>

     <pre>&lt;p>In the common case, the data handled by the tokenisation stage
comes from the network, but it can also come from script.&lt;/p>
&lt;p><strong>&lt;img src="images/parsing-model-overview.png" alt="The network
passes data to the Tokeniser stage, which passes data to the Tree
Construction stage. From there, data goes to both the DOM and to
Script Execution. Script Execution is linked to the DOM, and, using
document.write(), passes data to the Tokeniser."></strong>&lt;/p></pre>

    </div>

    <div class="example">

     <p>Here's another example, showing a good solution and a bad
     solution to the problem of including an image in a
     description.</p>

     <p>First, here's the good solution. This sample shows how the
     alternative text should just be what you would have put in the
     prose if the image had never existed.</p>

     <pre>&lt;!-- This is the correct way to do things. -->
&lt;p>
 You are standing in an open field west of a house.
 <strong>&lt;img src="house.jpeg" alt="The house is white, with a boarded front door."></strong>
 There is a small mailbox here.
&lt;/p></pre>

     <p>Second, here's the bad solution. In this incorrect way of
     doing things, the alternative text is simply a description of the
     image, instead of a textual replacement for the image. It's bad
     because when the image isn't shown, the text doesn't flow as well
     as in the first example.</p>

     <pre>&lt;!-- <em>This is the wrong way to do things.</em> -->
&lt;p>
 You are standing in an open field west of a house.
 &lt;img src="house.jpeg" alt="A white house, with a boarded front door.">
 There is a small mailbox here.
&lt;/p></pre>

    </div>

    <p>It is important to realise that the alternative text is a
    <em>replacement</em> for the image, not a description of the
    image.</p>

   </dd>


   <dt>Icons: a short phrase or label with an alternative graphical representation</dt>

   <dd>

    <p>A document can contain information in iconic form. The icon is
    intended to help users of visual browsers to recognise features at
    a glance.</p>

    <p>In some cases, the icon is supplemental to a text label
    conveying the same meaning. In those cases, the <code
    title="attr-img-alt">alt</code> attribute must be present but must
    be empty.</p>

    <div class="example">

     <p>Here the icons are next to text that conveys the same meaning,
     so they have an empty <code title="attr-img-alt">alt</code>
     attribute:</p>

     <pre>&lt;nav>
 &lt;p>&lt;a href="/help/"><strong>&lt;img src="/icons/help.png" alt=""></strong> Help&lt;/a>&lt;/p>
 &lt;p>&lt;a href="/configure/"><strong>&lt;img src="/icons/configuration.png" alt=""></strong>
 Configuration Tools&lt;/a>&lt;/p>
&lt;/nav></pre>

    </div>

    <p>In other cases, the icon has no text next to it describing what
    it means; the icon is supposed to be self-explanatory. In those
    cases, an equivalent textual label must be given in the <code
    title="attr-img-alt">alt</code> attribute.</p>

    <div class="example">

     <p>Here, posts on a news site are labelled with an icon
     indicating their topic.</p>

     <pre>&lt;body>
 &lt;article>
  &lt;header>
   &lt;h1>Ratatouille wins &lt;i>Best Movie of the Year&lt;/i> award&lt;/h1>
   &lt;p><strong>&lt;img src="movies.png" alt="Movies"></strong>&lt;/p>
  &lt;/header>
  &lt;p>Pixar has won yet another &lt;i>Best Movie of the Year&lt;/i> award,
  making this its 8th win in the last 12 years.&lt;/p>
 &lt;/article>
 &lt;article>
  &lt;header>
   &lt;h1>Latest TWiT episode is online&lt;/h1>
   &lt;p><strong>&lt;img src="podcasts.png" alt="Podcasts"></strong>&lt;/p>
  &lt;/header>
  &lt;p>The latest TWiT episode has been posted, in which we hear
  several tech news stories as well as learning much more about the
  iPhone. This week, the panelists compare how reflective their
  iPhones' Apple logos are.&lt;/p>
 &lt;/article>
&lt;/body></pre>

    </div>

    <p>Many pages include logos, insignia, flags, or emblems, which
    stand for a particular entity such as a company, organisation,
    project, band, software package, country, or some such.</p>

    <p>If the logo is being used to represent the entity, the <code
    title="attr-img-alt">alt</code> attribute must contain the name of
    the entity being represented by the logo. The <code
    title="attr-img-alt">alt</code> attribute must <em>not</em>
    contain text like the word "logo", as it is not the fact that it
    is a logo that is being conveyed, it's the entity itself.</p>

    <p>If the logo is being used next to the name of the entity that
    it represents, then the logo is supplemental, and its <code
    title="attr-img-alt">alt</code> attribute must instead be
    empty.</p>

    <p>If the logo is merely used as decorative material (as branding,
    or, for example, as a side image in an article that mentions the
    entity to which the logo belongs), then the entry below on purely
    decorative images applies. If the logo is actually being
    discussed, then it is being used as a phrase or paragraph (the
    description of the logo) with an alternative graphical
    representation (the logo itself), and the first entry above
    applies.</p>

    <div class="example">

     <p>In the following snippets, all four of the above cases are
     present. First, we see a logo used to represent a company:</p>

     <pre>&lt;h1><strong>&lt;img src="XYZ.gif" alt="The XYZ company"></strong>&lt;/h1></pre>

     <p>Next, we see a paragraph which uses a logo right next to the
     company name, and so doesn't have any alternative text:

     <pre>&lt;article>
 &lt;h2>News&lt;/h2>
 &lt;p>We have recently been looking at buying the <strong>&lt;img src="alpha.gif"
 alt=""> &Alpha;&Beta;&Gamma; company</strong>, a small Greek company
 specialising in our type of product.&lt;/p></pre>

     <p>In this third snippet, we have a logo being used in an aside,
     as part of the larger article discussing the acquisition:</p>

<pre> <strong>&lt;aside>&lt;p>&lt;img src="alpha-large.gif" alt="">&lt;/p>&lt;/aside></strong>
 &lt;p>The &Alpha;&Beta;&Gamma; company has had a good quarter, and our
 pie chart studies of their accounts suggest a much bigger blue slice
 than its green and orange slices, which is always a good sign.&lt;/p>
&lt;/article></pre>

     <p>Finally, we have an opinion piece talking about a logo, and
     the logo is therefore described in detail in the alternative
     text.</p>

     <pre>&lt;p>Consider for a moment their logo:&lt;/p>

<strong>&lt;p>&lt;img src="/images/logo" alt="It consists of a green circle with a
green question mark centered inside it.">&lt;/p></strong>

&lt;p>How unoriginal can you get? I mean, oooooh, a question mark, how
&lt;em>revolutionary&lt;/em>, how utterly &lt;em>ground-breaking&lt;/em>, I'm
sure everyone will rush to adopt those specifications now! They could
at least have tried for some sort of, I don't know, sequence of
rounded squares with varying shades of green and bold white outlines,
at least that would look good on the cover of a blue book.&lt;/p></pre>

     <p>This example shows how the alternative text should be written
     such that if the image isn't available, and the text is used
     instead, the text flows seamlessly into the surrounding text, as
     if the image had never been there in the first place.</p>

    </div>

   </dd>


   <dt>A graphical representation of some of the surrounding text</dt>

   <dd>

    <p>In many cases, the image is actually just supplementary, and
    its presence merely reinforces the surrounding text. In these
    cases, the <code title="attr-img-alt">alt</code> attribute must be
    present but its value must be the empty string.</p>

    <div class="example">

     <p>A flowchart that repeats the previous paragraph in graphical form:</p>

     <pre>&lt;p>The network passes data to the Tokeniser stage, which
passes data to the Tree Construction stage. From there, data goes
to both the DOM and to Script Execution. Script Execution is
linked to the DOM, and, using document.write(), passes data to
the Tokeniser.&lt;/p>
<strong>&lt;p>&lt;img src="images/parsing-model-overview.png" alt="">&lt;/p></strong></pre>

    </div>

    <div class="example">

     <p>A graph that repeats the previous paragraph in graphical form:</p>

     <pre>&lt;p>According to a study covering several billion pages,
about 62% of documents on the Web in 2007 triggered the Quirks
rendering mode of Web browsers, about 30% triggered the Almost
Standards mode, and about 9% triggered the Standards mode.&lt;/p>
<strong>&lt;p>&lt;img src="rendering-mode-pie-chart.png" alt="">&lt;/p></strong></pre>

    </div>

    <p>In general, an image falls into this category if removing the
    image doesn't make the page any less useful, but including the
    image makes it a lot easier for users of visual browsers to
    understand the concept.</p>

   </dd>


   <dt>A purely decorative image that doesn't add any information but is still specific to the surrounding content</dt>

   <dd>

    <p>In some cases, the image isn't discussed by the surrounding
    text, but it has some relevance. Such images are decorative, but
    still form part of the content. In these cases, the <code
    title="attr-img-alt">alt</code> attribute must be present but its
    value must be the empty string.

    <div class="example">

     <p>Examples where the image is purely decorative despite being
     relevant would include things like a photo of the Black Rock City
     landscape in a blog post about an event at Burning Man, or an
     image of a painting inspired by a poem, on a page reciting that
     poem. The following snippet shows an example of the latter
     case (only the first verse is included in this snippet):</p>

     <pre>&lt;h1>The Lady of Shalott&lt;/h1>
<strong>&lt;p>&lt;img src="shalott.jpeg" alt="">&lt;/p></strong>
&lt;p>On either side the river lie&lt;br>
Long fields of barley and of rye,&lt;br>
That clothe the wold and meet the sky;&lt;br>
And through the field the road run by&lt;br>
To many-tower'd Camelot;&lt;br>
And up and down the people go,&lt;br>
Gazing where the lilies blow&lt;br>
Round an island there below,&lt;br>
The island of Shalott.&lt;/p></pre>

    </div>

    <p>In general, if an image is decorative but isn't especially
    page-specific, for example an image that forms part of a site-wide
    design scheme, the image should be specified in the site's CSS,
    not in the markup of the document.</p>

   </dd>


   <dt>A key part of the content that doesn't have an obvious textual alternative</dt>

   <dd>

    <p>In certain rare cases, the image is simply a critical part of
    the content, and there might even be no alternative text
    available. This could be the case, for instance, in a photo
    gallery, where a user has uploaded 3000 photos from a vacation
    trip, without providing any descriptions of the images. The images
    are the whole <em>point</em> of the pages containing them.</p>

    <p>In such cases, the <code title="attr-img-alt">alt</code>
    attribute may be omitted, but the <code
    title="attr-img-alt">alt</code> attribute should be included, with
    a useful value, if at all possible. If an image is a key part of
    the content, the <code title="attr-img-alt">alt</code> attribute
    must not be specified with an empty value.</p>

    <div class="example">

     <p>A photo on a photo-sharing site:</p>

     <pre>&lt;figure>
 <strong>&lt;img src="1100670787_6a7c664aef.jpg"></strong>
 &lt;legend>Bubbles traveled everywhere with us.&lt;/legend>
&lt;/figure></pre>

     <p>A screenshot in a gallery of screenshots for a new OS:</p>

     <pre>&lt;figure>
 <strong>&lt;img src="KDE%20Light%20desktop.png"></strong>
 &lt;legend>Screenshot of a KDE desktop.&lt;/legend>
&lt;/figure></pre>

     <p>In both cases, though, it would be better if a detailed
     description of the important parts of the image were
     included.</p>

    </div>

    <div>

     <p>Sometimes there simply is no text that can do justice to an
     image. For example, there is little that can be said to usefully
     describe a Rorschach inkblot test.</p>

     <pre>&lt;figure>
 <strong>&lt;img src="/commons/a/a7/Rorschach1.jpg"></strong>
 &lt;legend>A black outline of the first of the ten cards
 in the Rorschach inkblot test.&lt;/legend>
&lt;/figure></pre>

     <p>Note that the following would be a very bad use of alternative
     text:</p>

     <pre>&lt;!-- This example is wrong. Do not copy it. -->
&lt;figure>
 &lt;img src="/commons/a/a7/Rorschach1.jpg" alt="A black outline
 of the first of the ten cards in the Rorschach inkblot test.">
 &lt;legend>A black outline of the first of the ten cards
 in the Rorschach inkblot test.&lt;/legend>
&lt;/figure></pre>

     <p>Including the caption in the alternative text like this isn't
     useful because it effectively duplicates the caption for users
     who don't have images, taunting them twice yet not helping them
     any more than if they had only read or heard the caption
     once.</p>

    </div>

    <p>Since some users cannot use images at all (e.g. because they
    have a very slow connection, or because they are using a text-only
    browser, or because they are listening to the page being read out
    by a hands-free automobile voice Web browser, or simply because
    they are blind), the <code title="attr-img-alt">alt</code>
    attribute should only be omitted when no alternative text is
    available and none can be made available, e.g. on automated image
    gallery sites.</p>

   </dd>


   <dt>An image in an e-mail or document intended for a specific person who is known to be able to view images</dt>

   <dd>

    <p>When an image is included in a communication (such as an HTML
    e-mail) aimed at someone who is known to be able to view images,
    the <code title="attr-img-alt">alt</code> attribute may be
    omitted. However, even in such cases it is stongly recommended
    that alternative text be included (as appropriate according to the
    kind of image involved, as described in the above entries), so
    that the e-mail is still usable should the user use a mail client
    that does not support images, or should the e-mail be forwarded on
    to other users whose abilities might not include easily seeing
    images.</p>

   </dd>


  </dl>

  <p>The <code>img</code> must not be used as a layout tool. In
  particular, <code>img</code> elements should not be used to display
  fully transparent images, as they rarely convey meaning and rarely
  add anything useful to the document.</p>

  <p class="big-issue">There has been some suggestion that the <code
  title="">longdesc</code> attribute from HTML4, or some other
  mechanism that is more powerful than <code title="">alt=""</code>,
  should be included. This has not yet been considered.</p>


  <p><strong>User agent requirements</strong>: When the <code
  title="attr-img-alt">alt</code> attribute is present and its value
  is the empty string, the image supplements the surrounding
  content. In such cases, the image may be omitted without affecting
  the meaning of the document.</p>

  <p>When the <code title="attr-img-alt">alt</code> attribute is
  present and its value is not the empty string, the image is a
  graphical equivalent of the string given in the <code
  title="attr-img-alt">alt</code> attribute. In such cases, the image
  may be replaced in the rendering by the string given in the
  attribute without significantly affecting the meaning of the
  document.</p>

  <p>When the <code title="attr-img-alt">alt</code> attribute is
  missing, the image represents a key part of the content. Non-visual
  user agents should apply image analysis heuristics to help the user
  make sense of the image.</p>

  <p>The <code title="attr-img-alt">alt</code> attribute does not
  represent advisory information. User agents must not present the
  contents of the <code title="attr-img-alt">alt</code> attribute in
  the same way as content of the <code title="attr-title">title</code>
  attribute.</p>


  <p>If the <code title="attr-img-src">src</code> attribute is
  omitted, the image represents whatever string is given by the
  element's <code title="attr-img-alt">alt</code> attribute, if any,
  or nothing, if that attribute is empty or absent.</p>


  <p>When the <code title="attr-img-src">src</code> attribute is set,
  the user agent must immediately begin to download the specified
  resource<!-- XXX xref what fetching means, how to resolve URIs in
  attributes (including those not in the DOM) -->, unless the user
  agent cannot support images, or its support for images has been
  disabled.</p>

  <p>The download of the image must <span>delay the <code
  title="event-load">load</code> event</span>.</p>

  <p class="warning">This, unfortunately, can be used to perform a
  rudimentary port scan of the user's local network (especially in
  conjunction with scripting, though scripting isn't actually
  necessary to carry out such an attack). User agents may implement
  cross-origin access control policies that mitigate this attack.</p>

  <p>Once the download has completed, if the image is a valid image,
  the user agent must <span>fire a <code
  title="event-load">load</code> event</span> on the <code>img</code>
  element (this happens after <code
  title="dom-img-complete">complete</code> starts returning true). If
  the download fails or it completes but the image is not a valid or
  supported image, the user agent must <span>fire an <code
  title="event-error">error</code> event</span> on the
  <code>img</code> element.</p>

  <p>The remote server's response metadata (e.g. an HTTP 404 status
  code, or <span title="Content-Type">associated Content-Type
  headers</span>) must be ignored when determining whether the
  resource obtained is a valid image or not.</p>

  <p class="note">This allows servers to return images with error
  responses.</p>

  <p>User agents must not support non-image resources with the
  <code>img</code> element.</p>


  <p>The <code title="attr-hyperlink-usemap">usemap</code> attribute,
  if present, can indicate that the image has an associated
  <span>image map</span>.</p>

  <p>The <dfn title="attr-img-ismap"><code>ismap</code></dfn>
  attribute, when used on an element that is a descendant of an
  <code>a</code> element with an <code
  title="attr-hyperlink-href">href</code> attribute, indicates by its
  presence that the element provides access to a server-side image
  map. This affects how events are handled on the corresponding
  <code>a</code> element.</p>

  <p>The <code title="attr-img-ismap">ismap</code> attribute is a
  <span>boolean attribute</span>. The attribute must not be specified
  on an element that does not have an ancestor <code>a</code> element
  with an <code title="attr-hyperlink-href">href</code> attribute.</p>

  <p>The <code>img</code> element supports <span>dimension
  attributes</span>.</p>

  <!-- XXX contents of <img> should be ignored for rendering but not
  for semantics, e.g. <script>, <input>, etc. -->

  <p>The DOM attributes <dfn
  title="dom-img-alt"><code>alt</code></dfn>, <dfn
  title="dom-img-src"><code>src</code></dfn>, <dfn
  title="dom-img-useMap"><code>useMap</code></dfn>, and <dfn
  title="dom-img-isMap"><code>isMap</code></dfn> each must
  <span>reflect</span> the respective content attributes of the same
  name.</p>

  <p>The DOM attributes <dfn
  title="dom-img-height"><code>height</code></dfn> and <dfn
  title="dom-img-width"><code>width</code></dfn> must return the
  rendered height and width of the image, in CSS pixels, if the image
  is being rendered, and is being rendered to a visual medium, or 0
  otherwise. <a href="#refsCSS21">[CSS21]</a></p>

  <p>The DOM attribute <dfn
  title="dom-img-complete"><code>complete</code></dfn> must return
  true if the user agent has downloaded the image specified in the
  <code title="attr-img-src">src</code> attribute, and it is a valid
  image, and false otherwise.</p>

  <p class="note">The value of <code
  title="dom-img-complete">complete</code> can change while a script
  is executing.</p>


  <h4>The <dfn><code>iframe</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Embedded content</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>embedded content</span> is expected.</dd>
   <dt>Content model:</dt>
   <dd>Text that conforms to the requirements given in the prose.</dd>
   <dt>Element-specific attributes:</dt>
   <dd><code title="attr-iframe-src">src</code></dd>
   <dt>DOM interface:</dt>
   <dd>
<pre class="idl">interface <dfn>HTMLIFrameElement</dfn> : <span>HTMLElement</span> {
           attribute DOMString <span title="dom-iframe-src">src</span>;<!--
  readonly attribute Document <span title="dom-iframe-contentDocument">contentDocument</span>;
  readonly attribute <span>Window</span> <span title="dom-iframe-contentWindow">contentWindow</span>;-->
};</pre>
    <p>Objects implementing the <code>HTMLIFrameElement</code>
    interface must also implement the <code>EmbeddingElement</code>
    interface defined in the Window Object specification. <a
    href="#refsWINDOW">[WINDOW]</a></p> <!-- XXX -->
   </dd>
  </dl>

  <p>The <code>iframe</code> element introduces a new nested
  <span>browsing context</span>.</p>

  <p>The <dfn title="attr-iframe-src"><code>src</code></dfn>
  attribute, if present, must be a URI (or IRI) to a page that the
  nested <span>browsing context</span> is to contain. When the
  browsing context is created, if the attribute is present, the user
  agent must <span>navigate</span> this browsing context to the given
  URI, with <span>replacement enabled</span>. If the user <span
  title="navigate">navigates</span> away from this page, the
  <code>iframe</code>'s corresponding <code>Window</code> object will
  reference new <code>Document</code> objects, but the <code
  title="attr-iframe-src">src</code> attribute will not change.</p>

  <p>Whenever the <code title="attr-iframe-src">src</code> attribute
  is set, the nested <span>browsing context</span> must be <span
  title="navigate">navigated</span> to the given URI.</p>

  <p>If the <code title="attr-iframe-src">src</code> attribute is not
  set when the element is created, the browsing context will remain at
  the initial <code>about:blank</code><!-- XXX xref --> page.</p>

  <p>When content loads in an <code>iframe</code>, after any <code
  title="event-load">load</code> events are fired within the content
  itself, the user agent must <span>fire a <code
  title="event-load">load</code> event</span> at the
  <code>iframe</code> element. When content fails to load (e.g. due to
  a network error), then the user agent must <span>fire an <code
  title="event-error">error</code> event</span> at the element
  instead.</p>

  <p>When there is an active parser in the <code>iframe</code>, and
  when anything in the <code>iframe</code> that is <span title="delay
  the load event">delaying the <code title="event-load">load</code>
  event</span> in the <code>iframe</code>'s <span>browsing
  context</span>, the <code>iframe</code> must <span>delay the <code
  title="event-load">load</code> event</span>.</p>

  <p class="note">If, during the handling of the <code
  title="event-load">load</code> event, the <span>browsing
  context</span> in the <code>iframe</code> is again <span
  title="navigate">navigated</span>, that will further <span>delay the
  <code title="event-load">load</code> event</span>.</p>

  <p>An <code>iframe</code> element never has <span>fallback
  content</span>, as it will always create a nested <span>browsing
  context</span>, regardless of whether the specified initial contents
  are successfully used.</p>

  <p>Descendants of <code>iframe</code> elements represent
  nothing. (In legacy user agents that do not support
  <code>iframe</code> elements, the contents would be parsed as markup
  that could act as fallback content.)</p>

  <p>The content model of <code>iframe</code> elements is text, except
  that the text must be such that <span title="big-issue">... anyone
  have any bright ideas?</span></p>
  <!--XXX
    Gotta handle <script> elements inside <iframe>s that screw around with the DOM on the fly, or that use document.write().
    Gotta handle <iframe> elements created from script with text contents.
    Gotta handle the XML case.
   -->

  <p class="note">The <span>HTML parser</span> treats markup inside
  <code>iframe</code> elements as text.</p>

  <p>The DOM attribute <dfn
  title="dom-iframe-src"><code>src</code></dfn> must
  <span>reflect</span> the content attribute of the same name.</p>


  <h4>The <dfn><code>embed</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Embedded content</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>embedded content</span> is expected.</dd>
   <dt>Content model:</dt>
   <dd>Empty.</dd>
   <dt>Element-specific attributes:</dt>
   <dd><code title="attr-embed-src">src</code></dd>
   <dd><code title="attr-embed-type">type</code></dd>
   <dd><code title="attr-dim-width">width</code></dd>
   <dd><code title="attr-dim-height">height</code></dd>
   <dd>Any other attribute that has no namespace (see prose).</dd>
   <dt>DOM interface:</dt>
   <dd>
<pre class="idl">interface <dfn>HTMLEmbedElement</dfn> : <span>HTMLElement</span> {
           attribute DOMString <span title="dom-embed-src">src</span>;
           attribute DOMString <span title="dom-embed-type">type</span>;
           attribute long <span title="dom-dim-width">width</span>;
           attribute long <span title="dom-dim-height">height</span>;
};</pre>
    <p>Depending on the type of content instantiated by the
    <code>embed</code> element, the node may also support other
    interfaces.</p>
   </dd>
  </dl>

  <p>The <code>embed</code> element represents an integration point
  for an external (typically non-HTML) application or interactive
  content.</p>

  <p>The <dfn title="attr-embed-src"><code>src</code></dfn> attribute
  gives the address of the resource being embedded. The attribute must
  be present and contain a URI (or IRI).</p>

  <p>If the <code title="attr-embed-src">src</code> attribute is
  missing, then the <code>embed</code> element must be ignored.</p>

  <p>When the <code title="attr-embed-src">src</code> attribute is
  set, user agents are expected to find an appropriate handler for the
  specified resource, based on the <span
  title="concept-embed-type">content's type</span>, and hand that
  handler the content of the resource. If the handler supports a
  scriptable interface, the <code>HTMLEmbedElement</code> object
  representing the element should expose that interfaces.</p>

  <p>The download of the resource must <span>delay the <code
  title="event-load">load</code> event</span>.</p>

  <p>The user agent should pass the names and values of all the
  attributes of the <code>embed</code> element that have no namespace
  to the handler used. Any (namespace-less) attribute may be specified
  on the <code>embed</code> element.</p>

  <!-- duplicates what's in <object> section below -->
  <p class="note">This specification does not define a mechanism for
  interacting with third-party handlers, as it is expected to be
  user-agent-specific. Some UAs might opt to support a plugin
  mechanism such as the Netscape Plugin API; others may use remote
  content convertors or have built-in support for certain types. <a
  href="#refsNPAPI">[NPAPI]</a></p>

  <p>The <code>embed</code> element has no <span>fallback
  content</span>. If the user agent can't display the specified
  resource, e.g. because the given type is not supported, then the
  user agent must use a default handler for the content. (This default
  could be as simple as saying "Unsupported Format", of course.)</p>

  <p>The <dfn title="attr-embed-type"><code>type</code></dfn>
  attribute, if present, gives the MIME type of the linked resource.
  The value must be a valid MIME type, optionally with parameters. <a
  href="#refsRFC2046">[RFC2046]</a></p>

  <p>The <dfn title="concept-embed-type">type of the content</dfn>
  being embedded is defined as follows:</p>

  <ol>

   <li>If the element has a <code title="attr-embed-type">type</code>
   attribute, then the value of the <code
   title="attr-embed-type">type</code> attribute is the
   <span>content's type</span>.</li>

   <li>Otherwise, if the specified resource has <span
   title="Content-Type">explicit Content-Type metadata</span>, then
   that is the <span>content's type</span>.</li>

   <li>Otherwise, the content has no type and there can be no
   appropriate handler for it.</li>

  </ol>

  <p class="big-issue">Should we instead say that the content-sniffing
  that we're going to define for top-level browsing contexts should
  apply here?</p>

  <p class="big-issue">Should we require the type attribute to match
  the server information?</p>

  <p class="big-issue">We should say that 404s, etc, don't affect
  whether the resource is used or not. Not sure how to say it here
  though.</p>

  <p>Browsers should take extreme care when interacting with external
  content intended for third-party renderers. When third-party
  software is run with the same privileges as the user agent itself,
  vulnerabilities in the third-party software become as dangerous as
  those in the user agent.</p>

  <p>The <code>embed</code> element supports <span>dimension
  attributes</span>.</p>

  <p>The DOM attributes <dfn
  title="dom-embed-src"><code>src</code></dfn> and <dfn
  title="dom-embed-type"><code>type</code></dfn> each must
  <span>reflect</span> the respective content attributes of the same
  name.</p>


  <h4>The <dfn><code>object</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Embedded content</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>embedded content</span> is expected.</dd>
   <dt>Content model:</dt>
   <dd>Zero or more <code>param</code> elements, then, <span>transparent</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd><code title="attr-object-data">data</code></dd>
   <dd><code title="attr-object-type">type</code></dd>
   <dd><code title="attr-hyperlink-usemap">usemap</code></dd>
   <dd><code title="attr-dim-width">width</code></dd>
   <dd><code title="attr-dim-height">height</code></dd>
   <dt>DOM interface:</dt>
   <dd>
<pre class="idl">interface <dfn>HTMLObjectElement</dfn> : <span>HTMLElement</span> {
           attribute DOMString <span title="dom-object-data">data</span>;
           attribute DOMString <span title="dom-object-type">type</span>;
           attribute DOMString <span title="dom-object-useMap">useMap</span>;
           attribute long <span title="dom-dim-width">width</span>;
           attribute long <span title="dom-dim-height">height</span>;<!--
  readonly attribute Document <span title="dom-object-contentDocument">contentDocument</span>;
  readonly attribute <span>Window</span> <span title="dom-object-contentWindow">contentWindow</span>;-->
};</pre>
    <p>Objects implementing the <code>HTMLObjectElement</code>
    interface must also implement the <code>EmbeddingElement</code>
    interface defined in the Window Object specification. <a
    href="#refsWINDOW">[WINDOW]</a></p>
    <p>Depending on the type of content instantiated by the
    <code>object</code> element, the node may also support other
    interfaces.</p>
   </dd>
  </dl>

  <p>The <code>object</code> element can represent an external
  resource, which, depending on the type of the resource, will either
  be treated as an image, as a nested <span>browsing context</span>,
  or as an external resource to be processed by a third-party software
  package.</p>

  <p>The <dfn title="attr-object-data"><code>data</code></dfn>
  attribute, if present, specifies the address of the resource. If
  present, the attribute must be a URI (or IRI).</p>

  <p>The <dfn title="attr-object-type"><code>type</code></dfn>
  attribute, if present, specifies the type of the resource. If
  present, the attribute must be a valid MIME type, optionally with
  parameters. <a href="#refsRFC2046">[RFC2046]</a></p>

  <p>One or both of the <code title="attr-object-data">data</code> and
  <code title="attr-object-type">type</code> attributes must be
  present.</p>

  <p>Whenever the <code title="attr-object-data">data</code> attribute
  changes, or, if the <code title="attr-object-data">data</code>
  attribute is not present, whenever the <code
  title="attr-object-type">type</code> attribute changes, the user
  agent must run the following steps to determine what the
  <code>object</code> element represents:</p>

  <ol>

   <li><p>If the <code title="attr-object-data">data</code> attribute
   is present, then:</p>

    <ol>

     <li>

      <p>Begin a load for the resource.</p><!-- XXX define that
      --><!-- XXX xref -->

      <p>The download of the resource must <span>delay the <code
      title="event-load">load</code> event</span>.</p>

     </li>

     <li><p>If the resource is not yet available (e.g. because the
     resource was not available in the cache, so that loading the
     resource required making a request over the network), then jump
     to step 3 in the overall set of steps (fallback). When the
     resource becomes available, or if the load fails, restart this
     algorithm from this step. Resources can load incrementally; user
     agents may opt to consider a resource "available" whenever enough
     data has been obtained to begin processing the resource.</p></li>

     <li><p>If the load failed (e.g. DNS error), <span>fire an <code
     title="event-error">error</code> event</span> at the element,
     then jump to step 3 in the overall set of steps
     (fallback).</p></li>

     <li><p>Determine the <em>resource type</em>, as follows:</p>

      <p class="big-issue">This says to trust the type. Should we
      instead use the same mechanism as for browsing contexts?</p>

      <dl class="switch">

       <dt>If the resource has <span title="Content-Type">associated
       Content-Type metadata</span></dt>

       <dd>The type is the type specified in <span
       title="Content-Type">the resource's Content-Type
       metadata</span>.</dd>


       <dt>Otherwise, if the <code
       title="attr-object-type">type</code> attribute is present</dt>

       <dd>The type is the type specified in the <code
       title="attr-object-type">type</code> attribute.</dd>


       <dt>Otherwise, there is no explicit type information</dt>

       <dd>The type is the <span title="sniffed type of a
       resource">sniffed type of the resource</span>.</dd>

      </dl>

     </li>

     <li><p>Handle the content as given by the first of the following
     cases that matches:</p>

      <dl class="switch">

       <dt>If the resource requires a special handler (e.g. a plugin)</dt>

       <dd>

        <p>The user agent should find an appropriate handler for the
        specified resource, based on the <em>resource type</em> found
        in the previous step, and pass the content of the resource to
        that handler. If the handler supports a scriptable interface,
        the <code>HTMLObjectElement</code> object representing the
        element should expose that interface. The handler is not a
        nested <span>browsing context</span>. If no appropriate
        handler can be found, then jump to step 3 in the overall set
        of steps (fallback).</p>

        <p>The user agent should pass the names and values of all the
        <span title="concept-param-parameter">parameters</span> given
        by <code>param</code> elements that are children of the
        <code>object</code> element to the handler used.</p>

        <!-- duplicates what's in <embed> section above -->
        <p class="note">This specification does not define a mechanism
        for interacting with third-party handlers, as it is expected
        to be user-agent-specific. Some UAs might opt to support a
        plugin mechanism such as the Netscape Plugin API; others may
        use remote content convertors or have built-in support for
        certain types. <a href="#refsNPAPI">[NPAPI]</a></p>

        <p class="big-issue">this doesn't completely duplicate the
        navigation section, since it handles &lt;param>, etc, but
        surely some work should be done to work with it</p>

       </dd>


       <dt>If the type of the resource is an <span>XML MIME
       type</span><!-- XXX xref --></dt>
       <dt>If the type of the resource is HTML</dt>
       <dt>If the type of the resource does not start with
       "<code>image/</code>"</dt>

       <dd>

        <p>The <code>object</code> element must be associated with a
        nested <span>browsing context</span>, if it does not already
        have one. The element's nested <span>browsing context</span>
        must then be <span title="navigate">navigated</span> to the
        given resource, with <span>replacement enabled</span>. (The
        <code title="attr-object-data">data</code> attribute of the
        <code>object</code> element doesn't get updated if the
        browsing context gets further navigated to other
        locations.)</p>

        <p class="big-issue">navigation might end up treating it as
        something else, because it can do sniffing. how should we
        handle that?</p>

       </dd>


       <dt>If the resource is a supported image format, and support
       for images has not been disabled</dt>

       <dd>

        <p>The <code>object</code> element represents the specified
        image. The image is not a nested <span>browsing
        context</span>.</p>

        <p class="big-issue">shouldn't we use the image-sniffing stuff
        here?</p>

       </dd>


       <dt>Otherwise</dt>

       <dd>

        <p>The <code>object</code> element represents the specified
        image, but the image cannot be shown. Jump to step 3 below in
        the overall set of steps (fallback).</p>

       </dd>

      </dl>

     </li>

     <li><p>The element's contents are not part of what the
     <code>object</code> element represents.</p>

     <li><p>Once the resource is completely loaded, <span>fire a <code
     title="event-load">load</code> event</span> at the
     element.</p></li> <!-- XXX ordering of events (like with iframe)
     -->

    </ol>

   <li><p>If the <code title="attr-object-data">data</code> attribute
   is absent but the <code title="attr-object-type">type</code>
   attribute is present, and if the user agent can find a handler
   suitable according to the value of the <code
   title="attr-object-type">type</code> attribute, then that handler
   should be used. If the handler supports a scriptable interface, the
   <code>HTMLObjectElement</code> object representing the element
   should expose that interface. The handler is not a nested
   <span>browsing context</span>. If no suitable handler can be found,
   jump to the next step (fallback).</p></li>

   <li><p>(Fallback.) The <code>object</code> element doesn't
   represent anything except what the element's contents represent,
   ignoring any leading <code>param</code> element children. This is
   the element's <span>fallback content</span>.</li>

  </ol>

  <p>In the absence of other factors (such as style sheets), user
  agents must show the user what the <code>object</code> element
  represents. Thus, the contents of <code>object</code> elements act
  as <span>fallback content</span>, to be used only when referenced
  resources can't be shown (e.g. because it returned a 404
  error). This allows multiple <code>object</code> elements to be
  nested inside each other, targeting multiple user agents with
  different capabilities, with the user agent picking the best one it
  supports.</p>

  <p>The <code title="attr-hyperlink-usemap">usemap</code> attribute,
  if present while the <code>object</code> element represents an
  image, can indicate that the object has an associated <span>image
  map</span>. The attribute must be ignored if the <code>object</code>
  element doesn't represent an image.</p>

  <p>The <code>object</code> element supports <span>dimension
  attributes</span>.</p>

  <p>The DOM attributes <dfn
  title="dom-object-data"><code>data</code></dfn>, <dfn
  title="dom-object-type"><code>type</code></dfn>, and <dfn
  title="dom-object-useMap"><code>useMap</code></dfn> each must
  <span>reflect</span> the respective content attributes of the same
  name.</p>




  <h4>The <dfn><code>param</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd>None.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>As a child of an <code>object</code> element, before any <span>flow content</span>.</dd>
   <dt>Content model:</dt>
   <dd>Empty.</dd>
   <dt>Element-specific attributes:</dt>
   <dd><code title="attr-param-name">name</code></dd>
   <dd><code title="attr-param-value">value</code></dd>
   <dt>DOM interface:</dt>
   <dd>
<pre class="idl">interface <dfn>HTMLParamElement</dfn> : <span>HTMLElement</span> {
           attribute DOMString <span title="dom-param-name">name</span>;
           attribute DOMString <span title="dom-param-value">value</span>;
};</pre>
   </dd>
  </dl>

  <p>The <code>param</code> element defines parameters for handlers
  invoked by <code>object</code> elements.</p>

  <p>The <dfn title="attr-param-name"><code>name</code></dfn>
  attribute gives the name of the parameter.</p>

  <p>The <dfn title="attr-param-value"><code>value</code></dfn>
  attribute gives the value of the parameter.</p>

  <p>Both attributes must be present. They may have any value.</p>

  <p>If both attributes are present, and if the parent element of the
  <code>param</code> is an <code>object</code> element, then the
  element defines a <dfn
  title="concept-param-parameters">parameter</dfn> with the given
  name/value pair.</p>

  <p>The DOM attributes <dfn
  title="dom-param-name"><code>name</code></dfn> and <dfn
  title="dom-param-value"><code>value</code></dfn> must both
  <span>reflect</span> the respective content attributes of the same
  name.</p>



  <h4 id="video">The <dfn><code>video</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Embedded content</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>embedded content</span> is expected.</dd>
   <dt>Content model:</dt>
   <dd>If the element has a <code title="attr-media-src">src</code> attribute: <span>transparent</span>.</dd>
   <dd>If the element does not have a <code title="attr-media-src">src</code> attribute: one or more <code>source</code> elements, then, <span>transparent</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd><code title="attr-media-src">src</code></dd>
   <dd><code title="attr-video-poster">poster</code></dd>
   <dd><code title="attr-media-autoplay">autoplay</code></dd>
   <dd><code title="attr-media-start">start</code></dd>
   <dd><code title="attr-media-loopstart">loopstart</code></dd>
   <dd><code title="attr-media-loopend">loopend</code></dd>
   <dd><code title="attr-media-end">end</code></dd>
   <dd><code title="attr-media-playcount">playcount</code></dd>
   <dd><code title="attr-media-controls">controls</code></dd>
   <dd><code title="attr-dim-width">width</code></dd>
   <dd><code title="attr-dim-height">height</code></dd>
   <dt>DOM interface:</dt>
   <dd>
    <pre class="idl">interface <dfn>HTMLVideoElement</dfn> : <span>HTMLMediaElement</span> {
           attribute long <span title="dom-dim-width">width</span>;
           attribute long <span title="dom-dim-height">height</span>;
  readonly attribute unsigned long <span title="dom-video-videoWidth">videoWidth</span>;
  readonly attribute unsigned long <span title="dom-video-videoHeight">videoHeight</span>;
           attribute DOMString <span title="dom-video-poster">poster</span>;
};</pre>
   </dd>
  </dl>

  <p>A <code>video</code> element represents a video or movie.</p>

  <p>Content may be provided inside the <code>video</code>
  element. User agents should not show this content to the user; it is
  intended for older Web browsers which do not support
  <code>video</code>, so that legacy video plugins can be tried, or to
  show text to the users of these older browser informing them of how
  to access the video contents.</p>

  <p class="note">In particular, this content is not <i>fallback
  content</i> intended to address accessibility concerns. To make
  video content accessible to the blind, deaf, and those with other
  physical or cognitive disabilities, authors are expected to provide
  alternative media streams and/or to embed accessibility aids (such
  as caption or subtitle tracks) into their media streams.</p>

  <p>The <code>video</code> element is a <span>media element</span>
  whose <span>media data</span> is ostensibly video data, possibly
  with associated audio data.</p>

  <p>The <code title="attr-media-src">src</code>, <code
  title="attr-media-autoplay">autoplay</code>, <code
  title="attr-media-start">start</code>, <code
  title="attr-media-loopstart">loopstart</code>, <code
  title="attr-media-loopend">loopend</code>, <code
  title="attr-media-end">end</code>, <code
  title="attr-media-playcount">playcount</code>, and <code
  title="attr-media-controls">controls</code> attributes are <span
  title="media element attributes">the attributes common to all media
  elements</span>.</p>

  <p>The <code>video</code> element supports <span>dimension
  attributes</span>.</p>

  <p>The <dfn title="attr-video-poster"><code>poster</code></dfn>
  attribute gives the address of an image file that the user agent can
  show while no video data is available. The attribute, if present,
  must contain a URI (or IRI).</p>

  <p>The <dfn title="dom-video-poster"><code>poster</code></dfn> DOM
  attribute must reflect the <code
  title="attr-video-poster">poster</code> content attribute.</p>

  <p>The <dfn
  title="dom-video-videoWidth"><code>videoWidth</code></dfn> DOM
  attribute must return the native width of the video in CSS
  pixels. The <dfn
  title="dom-video-videoHeight"><code>videoHeight</code></dfn> DOM
  attribute must return the native height of the video in CSS
  pixels. In the absence of resolution information defining the
  mapping of pixels in the video to physical dimensions, user agents
  may assume that one pixel in the video corresponds to one CSS
  pixel. If no video data is available, then the attributes must
  return 0.</p>

  <p>When no video data is available (the element's <code
  title="dom-media-networkState">networkState</code> attribute is
  either <code title="dom-media-EMPTY">EMPTY</code>, <code
  title="dom-media-LOADING">LOADING</code>, or <code
  title="dom-media-LOADED_METADATA">LOADED_METADATA</code>),
  <code>video</code> elements represent either the image given by the
  <code title="attr-video-poster">poster</code> attribute, or
  nothing.</p>

  <p>When a <code>video</code> element is <span>actively
  playing</span>, it represents the frame of video at the continuously
  increasing <span title="current playback position">"current"
  position</span>. When the <span>current playback position</span>
  changes such that the last frame rendered is no longer the frame
  corresponding to the <span>current playback position</span> in the
  video, the new frame must be rendered. Similarly, any audio
  associated with the video must, if played, be played synchronised
  with the <span>current playback position</span>, at the specified
  <span title="dom-media-volume">volume</span> with the specified
  <span title="dom-media-muted">mute state</span>.</p>

  <p>When a <code>video</code> element is <span
  title="dom-media-paused">paused</span>, the element represents the
  frame of video corresponding to the <span title="current playback
  position">current playback position</span>, or, if that is not
  available yet (e.g. because the video is seeking or buffering), the
  last rendered frame of video.</p>

  <p>When a <code>video</code> element is neither <span>actively
  playing</span> nor <span title="dom-media-paused">paused</span>
  (e.g. when seeking or stalled), the element represents the last
  frame of the video to have been rendered.</p>

  <p class="note">Which frame in a video stream corresponds to a
  particular playback position is defined by the video stream's
  format.</p>

  <p>Video content should be rendered inside the element's playback
  area such that the video content is shown centered in the playback
  area at the largest possible size that fits completely within it,
  with the video content's aspect ratio being preserved. Thus, if the
  aspect ratio of the playback area does not match the aspect ratio of
  the video, the video will be shown letterboxed. Areas of the
  element's playback area that do not contain the video represent
  nothing.</p>

  <p>In addition to the above, the user agent may provide messages to
  the user (such as "buffering", "no video loaded", "error", or more
  detailed information) by overlaying text or icons on the video or
  other areas of the element's playback area, or in another
  appropriate manner.</p>

  <p>User agents that cannot render the video may instead make the
  element represent a link to an external video playback utility or to
  the video data itself.</p>

  <!-- XXX
   make it an interactive element
   default activation behaviour is to do the play() if paused, pause()
   otherwise
  -->

  <p>User agents should provide controls to enable or disable the
  display of closed captions associated with the video stream, though
  such features should, again, not interfere with the page's normal
  rendering.</p>

  <p>User agents may allow users to view the video content in manners
  more suitable to the user (e.g. full-screen or in an independent
  resizable window). As for the other user interface features,
  controls to enable this should not interfere with the page's normal
  rendering unless the user agent is <span title="expose a user
  interface to the user">exposing a user interface</span>. In such an
  independent context, however, user agents may make full user
  interfaces visible, with, e.g., play, pause, seeking, and volume
  controls, even if the <code
  title="attr-media-controls">controls</code> attribute is absent.</p>

  <p>User agents may allow video playback to affect system features
  that could interfere with the user's experience; for example, user
  agents could disable screensavers while video playback is in
  progress.</p>

  <!-- XXX rendering section should mention that resizing a video
  should in no way interrupt playback -->

  <p class="warning">User agents should not provide a public API to
  cause videos to be shown full-screen. A script, combined with a
  carefully crafted video file, could trick the user into thinking a
  system-modal dialog had been shown, and prompt the user for a
  password. There is also the danger of "mere" annoyance, with pages
  launching full-screen videos when links are clicked or pages
  navigated. Instead, user-agent specific interface features may be
  provided to easily allow the user to obtain a full-screen playback
  mode.</p>



  <h5>Video and audio codecs for <code>video</code> elements</h5>

  <p>User agents may support any video and audio codecs and container
  formats.</p>

  <p class="big-issue">It would be helpful for interoperability if all
  browsers could support the same codecs. However, there are no known
  codecs that satisfy all the current players: we need a codec that is
  known to not require per-unit or per-distributor licensing, that is
  compatible with the open source development model, that is of
  sufficient quality as to be usable, and that is not an additional
  submarine patent risk for large companies. This is an ongoing issue
  and this section will be updated once more information is
  available.</p>

  <!-- XXX mention that this spec doesn't require native support or
  plugin support, either is fine -->

  <p class="note">Certain user agents might support no codecs at all,
  e.g. text browsers running over SSH connections.</p>






  <h4 id="audio">The <dfn><code>audio</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Embedded content</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>embedded content</span> is expected.</dd>
   <dt>Content model:</dt>
   <dd>If the element has a <code title="attr-media-src">src</code> attribute: <span>transparent</span>.</dd>
   <dd>If the element does not have a <code title="attr-media-src">src</code> attribute: one or more <code>source</code> elements, then, <span>transparent</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd><code title="attr-media-src">src</code></dd>
   <dd><code title="attr-media-autoplay">autoplay</code></dd>
   <dd><code title="attr-media-start">start</code></dd>
   <dd><code title="attr-media-loopstart">loopstart</code></dd>
   <dd><code title="attr-media-loopend">loopend</code></dd>
   <dd><code title="attr-media-end">end</code></dd>
   <dd><code title="attr-media-playcount">playcount</code></dd>
   <dd><code title="attr-media-controls">controls</code></dd>
   <dt>DOM interface:</dt>
   <dd>
    <pre class="idl">interface <dfn>HTMLAudioElement</dfn> : <span>HTMLMediaElement</span> {
  // no members
};</pre>
   </dd>
  </dl>

  <p>An <code>audio</code> element represents a sound or audio
  stream.</p>

  <p>Content may be provided inside the <code>audio</code>
  element. User agents should not show this content to the user; it is
  intended for older Web browsers which do not support
  <code>audio</code>, so that legacy audio plugins can be tried, or to
  show text to the users of these older browser informing them of how
  to access the audio contents.</p>

  <p class="note">In particular, this content is not <i>fallback
  content</i> intended to address accessibility concerns. To make
  audio content accessible to the deaf or to those with other physical
  or cognitive disabilities, authors are expected to provide
  alternative media streams and/or to embed accessibility aids (such
  as transcriptions) into their media streams.</p>

  <p>The <code>audio</code> element is a <span>media element</span>
  whose <span>media data</span> is ostensibly audio data.</p>

  <p>The <code title="attr-media-src">src</code>, <code
  title="attr-media-autoplay">autoplay</code>, <code
  title="attr-media-start">start</code>, <code
  title="attr-media-loopstart">loopstart</code>, <code
  title="attr-media-loopend">loopend</code>, <code
  title="attr-media-end">end</code>, <code
  title="attr-media-playcount">playcount</code>, and <code
  title="attr-media-controls">controls</code> attributes are <span
  title="media element attributes">the attributes common to all media
  elements</span>.</p>
 
  <p>When an <code>audio</code> element is <span>actively
  playing</span>, it must have its audio data played synchronised with
  the <span>current playback position</span>, at the specified <span
  title="dom-media-volume">volume</span> with the specified <span
  title="dom-media-muted">mute state</span>.</p>

  <p>When an <code>audio</code> element is not <span>actively
  playing</span>, audio must not play for the element.</p>





  <h5>Audio codecs for <code>audio</code> elements</h5>

  <p>User agents may support any audio codecs and container
  formats.</p>

  <p>User agents must support the WAVE container format with audio
  encoded using the PCM format. <!-- XXX references? #refs --> </p>

  <!-- XXX mention that this spec doesn't require native support or
  plugin support, either is fine -->




  <h4>Media elements</h4>

  <p><dfn title="media element">Media elements</dfn> implement the
  following interface:</p>

  <pre class="idl">interface <dfn>HTMLMediaElement</dfn> : <span>HTMLElement</span> {

  // error state
  readonly attribute <span>MediaError</span> <span title="dom-media-error">error</span>;

  // network state
           attribute DOMString <span title="dom-media-src">src</span>;
  readonly attribute DOMString <span title="dom-media-currentSrc">currentSrc</span>;
  const unsigned short <span title="dom-media-EMPTY">EMPTY</span> = 0;
  const unsigned short <span title="dom-media-LOADING">LOADING</span> = 1;
  const unsigned short <span title="dom-media-LOADED_METADATA">LOADED_METADATA</span> = 2;
  const unsigned short <span title="dom-media-LOADED_FIRST_FRAME">LOADED_FIRST_FRAME</span> = 3;
  const unsigned short <span title="dom-media-LOADED">LOADED</span> = 4;
  readonly attribute unsigned short <span title="dom-media-networkState">networkState</span>;
  readonly attribute float <span title="dom-media-bufferingRate">bufferingRate</span>;
  readonly attribute <span>TimeRanges</span> <span title="dom-media-buffered">buffered</span>;
  void <span title="dom-media-load">load</span>();

  // ready state
  const unsigned short <span title="dom-media-DATA_UNAVAILABLE">DATA_UNAVAILABLE</span> = 0;
  const unsigned short <span title="dom-media-CAN_SHOW_CURRENT_FRAME">CAN_SHOW_CURRENT_FRAME</span> = 1;
  const unsigned short <span title="dom-media-CAN_PLAY">CAN_PLAY</span> = 2;
  const unsigned short <span title="dom-media-CAN_PLAY_THROUGH">CAN_PLAY_THROUGH</span> = 3;
  readonly attribute unsigned short <span title="dom-media-readyState">readyState</span>;
  readonly attribute boolean <span title="dom-media-seeking">seeking</span>;

  // playback state
           attribute float <span title="dom-media-currentTime">currentTime</span>;
  readonly attribute float <span title="dom-media-duration">duration</span>;
  readonly attribute boolean <span title="dom-media-paused">paused</span>;
           attribute float <span title="dom-media-defaultPlaybackRate">defaultPlaybackRate</span>;
           attribute float <span title="dom-media-playbackRate">playbackRate</span>;
  readonly attribute <span>TimeRanges</span> <span title="dom-media-played">played</span>;
  readonly attribute <span>TimeRanges</span> <span title="dom-media-seekable">seekable</span>;
  readonly attribute boolean <span title="dom-media-ended">ended</span>;
           attribute boolean <span title="dom-media-autoplay">autoplay</span>;
  void <span title="dom-media-play">play</span>();
  void <span title="dom-media-pause">pause</span>();

  // looping
           attribute float <span title="dom-media-start">start</span>;
           attribute float <span title="dom-media-end">end</span>;
           attribute float <span title="dom-media-loopStart">loopStart</span>;
           attribute float <span title="dom-media-loopEnd">loopEnd</span>;
           attribute unsigned long <span title="dom-media-playCount">playCount</span>;
           attribute unsigned long <span title="dom-media-currentLoop">currentLoop</span>;

  // cue ranges
  void <span title="dom-media-addCueRange">addCueRange</span>(in DOMString className, in float start, in float end, in boolean pauseOnExit, in <span>VoidCallback</span> enterCallback, in <span>VoidCallback</span> exitCallback);
  void <span title="dom-media-removeCueRange">removeCueRanges</span>(in DOMString className);

  // controls
           attribute boolean <span title="dom-media-controls">controls</span>;
           attribute float <span title="dom-media-volume">volume</span>;
           attribute boolean <span title="dom-media-muted">muted</span>;
};</pre>

  <p>The <dfn>media element attributes</dfn>, <code
  title="attr-media-src">src</code>, <code
  title="attr-media-autoplay">autoplay</code>, <code
  title="attr-media-start">start</code>, <code
  title="attr-media-loopstart">loopstart</code>, <code
  title="attr-media-loopend">loopend</code>, <code
  title="attr-media-end">end</code>, <code
  title="attr-media-playcount">playcount</code>, and <code
  title="attr-media-controls">controls</code>, apply to all <span
  title="media element">media elements</span>. They are defined in
  this section.</p>

  <!-- XXX v3 features:
    * frame forward / backwards / step(n) while paused
    * hasAudio, hasVideo, hasCaptions, etc
    * per-frame control: get current frame; set current frame
    * queue of content
      - pause current stream and insert content at front of queue to play immediately
      - pre-download another stream
      - add stream(s) to play at end of current stream
      - pause playback upon reaching a certain time
      - playlists, with the ability to get metadata out of them (e.g. xspf)
    * control over closed captions:
      - enable, disable, select language
      - event that sends caption text to script
    * get byte ranges as well as time ranges for buffered data
    * in-band metadata and cue points to allow:
      - Chapter markers that synchronize to playback (without having to poll
        the playhead position)
      - Annotations on video content (i.e., pop-up video)
      - General custom metadata store (ratings, etc.)
    * notification of chapter labels changing on the fly:
      - onchapterlabelupdate, which has a time and a label
    * cue points that trigger at fixed intervals, so that
      e.g. animation can be synced with the video
    * general meta data, implemented as getters (don't expose the whole thing)
      - getMetadata(key: string, language: string) => HTMLImageElement or string
      - onmetadatachanged (no context info)
    * video: changing the playback aspect ratio 
    * video: applying CSS filters 
    * infinite looping 
  -->

  <p><span title="media element">Media elements</span> are used to
  present audio data, or video and audio data, to the user. This is
  referred to as <dfn>media data</dfn> in this section, since this
  section applies equally to <span title="media element">media
  elements</span> for audio or for video. The term <dfn>media
  resource</dfn> is used to refer to the complete set of media data,
  e.g. the complete video file, or complete audio file.</p>



  <h5>Error codes</h5>

  <p>All <span title="media element">media elements</span> have an
  associated error status, which records the last error the element
  encountered since the <code title="dom-media-load">load()</code>
  method was last invoked. The <dfn
  title="dom-media-error"><code>error</code></dfn> attribute, on
  getting, must return the <code>MediaError</code> object created for
  this last error, or null if there has not been an error.</p>

  <pre class="idl">interface <dfn>MediaError</dfn> {
  const unsigned short <span title="dom-MediaError-MEDIA_ERR_ABORTED">MEDIA_ERR_ABORTED</span> = 1;
  const unsigned short <span title="dom-MediaError-MEDIA_ERR_NETWORK">MEDIA_ERR_NETWORK</span> = 2;
  const unsigned short <span title="dom-MediaError-MEDIA_ERR_DECODE">MEDIA_ERR_DECODE</span> = 3;
  readonly attribute unsigned short <span title="dom-MediaError-code">code</span>;
};</pre>

  <p>The <dfn title="dom-MediaError-code"><code>code</code></dfn>
  attribute of a <code>MediaError</code> object must return the code
  for the error, which must be one of the following:</p>

  <dl>

   <dt><dfn title="dom-MediaError-MEDIA_ERR_ABORTED"><code>MEDIA_ERR_ABORTED</code></dfn> (numeric value 1)</dt>

   <dd>The download of the <span>media resource</span> was aborted by
   the user agent at the user's request.</dd>

   <dt><dfn title="dom-MediaError-MEDIA_ERR_NETWORK"><code>MEDIA_ERR_NETWORK</code></dfn> (numeric value 2)</dt>

   <dd>A network error of some description caused the user agent to
   stop downloading the <span>media resource</span>.</dd>

   <dt><dfn title="dom-MediaError-MEDIA_ERR_DECODE"><code>MEDIA_ERR_DECODE</code></dfn> (numeric value 3)</dt>

   <dd>An error of some description occurred while decoding the
   <span>media resource</span>.</dd>

  </dl>



  <h5>Location of the media resource</h5>

  <p>The <dfn title="attr-media-src"><code>src</code></dfn> content
  attribute on <span title="media element">media elements</span> gives
  the address of the media resource (video, audio) to show. The
  attribute, if present, must contain a URI (or IRI).</p>

  <p>If the <code title="attr-media-src">src</code> attribute of a
  <span>media element</span> that is already in a document and whose
  <code title="dom-media-networkState">networkState</code> is in the
  <code title="dom-media-EMPTY">EMPTY</code> state is added, changed,
  or removed, the user agent must implicitly invoke the <code
  title="dom-media-load">load()</code> method on the <span>media
  element</span> as soon as all other scripts have finished
  executing. Any exceptions raised must be ignored.</p>

  <p class="note">If a <code title="attr-media-src">src</code>
  attribute is specified, the resource it specifies is the <span>media
  resource</span> that will be used. Otherwise, the resource specified
  by the first suitable <code>source</code> element child of the
  <span>media element</span> is the one used.</p>

  <p>The <dfn title="dom-media-src"><code>src</code></dfn> DOM
  attribute on <span title="media element">media elements</span> must
  <span>reflect</span> the content attribute of the same name.</p>

  <p>To <dfn>pick a media resource</dfn> for a <span>media
  element</span>, a user agent must use the following steps:</p>

  <ol>

   <li><p>If the <span>media element</span> has a <code
   title="attr-media-src">src</code>, then the address given in that
   attribute is the address of the <span>media resource</span>; jump
   to the last step.</p></li>

   <li><p>Otherwise, let <var title="">candidate</var> be the first
   <code>source</code> element child in the <span>media
   element</span>, or null if there is no such child.</p></li>

   <li>

    <p>If either:</p>

    <ul>

     <li><var title="">candidate</var> is null, or</li>

     <li>the <var title="">candidate</var> element has no <code
     title="attr-source-src">src</code> attribute, or</li>

     <li>the <var title="">candidate</var> element has a <code
     title="attr-source-type">type</code> attribute and that
     attribute's value, when parsed as a MIME type, does not represent
     a type that the user agent can render (including any codecs
     described by the <code title="">codec</code> parameter), or <a
     href="#refsRFC2046">[RFC2046]</a> <a
     href="#refsRFC4281">[RFC4281]</a></li>

     <li>the <var title="">candidate</var> element has a <code
     title="attr-source-media">media</code> attribute and that
     attribute's value, when processed according to the rules for
     media queries, does not match the current environment, <a
     href="#refsMQ">[MQ]</a></li>

    </ul>

    <p>...then the <var title="">candidate</var> is not suitable; go
    to the next step.</p>

    <p>Otherwise, the address given in that <var
    title="">candidate</var> element's <code
    title="attr-source-src">src</code> attribute is the address of the
    <span>media resource</span>; jump to the last step.</p>

   </li>

   <li><p>Let <var title="">candidate</var> be the next
   <code>source</code> element child in the <span>media
   element</span>, or null if there are no more such
   children.</p></li>

   <li><p>If <var title="">candidate</var> is not null, return to step
   3.</p></li>

   <li><p>There is no <span>media resource</span>. Abort these
   steps.</p></li>

   <li><p>Let the address of the <dfn>chosen media resource</dfn> be
   the one that was found before jumping to this step.</p></li>

  </ol>

  <p class="note">A <code>source</code> element with no <code
  title="attr-source-src">src</code> attribute is assumed to be the
  last <code>source</code> element &mdash; any <code>source</code>
  elements after it are ignored (and are invalid).</p>

  <p>The <dfn
  title="dom-media-currentSrc"><code>currentSrc</code></dfn> DOM
  attribute must return the empty string if the <span>media
  element</span>'s <code
  title="dom-media-networkState">networkState</code> has the value
  <span title="dom-media-EMPTY">EMPTY</span>, and the absolute URL of
  the <span>chosen media resource</span> otherwise.</p>



  <h5>Network states</h5>

  <p>As <span title="media element">media elements</span> interact
  with the network, they go through several states. The <dfn
  title="dom-media-networkState"><code>networkState</code></dfn>
  attribute, on getting, must return the current network state of the
  element, which must be one of the following values:</p>

  <dl>

   <dt><dfn title="dom-media-EMPTY"><code>EMPTY</code></dfn> (numeric value 0)</dt>

   <dd>The element has not yet been initialised. All attributes are in
   their initial states.</dd>

   <dt><dfn title="dom-media-LOADING"><code>LOADING</code></dfn> (numeric value 1)</dt>

   <dd>The element has <span title="pick a media resource">picked a
   media resource</span> (the <span>chosen media resource</span> is
   available from the <code
   title="dom-media-currentSrc">currentSrc</code> attribute), but none
   of the metadata has yet been obtained and therefore all the other
   attributes are still in their initial states.</dd>

   <dt><dfn title="dom-media-LOADED_METADATA"><code>LOADED_METADATA</code></dfn> (numeric value 2)</dt>

   <dd>Enough of the resource has been obtained that the metadata
   attributes are initialized (e.g. the length is known). The API will
   no longer raise exceptions when used.</dd>

   <dt><dfn title="dom-media-LOADED_FIRST_FRAME"><code>LOADED_FIRST_FRAME</code></dfn> (numeric value 3)</dt>

   <dd>Actual <span>media data</span> has been obtained. In the case
   of video, this specifically means that a frame of video is
   available and can be shown.</dd>

   <dt><dfn title="dom-media-LOADED"><code>LOADED</code></dfn> (numeric value 4)</dt>

   <dd>The entire <span>media resource</span> has been obtained and is
   available to the user agent locally. Network connectivity could be
   lost without affecting the media playback.</dd>

  </dl>

  <p>The algorithm for the <code title="dom-media-load">load()</code>
  method defined below describes exactly when the <code
  title="dom-media-networkState">networkState</code> attribute changes
  value.</p>



  <h5>Loading the media resource</h5>

  <p>All <span title="media element">media elements</span> have a
  <dfn>begun flag</dfn>, which must begin in the false state, a
  <dfn>loaded-first-frame flag</dfn>, which must begin in the false
  state, and an <dfn>autoplaying flag</dfn>, which must begin in the
  true state.</p>

  <p>When the <dfn title="dom-media-load"><code>load()</code></dfn>
  method on a <span>media element</span> is invoked, the user agent
  must run the following steps. Note that this algorithm might get
  aborted, e.g. if the <code title="dom-media-load">load()</code>
  method itself is invoked again.</p>

  <ol>

   <li><p>Any already-running instance of this algorithm for this
   element must be aborted. If those method calls have not yet
   returned, they must finish the step they are on, and then
   immediately return.</p></li>

   <li><p>If the element's <span>begun flag</span> is true, then the
   <span>begun flag</span> must be set to false, the <code
   title="dom-media-error">error</code> attribute must be set to a new
   <code>MediaError</code> object whose <code
   title="dom-MediaError-code">code</code> attribute is set to <code
   title="dom-MediaError-MEDIA_ERR_ABORTED">MEDIA_ERR_ABORTED</code>,
   and the user agent must synchronously <span>fire a progress
   event</span> called <code title="event-abort">abort</code> at the
   <span>media element</span>.</p></li>

   <li><p>The <code title="dom-media-error">error</code> attribute
   must be set to null, the <span>loaded-first-frame flag</span> must
   be set to false, and the <span>autoplaying flag</span> must be set
   to true.</p></li>

   <li><p>The <code title="dom-media-playbackRate">playbackRate</code>
   attribute must be set to the value of the <code
   title="dom-media-defaultPlaybackRate">defaultPlaybackRate</code>
   attribute.</p></li>

   <li><p>If the <span>media element</span>'s <code
   title="dom-media-networkState">networkState</code> is not set to
   <span title="dom-media-EMPTY">EMPTY</span>, then the following
   substeps must be followed:

    <ol>

     <!--<li>Let <var title="">events</var> be a list of event names,
     initially empty.</li>-->

     <li>The <code title="dom-media-networkState">networkState</code>
     attribute must be set to <span
     title="dom-media-EMPTY">EMPTY</span><!--, and the user agent must
     add <code title="event-emptied">emptied</code> to the <var
     title="">events</var> list-->.</li>

     <li>If <code title="dom-media-readyState">readyState</code> is
     not set to <code
     title="dom-media-DATA_UNAVAILABLE">DATA_UNAVAILABLE</code>, it must be set
     to that state<!-- and the user agent must add <code
     title="event-dataunavailable">dataunavailable</code> to the
     <var title="">events</var> list-->.</li>

     <li>If the <code title="dom-media-paused">paused</code> attribute
     is false, it must be set to true<!--, and the user agent must add
     <code title="event-pause">pause</code> to the <var
     title="">events</var> list-->.</li>

     <li>If <code title="dom-media-seeking">seeking</code> is true, it
     must be set to false.</li>

     <li>The <span>current playback position</span> must be set to
     0.</li>

     <li>The <code title="dom-media-currentLoop">currentLoop</code> DOM
     attribute must be set to 0.</li>

     <!--<li>The user agent must synchronously <span>fire a simple
     event</span> at the <span>media element</span> for each event
     name in <var title="">events</var>, in the same order that they
     were added to that list.</li>-->

     <li>The user agent must synchronously <span>fire a simple
     event</span> called <code title="event-emptied">emptied</code> at
     the <span>media element</span>.</li>

    </ol>

   </li>

   <li><p>The user agent must <span>pick a media resource</span> for
   the <span>media element</span>. If that fails, the method must
   raise an <code>INVALID_STATE_ERR</code> exception, and abort these
   steps.</p></li>

   <li><p>The <code title="dom-media-networkState">networkState</code>
   attribute must be set to <span
   title="dom-media-LOADING">LOADING</span>.</li>

   <li><p class="note">The <code
   title="dom-media-currentSrc">currentSrc</code> attribute starts
   returning the new value.</p></li>

   <li><p>The user agent must then set the <span>begun flag</span> to
   true and <span>fire a progress event</span> called
   <code>begin</code> at the <span>media element</span>.</p></li>

   <li><p>The method must return, but these steps must
   continue.</p></li>

   <li><p class="note">Playback of any previously playing <span>media
   resource</span> for this element stops.</p></li>
 
   <li><p>If a download is in progress for the <span>media
   element</span>, the user agent should stop the download.</p></li>

   <li><p>The user agent must then begin to download the <span>chosen
   media resource</span>. The rate of the download may be throttled,
   however, in response to user preferences (including throttling it
   to zero until the user indicates that the download can start), or
   to balance the download with other connections sharing the same
   bandwidth.</p></li>

   <li>

    <p>While the download is progressing, the user agent must
    <span>fire a progress event</span> called <code
    title="event-progress">progress</code> at the element every 350ms
    (&#xB1;200ms) or for every byte received, whichever is
    <em>least</em> frequent.</p>

    <p>If at any point the user agent has received no data for more
    than about three seconds, the user agent must <span>fire a
    progress event</span> called <code
    title="event-stalled">stalled</code> at the element.</p>

    <p>User agents may allow users to selectively block or slow
    <span>media data</span> downloads. When a <span>media
    element</span>'s download has been blocked, the user agent must
    act as if it was stalled (as opposed to acting as if the
    connection was closed).</p>

    <p>The user agent may use whatever means necessary to download the
    resource (within the constraints put forward by this and other
    specifications); for example, reconnecting to the server in the
    face of network errors, using HTTP partial range requests, or
    switching to a streaming protocol. The user agent must only
    consider a resource erroneous if it has given up trying to
    download it.</p>

    <dl class="switch">

     <dt>If the <span>media data</span> cannot be downloaded at all,
     due to network errors, causing the user agent to give up trying
     to download the resource</dt>

     <dd>

      <p>DNS errors and HTTP 4xx and 5xx errors (and equivalents in
      other protocols) must cause the user agent to execute the
      following steps. User agents may also follow these steps in
      response to other network errors of similar severity.</p>

      <ol>

       <li>The user agent should cancel the download.</li>

       <li>The <code title="dom-media-error">error</code> attribute
       must be set to a new <code>MediaError</code> object whose <code
       title="dom-MediaError-code">code</code> attribute is set to
       <code
       title="dom-MediaError-MEDIA_ERR_NETWORK">MEDIA_ERR_NETWORK</code>.</li>

       <li>The <span>begun flag</span> must be set to false and the
       user agent must <span>fire a progress event</span> called <code
       title="event-error">error</code> at the <span>media
       element</span>.</li>

       <li>The element's <code
       title="dom-media-networkState">networkState</code> attribute
       must be switched to the <span
       title="dom-media-EMPTY">EMPTY</span> value and the user agent
       must <span>fire a simple event</span> called <code
       title="event-emptied">emptied</code> at the element.</li>

       <li>These steps must be aborted.</li>

      </ol>

     </dd>

     <dt id="fatal-decode-error">If the <span>media data</span> can be
     downloaded but is in an unsupported format, or can otherwise not
     be rendered at all</dt>

     <dd>

      <p>The server returning a file of the wrong kind (e.g. one that
      that turns out to not be pure audio when the <span>media
      element</span> is an <code>audio</code> element), or the file
      using unsupported codecs for all the data, must cause the user
      agent to execute the following steps. User agents may also
      execute these steps in response to other codec-related fatal
      errors, such as the file requiring more resources to process
      than the user agent can provide in real time.</p>

      <ol>

       <li>The user agent should cancel the download.</li>

       <li>The <code title="dom-media-error">error</code> attribute
       must be set to a new <code>MediaError</code> object whose <code
       title="dom-MediaError-code">code</code> attribute is set to
       <code
       title="dom-MediaError-MEDIA_ERR_DECODE">MEDIA_ERR_DECODE</code>.</li>

       <li>The <span>begun flag</span> must be set to false and the
       user agent must <span>fire a progress event</span> called <code
       title="event-error">error</code> at the <span>media
       element</span>.</li>

       <li>The element's <code
       title="dom-media-networkState">networkState</code> attribute
       must be switched to the <span
       title="dom-media-EMPTY">EMPTY</span> value and the user agent
       must <span>fire a simple event</span> called <code
       title="event-emptied">emptied</code> at the element.</li>

       <li>These steps must be aborted.</li>

      </ol>

     </dd>

     <dt>If the <span>media data</span> download is aborted by the
     user</dt>

     <dd>

      <p>The download is aborted by the user, e.g. because the user
      navigated the browsing context to another page, the user agent
      must execute the following steps. These steps are not followed
      if the <code title="dom-media-load">load()</code> method itself
      is reinvoked, as the steps above handle that particular kind of
      abort.</p>

      <ol>

       <li>The user agent should cancel the download.</li>

       <li>The <code title="dom-media-error">error</code> attribute
       must be set to a new <code>MediaError</code> object whose <code
       title="dom-MediaError-code">code</code> attribute is set to
       <code
       title="dom-MediaError-MEDIA_ERR_ABORT">MEDIA_ERR_ABORT</code>.</li>

       <li>The <span>begun flag</span> must be set to false and the
       user agent must <span>fire a progress event</span> called <code
       title="event-abort">abort</code> at the <span>media
       element</span>.</li>

       <li>If the <span>media element</span>'s <code
       title="dom-media-networkState">networkState</code> attribute
       has the value <code title="dom-media-LOADING">LOADING</code>,
       the element's <code
       title="dom-media-networkState">networkState</code> attribute
       must be switched to the <span
       title="dom-media-EMPTY">EMPTY</span> value and the user agent
       must <span>fire a simple event</span> called <code
       title="event-emptied">emptied</code> at the element. (If the
       <code title="dom-media-networkState">networkState</code>
       attribute has a value greater than <code
       title="dom-media-LOADING">LOADING</code>, then this doesn't
       happen; the available data, if any, will be playable.)</li>

       <li>These steps must be aborted.</li>

      </ol>

     </dd>

     <dt id="non-fatal-media-error">If the <span>media data</span> can
     be downloaded but has non-fatal errors or uses, in part, codecs
     that are unsupported, preventing the user agent from rendering
     the content completely correctly but not preventing playback
     altogether</dt>

     <dd>

      <p>The server returning data that is partially usable but cannot
      be optimally rendered must cause the user agent to execute the
      following steps.</p>

      <ol>

       <li class="big-issue">Should we fire a 'warning' event? Set the
       'error' flag to 'MEDIA_ERR_SUBOPTIMAL' or something?</li>

      </ol>

     </dd>

     <dt>Once enough of the <span>media data</span> has been
     downloaded to determine the duration of the <span>media
     resource</span>, its dimensions, and other metadata</dt>

     <dd>

      <p>The user agent must follow these substeps:</p>

      <ol>

       <li><p>The <span>current playback position</span> must be set
       to the <var>effective start</var>.</p></li>

       <li><p>The <code
       title="dom-media-networkState">networkState</code> attribute
       must be set to <code
       title="dom-media-LOADED_METADATA">LOADED_METADATA</code>.</p></li>

       <li><p class="note">A number of attributes, including <code
       title="dom-media-duration">duration</code>, <code
       title="dom-media-buffered">buffered</code>, and <code
       title="dom-media-played">played</code>, become
       available.</p></li>

       <li><p class="note">The user agent will <span>fire a simple
       event</span> called <code
       title="event-durationchange">durationchange</code> at the
       element at this point.</li>

       <li><p>The user agent must <span>fire a simple event</span>
       called <code title="event-loadedmetadata">loadedmetadata</code>
       at the element.</li>

      </ol>

     </dd>

     <dt id="handling-first-frame-available">Once enough of the
     <span>media data</span> has been downloaded to enable the user
     agent to display the frame at the <span>effective start</span> of
     the <span>media resource</span></dt>

     <dd>

      <p>The user agent must follow these substeps:</p>

      <ol>

       <li><p>The <code
       title="dom-media-networkState">networkState</code> attribute
       must be set to <code
       title="dom-media-LOADED_FIRST_FRAME">LOADED_FIRST_FRAME</code>.</p></li>

       <li><p>The <code
       title="dom-media-readyState">readyState</code> attribute must
       change to <code
       title="dom-media-CAN_SHOW_CURRENT_FRAME">CAN_SHOW_CURRENT_FRAME</code>.</p></li>

       <li><p>The <span>loaded-first-frame flag</span> must be set to
       true.</p></li>

       <li><p>The user agent must <span>fire a simple event</span>
       called <code
       title="event-loadedfirstframe">loadedfirstframe</code> at
       the element.</li>

       <li><p>The user agent must <span>fire a simple event</span>
       called <code
       title="event-canshowcurrentframe">canshowcurrentframe</code> at
       the element.</li>

      </ol>

     </dd>

    </dl>

    <p>When the user agent has completed the download of the entire
    <span>media resource</span>, it must move on to the next step.</p>

   </li>

   <li><p>If the download completes without errors, the <span>begun
   flag</span> must be set to false, the <code
   title="dom-media-networkState">networkState</code> attribute must
   be set to <code title="dom-media-LOADED">LOADED</code>, and the
   user agent must <span>fire a progress event</span> called <code
   title="event-load">load</code> at the element.</p></li>

  </ol>

  <p>If a <span>media element</span> whose <code
  title="dom-media-networkState">networkState</code> has the value
  <code title="dom-media-EMPTY">EMPTY</code> is inserted into a
  document, user agents must implicitly invoke the <code
  title="dom-media-load">load()</code> method on the <span>media
  element</span> as soon as all other scripts have finished
  executing<!-- XXX phrase that better? -->. Any exceptions raised
  must be ignored.</p>

  <p>The <dfn
  title="dom-media-bufferingRate"><code>bufferingRate</code></dfn>
  attribute must return the average number of bits received per second
  for the current download over the past few seconds. If there is no
  download in progress, the attribute must return 0.</p>

  <p>The <dfn title="dom-media-buffered"><code>buffered</code></dfn>
  attribute must return a static <span>normalised
  <code>TimeRanges</code> object</span> that represents the ranges of
  the <span>media resource</span>, if any, that the user agent has
  downloaded, at the time the attribute is evaluated.</p>

  <p class="note">Typically this will be a single range anchored at
  the zero point, but if, e.g. the user agent uses HTTP range requests
  in response to seeking, then there could be multiple ranges.</p>



  <h5>Offsets into the media resource</h5>

  <p>The <dfn title="dom-media-duration"><code>duration</code></dfn>
  attribute must return the length of the <span>media resource</span>,
  in seconds. If no <span>media data</span> is available, then the
  attributes must return 0. If <span>media data</span> is available
  but the length is not known, the attribute must return the
  Not-a-Number (NaN) value. If the <span>media resource</span> is
  known to be unbounded (e.g. a streaming radio), then the attribute
  must return the positive Infinity value.</p>

  <p>When the length of the <span>media resource</span> changes
  (e.g. from being unknown to known, or from indeterminate to known,
  or from a previously established length to a new length) the user
  agent must, once any running scripts have finished, <span>fire a
  simple event</span> called <code
  title="event-durationchange">durationchange</code> at the
  <span>media element</span>.</p>

  <p><span title="media element">Media elements</span> have a
  <dfn>current playback position</dfn>, which must initially be
  zero. The current position is a time.</p>

  <p>The <dfn
  title="dom-media-currentTime"><code>currentTime</code></dfn>
  attribute must, on getting, return the <span>current playback
  position</span>, expressed in seconds. On setting, the user agent
  must <span title="dom-media-seek">seek</span> to the new value
  (which might raise an exception).</p>

  <p>The <dfn title="attr-media-start"><code>start</code></dfn>
  content attribute gives the offset into the <span>media
  resource</span> at which playback is to begin. The default value is
  the default start position of the <span>media resource</span>, or 0
  if not enough <span>media data</span> has been obtained yet to
  determine the default start position or if the resource doesn't
  specify a default start position.</p>

  <p>The <dfn><var>effective start</var></dfn> is the smaller of the
  <code title="dom-media-start">start</code> DOM attribute and the end
  of the <span>media resource</span>.</p>

  <p>The <dfn
  title="attr-media-loopstart"><code>loopstart</code></dfn> content
  attribute gives the offset into the <span>media resource</span> at
  which playback is to begin when looping a clip. The default value of
  the <code title="attr-media-loopStart">loopstart</code> content
  attribute is the value of the <code
  title="dom-media-start">start</code> DOM attribute.</p>

  <p>The <dfn><var>effective loop start</var></dfn> is the smaller of
  the <code title="dom-media-loopStart">loopStart</code> DOM attribute
  and the end of the <span>media resource</span>.<p>

  <p>The <dfn title="attr-media-loopend"><code>loopend</code></dfn>
  content attribute gives an offset into the <span>media
  resource</span> at which playback is to jump back to the <code
  title="attr-media-loopstart">loopstart</code>, when looping the
  clip. The default value of the <code
  title="attr-media-loopEnd">loopend</code> content attribute is the
  value of the <code title="dom-media-end">end</code> DOM
  attribute.</p>

  <p>The <dfn><var>effective loop end</var></dfn> is the greater of
  the <code title="dom-media-start">start</code>, <code
  title="dom-media-loopStart">loopStart</code>, and <code
  title="dom-media-loopEnd">loopEnd</code> DOM attributes, except if
  that is greater than the end of the <span>media resource</span>, in
  which case that's its value.<p>

  <p>The <dfn title="attr-media-end"><code>end</code></dfn> content
  attribute gives an offset into the <span>media resource</span> at
  which playback is to end. The default value is infinity.</p>

  <p>The <dfn><var>effective end</var></dfn> is the greater of the
  <code title="dom-media-start">start</code>, <code
  title="dom-media-loopStart">loopStart</code>, and <code
  title="dom-media-loopEnd">end</code> DOM attributes, except if that
  is greater than the end of the <span>media resource</span>, in which
  case that's its value.<p>

  <p>The <code title="attr-media-start">start</code>, <code
  title="attr-media-loopstart">loopstart</code>, <code
  title="attr-media-loopend">loopend</code>, and <code
  title="attr-media-end">end</code> attributes must, if specified,
  contain <span title="value time offset">value time
  offsets</span>. To get the time values they represent, user agents
  must use the <span>rules for parsing time offsets</span>.</p>

  <p>The <dfn title="dom-media-start"><code>start</code></dfn>, <dfn
  title="dom-media-loopStart"><code>loopStart</code></dfn>, <dfn
  title="dom-media-loopEnd"><code>loopEnd</code></dfn>, and <dfn
  title="dom-media-end"><code>end</code></dfn> DOM attributes must
  <span>reflect</span> the <code
  title="attr-media-start">start</code>, <code
  title="attr-media-loopstart">loopstart</code>, <code
  title="attr-media-loopend">loopend</code>, and <code
  title="attr-media-end">end</code> content attributes on the
  <span>media element</span> respectively.</p>

  <p>The <dfn
  title="attr-media-playcount"><code>playcount</code></dfn> content
  attribute gives the number of times to play the clip. The default
  value is 1.</p>

  <p>The <dfn title="dom-media-playCount"><code>playCount</code></dfn>
  DOM attribute must <span>reflect</span> the <code
  title="attr-media-playcount">playcount</code> content attribute on
  the <span>media element</span>. The value must be <span>limited to
  only positive non-zero numbers</span>.</p>

  <p>The <dfn
  title="dom-media-currentLoop"><code>currentLoop</code></dfn>
  attribute must initially have the value 0. It gives the index of the
  current loop. It is changed during playback as described below.</p>

  <p>When any of the <code title="dom-media-start">start</code>, <code
  title="dom-media-loopStart">loopStart</code>, <code
  title="dom-media-loopEnd">loopEnd</code>, <code
  title="dom-media-end">end</code>, and <code
  title="dom-media-playCount">playCount</code> DOM attributes change
  value (either through content attribute mutations reflecting into
  the DOM attribute, or direct mutations of the DOM attribute), the
  user agent must apply the following steps:</p>

  <ol>

   <li><p>If the <code title="dom-media-playCount">playCount</code>
   DOM attribute's value is less than or equal to the <code
   title="dom-media-currentLoop">currentLoop</code> DOM attribute's
   value, then the <code
   title="dom-media-currentLoop">currentLoop</code> DOM attribute's
   value must be set to <span><code
   title="dom-media-playCount">playCount</code>-1</span> (which will
   make the current loop the last loop).</p></li>

   <li><p>If the <span>media element</span>'s <code
   title="dom-media-networkState">networkState</code> is in the <code
   title="dom-media-EMPTY">EMPTY</code> state or the <code
   title="dom-media-LOADING">LOADING</code> state, then the user agent
   must at this point abort these steps.</p></li>

   <li><p>If the <code
   title="dom-media-currentLoop">currentLoop</code> is zero, and the
   <span>current playback position</span> is before the <var>effective
   start</var>, the user agent must <span
   title="dom-media-seek">seek</span> to the <var>effective
   start</var>.</p></li>

   <li><p>If the <code
   title="dom-media-currentLoop">currentLoop</code> is greater than
   zero, and the <span>current playback position</span> is before the
   <var>effective loop start</var>, the user agent must <span
   title="dom-media-seek">seek</span> to the <var>effective loop
   start</var>.</p></li>

   <li><p>If the <code
   title="dom-media-currentLoop">currentLoop</code> is less than
   <span><code title="dom-media-playCount">playCount</code>-1</span>,
   and the <span>current playback position</span> is after the
   <var>effective loop end</var>, the user agent must <span
   title="dom-media-seek">seek</span> to the <var>effective loop
   start</var>, and increase <code
   title="dom-media-currentLoop">currentLoop</code> by 1.</p></li>

   <li><p>If the <code
   title="dom-media-currentLoop">currentLoop</code> is equal to
   <span><code title="dom-media-playCount">playCount</code>-1</span>,
   and the <span>current playback position</span> is after the
   <var>effective end</var>, the user agent must <span
   title="dom-media-seek">seek</span> to the <var>effective end</var>
   and then the looping will end.</p></li>

  </ol>



  <h5>The ready states</h5>

  <p><span title="media element">Media elements</span> have a
  <em>ready state</em>, which describes to what degree they are ready
  to be rendered at the <span>current playback position</span>. The
  possible values are as follows; the ready state of a media element
  at any particular time is the greatest value describing the state of
  the element:</p>

  <dl>

   <dt><dfn title="dom-media-DATA_UNAVAILABLE"><code>DATA_UNAVAILABLE</code></dfn> (numeric value 0)</dt>

   <dd>No data for the <span>current playback position</span> is
   available. <span title="media element">Media elements</span> whose
   <code title="dom-media-networkState">networkState</code> attribute
   is less than <code
   title="dom-media-LOADED_FIRST_FRAME">LOADED_FIRST_FRAME</code>
   are always in the <code
   title="dom-media-DATA_UNAVAILABLE">DATA_UNAVAILABLE</code>
   state.</dd>

   <dt><dfn title="dom-media-CAN_SHOW_CURRENT_FRAME"><code>CAN_SHOW_CURRENT_FRAME</code></dfn> (numeric value 1)</dt>

   <dd>Data for the immediate <span>current playback position</span>
   is available, but not enough data is available that the user agent
   could successfully advance the <span>current playback
   position</span> at all without immediately reverting to the <code
   title="dom-media-DATA_UNAVAILABLE">DATA_UNAVAILABLE</code> state. In video,
   this corresponds to the user agent having data from the current
   frame, but not the next frame. In audio, this corresponds to the
   user agent only having audio up to the <span>current playback
   position</span>, but no further.</dd>

   <dt><dfn title="dom-media-CAN_PLAY"><code>CAN_PLAY</code></dfn> (numeric value 2)</dt>

   <dd>Data for the immediate <span>current playback position</span>
   is available, as well as enough data for the user agent to advance
   the <span>current playback position</span> at least a little
   without immediately reverting to the <code
   title="dom-media-DATA_UNAVAILABLE">DATA_UNAVAILABLE</code> state. In video,
   this corresponds to the user agent having data for the current
   frame and the next frame. In audio, this corresponds ot the user
   agent having data beyond the <span>current playback
   position</span>.</dd>

   <dt><dfn title="dom-media-CAN_PLAY_THROUGH"><code>CAN_PLAY_THROUGH</code></dfn> (numeric value 3)</dt>

   <dd>Data for the immediate <span>current playback position</span>
   is available, as well as enough data for the user agent to advance
   the <span>current playback position</span> at least a little
   without immediately reverting to the <code
   title="dom-media-DATA_UNAVAILABLE">DATA_UNAVAILABLE</code> state,
   and, in addition, the user agent estimates that data is being
   downloaded at a rate where the <span>current playback
   position</span>, if it were to advance at the rate given by the
   <code
   title="dom-media-defaultPlaybackRate">defaultPlaybackRate</code>
   attribute, would not overtake the available data before playback
   reaches the <span>effective end</span> of the <span>media
   resource</span> on the last <span
   title="dom-media-playCount">loop</span>.</dd>

  </dl>

  <p>When the ready state of a <span>media element</span> whose <code
  title="dom-media-networkState">networkState</code> is not <code
  title="dom-media-EMPTY">EMPTY</code> changes, the user agent must
  follow the steps given below:</p>

  <dl class="switch">

   <dt>If the new ready state is <code
   title="dom-media-DATA_UNAVAILABLE">DATA_UNAVAILABLE</code></dt>

   <dd><p>The user agent must <span>fire a simple event</span> called
   <code title="event-dataunavailable">dataunavailable</code> at the
   element.</p></dd>

   <dt>If the new ready state is <code
   title="dom-media-CAN_SHOW_CURRENT_FRAME">CAN_SHOW_CURRENT_FRAME</code></dt>

   <dd>

    <p>If the element's <span>loaded-first-frame flag</span> is true,
    the user agent must <span>fire a simple event</span> called <code
    title="event-canshowcurrentframe">canshowcurrentframe</code>
    event.</p>

    <p class="note">The first time the <code
    title="dom-media-networkState">networkState</code> attribute
    switches to this value, the <span>loaded-first-frame flag</span>
    is false, and the event is fired <a
    href="#handling-first-frame-available">by the algorithm described
    above</a> for the <code title="dom-media-load">load()</code>
    method, in conjunction with other steps.</p>

   </dd>

   <dt>If the new ready state is <code
   title="dom-media-CAN_PLAY">CAN_PLAY</code></dt>

   <dd><p>The user agent must <span>fire a simple event</span> called
   <code title="event-canplay">canplay</code>.</p></dd>

   <dt>If the new ready state is <code
   title="dom-media-CAN_PLAY_THROUGH">CAN_PLAY_THROUGH</code></dt>

   <dd><p>The user agent must <span>fire a simple event</span> called
   <code title="event-canplaythrough">canplaythrough</code> event. If
   the <span>autoplaying flag</span> is true, and the <code
   title="dom-media-paused">paused</code> attribute is true, and the
   <span>media element</span> has an <code
   title="attr-media-autoplay">autoplay</code> attribute specified,
   then the user agent must also set the <code
   title="dom-media-paused">paused</code> attribute to false and
   <span>fire a simple event</span> called <code
   title="event-play">play</code>.</p></dd>

  </dl>

  <p class="note">It is possible for the ready state of a media
  element to jump between these states discontinuously. For example,
  the state of a media element whose <span>leaded-first-frame
  flag</span> is false can jump straight from <code
  title="dom-media-DATA_UNAVAILABLE">DATA_UNAVAILABLE</code> to <code
  title="dom-media-CAN_PLAY_THROUGH">CAN_PLAY_THROUGH</code> without
  passing through the <code
  title="dom-media-CAN_SHOW_CURRENT_FRAME">CAN_SHOW_CURRENT_FRAME</code>
  and <code title="dom-media-CAN_PLAY">CAN_PLAY</code> states, and
  thus without firing the <code
  title="event-canshowcurrentframe">canshowcurrentframe</code> and
  <code title="event-canplay">canplay</code> events. The only state
  that is guarenteed to be reached is the <code
  title="dom-media-CAN_SHOW_CURRENT_FRAME">CAN_SHOW_CURRENT_FRAME</code>
  state, which is reached as part of the <code
  title="dom-media-load">load()</code> method's processing.</p>

  <p>The <dfn
  title="dom-media-readyState"><code>readyState</code></dfn> DOM
  attribute must, on getting, return the value described above that
  describes the current ready state of the <span>media
  element</span>.</p>

  <p>The <dfn title="attr-media-autoplay"><code>autoplay</code></dfn>
  attribute is a <span>boolean attribute</span>. When present, the
  algorithm described herein will cause the user agent to
  automatically begin playback of the <span>media resource</span> as
  soon as it can do so without stopping.</p>

  <p>The <dfn title="dom-media-autoplay"><code>autoplay</code></dfn>
  DOM attribute must <span>reflect</span> the content attribute of the
  same name.</p>





  <h5>Playing the media resource</h5>

  <p>The <dfn title="dom-media-paused"><code>paused</code></dfn>
  attribute represents whether the <span>media element</span> is
  paused or not. The attribute must initially be true.</p>

  <p>A <span>media element</span> is said to be <dfn>actively
  playing</dfn> when its <code title="dom-media-paused">paused</code>
  attribute is false, the <code
  title="dom-media-readyState">readyState</code> attribute is either
  <code title="dom-media-CAN_PLAY">CAN_PLAY</code> or <code
  title="dom-media-CAN_PLAY_THROUGH">CAN_PLAY_THROUGH</code>, the
  element has not <span>ended playback</span>, playback has not
  <span>stopped due to errors</span>, and the element has not
  <span>paused for user interaction</span>.</p>

  <p>A <span>media element</span> is said to have <dfn>ended
  playback</dfn> when the element's <code
  title="dom-media-networkState">networkState</code> attribute is
  <code title="dom-media-LOADED_METADATA">LOADED_METADATA</code> or
  greater, the <span>current playback position</span> is equal to the
  <var>effective end</var> of the <span>media resource</span>, and the
  <code title="dom-media-currentLoop">currentLoop</code> attribute is
  equal to <span><code
  title="dom-media-playCount">playCount</code>-1</span>.</p>

  <p>A <span>media element</span> is said to have <dfn>stopped due to
  errors</dfn> when the element's <code
  title="dom-media-networkState">networkState</code> attribute is
  <code title="dom-media-LOADED_METADATA">LOADED_METADATA</code> or
  greater, and the user agent <a
  href="#non-fatal-media-error">encounters a non-fatal error</a>
  during the processing of the <span>media data</span>, and due to
  that error, is not able to play the content at the <span>current
  playback position</span>.</p>

  <p>A <span>media element</span> is said to have <dfn>paused for user
  interaction</dfn> when its <code
  title="dom-media-paused">paused</code> attribute is false, the <code
  title="dom-media-readyState">readyState</code> attribute is either
  <code title="dom-media-CAN_PLAY">CAN_PLAY</code> or <code
  title="dom-media-CAN_PLAY_THROUGH">CAN_PLAY_THROUGH</code> and the
  user agent has reached a point in the <span>media resource</span>
  where the user has to make a selection for the resource to
  continue.</p>

  <p>It is possible for a <span>media element</span> to have both
  <span>ended playback</span> and <span>paused for user
  interaction</span> at the same time.</p>

  <p id="media-playback">When a <span>media element</span> is
  <span>actively playing</span> and its <span
  title="dom-ownerDocument">owner <code>Document</code></span><!-- XXX
  xref --> is an <span>active document</span>, its <span>current
  playback position</span> must increase monotonically at <code
  title="dom-media-playbackRate">playbackRate</code> units of media
  time per unit time of wall clock time. If this value is not 1, the
  user agent may apply pitch adjustments to any audio component of the
  <span>media resource</span>.</p>

  <p><span title="media resource">Media resources</span> might be
  internally scripted or interactive. Thus, a <span>media
  element</span> could play in a non-linear fashion. If this happens,
  the user agent must act as if the algorithm for <span
  title="dom-media-seek">seeking</span> was used whenever the
  <span>current playback position</span> changes in a discontinuous
  fashion (so that the relevant events fire).</p>

  <p>When a <span>media element</span> that is <span>actively
  playing</span> stops playing because its <code
  title="dom-media-readyState">readyState</code> attribute changes to
  a value lower than <code title="dom-media-CAN_PLAY">CAN_PLAY</code>,
  without the element having <span>ended playback</span>, or playback
  having <span>stopped due to errors</span>, or playback having
  <span>paused for user interaction</span>, the user agent must
  <span>fire a simple event</span> called <code
  title="event-timeupdate">timeupdate</code> at the element, and then
  must <span>fire a simple event</span> called <code
  title="event-waiting">waiting</code> at the element.</p>

  <p>When a <span>media element</span> that is <span>actively
  playing</span> stops playing because it has <span>paused for user
  interaction</span>, the user agent must <span>fire a simple
  event</span> called <code title="event-timeupdate">timeupdate</code>
  at the element.</p>

  <p>When <code title="dom-media-currentLoop">currentLoop</code> is
  less than <span><code
  title="dom-media-playCount">playCount</code>-1</span> and the
  <span>current playback position</span> reaches the <var>effective
  loop end</var>, then the user agent must <span
  title="dom-media-seek">seek</span> to the <var>effective loop
  start</var>, increase <code
  title="dom-media-currentLoop">currentLoop</code> by 1, and
  <span>fire a simple event</span> called <code
  title="event-timeupdate">timeupdate</code>.</p>

  <p>When <code title="dom-media-currentLoop">currentLoop</code> is
  equal to the <span><code
  title="dom-media-playCount">playCount</code>-1</span> and the
  <span>current playback position</span> reaches the <var>effective
  end</var>, then the user agent must follow these steps:</p>

  <ol>

   <li><p>The user agent must stop playback.</p></li>

   <li><p class="note">The <code title="dom-media-ended">ended</code>
   attribute becomes true.</p></li>

   <li><p>The user agent must <span>fire a simple event</span> called
   <code title="event-timeupdate">timeupdate</code> at the
   element.</p></li>

   <li><p>The user agent must <span>fire a simple event</span> called
   <code title="event-ended">ended</code> at the element.</p></li>

  </ol>

  <p>The <dfn
  title="dom-media-defaultPlaybackRate"><code>defaultPlaybackRate</code></dfn>
  attribute gives the desired speed at which the <span>media
  resource</span> is to play, as a multiple of its intrinsic
  speed. The attribute is mutable, but on setting, if the new value is
  0.0, a <code>NOT_SUPPORTED_ERR</code> exception must be raised
  instead of the value being changed. It must initially have the value
  1.0.</p>

  <p>The <dfn
  title="dom-media-playbackRate"><code>playbackRate</code></dfn>
  attribute gives the speed at which the <span>media resource</span>
  plays, as a multiple of its intrinsic speed. If it is not equal to
  the <code
  title="dom-media-defaultPlaybackRate">defaultPlaybackRate</code>,
  then the implication is that the user is using a feature such as
  fast forward or slow motion playback. The attribute is mutable, but
  on setting, if the new value is 0.0, a
  <code>NOT_SUPPORTED_ERR</code> exception must be raised instead of
  the value being changed. Otherwise, the playback must change speed
  (if the element is <span>actively playing</span>). It must initially
  have the value 1.0.</p>

  <p>When the <code
  title="dom-media-defaultPlaybackRate">defaultPlaybackRate</code> or
  <code title="dom-media-playbackRate">playbackRate</code> attributes
  change value (either by being set by script or by being changed
  directly by the user agent, e.g. in response to user control) the
  user agent must, once any running scripts have finished, <span>fire
  a simple event</span> called <code
  title="event-ratechange">ratechange</code> at the <span>media
  element</span>.</p>




  <p>When the <dfn title="dom-media-play"><code>play()</code></dfn>
  method on a <span>media element</span> is invoked, the user agent
  must run the following steps.</p>

  <ol>

   <li><p>If the <span>media element</span>'s <code
   title="dom-media-networkState">networkState</code> attribute has
   the value <span title="dom-media-EMPTY">EMPTY</span>, then the user
   agent must invoke the <code title="dom-media-load">load()</code>
   method and wait for it to return. If that raises an exception, that
   exception must be reraised by the <code
   title="dom-media-play">play()</code> method.</p></li>

   <li><p>If the <span title="ended playback">playback has
   ended</span>, then the user agent must set <code
   title="dom-media-currentLoop">currentLoop</code> to zero and <span
   title="dom-media-seek">seek</span> to the <var>effective
   start</var>.</p>

   <li><p>The <code title="dom-media-playbackRate">playbackRate</code>
   attribute must be set to the value of the <code
   title="dom-media-defaultPlaybackRate">defaultPlaybackRate</code>
   attribute.</p></li>

   <li><p>If the <span>media element</span>'s <code
   title="dom-media-paused">paused</code> attribute is true, it must
   be set to false.</p></li>

   <li><p>The <span>media element</span>'s <span>autoplaying
   flag</span> must be set to false.</p></li>

   <li><p>The method must then return.</p></li>

  </ol>

  <p class="note">If the second step above involved a seek, the user
  agent will <span>fire a simple event</span> called <code
  title="event-timeupdate">timeupdate</code> at the <span>media
  element</span>.</p>

  <p class="note">If the third step above caused the <code
  title="dom-media-playbackRate">playbackRate</code> attribute to
  change value, the user agent will <span>fire a simple event</span>
  called <code title="event-ratechange">ratechange</code> at the
  <span>media element</span>.</p>

  <p class="note">If the fourth step above changed the value of <code
  title="dom-media-paused">paused</code>, the user agent must
  <span>fire a simple event</span> called <code
  title="event-play">play</code> at the <span>media
  element</span>.</p>



  <p>When the <dfn title="dom-media-pause"><code>pause()</code></dfn>
  method is invoked, the user agent must run the following steps:</p>

  <ol>

   <li><p>If the <span>media element</span>'s <code
   title="dom-media-networkState">networkState</code> attribute has
   the value <span title="dom-media-EMPTY">EMPTY</span>, then the user
   agent must invoke the <code title="dom-media-load">load()</code>
   method and wait for it to return. If that raises an exception, that
   exception must be reraised by the <code
   title="dom-media-play">pause()</code> method.</p></li>

   <li><p>If the <span>media element</span>'s <code
   title="dom-media-paused">paused</code> attribute is false, it must
   be set to true.</p></li>

   <li><p>The <span>media element</span>'s <span>autoplaying
   flag</span> must be set to false.</p></li>

   <li><p>The method must then return.</p></li>

   <li><p>If the second step above changed the value of <code
   title="dom-media-paused">paused</code>, the user agent must first
   <span>fire a simple event</span> called <code
   title="event-timeupdate">timeupdate</code> at the element, and then
   <span>fire a simple event</span> called <code
   title="event-pause">pause</code> at the element.</p></li>

  </ol>



  <p>When a <span>media element</span> is <span>removed from a
  <code>Document</code><!-- XXX xref removed --></span>, the user
  agent must act as if the <code
  title="dom-media-pause">pause()</code> method had been invoked.</p>

  <p><span title="media element">Media elements</span> that are
  <span>actively playing</span> while not <span>in a
  <code>Document</code></span><!-- XXX xref --> must not play any
  video, but should play any audio component. Media elements must not
  stop playing just because all references to them have been removed;
  only once a media element to which no references exist has reached a
  point where no further audio remains to be played for that element
  (e.g. because the element is paused or because the end of the clip
  has been reached) may the element be <span>garbage
  collected</span><!-- XXX xref -->.</p>

  <p class="note">If the <span>media element</span>'s <code
  title="dom-ownerDocument">ownerDocument</code> stops being an active
  document, then the playback will <a href="#media-playback">stop</a>
  until the document is active again.</p>


  <p>The <dfn title="dom-media-ended"><code>ended</code></dfn>
  attribute must return true if the <span>media element</span> has
  <span>ended playback</span>, and false otherwise.</p>

  <p>The <dfn title="dom-media-played"><code>played</code></dfn>
  attribute must return a static <span>normalised
  <code>TimeRanges</code> object</span> that represents the ranges of
  the <span>media resource</span>, if any, that the user agent has so
  far rendered, at the time the attribute is evaluated.</p>




  <h5>Seeking</h5>

  <p>The <dfn title="dom-media-seeking"><code>seeking</code></dfn>
  attribute must initially have the value false.</p>

  <p>When the user agent is required to <dfn
  title="dom-media-seek">seek</dfn> to a particular <var title="">new
  playback position</var> in the <span>media resource</span>, it means
  that the user agent must run the following steps:</p>

  <ol>

   <li><p>If the <span>media element</span>'s <code
   title="dom-media-networkState">networkState</code> is less than
   <code title="dom-media-LOADED_METADATA">LOADED_METADATA</code>,
   then the user agent must raise an <code>INVALID_STATE_ERR</code>
   exception (if the seek was in response to a DOM method call or
   setting of a DOM attribute), and abort these steps.</p></li>

   <li><p>If <code title="dom-media-currentLoop">currentLoop</code> is
   0, let <var title="">min</var> be the <var>effective
   start</var>. Otherwise, let it be the <var>effective loop
   start</var>.</p></li>

   <li><p>If <code title="dom-media-currentLoop">currentLoop</code> is
   equal to the value of <code
   title="dom-media-playCount">playCount</code>, let <var
   title="">max</var> be the <var>effective end</var>. Otherwise, let
   it be the <var>effective loop end</var>.</p></li>

   <li><p>If the <var title="">new playback position</var> is more than
   <var title="">max</var>, let it be <var title="">max</var>.</p></li>

   <li><p>If the <var title="">new playback position</var> is less than
   <var title="">min</var>, let it be <var title="">min</var>.</p></li>

   <li><p>If the (possibly now changed) <var title="">new playback
   position</var> is not in one of the ranges given in the <code
   title="dom-media-seekable">seekable</code> attribute, then the user
   agent must raise an <code>INDEX_SIZE_ERR</code> exception (if the
   seek was in response to a DOM method call or setting of a DOM
   attribute), and abort these steps.</p></li>

   <li><p>The <span>current playback position</span> must be set to
   the given <var title="">new playback position</var>.</p></li>

   <li><p>The <code title="dom-media-seeking">seeking</code> DOM
   attribute must be set to true.</p></li>

   <li><p>The user agent must <span>fire a simple event</span> called
   <code title="event-timeupdate">timeupdate</code> at the
   element.</p></li>

   <li><p>As soon as the user agent has established whether or not the
   <span>media data</span> for the <var title="">new playback
   position</var> is available, and, if it is, decoded enough data to
   play back that position, the <code
   title="dom-media-seeking">seeking</code> DOM attribute must be set
   to false.</p></li>

  </ol>

  <p>The <dfn title="dom-media-seekable"><code>seekable</code></dfn>
  attribute must return a static <span>normalised
  <code>TimeRanges</code> object</span> that represents the ranges of
  the <span>media resource</span>, if any, that the user agent is able
  to seek to, at the time the attribute is evaluated, notwithstanding
  the looping attributes (i.e. the <var>effective start</var> and
  <var>effective end</var>, etc, don't affect the <code
  title="dom-media-seekable">seeking</code> attribute).</p>

  <p class="note">If the user agent can seek to anywhere in the
  <span>media resource</span>, e.g. because it a simple movie file and
  the user agent and the server support HTTP Range requests, then the
  attribute would return an object with one range, whose start is the
  time of the first frame (typically zero), and whose end is the same
  as the time of the first frame plus the <code
  title="dom-media-duration">duration</code> attribute's value (which
  would equal the time of the last frame).</p>



  <h5>Cue ranges</h5>

  <p><span title="media element">Media elements</span> have a set of
  <dfn title="cue range">cue ranges</dfn>. Each cue range is made up
  of the following information:</p>

  <dl>

   <dt>A class name</dt>
   <dd>A group of related ranges can be given the same class name so
   that they can all be removed at the same time.</dd>

   <dt>A start time</dt>
   <dt>An end time</dt>
   <dd>The actual time range, using the same timeline as the
   <span>media resource</span> itself.</dd>

   <dt>A "pause" boolean</dt>
   <dd>A flag indicating whether to pause playback on exit.</dd>

   <dt>An "enter" callback</dt>
   <dd>A callback that is called when the <span>current playback
   position</span> enters the range.</dd>

   <dt>An "exit" callback</dt>
   <dd>A callback that is called when the <span>current playback
   position</span> exits the range.</dd>

   <dt>An "active" boolean</dt>
   <dd>A flag indicating whether the range is active or not.</dd>

  </dl>

  <p>The <dfn title="dom-media-addCueRange"><code>addCueRange(<var
  title="">className</var>, <var title="">start</var>, <var
  title="">end</var>, <var title="">pauseOnExit</var>, <var
  title="">enterCallback</var>, <var
  title="">exitCallback</var>)</code></dfn> method must, when called,
  add a <span>cue range</span> to the <span>media element</span>, that
  cue range having the class name <var title="">className</var>, the
  start time <var title="">start</var> (in seconds), the end time <var
  title="">end</var> (in seconds), the "pause" boolean with the same
  value as <var title="">pauseOnExit</var>, the "enter" callback <var
  title="">enterCallback</var>, the "exit" callback <var
  title="">exitCallback</var>, and an "active" boolean that is true if
  the <span>current playback position</span> is equal to or greater
  than the start time and less than the end time, and false
  otherwise.</p>

  <p>The <dfn
  title="dom-media-removeCueRanges"><code>removeCueRanges(<var
  title="">className</var>)</code></dfn> method must, when called,
  remove all the <span title="cue range">cue ranges</span> of the
  <span>media element</span> which have the class name <var
  title="">className</var>.</p>

  <p>When the <span>current playback position</span> of a <span>media
  element</span> changes (e.g. due to playback or seeking), the user
  agent must run the following steps. If the <span>current playback
  position</span> changes while the steps are running, then the user
  agent must wait for the steps to complete, and then must immediately
  rerun the steps. (These steps are thus run as often as possible or
  needed &mdash; if one iteration takes a long time, this can cause
  certain ranges to be skipped over as the user agent rushes ahead to
  "catch up".)</p>

  <ol>

   <li><p>Let <var title="">current ranges</var> be an ordered list of
   <span title="cue range">cue ranges</span>, initialised to contain
   all the <span title="cue range">cue ranges</span> of the
   <span>media element</span> whose start times are less than or equal
   to the <span>current playback position</span> and whose end times
   are greater than the <span>current playback position</span>, in the
   order they were added to the element.</p></li>

   <li><p>Let <var title="">other ranges</var> be an ordered list of
   <span title="cue range">cue ranges</span>, initialised to contain
   all the <span title="cue range">cue ranges</span> of the
   <span>media element</span> that are not present in <var
   title="">current ranges</var>, in the order they were added to the
   element.</p></li>

   <li><p>If none of the <span title="cue range">cue ranges</span> in
   <var title="">current ranges</var> have their "active" boolean set
   to "false" (inactive) and none of the <span title="cue range">cue
   ranges</span> in <var title="">other ranges</var> have their
   "active" boolean set to "true" (active), then abort these
   steps.</p></li>

   <li><p>If the time was reached through the usual monotonic increase
   of the current playback position during normal playback, the
   user agent must then <span>fire a simple event</span> called <code
   title="event-timeupdate">timeupdate</code> at the element. (In the
   other cases, such as explicit seeks, relevant events get fired as
   part of the overall process of changing the current playback
   position.)</p></li>

   <li><p>If the time was reached through the usual monotonic increase
   of the current playback position during normal playback, and there
   are <span title="cue range">cue ranges</span> in <var
   title="">other ranges</var> that have both their "active" boolean
   and their "pause" boolean set to "true", then immediately act as if
   the element's <code title="dom-media-pause">pause()</code> method
   had been invoked.  (In the other cases, such as explicit seeks,
   playback is not paused by exiting a cue range, even if that cue
   range has its "pause" boolean set to "true".)</p></li>

   <li><p>Invoke all the non-null "exit" callbacks for all of the
   <span title="cue range">cue ranges</span> in <var title="">other
   ranges</var> that have their "active" boolean set to "true"
   (active), in list order.</p></li>
   <!-- XXX queue -->

   <li><p>Invoke all the non-null "enter" callbacks for all of the
   <span title="cue range">cue ranges</span> in <var title="">current
   ranges</var> that have their "active" boolean set to "false"
   (inactive), in list order.</p></li>
   <!-- XXX queue -->

   <li><p>Set the "active" boolean of all the <span title="cue
   range">cue ranges</span> in the <var title="">current ranges</var>
   list to "true" (active), and the "active" boolean of all the <span
   title="cue range">cue ranges</span> in the <var title="">other
   ranges</var> list to "false" (inactive).</p></li>

  </ol>


  <!-- XXX the remainder of this subsection will be removed once we
  have a way to mark up callbacks in IDL -->

  <p>Invoking a callback (an object implementing the
  <code>VoidCallback</code> interface) means calling its <code
  title="dom-VoidCallback-handleEvent">handleEvent()</code>
  method.</p>

  <pre class="idl">interface <dfn>VoidCallback</dfn> {
  void <span title="dom-voidCallback-handleEvent">handleEvent</span>();
};</pre>

  <p>The <dfn
  title="dom-voidCallback-handleEvent"><code>handleEvent</code></dfn>
  method of objects implementing the <code>VoidCallback</code>
  interface is the entrypoint for the callback represented by the
  object.</p>

  <p>In the ECMAScript DOM binding, the ECMAScript native
  <code>Function</code> type must implement the
  <code>VoidCallback</code> interface such that invoking the
  <code>handleEvent()</code> method of that interface on the object
  from another language binding invokes the function itself. In the
  ECMAScript binding itself, however, the <code>handleEvent()</code>
  method of the interface is not directly accessible on
  <code>Function</code> objects. Such functions, when invoked, must be
  called at the scope of the <span>browsing context</span>.</p> <!--
  XXX if you change this make sure to also look up the other mentions
  of handleEvent() in this file -->


  <h5>User interface</h5>

  <p>The <dfn title="attr-media-controls"><code>controls</code></dfn>
  attribute is a <span>boolean attribute</span>. If the attribute is
  present, or if <span>scripting is disabled</span>, then the user
  agent should <dfn>expose a user interface to the user</dfn>. This
  user interface should include features to begin playback, pause
  playback, seek to an arbitrary position in the content (if the
  content supports arbitrary seeking), change the volume, and show the
  media content in manners more suitable to the user (e.g. full-screen
  video or in an independent resizable window). Other controls may
  also be made available.</p>

  <p>If the attribute is absent, then the user agent should avoid
  making a user interface available that could conflict with an
  author-provided user interface. User agents may make the following
  features available, however, even when the attribute is absent:</p>

  <p>User agents may provide controls to affect playback of the media
  resource (e.g. play, pause, seeking, and volume controls), but such
  features should not interfere with the page's normal rendering. For
  example, such features could be exposed in the <span>media
  element</span>'s context menu.</p>

  <p>Where possible (specifically, for starting, stopping, pausing,
  and unpausing playback, for muting or changing the volume of the
  audio, and for seeking), user interface features exposed by the user
  agent must be implemented in terms of the DOM API described above,
  so that, e.g., all the same events fire.</p>

  <p>The <dfn title="dom-media-controls"><code>controls</code></dfn>
  DOM attribute must <span>reflect</span> the content attribute of the
  same name.</p>

  <p>The <dfn title="dom-media-volume"><code>volume</code></dfn>
  attribute must return the playback volume of any audio portions of
  the <span>media element</span>, in the range 0.0 (silent) to 1.0
  (loudest). Initially, the volume must be 0.5, but user agents may
  remember the last set value across sessions, on a per-site basis or
  otherwise, so the volume may start at other values. On setting, if
  the new value is in the range 0.0 to 1.0 inclusive, the attribute
  must be set to the new value and the playback volume must be
  correspondingly adjusted as soon as possible after setting the
  attribute, with 0.0 being silent, and 1.0 being the loudest setting,
  values in between increasing in loudness. The range need not be
  linear. The loudest setting may be lower than the system's loudest
  possible setting; for example the user could have set a maximum
  volume. If the new value is outside the range 0.0 to 1.0 inclusive,
  then, on setting, an <code>INDEX_SIZE_ERR</code> exception must be
  raised instead.</p>

  <p>The <dfn title="dom-media-muted"><code>muted</code></dfn>
  attribute must return true if the audio channels are muted and false
  otherwise. On setting, the attribute must be set to the new value;
  if the new value is true, audio playback for this <span>media resource</span>
  must then be muted, and if false, audio playback must then be
  enabled.</p>

  <p>Whenever either the <code title="dom-media-muted">muted</code> or
  <code title="dom-media-volume">volume</code> attributes are changed,
  after any running scripts have finished executing, the user agent
  must <span>fire a simple event</span> called <code
  title="event-volumechange">volumechange</code> at the <span>media
  element</span>.</p>



  <h5>Time range</h5>

  <p>Objects implementing the <code>TimeRanges</code> interface
  represent a list of ranges (periods) of time.</p>

  <pre class="idl">interface <dfn>TimeRanges</dfn> {
  readonly attribute unsigned long <span title="dom-TimeRanges-length">length</span>;
  float <span title="dom-TimeRanges-start">start</span>(in unsigned long index);
  float <span title="dom-TimeRanges-end">end</span>(in unsigned long index);
};</pre>

  <p>The <dfn title="dom-TimeRanges-length"><code>length</code></dfn>
  DOM attribute must return the number of ranges represented by the object.</p>

  <p>The <dfn title="dom-TimeRanges-start"><code>start(<var
  title="">index</var>)</code></dfn> method must return the position
  of the start of the <var title="">index</var>th range represented by
  the object, in seconds measured from the start of the timeline that
  the object covers.</p>

  <p>The <dfn title="dom-TimeRanges-end"><code>end(<var
  title="">index</var>)</code></dfn> method must return the position
  of the end of the <var title="">index</var>th range represented by
  the object, in seconds measured from the start of the timeline that
  the object covers.</p>

  <p>These methods must raise <code>INDEX_SIZE_ERR</code> exceptions
  if called with an <var title="">index</var> argument greater than or
  equal to the number of ranges represented by the object.</p>

  <p>When a <code>TimeRanges</code> object is said to be a
  <dfn>normalised <code>TimeRanges</code> object</dfn>, the ranges it
  represents must obey the following criteria:</p>

  <ul>

   <li>The start of a range must be greater than the end of all
   earlier ranges.</li>

   <li>The start of a range must be less than the end of that same
   range.</li>

  </ul>

  <p>In other words, the ranges in such an object are ordered, don't
  overlap, and don't touch (adjacent ranges are folded into one bigger
  range).</p>

  <p>The timelines used by the objects returned by the <code
  title="dom-media-buffered">buffered</code>, <code
  title="dom-media-seekable">seekable</code> and <code
  title="dom-media-played">played</code> DOM attributes of <span
  title="media element">media elements</span> must be the same as that
  element's <span>media resource</span>'s timeline.</p>



  <h5 id="mediaevents">Event summary</h5>

  <p>The following events fire on <span title="media element">media
  elements</span> as part of the processing model described above:</p>

  <table>
   <thead>
    <tr>
     <th>Event name
     <th>Interface
     <th>Dispatched when...
     <th>Preconditions

   <tbody>
    <tr>
     <td><dfn title="event-begin"><code>begin</code></dfn>
     <td><code>ProgressEvent</code> <a href="#refsPROGRESS">[PROGRESS]</a>
     <td>The user agent begins fetching the <span>media data</span>, synchronously during the <code title="dom-media-load">load()</code> method call.
     <td><code title="dom-media-networkState">networkState</code> equals <code title="dom-media-LOADING">LOADING</code>
    <tr>
     <td><dfn title="event-progress"><code>progress</code></dfn>
     <td><code>ProgressEvent</code> <a href="#refsPROGRESS">[PROGRESS]</a>
     <td>The user agent is fetching <span>media data</span>.
     <td><code title="dom-media-networkState">networkState</code> is more than <code title="dom-media-EMPTY">EMPTY</code> and less than <code title="dom-media-LOADED">LOADED</code>
    <tr>
     <td><dfn title="event-loadedmetadata"><code>loadedmetadata</code></dfn>
     <td><code>Event</code>
     <td>The user agent is fetching <span>media data</span>, and the <span>media resource</span>'s metadata has just been received.
     <td><code title="dom-media-networkState">networkState</code> equals <code title="dom-media-LOADED_METADATA">LOADED_METADATA</code>
    <tr>
     <td><dfn title="event-loadedfirstframe"><code>loadedfirstframe</code></dfn>
     <td><code>Event</code>
     <td>The user agent is fetching <span>media data</span>, and the <span>media resource</span>'s first frame has just been received.
     <td><code title="dom-media-networkState">networkState</code> equals <code title="dom-media-LOADED_FIRST_FRAME">LOADED_FIRST_FRAME</code>
    <tr>
     <td><dfn title="event-load"><code>load</code></dfn>
     <td><code>ProgressEvent</code> <a href="#refsPROGRESS">[PROGRESS]</a>
     <td>The user agent finishes downloading the entire <span>media resource</span>.
     <td><code title="dom-media-networkState">networkState</code> equals <code title="dom-media-LOADED">LOADED</code>
    <tr>
     <td><dfn title="event-abort"><code>abort</code></dfn>
     <td><code>ProgressEvent</code> <a href="#refsPROGRESS">[PROGRESS]</a>
     <td>The user agent stops fetching the <span>media data</span> before it is completely downloaded. This can be fired synchronously during the <code title="dom-media-load">load()</code> method call.
     <td><code title="dom-media-error">error</code> is an object with the code <code title="dom-MediaError-MEDIA_ERR_ABORTED">MEDIA_ERR_ABORTED</code>.
         <code title="dom-media-networkState">networkState</code> equals either <code title="dom-media-EMPTY">EMPTY</code> or <code title="dom-media-LOADED">LOADED</code>, depending on when the download was aborted.
    <tr>
     <td><dfn title="event-error"><code>error</code></dfn>
     <td><code>ProgressEvent</code> <a href="#refsPROGRESS">[PROGRESS]</a>
     <td>An error occurs while fetching the <span>media data</span>.
     <td><code title="dom-media-error">error</code> is an object with the code <code title="dom-MediaError-MEDIA_ERR_NETWORK_ERROR">MEDIA_ERR_NETWORK_ERROR</code> or higher.
         <code title="dom-media-networkState">networkState</code> equals either <code title="dom-media-EMPTY">EMPTY</code> or <code title="dom-media-LOADED">LOADED</code>, depending on when the download was aborted.
    <tr>
     <td><dfn title="event-emptied"><code>emptied</code></dfn>
     <td><code>Event</code>
     <td>A <span>media element</span> whose <code title="dom-media-networkState">networkState</code> was previously not in the <code title="dom-media-EMPTY">EMPTY</code> state has just switched to that state (either because of a fatal error during load that's about to be reported, or because the <code title="dom-media-load">load()</code> method was reinvoked, in which case it is fired synchronously during the <code title="dom-media-load">load()</code> method call).
     <td><code title="dom-media-networkState">networkState</code> is <code title="dom-media-EMPTY">EMPTY</code>; all the DOM attributes are in their initial states.
    <tr>
     <td><dfn title="event-stalled"><code>stalled</code></dfn>
     <td><code>ProgressEvent</code>
     <td>The user agent is trying to fetch <span>media data</span>, but data is unexpectedly not forthcoming.
     <td>
    <tr>
     <td><dfn title="event-play"><code>play</code></dfn>
     <td><code>Event</code>
     <td>Playback has begun. Fired after the <code title="dom-media-play">play</code> method has returned.
     <td><code title="dom-media-paused">paused</code> is newly false.
    <tr>
     <td><dfn title="event-pause"><code>pause</code></dfn>
     <td><code>Event</code>
     <td>Playback has been paused. Fired after the <code title="dom-media-pause">pause</code> method has returned.
     <td><code title="dom-media-paused">paused</code> is newly true.
    <tr>
     <td><dfn title="event-waiting"><code>waiting</code></dfn>
     <td><code>Event</code>
     <td>Playback has stopped because the next frame is not available, but the user agent expects that frame to become available in due course.
     <td><code title="dom-media-readyState">readyState</code> is either <code title="dom-media-DATA_UNAVAILABLE">DATA_UNAVAILABLE</code> or <code title="dom-media-CAN_SHOW_CURRENT_FRAME">CAN_SHOW_CURRENT_FRAME</code>, and <code title="dom-media-paused">paused</code> is false. Either <code title="dom-media-seeking">seeking</code> is true, or the <span>current playback position</span> is not contained in any of the ranges in <code title="dom-media-buffered">buffered</code>. It is possible for playback to stop for two other reasons without <code title="dom-media-paused">paused</code> being false, but those two reasons do not fire this event: maybe <span title="ended playback">playback ended</span>, or playback <span>stopped due to errors</span>.
    <tr>
     <td><dfn title="event-timeupdate"><code>timeupdate</code></dfn>
     <td><code>Event</code>
     <td>The <span>current playback position</span> changed in an interesting way, for example discontinuously.
     <td>
    <tr>
     <td><dfn title="event-ended"><code>ended</code></dfn>
     <td><code>Event</code>
     <td>Playback has stopped because the end of the <span>media resource</span> was reached.
     <td><code title="dom-media-currentTime">currentTime</code> equals the <var>effective end</var>; <code title="dom-media-ended">ended</code> is true.
    <tr>
     <td><dfn title="event-dataunavailable"><code>dataunavailable</code></dfn>
     <td><code>Event</code>
     <td>The user agent cannot render the data at the <span>current playback position</span> because data for the current frame is not immediately available.
     <td>The <code title="dom-media-readyState">readyState</code> attribute is newly equal to <code title="DATA_UNAVAILABLE">DATA_UNAVAILABLE</code>.
    <tr>
     <td><dfn title="event-canshowcurrentframe"><code>canshowcurrentframe</code></dfn>
     <td><code>Event</code>
     <td>The user agent cannot render the data after the <span>current playback position</span> because data for the next frame is not immediately available.
     <td>The <code title="dom-media-readyState">readyState</code> attribute is newly equal to <code title="dom-media-CAN_SHOW_CURRENT_FRAME">CAN_SHOW_CURRENT_FRAME</code>.
    <tr>
     <td><dfn title="event-canplay"><code>canplay</code></dfn>
     <td><code>Event</code>
     <td>The user agent can resume playback of the <span>media data</span>, but estimates that if playback were to be started now, the <span>media resource</span> could not be rendered at the current playback rate up to its end without having to stop for further buffering of content.
     <td>The <code title="dom-media-readyState">readyState</code> attribute is newly equal to <code title="dom-media-CAN_PLAY">CAN_PLAY</code>.
    <tr>
     <td><dfn title="event-canplaythrough"><code>canplaythrough</code></dfn>
     <td><code>Event</code>
     <td>The user agent estimates that if playback were to be started now, the <span>media resource</span> could be rendered at the current playback rate all the way to its end without having to stop for further buffering.
     <td>The <code title="dom-media-readyState">readyState</code> attribute is newly equal to <code title="dom-media-CAN_PLAY_THROUGH">CAN_PLAY_THROUGH</code>.
    <tr>
     <td><dfn title="event-ratehange"><code>ratechange</code></dfn>
     <td><code>Event</code>
     <td>Either the <code title="dom-media-defaultPlaybackRate">defaultPlaybackRate</code> or the <code title="dom-media-playbackRate">playbackRate</code> attribute has just been updated.
     <td>
    <tr>
     <td><dfn title="event-durationchange"><code>durationchange</code></dfn>
     <td><code>Event</code>
     <td>The <code title="dom-media-duration">duration</code> attribute has just been updated.
     <td>
    <tr>
     <td><dfn title="event-volumechange"><code>volumechange</code></dfn>
     <td><code>Event</code>
     <td>Either the <code title="dom-media-volume">volume</code> attribute or the <code title="dom-media-muted">muted</code> attribute has changed. Fired after the relevant attribute's setter has returned.
     <td>
  </table>


  <h5>Security and privacy considerations</h5>

  <p class="big-issue">Talk about making sure interactive media files
  (e.g. SVG) don't have access to the container DOM (XSS potential);
  talk about not exposing any sensitive data like metadata from tracks
  in the media files (intranet snooping risk)</p>



  <h4>The <dfn><code>source</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd>None.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>As a child of a <span>media element</span>, before any <span>flow content</span>.</dd>
   <dt>Content model:</dt>
   <dd>Empty.</dd>
   <dt>Element-specific attributes:</dt>
   <dd><code title="attr-source-src">src</code></dd>
   <dd><code title="attr-source-type">type</code></dd>
   <dd><code title="attr-source-media">media</code></dd>
   <dt>DOM interface:</dt>
   <dd>
<pre class="idl">interface <dfn>HTMLSourceElement</dfn> : <span>HTMLElement</span> {
           attribute DOMString <span title="dom-source-src">src</span>;
           attribute DOMString <span title="dom-source-type">type</span>;
           attribute DOMString <span title="dom-source-media">media</span>;
};</pre>
   </dd>
  </dl>

  <p>The <code>source</code> element allows authors to specify
  multiple <span title="media resource">media resources</span> for
  <span title="media element">media elements</span>.</p>

  <p>The <dfn title="attr-source-src"><code>src</code></dfn> attribute
  gives the address of the <span>media resource</span>. The value must
  be a URI (or IRI). This attribute must be present.</p>

  <p>The <dfn title="attr-source-type"><code>type</code></dfn>
  attribute gives the type of the <span>media resource</span>, to help
  the user agent determine if it can play this <span>media
  resource</span> before downloading it. Its value must be a MIME
  type. The <code title="">codecs</code> parameter may be specified and
  might be necessary to specify exactly how the resource is
  encoded. <a href="#refsRFC2046">[RFC2046]</a> <a
  href="#refsRFC4281">[RFC4281]</a></p>

  <div class="example">

   <p>The following list shows some examples of how to use the <code
   title="">codecs=</code> MIME parameter in the <code
   title="attr-source-type">type</code> attribute.</p>

   <dl>

    <dt>H.264 Simple baseline profile video (main and extended video compatible) level 3 and Low-Complexity AAC audio in MP4 container</dt>
    <dd><pre>&lt;source src="video.mp4" type="video/mp4; codecs=&amp;quot;avc1.42E01E, mp4a.40.2&amp;quot;"></pre></dd>

    <dt>H.264 Extended profile video (baseline-compatible) level 3 and Low-Complexity AAC audio in MP4 container</dt>
    <dd><pre>&lt;source src="video.mp4" type="video/mp4; codecs=&amp;quot;avc1.58A01E, mp4a.40.2&amp;quot;"></pre></dd>

    <dt>H.264 Main profile video level 3 and Low-Complexity AAC audio in MP4 container</dt>
    <dd><pre>&lt;source src="video.mp4" type="video/mp4; codecs=&amp;quot;avc1.4D401E, mp4a.40.2&amp;quot;"></pre></dd>

    <dt>H.264 "High" profile video (incompatible with main, baseline, or extended profiles) level 3 and Low-Complexity AAC audio in MP4 container</dt>
    <dd><pre>&lt;source src="video.mp4" type="video/mp4; codecs=&amp;quot;avc1.64001E, mp4a.40.2&amp;quot;"></pre></dd>


    <dt>MPEG-4 Visual Simple Profile Level 0 video and Low-Complexity AAC audio in MP4 container</dt>
    <dd><pre>&lt;source src="video.mp4" type="video/mp4; codecs=&amp;quot;mp4v.20.8, mp4a.40.2&amp;quot;"></pre></dd>

    <dt>MPEG-4 Advanced Simple Profile Level 0 video and Low-Complexity AAC audio in MP4 container</dt>
    <dd><pre>&lt;source src="video.mp4" type="video/mp4; codecs=&amp;quot;mp4v.20.240, mp4a.40.2&amp;quot;"></pre></dd>

    <dt>MPEG-4 Visual Simple Profile Level 0 video and AMR audio in 3GPP container</dt>
    <dd><pre>&lt;source src="video.3gp" type="video/3gpp; codecs=&amp;quot;mp4v.20.8, samr&amp;quot;"></pre></dd>


    <dt>Theora video and Vorbis audio in Ogg container</dt>
    <dd><pre>&lt;source src="video.ogv" type="video/ogg; codecs=&amp;quot;theora, vorbis&amp;quot;"></pre></dd>

    <dt>Theora video and Speex audio in Ogg container</dt>
    <dd><pre>&lt;source src="video.ogv" type="video/ogg; codecs=&amp;quot;theora, speex&amp;quot;"></pre></dd>

    <dt>Vorbis audio alone in Ogg container</dt>
    <dd><pre>&lt;source src="audio.oga" type="audio/ogg; codecs=vorbis"></pre></dd>
    <!-- you also see .ogg but .oga is preferred -->

    <dt>Speex audio alone in Ogg container</dt>
    <dd><pre>&lt;source src="audio.oga" type="audio/ogg; codecs=speex"></pre></dd>
    <!-- you also see .spx but .oga is preferred -->

    <dt>Flac audio alone in Ogg container</dt>
    <dd><pre>&lt;source src="audio.oga" type="audio/ogg; codecs=flac"></pre></dd>

    <dt>Dirac video and Vorbis audio in Ogg container</dt>
    <dd><pre>&lt;source src="video.ogv" type="video/ogg; codecs=&amp;quot;dirac, vorbis&amp;quot;"></pre></dd>

    <dt>Theora video and Vorbis audio in Matroska container</dt>
    <dd><pre>&lt;source src="video.mkv" type="video/x-matroska; codecs=&amp;quot;theora, vorbis&amp;quot;"></pre></dd>

<!-- awaiting definition by the Ogg or BBC guys:
    <dt>Dirac video and Vorbis audio in Matroska container</dt>
    <dd><pre>&lt;source src="video.mkv" type="video/x-matroska; codecs="></pre></dd>
-->


<!-- awaiting definition by the Microsoft guys:

    <dt>WMV9 video and WMA 2 audio in ASF container</dt>
    <dd><pre>&lt;source src="video.wmv" type="video/x-ms-wmv; codecs="></pre></dd>

    <dt>WMV8 video and WMA 2 audio in ASF container</dt>
    <dd><pre>&lt;source src="video.wmv" type="video/x-ms-wmv; codecs="></pre></dd>

    <dt>VC-1 video and WMA 10 Pro audio in ASF container</dt>
    <dd><pre>&lt;source src="video.wmv" type="video/x-ms-wmv; codecs="></pre></dd>

    <dt>XviD video and MP3 audio in AVI container</dt>
    <dd><pre>&lt;source src="video.avi" type="video/x-msvideo; codecs="></pre></dd>

    <dt>Motion-JPEG video and uncompressed PCM audio in AVI container</dt>
    <dd><pre>&lt;source src="video.avi" type="video/x-msvideo; codecs="></pre></dd>

-->


<!-- awaiting definition by Real:
    <dt>Real Video 10 video and High-Efficiency AAC audio in Real Media container</dt>
    <dd><pre>&lt;source src="video.rm" type="application/vnd.rn-realmedia; codecs="></pre></dd>
-->


<!--  undefined:
    <dt>MPEG-1 video and MPEG-1 Audio Layer II audio in MPEG-1 program stream</dt>
    <dd><pre>&lt;source src="video.mpg" type="video/mpeg; codecs="></pre></dd>
-->

   </dl>

   <!-- XXX #refs https://trac.xiph.org/browser/experimental/ivo/drafts/draft-xiph-rfc3534bis.txt may be relevant -->

  </div>

  <p>The <dfn title="attr-source-media"><code>media</code></dfn>
  attribute gives the intended media type of the <span>media
  resource</span>, to help the user agent determine if this
  <span>media resource</span> is useful to the user before downloading
  it. Its value must be a valid media query. <a
  href="#refsMQ">[MQ]</a></p>

  <p>Either the <code title="attr-source-type">type</code> attribute,
  the <code title="attr-source-media">media</code> attribute or both,
  must be specified, unless this is the last <code>source</code>
  element child of the parent element.</p>

  <p>If a <code>source</code> element is inserted into a <span>media
  element</span> that is already in a document and whose <code
  title="dom-media-networkState">networkState</code> is in the <code
  title="dom-media-EMPTY">EMPTY</code> state, the user agent must
  implicitly invoke the <code title="dom-media-load">load()</code>
  method on the <span>media element</span> as soon as all other
  scripts have finished executing. Any exceptions raised must be
  ignored.</p>

  <p>The DOM attributes <dfn
  title="dom-source-src"><code>src</code></dfn>, <dfn
  title="dom-source-type"><code>type</code></dfn>, and <dfn
  title="dom-source-media"><code>media</code></dfn> must
  <span>reflect</span> the respective content attributes of the same
  name.</p>



  <h4>The <dfn id="canvas"><code>canvas</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Embedded content</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>embedded content</span> is expected.</dd>
   <dt>Content model:</dt>
   <dd><span>Transparent</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd><code title="attr-canvas-width">width</code></dd>
   <dd><code title="attr-canvas-height">height</code></dd>
   <dt>DOM interface:</dt>
   <dd>
    <pre class="idl">interface <dfn>HTMLCanvasElement</dfn> : <span>HTMLElement</span> {
           attribute unsigned long <span title="dom-canvas-width">width</span>;
           attribute unsigned long <span title="dom-canvas-height">height</span>;

  DOMString <span title="dom-canvas-toDataURL">toDataURL</span>();
  DOMString <span title="dom-canvas-toDataURL-type">toDataURL</span>(in DOMString type);

  DOMObject <span title="dom-canvas-getContext">getContext</span>(in DOMString contextId);
};</pre>
   </dd>
  </dl>

  <p>The <code>canvas</code> element represents a resolution-dependent
  bitmap canvas, which can be used for rendering graphs, game
  graphics, or other visual images on the fly.</p>

  <p>Authors should not use the <code>canvas</code> element in a
  document when a more suitable element is available. For example, it
  is inappropriate to use a <code>canvas</code> element to render a
  page heading: if the desired presentation of the heading is
  graphically intense, it should be marked up using appropriate
  elements (typically <code>h1</code>) and then styled using CSS and
  supporting technologies such as XBL.</p>

  <p>When authors use the <code>canvas</code> element, they should
  also provide content that, when presented to the user, conveys
  essentially the same function or purpose as the bitmap canvas. This
  content may be placed as content of the <code>canvas</code>
  element. The contents of the <code>canvas</code> element, if any,
  are the element's <span>fallback content</span>.</p>

  <p>In interactive visual media with <span>scripting enabled</span>,
  the canvas element is an embedded element with a dynamically created
  image.</p>

  <p>In non-interactive, static, visual media, if the
  <code>canvas</code> element has been previously painted on (e.g. if
  the page was viewed in an interactive visual medium and is now being
  printed, or if some script that ran during the page layout process
  painted on the element), then the <code>canvas</code> element must
  be treated as <span>embedded content</span> with the current image
  and size. Otherwise, the element's <span>fallback content</span>
  must be used instead.</p>

  <p>In non-visual media, and in visual media with <span>scripting
  disabled</span>, the <code>canvas</code> element's <span>fallback
  content</span> must be used instead.</p>

  <p>The <code>canvas</code> element has two attributes to control the
  size of the coordinate space: <dfn
  title="attr-canvas-width"><code>width</code></dfn> and <dfn
  title="attr-canvas-height"><code>height</code></dfn>. These
  attributes, when specified, must have values that are <span
  title="valid non-negative integer">valid non-negative
  integers</span>. The <span>rules for parsing non-negative
  integers</span> must be used to obtain their numeric values. If an
  attribute is missing, or if parsing its value returns an error, then
  the default value must be used instead. The <code
  title="attr-canvas-width">width</code> attribute defaults to 300,
  and the <code title="attr-canvas-height">height</code> attribute
  defaults to 150.</p>

  <p>The intrinsic dimensions of the <code>canvas</code> element equal
  the size of the coordinate space, with the numbers interpreted in
  CSS pixels. However, the element can be sized arbitrarily by a
  style sheet. During rendering, the image is scaled to fit this layout
  size.</p>

  <p>The size of the coordinate space does not necessarily represent
  the size of the actual bitmap that the user agent will use
  internally or during rendering. On high-definition displays, for
  instance, the user agent may internally use a bitmap with two device
  pixels per unit in the coordinate space, so that the rendering
  remains at high quality throughout.</p>

  <p>Whenever the <code title="attr-canvas-width">width</code> and
  <code title="attr-canvas-height">height</code> attributes are set
  (whether to a new value or to the previous value), the bitmap and
  any associated contexts must be cleared back to their initial state
  and reinitialised with the newly specified coordinate space
  dimensions.</p>

  <p>The <dfn title="dom-canvas-width"><code>width</code></dfn> and
  <dfn title="dom-canvas-height"><code>height</code></dfn> DOM
  attributes must <span>reflect</span> the content attributes of the
  same name.</p>

  <div class="example">
   <p>Only one square appears to be drawn in the following example:</p>
   <pre>
  // canvas is a reference to a &lt;canvas> element
  var context = canvas.getContext('2d');
  context.fillRect(0,0,50,50);
  canvas.setAttribute('width', '300'); // clears the canvas
  context.fillRect(0,100,50,50);
  canvas.width = canvas.width; // clears the canvas
  context.fillRect(100,0,50,50); // only this square remains</pre>
  </div>


  <p>When the canvas is initialised it must be set to fully
  transparent black.</p>


  <p>To draw on the canvas, authors must first obtain a reference to a
  <dfn>context</dfn> using the <dfn
  title="dom-canvas-getContext"><code>getContext(<var
  title="">contextId</var>)</code></dfn> method of the
  <code>canvas</code> element.</p>

  <p>This specification only defines one context, with the name "<code
  title="canvas-context-2d">2d</code>". If <code
  title="dom-canvas-getContext">getContext()</code> is called with
  that exact string for its <var title="">contextId</var> argument,
  then the UA must return a reference to an object implementing
  <code>CanvasRenderingContext2D</code>. Other specifications may
  define their own contexts, which would return different objects.</p>

  <p>Vendors may also define experimental contexts using the syntax
  <code><var title="">vendorname</var>-<var
  title="">context</var></code>, for example, <code>moz-3d</code>.</p>

  <p>When the UA is passed an empty string or a string specifying a
  context that it does not support, then it must return null. String
  comparisons must be literal and case-sensitive.</p>

  <p>Arguments other than the <var title="">contextId</var> must be
  ignored, and must not cause the user agent to raise an exception (as
  would normally occur if a method was called with the wrong number of
  arguments).</p>

  <p class="note">A future version of this specification will probably
  define a <code>3d</code> context (probably based on the OpenGL ES
  API).</p>


  <p>The <dfn
  title="dom-canvas-toDataURL"><code>toDataURL()</code></dfn> method
  must, when called with no arguments, return a <code
  title="">data:</code> URI containing a representation of the image
  as a PNG file. <a href="#refsPNG">[PNG]</a>.</p>

  <p>If the canvas has no pixels (i.e. either its horizontal dimension
  or its vertical dimension is zero) then the method must return the
  string "<code title="">data:,</code>". (This is the shortest <code
  title="">data:</code> URI; it represents the empty string in a <code
  title="">text/plain</code> resource.)</p>

  <p>The <dfn title="dom-canvas-toDataURL-type"><code>toDataURL(<var
  title="">type</var>)</code></dfn> method (when called with one
  <em>or more</em> arguments) must return a <code>data:</code> URI
  containing a representation of the image in the format given by <var
  title="">type</var>. The possible values are MIME types with no
  parameters, for example <code>image/png</code>,
  <code>image/jpeg</code>, or even maybe <code>image/svg+xml</code> if
  the implementation actually keeps enough information to reliably
  render an SVG image from the canvas.</p>

  <p>Only support for <code>image/png</code> is required. User agents
  may support other types. If the user agent does not support the
  requested type, it must return the image using the PNG format.</p>

  <p>User agents must convert the provided type to lower case before
  establishing if they support that type and before creating the
  <code>data:</code> URI.</p> <!-- XXX define "convert to lower case"
  -->

  <p class="note">When trying to use types other than
  <code>image/png</code>, authors can check if the image was really
  returned in the requested format by checking to see if the returned
  string starts with one the exact strings "<code
  title="">data:image/png,</code>" or "<code
  title="">data:image/png;</code>". If it does, the image is PNG, and
  thus the requested type was not supported. (The one exception to
  this is if the canvas has either no height or no width, in which
  case the result might simply be "<code title="">data:,</code>".)</p>

  <p>Arguments other than the <var title="">type</var> must be
  ignored, and must not cause the user agent to raise an exception (as
  would normally occur if a method was called with the wrong number of
  arguments). A future version of this specification will probably
  allow extra parameters to be passed to <code
  title="dom-canvas-toDataURL">toDataURL()</code> to allow authors to
  more carefully control compression settings, image metadata,
  etc.</p>


  <h5>The 2D context</h5>

  <p>When the <code title="dom-canvas-getContext">getContext()</code>
  method of a <code>canvas</code> element is invoked with <dfn
  title="canvas-context-2d"><code>2d</code></dfn> as the argument, a
  <code>CanvasRenderingContext2D</code> object is returned.</p>

  <p>There is only one <code>CanvasRenderingContext2D</code> object
  per canvas, so calling the <code
  title="dom-canvas-getContext">getContext()</code> method with the
  <code title="canvas-context-2d">2d</code> argument a second time
  must return the same object.</p>

  <p>The 2D context represents a flat cartesian surface whose origin
  (0,0) is at the top left corner, with the coordinate space having
  <var title="">x</var> values increasing when going right, and <var
  title="">y</var> values increasing when going down.</p>

  <pre class="idl">interface <dfn>CanvasRenderingContext2D</dfn> {

  // back-reference to the canvas
  readonly attribute <span>HTMLCanvasElement</span> <span title="dom-context-2d-canvas">canvas</span>;

  // state
  void <span title="dom-context-2d-save">save</span>(); // push state on state stack
  void <span title="dom-context-2d-restore">restore</span>(); // pop state stack and restore state

  // transformations (default transform is the identity matrix)
  void <span title="dom-context-2d-scale">scale</span>(in float x, in float y);
  void <span title="dom-context-2d-rotate">rotate</span>(in float angle);
  void <span title="dom-context-2d-translate">translate</span>(in float x, in float y);
  void <span title="dom-context-2d-transform">transform</span>(in float m11, in float m12, in float m21, in float m22, in float dx, in float dy);
  void <span title="dom-context-2d-setTransform">setTransform</span>(in float m11, in float m12, in float m21, in float m22, in float dx, in float dy);
<!--
  // XXXv3 we've also received requests for:
  void skew(...);
  void reflect(...); // or mirror(...)
-->
  // compositing
           attribute float <span title="dom-context-2d-globalAlpha">globalAlpha</span>; // (default 1.0)
           attribute DOMString <span title="dom-context-2d-globalCompositeOperation">globalCompositeOperation</span>; // (default source-over)

  // colors and styles
           attribute DOMObject <span title="dom-context-2d-strokeStyle">strokeStyle</span>; // (default black)
           attribute DOMObject <span title="dom-context-2d-fillStyle">fillStyle</span>; // (default black)
  <span>CanvasGradient</span> <span title="dom-context-2d-createLinearGradient">createLinearGradient</span>(in float x0, in float y0, in float x1, in float y1);
  <span>CanvasGradient</span> <span title="dom-context-2d-createRadialGradient">createRadialGradient</span>(in float x0, in float y0, in float r0, in float x1, in float y1, in float r1);
  <span>CanvasPattern</span> <span title="dom-context-2d-createPattern">createPattern</span>(in <span>HTMLImageElement</span> image, in DOMString repetition);
  <span>CanvasPattern</span> <span title="dom-context-2d-createPattern">createPattern</span>(in <span>HTMLCanvasElement</span> image, in DOMString repetition);

  // line caps/joins
           attribute float <span title="dom-context-2d-lineWidth">lineWidth</span>; // (default 1)
           attribute DOMString <span title="dom-context-2d-lineCap">lineCap</span>; // "butt", "round", "square" (default "butt")
           attribute DOMString <span title="dom-context-2d-lineJoin">lineJoin</span>; // "round", "bevel", "miter" (default "miter")
           attribute float <span title="dom-context-2d-miterLimit">miterLimit</span>; // (default 10)

  // shadows
           attribute float <span title="dom-context-2d-shadowOffsetX">shadowOffsetX</span>; // (default 0)
           attribute float <span title="dom-context-2d-shadowOffsetY">shadowOffsetY</span>; // (default 0)
           attribute float <span title="dom-context-2d-shadowBlur">shadowBlur</span>; // (default 0)
           attribute DOMString <span title="dom-context-2d-shadowColor">shadowColor</span>; // (default transparent black)

  // rects
  void <span title="dom-context-2d-clearRect">clearRect</span>(in float x, in float y, in float w, in float h);
  void <span title="dom-context-2d-fillRect">fillRect</span>(in float x, in float y, in float w, in float h);
  void <span title="dom-context-2d-strokeRect">strokeRect</span>(in float x, in float y, in float w, in float h);

  // path API
  void <span title="dom-context-2d-beginPath">beginPath</span>();
  void <span title="dom-context-2d-closePath">closePath</span>();
  void <span title="dom-context-2d-moveTo">moveTo</span>(in float x, in float y);
  void <span title="dom-context-2d-lineTo">lineTo</span>(in float x, in float y);
  void <span title="dom-context-2d-quadraticCurveTo">quadraticCurveTo</span>(in float cpx, in float cpy, in float x, in float y);
  void <span title="dom-context-2d-bezierCurveTo">bezierCurveTo</span>(in float cp1x, in float cp1y, in float cp2x, in float cp2y, in float x, in float y);
  void <span title="dom-context-2d-arcTo">arcTo</span>(in float x1, in float y1, in float x2, in float y2, in float radius);
  void <span title="dom-context-2d-rect">rect</span>(in float x, in float y, in float w, in float h);
  void <span title="dom-context-2d-arc">arc</span>(in float x, in float y, in float radius, in float startAngle, in float endAngle, in boolean anticlockwise);
  void <span title="dom-context-2d-fill">fill</span>();
  void <span title="dom-context-2d-stroke">stroke</span>();
  void <span title="dom-context-2d-clip">clip</span>();
  boolean <span title="dom-context-2d-isPointInPath">isPointInPath</span>(in float x, in float y);

  // drawing images
  void <span title="dom-context-2d-drawImage">drawImage</span>(in <span>HTMLImageElement</span> image, in float dx, in float dy);
  void <span title="dom-context-2d-drawImage">drawImage</span>(in <span>HTMLImageElement</span> image, in float dx, in float dy, in float dw, in float dh);
  void <span title="dom-context-2d-drawImage">drawImage</span>(in <span>HTMLImageElement</span> image, in float sx, in float sy, in float sw, in float sh, in float dx, in float dy, in float dw, in float dh);
  void <span title="dom-context-2d-drawImage">drawImage</span>(in <span>HTMLCanvasElement</span> image, in float dx, in float dy);
  void <span title="dom-context-2d-drawImage">drawImage</span>(in <span>HTMLCanvasElement</span> image, in float dx, in float dy, in float dw, in float dh);
  void <span title="dom-context-2d-drawImage">drawImage</span>(in <span>HTMLCanvasElement</span> image, in float sx, in float sy, in float sw, in float sh, in float dx, in float dy, in float dw, in float dh);

  // pixel manipulation
  <span>ImageData</span> <span title="dom-context-2d-createImageData">createImageData</span>(in float sw, in float sh);
  <span>ImageData</span> <span title="dom-context-2d-getImageData">getImageData</span>(in float sx, in float sy, in float sw, in float sh);
  void <span title="dom-context-2d-putImageData">putImageData</span>(in <span>ImageData</span> imagedata, in float dx, in float dy);
  void <span title="dom-context-2d-putImageData">putImageData</span>(in <span>ImageData</span> imagedata, in float dx, in float dy, in float dirtyX, in float dirtyY, in float dirtyWidth, in float dirtyHeight);

  // drawing text is not supported in this version of the API
  // (there is no way to predict what metrics the fonts will have,
  // which makes fonts very hard to use for painting)

};

interface <dfn>CanvasGradient</dfn> {
  // opaque object
  void <span title="dom-canvasgradient-addColorStop">addColorStop</span>(in float offset, in DOMString color);
};

interface <dfn>CanvasPattern</dfn> {
  // opaque object
};

interface <dfn>ImageData</dfn> {
  readonly attribute long int <span title="dom-imagedata-width">width</span>;
  readonly attribute long int <span title="dom-imagedata-height">height</span>;
  readonly attribute int[] <span title="dom-imagedata-data">data</span>;
};</pre>

  <p>The <dfn title="dom-context-2d-canvas"><code>canvas</code></dfn>
  attribute must return the <code>canvas</code> element that the
  context paints on.</p>


  <p>Unless otherwise stated, for the 2D context interface, any method
  call with a numeric argument whose value is infinite or a NaN value
  must be ignored.</p>

  <!--
   Philip Taylor wrote:
   > My experience with some 3d canvas code is that infinities come up in
   > naturally harmless places, e.g. having a function that scales by x then
   > translates by 1/x and wanting it to work when x=0 (which ought to draw
   > nothing, since anything it draws is zero pixels wide), and it's a bit
   > annoying to track down and fix those issues, so I'd probably like it if
   > they were harmless in canvas methods. Opera appears to silently not draw
   > anything if the transformation matrix is not finite, but Firefox throws
   > exceptions when passing in non-finite arguments.
  -->




  <h6>The canvas state</h6>

  <p>Each context maintains a stack of drawing states. <dfn
  title="drawing state">Drawing states</dfn> consist of:</p>

  <ul class="brief">
   <li>The current <span title="dom-context-2d-transformation">transformation matrix</span>.</li>
   <li>The current <span>clipping region</span>.</li>
   <li>The current values of the following attributes: <code
   title="dom-context-2d-strokeStyle">strokeStyle</code>, <code
   title="dom-context-2d-fillStyle">fillStyle</code>, <code
   title="dom-context-2d-globalAlpha">globalAlpha</code>, <code
   title="dom-context-2d-lineWidth">lineWidth</code>, <code
   title="dom-context-2d-lineCap">lineCap</code>, <code
   title="dom-context-2d-lineJoin">lineJoin</code>, <code
   title="dom-context-2d-miterLimit">miterLimit</code>, <code
   title="dom-context-2d-shadowOffsetX">shadowOffsetX</code>, <code
   title="dom-context-2d-shadowOffsetY">shadowOffsetY</code>, <code
   title="dom-context-2d-shadowBlur">shadowBlur</code>, <code
   title="dom-context-2d-shadowColor">shadowColor</code>, <code
   title="dom-context-2d-globalCompositeOperation">globalCompositeOperation</code>.</li>
  </ul>

  <p class="note">The current path and the current bitmap are not part
  of the drawing state. The current path is persistent, and can only
  be reset using the <code
  title="dom-context-2d-beginPath">beginPath()</code> method. The
  current bitmap is <span title="concept-canvas-image">a property of
  the canvas</span><!-- XXX xref -->, not the context.</p>

  <p>The <dfn title="dom-context-2d-save"><code>save()</code></dfn>
  method must push a copy of the current drawing state onto the
  drawing state stack.</p>

  <p>The <dfn
  title="dom-context-2d-restore"><code>restore()</code></dfn> method
  must pop the top entry in the drawing state stack, and reset the
  drawing state it describes. If there is no saved state, the method
  must do nothing.</p>

  <!-- XXXv3
idea from Mihai:
> 5. Drawing states should be saveable with IDs, and for easier restoring.
>
> save(id)
> restore(id)
>
> If id is not provided, then save() works as defined now. The same for
> restore().
>
> Currently, it's not trivial to save and restore a specific state.
...and from Philip:
> I think a more convenient syntax would be:
>   var state = ctx.save();
>   ctx.restore(state);
> But how would it interact with normal calls to ctx.restore()?
  -->


  <h6><dfn title="dom-context-2d-transformation">Transformations</dfn></h6>

  <p>The transformation matrix is applied to coordinates when creating
  shapes and paths.</p> <!-- conformance criteria for actual drawing
  are described in the various sections below -->

  <p>When the context is created, the transformation matrix must
  initially be the identity transform. It may then be adjusted using
  the transformation methods.</p>

  <p>The transformations must be performed in reverse order. For
  instance, if a scale transformation that doubles the width is
  applied, followed by a rotation transformation that rotates drawing
  operations by a quarter turn, and a rectangle twice as wide as it is
  tall is then drawn on the canvas, the actual result will be a
  square.</p>

  <p>The <dfn title="dom-context-2d-scale"><code>scale(<var
  title="">x</var>, <var title="">y</var>)</code></dfn> method must
  add the scaling transformation described by the arguments to the
  transformation matrix. The <var title="">x</var> argument represents
  the scale factor in the horizontal direction and the <var
  title="">y</var> argument represents the scale factor in the
  vertical direction. The factors are multiples.</p>

  <p>The <dfn title="dom-context-2d-rotate"><code>rotate(<var
  title="">angle</var>)</code></dfn> method must add the rotation
  transformation described by the argument to the transformation
  matrix. The <var title="">angle</var> argument represents a
  clockwise rotation angle expressed in radians. If the <var
  title="">angle</var> argument is infinite, the method call must be
  ignored.</p>

  <p>The <dfn title="dom-context-2d-translate"><code>translate(<var
  title="">x</var>, <var title="">y</var>)</code></dfn> method must
  add the translation transformation described by the arguments to the
  transformation matrix. The <var title="">x</var> argument represents
  the translation distance in the horizontal direction and the <var
  title="">y</var> argument represents the translation distance in the
  vertical direction. The arguments are in coordinate space units.</p>

  <p>The <dfn title="dom-context-2d-transform"><code>transform(<var
  title="">m11</var>, <var title="">m12</var>, <var
  title="">m21</var>, <var title="">m22</var>, <var title="">dx</var>,
  <var title="">dy</var>)</code></dfn> method must multiply the
  current transformation matrix with the matrix described by:</p>

  <table class="matrix">
   <tr>
    <td><var title="">m11</var></td>
    <td><var title="">m21</var></td>
    <td><var title="">dx</var></td>
   </tr>
   <tr>
    <td><var title="">m12</var></td>
    <td><var title="">m22</var></td>
    <td><var title="">dy</var></td>
   </tr>
   <tr>
    <td>0</td>
    <td>0</td>
    <td>1</td>
   </tr>
  </table>

  <p>The <dfn
  title="dom-context-2d-setTransform"><code>setTransform(<var
  title="">m11</var>, <var title="">m12</var>, <var
  title="">m21</var>, <var title="">m22</var>, <var title="">dx</var>,
  <var title="">dy</var>)</code></dfn> method must reset the current
  transform to the identity matrix, and then invoke the <code><span
  title="dom-context-2d-transform">transform</span>(<var
  title="">m11</var>, <var title="">m12</var>, <var
  title="">m21</var>, <var title="">m22</var>, <var title="">dx</var>,
  <var title="">dy</var>)</code> method with the same arguments.</p>


  <h6>Compositing</h6>

  <p>All drawing operations are affected by the global compositing
  attributes, <code
  title="dom-context-2d-globalAlpha">globalAlpha</code> and <code
  title="dom-context-2d-globalCompositeOperation">globalCompositeOperation</code>.</p>

  <!-- conformance criteria for painting are described in the "drawing
  model" section below -->

  <p>The <dfn
  title="dom-context-2d-globalAlpha"><code>globalAlpha</code></dfn>
  attribute gives an alpha value that is applied to shapes and images
  before they are composited onto the canvas. The value must be in the
  range from 0.0 (fully transparent) to 1.0 (no additional
  transparency). If an attempt is made to set the attribute to a value
  outside this range, the attribute must retain its previous
  value. When the context is created, the <code
  title="dom-context-2d-globalAlpha">globalAlpha</code> attribute must
  initially have the value 1.0.</p>

  <p>The <dfn
  title="dom-context-2d-globalCompositeOperation"><code>globalCompositeOperation</code></dfn>
  attribute sets how shapes and images are drawn onto the existing
  bitmap, once they have had <code
  title="dom-context-2d-globalAlpha">globalAlpha</code> and the
  current transformation matrix applied. It must be set to a value
  from the following list. In the descriptions below, the source
  image, <var title="">A</var>, is the shape or image being rendered,
  and the destination image, <var title="">B</var>, is the current
  state of the bitmap.</p>

  <dl>

   <dt><dfn title="gcop-source-atop"><code>source-atop</code></dfn></dt>

   <dd><var title="">A</var> atop <var title="">B</var>. Display the
   source image wherever both images are opaque.  Display the
   destination image wherever the destination image is opaque but the
   source image is transparent. Display transparency elsewhere.</dd>

   <dt><dfn title="gcop-source-in"><code>source-in</code></dfn></dt>

   <dd><var title="">A</var> in <var title="">B</var>. Display the
   source image wherever both the source image and destination image
   are opaque. Display transparency elsewhere.</dd>

   <dt><dfn title="gcop-source-out"><code>source-out</code></dfn></dt>

   <dd><var title="">A</var> out <var title="">B</var>. Display the
   source image wherever the source image is opaque and the
   destination image is transparent. Display transparency
   elsewhere.</dd>

   <dt><dfn title="gcop-source-over"><code>source-over</code></dfn> (default)</dt>

   <dd><var title="">A</var> over <var title="">B</var>. Display the
   source image wherever the source image is opaque.  Display the
   destination image elsewhere.</dd>


   <dt><dfn title="gcop-destination-atop"><code>destination-atop</code></dfn></dt>

   <dd><var title="">B</var> atop <var title="">A</var>. Same as <code
   title="gcop-source-atop">source-atop</code> but using the
   destination image instead of the source image and vice versa.</dd>

   <dt><dfn title="gcop-destination-in"><code>destination-in</code></dfn></dt>

   <dd><var title="">B</var> in <var title="">A</var>. Same as <code
   title="gcop-source-in">source-in</code> but using the destination
   image instead of the source image and vice versa.</dd>

   <dt><dfn title="gcop-destination-out"><code>destination-out</code></dfn></dt>

   <dd><var title="">B</var> out <var title="">A</var>. Same as <code
   title="gcop-source-out">source-out</code> but using the destination
   image instead of the source image and vice versa.</dd>

   <dt><dfn title="gcop-destination-over"><code>destination-over</code></dfn></dt>

   <dd><var title="">B</var> over <var title="">A</var>. Same as <code
   title="gcop-source-over">source-over</code> but using the
   destination image instead of the source image and vice versa.</dd>


<!-- no clear definition of this operator (doesn't correspond to a PorterDuff operator)
   <dt><dfn title="gcop-darker"><code>darker</code></dfn></dt>

   <dd>Display the sum of the source image and destination image,
   with color values approaching 0 as a limit.</dd>
-->

   <dt><dfn title="gcop-lighter"><code>lighter</code></dfn></dt>

   <dd><var title="">A</var> plus <var title="">B</var>. Display the
   sum of the source image and destination image, with color values
   approaching 1 as a limit.</dd>


   <dt><dfn title="gcop-copy"><code>copy</code></dfn></dt>

   <dd><var title="">A</var> (<var title="">B</var> is
   ignored). Display the source image instead of the destination
   image.</dd>


   <dt><dfn title="gcop-xor"><code>xor</code></dfn></dt>

   <dd><var title="">A</var> xor <var title="">B</var>. Exclusive OR
   of the source image and destination image.</dd>


   <dt><code><var title="">vendorName</var>-<var title="">operationName</var></code></dt>

   <dd>Vendor-specific extensions to the list of composition operators
   should use this syntax.</dd>

  </dl>

  <p>These values are all case-sensitive &mdash; they must be used
  exactly as shown. User agents must only recognise values that
  exactly match the values given above.</p>

  <p>The operators in the above list must be treated as described by
  the Porter-Duff operator given at the start of their description
  (e.g. <var title="">A</var> over <var title="">B</var>). <a
  href="#refsPORTERDUFF">[PORTERDUFF]</a></p>
  <!--
        <dd id="refsPORTERDUFF">[PORTERDUFF]</dd>
        <dd><cite>Compositing Digital Images</cite>, SIGGRAPH '84: Proceedings of the 11th annual conference on Computer graphics and interactive techniques, Volume 18, Number 3, T. Porter, T Duff. ACM Press, July 1984. ISBN 0-89791-138-5.</dd>
  -->

  <p>On setting, if the user agent does not recognise the specified
  value, it must be ignored, leaving the value of <code
  title="dom-context-2d-globalCompositeOperation">globalCompositeOperation</code>
  unaffected.</p>

  <p>When the context is created, the <code
  title="dom-context-2d-globalCompositeOperation">globalCompositeOperation</code>
  attribute must initially have the value
  <code>source-over</code>.</p>


  <h6>Colors and styles</h6>

  <p>The <dfn
  title="dom-context-2d-strokeStyle"><code>strokeStyle</code></dfn>
  attribute represents the color or style to use for the lines around
  shapes, and the <dfn
  title="dom-context-2d-fillStyle"><code>fillStyle</code></dfn>
  attribute represents the color or style to use inside the
  shapes.</p>

  <p>Both attributes can be either strings,
  <code>CanvasGradient</code>s, or <code>CanvasPattern</code>s. On
  setting, strings must be parsed as CSS &lt;color&gt; values and the
  color assigned, and <code>CanvasGradient</code> and
  <code>CanvasPattern</code> objects must be assigned themselves. <a
  href="#refsCSS3COLOR">[CSS3COLOR]</a> If the value is a string but
  is not a valid color, or is neither a string, a
  <code>CanvasGradient</code>, nor a <code>CanvasPattern</code>, then
  it must be ignored, and the attribute must retain its previous
  value.</p>

  <p>On getting, if the value is a color, then the <span
  title="serialisation of a color">serialisation of the color</span>
  must be returned. Otherwise, if it is not a color but a
  <code>CanvasGradient</code> or <code>CanvasPattern</code>, then the
  respective object must be returned. (Such objects are opaque and
  therefore only useful for assigning to other attributes or for
  comparison to other gradients or patterns.)</p>

  <p>The <dfn>serialisation of a color</dfn> for a color value is a
  string, computed as follows: if it has alpha equal to 1.0, then the
  string is a lowercase six-digit hex value, prefixed with a "#"
  character (U+0023 NUMBER SIGN), with the first two digits
  representing the red component, the next two digits representing the
  green component, and the last two digits representing the blue
  component, the digits being in the range 0-9 a-f (U+0030 to U+0039
  and U+0061 to U+0066). Otherwise, the color value has alpha less
  than 1.0, and the string is the color value in the CSS <code
  title="">rgba()</code> functional-notation format: the literal
  string <code title="">rgba</code> (U+0072 U+0067 U+0062 U+0061)
  followed by a U+0028 LEFT PARENTHESIS, a base-ten integer in the
  range 0-255 representing the red component (using digits 0-9, U+0030
  to U+0039, in the shortest form possible), a literal U+002C COMMA
  and U+0020 SPACE, an integer for the green component, a comma and a
  space, an integer for the blue component, another comma and space, a
  U+0030 DIGIT ZERO, a U+002E FULL STOP (representing the decimal
  point), one or more digits in the range 0-9 (U+0030 to U+0039)
  representing the fractional part of the alpha value, and finally a
  U+0029 RIGHT PARENTHESIS.</p>

  <p>When the context is created, the <code
  title="dom-context-2d-strokeStyle">strokeStyle</code> and <code
  title="dom-context-2d-fillStyle">fillStyle</code> attributes must
  initially have the string value <code title="">#000000</code>.</p>


  <p>There are two types of gradients, linear gradients and radial
  gradients, both represented by objects implementing the opaque
  <dfn><code>CanvasGradient</code></dfn> interface.</p>

  <p>Once a gradient has been created (see below), stops are placed
  along it to define how the colors are distributed along the
  gradient. The color of the gradient at each stop is the color
  specified for that stop. Between each such stop, the colors and the
  alpha component must be linearly interpolated over the RGBA space
  without premultiplying the alpha value to find the color to use at
  that offset. Before the first stop, the color must be the color of
  the first stop. After the last stop, the color must be the color of
  the last stop. When there are no stops, the gradient is transparent
  black.</p>

  <p>The <dfn
  title="dom-canvasgradient-addColorStop"><code>addColorStop(<var
  title="">offset</var>, <var title="">color</var>)</code></dfn>
  method on the <code>CanvasGradient</code> interface adds a new stop
  to a gradient. If the <var title="">offset</var> is less than 0,
  greater than 1, infinite, or NaN, then an
  <code>INDEX_SIZE_ERR</code> exception must be raised. If the <var
  title="">color</var> cannot be parsed as a CSS color, then a
  <code>SYNTAX_ERR</code> exception must be raised.  Otherwise, the
  gradient must have a new stop placed, at offset <var
  title="">offset</var> relative to the whole gradient, and with the
  color obtained by parsing <var title="">color</var> as a CSS
  &lt;color&gt; value. If multiple stops are added at the same offset
  on a gradient, they must be placed in the order added, with the
  first one closest to the start of the gradient, and each subsequent
  one infinitesimally further along towards the end point (in effect
  causing all but the first and last stop added at each point to be
  ignored).</p>

  <p>The <dfn
  title="dom-context-2d-createLinearGradient"><code>createLinearGradient(<var
  title="">x0</var>, <var title="">y0</var>, <var title="">x1</var>,
  <var title="">y1</var>)</code></dfn> method takes four arguments
  that, after being subjected to the <span
  title="dom-context-2d-transformation">current transformation
  matrix</span>, represent the start point (<var title="">x0</var>,
  <var title="">y0</var>) and end point (<var title="">x1</var>, <var
  title="">y1</var>) of the gradient. If any of the arguments to <code
  title="dom-context-2d-createLinearGradient">createLinearGradient()</code>
  are infinite or NaN, the method must raise an
  <code>INDEX_SIZE_ERR</code> exception. Otherwise, the method must
  return a linear <code>CanvasGradient</code> initialised with the
  specified line.</p>

  <p>Linear gradients must be rendered such that at and before the
  starting point on the canvas the color at offset 0 is used, that at
  and after the ending point the color at offset 1 is used, and that
  all points on a line perpendicular to the line that crosses the
  start and end points have the color at the point where those two
  lines cross (with the colors coming from the interpolation described
  above).</p>

  <p>If <span><var title="">x<sub>0</sub></var>&nbsp;=&nbsp;<var
  title="">x<sub>1</sub></var></span> and <span><var
  title="">y<sub>0</sub></var>&nbsp;=&nbsp;<var
  title="">y<sub>1</sub></var></span>, then the linear gradient must
  paint nothing.</p> <!-- XXX could make this paint the start colour,
  or the end colour, or raise an exception -->

  <p>The <dfn
  title="dom-context-2d-createRadialGradient"><code>createRadialGradient(<var
  title="">x0</var>, <var title="">y0</var>, <var title="">r0</var>,
  <var title="">x1</var>, <var title="">y1</var>, <var
  title="">r1</var>)</code></dfn> method takes six arguments, the
  first three representing the start circle with origin (<var
  title="">x0</var>, <var title="">y0</var>) and radius <var
  title="">r0</var>, and the last three representing the end circle
  with origin (<var title="">x1</var>, <var title="">y1</var>) and
  radius <var title="">r1</var>. The values are in coordinate space
  units. If either of <var title="">r0</var> or <var title="">r1</var>
  are negative, or if any of the arguments are infinite or NaN, an
  <code>INDEX_SIZE_ERR</code> exception must be raised. Otherwise, the
  method must return a radial <code>CanvasGradient</code> initialised
  with the two specified circles, after transforming them according to
  the <span title="dom-context-2d-transformation">current
  transformation matrix</span>.</p>

  <p>Radial gradients must be rendered by following these steps:</p>

  <ol>

   <li><p>If <span><var title="">x<sub>0</sub></var>&nbsp;=&nbsp;<var
   title="">x<sub>1</sub></var></span> and <span><var
   title="">y<sub>0</sub></var>&nbsp;=&nbsp;<var
   title="">y<sub>1</sub></var></span> and <span><var
   title="">r<sub>0</sub></var>&nbsp;=&nbsp;<var
   title="">r<sub>1</sub></var></span>, then the radial gradient must
   paint nothing. Abort these steps.</p> <!-- XXX could make this
   paint the start colour, or the end colour, or a circle of one in
   the other, or raise an exception --> </li>

   <li>

    <p>Let <span>x(<var title="">&omega;</var>)&nbsp;=&nbsp;(<var
    title="">x<sub>1</sub></var>-<var
    title="">x<sub>0</sub></var>)<var
    title="">&omega;</var>&nbsp;+&nbsp;<var
    title="">x<sub>0</sub></var></span></p>

    <p>Let <span>y(<var title="">&omega;</var>)&nbsp;=&nbsp;(<var
    title="">y<sub>1</sub></var>-<var
    title="">y<sub>0</sub></var>)<var
    title="">&omega;</var>&nbsp;+&nbsp;<var
    title="">y<sub>0</sub></var></span></p>

    <p>Let <span>r(<var title="">&omega;</var>)&nbsp;=&nbsp;(<var
    title="">r<sub>1</sub></var>-<var
    title="">r<sub>0</sub></var>)<var
    title="">&omega;</var>&nbsp;+&nbsp;<var
    title="">r<sub>0</sub></var></span></p>

    <p>Let the color at <var title="">&omega;</var> be the color of
    the gradient at offset 0.0 for all values of <var
    title="">&omega;</var> less than 0.0, the color at offset 1.0 for
    all values of <var title="">&omega;</var> greater than 1.0, and
    the color at the given offset for values of <var
    title="">&omega;</var> in the range <span>0.0&nbsp;&le;&nbsp;<var
    title="">&omega;</var>&nbsp;&le;&nbsp;1.0</span>

   </li>

   <li><p>For all values of <var title="">&omega;</var> where
   <span>r(<var title="">&omega;</var>)&nbsp;&gt;&nbsp;0</span>,
   starting with the value of <var title="">&omega;</var> nearest to
   positive infinity and ending with the value of <var
   title="">&omega;</var> nearest to negative infinity, draw the
   circumference of the circle with radius <span>r(<var
   title="">&omega;</var>)</span> at position (<span>x(<var
   title="">&omega;</var>)</span>, <span>y(<var
   title="">&omega;</var>)</span>), with the color at <var
   title="">&omega;</var>, but only painting on the parts of the
   canvas that have not yet been painted on by earlier circles in this
   step for this rendering of the gradient.</p></li>

  </ol>

  <p class="note">This effectively creates a cone, touched by the two
  circles defined in the creation of the gradient, with the part of
  the cone before the start circle (0.0) using the color of the first
  offset, the part of the cone after the end circle (1.0) using the
  color of the last offset, and areas outside the cone untouched by
  the gradient (transparent black).</p>

  <p>Gradients must only be painted where the relevant stroking or
  filling effects requires that they be drawn.</p>

<!--
  <p>Support for actually painting gradients is optional. Instead of
  painting the gradients, user agents may instead just paint the first
  stop's color. However, <code
  title="dom-context-2d-createLinearGradient">createLinearGradient()</code>
  and <code
  title="dom-context-2d-createRadialGradient">createRadialGradient()</code>
  must always return objects when passed valid arguments.</p>
-->


  <p>Patterns are represented by objects implementing the opaque
  <dfn><code>CanvasPattern</code></dfn> interface.</p>

  <p>To create objects of this type, the <dfn
  title="dom-context-2d-createPattern"><code>createPattern(<var
  title="">image</var>, <var title="">repetition</var>)</code></dfn>
  method is used. The first argument gives the image to use as the
  pattern (either an <code>HTMLImageElement</code> or an
  <code>HTMLCanvasElement</code>). Modifying this image after calling
  the <code
  title="dom-context-2d-createPattern">createPattern()</code> method
  must not affect the pattern. The second argument must be a string
  with one of the following values: <code title="">repeat</code>,
  <code title="">repeat-x</code>, <code title="">repeat-y</code>,
  <code title="">no-repeat</code>. If the empty string or null is
  specified, <code title="">repeat</code> must be assumed. If an
  unrecognised value is given, then the user agent must raise a
  <code>SYNTAX_ERR</code> exception. User agents must recognise the
  four values described above exactly (e.g. they must not do case
  folding). The method must return a <code>CanvasPattern</code> object
  suitably initialised.</p>

  <p>The <var title="">image</var> argument must be an instance of an
  <code>HTMLImageElement</code> or <code>HTMLCanvasElement</code>. If
  the <var title="">image</var> is of the wrong type or null, the
  implementation must raise a <code>TYPE_MISMATCH_ERR</code>
  exception.</p>
  <!-- drawImage() has an equivalent paragraph -->

  <p>If the <var title="">image</var> argument is an
  <code>HTMLImageElement</code> object whose <code
  title="dom-img-complete">complete</code> attribute is false, then
  the implementation must raise an <code>INVALID_STATE_ERR</code>
  exception.</p>
  <!-- drawImage() has an equivalent paragraph -->

  <p>If the <var title="">image</var> argument is an
  <code>HTMLCanvasElement</code> object with either a horizonal
  dimension or a vertical dimension equal to zero, then the
  implementation must raise an <code>INVALID_STATE_ERR</code>
  exception.</p>
  <!-- drawImage() has an equivalent paragraph -->

  <p>Patterns must be painted so that the top left of the first image
  is anchored at the origin of the coordinate space, and images are
  then repeated horizontally to the left and right (if the
  <code>repeat-x</code> string was specified) or vertically up and
  down (if the <code>repeat-y</code> string was specified) or in all
  four directions all over the canvas (if the <code>repeat</code>
  string was specified). The images are not scaled by this process;
  one CSS pixel of the image must be painted on one coordinate space
  unit. Of course, patterns must only actually painted where the
  stroking or filling effect requires that they be drawn, and are
  affected by the current transformation matrix.</p>

  <p>When the <code
  title="dom-context-2d-createPattern">createPattern()</code> method
  is passed, as its <var title="">image</var> argument, an animated
  image, the poster frame of the animation, or the first frame of the
  animation if there is no poster frame, must be used.</p>
  <!-- drawImage() has an equivalent paragraph -->

  <p>Support for patterns is optional. If the user agent doesn't
  support patterns, then <code
  title="dom-context-2d-createPattern">createPattern()</code> must
  return null.</p>

  <!--
   XXXv3 Requests for v3 features:
    * apply transforms to patterns, so you don't have to create
      transformed patterns manually by rendering them to an off-screen
      canvas then using that canvas as the pattern.
  -->


  <h6>Line styles</h6>

  <p>The <dfn
  title="dom-context-2d-lineWidth"><code>lineWidth</code></dfn>
  attribute gives the width of lines, in coordinate space units. On
  setting, zero, negative, infinite, and NaN values must be ignored,
  leaving the value unchanged.</p>

  <p>When the context is created, the <code
  title="dom-context-2d-lineWidth">lineWidth</code> attribute must
  initially have the value <code>1.0</code>.</p>

  <p>The <dfn
  title="dom-context-2d-lineCap"><code>lineCap</code></dfn> attribute
  defines the type of endings that UAs will place on the end of
  lines. The three valid values are <code>butt</code>,
  <code>round</code>, and <code>square</code>. The <code>butt</code>
  value means that the end of each line is a flat edge perpendicular
  to the direction of the line. The <code>round</code> value means
  that a semi-circle with the diameter equal to the width of the line
  must then be added on to the end of the line. The
  <code>square</code> value means that a rectangle with the length of
  the line width and the width of half the line width, placed flat
  against the edge perpendicular to the direction of the line, must be
  added at the end of each line. On setting, any other value than the
  literal strings <code>butt</code>, <code>round</code>, and
  <code>square</code> must be ignored, leaving the value
  unchanged.</p>

  <p>When the context is created, the <code
  title="dom-context-2d-lineCap">lineCap</code> attribute must
  initially have the value <code>butt</code>.</p>


  <p>The <dfn
  title="dom-context-2d-lineJoin"><code>lineJoin</code></dfn>
  attribute defines the type of corners that UAs will place where two
  lines meet. The three valid values are <code>bevel</code>,
  <code>round</code>, and <code>miter</code>.</p>

  <p>On setting, any other value than the literal strings
  <code>bevel</code>, <code>round</code>, and <code>miter</code> must
  be ignored, leaving the value unchanged.</p>

  <p>When the context is created, the <code
  title="dom-context-2d-lineJoin">lineJoin</code> attribute must
  initially have the value <code>miter</code>.</p>

  <p>A join exists at any point in a subpath shared by two consecutive
  lines. When a subpath is closed, then a join also exists at its
  first point (equivalent to its last point) connecting the first and
  last lines in the subpath.</p>

  <p>In addition to the point where the join occurs, two additional
  points are relevant to each join, one for each line: the two corners
  found half the line width away from the join point, one
  perpendicular to each line, each on the side furthest from the other
  line.</p>

  <p>A filled triangle connecting these two opposite corners with a
  straight line, with the third point of the triangle being the join
  point, must be rendered at all joins. The <code
  title="dom-context-2d-lineJoin">lineJoin</code> attribute controls
  whether anything else is rendered. The three aforementioned values
  have the following meanings:</p>

  <p>The <code>bevel</code> value means that this is all that is
  rendered at joins.</p>

  <p>The <code>round</code> value means that a filled arc connecting
  the two aforementioned corners of the join, abutting (and not
  overlapping) the aforementioned triangle, with the diameter equal to
  the line width and the origin at the point of the join, must be
  rendered at joins.</p>

  <p>The <code>miter</code> value means that a second filled triangle
  must (if it can given the miter length) be rendered at the join,
  with one line being the line between the two aforementioned corners,
  abuting the first triangle, and the other two being continuations of
  the outside edges of the two joining lines, as long as required to
  intersect without going over the miter length.</p>

  <p>The miter length is the distance from the point where the lines
  touch on the inside of the join to the intersection of the line
  edges on the outside of the join. The miter limit ratio is the
  maximum allowed ratio of the length of the two continuation lines to
  the line width. If the miter length would be exceeded, this second
  triangle must not be rendered.</p>


  <p>The miter limit ratio can be explicitly set using the <dfn
  title="dom-context-2d-miterLimit"><code>miterLimit</code></dfn>
  attribute. On setting, zero, negative, infinite, and NaN values must
  be ignored, leaving the value unchanged.</p>

  <p>When the context is created, the <code
  title="dom-context-2d-miterLimit">miterLimit</code> attribute must
  initially have the value <code>10.0</code>.</p>


  <!-- XXX this section doesn't say what these attributes return or
  what they do on setting. not a big deal; it's pretty obvious. but if
  anyone complains, we'll have to add it -->

  <!--
XXXv3 dashed lines have been requested.  Philip Taylor provides these
notes on what would need to be defined for dashed lines:
> I don't think it's entirely trivial to add, to the detail that's
> necessary in a specification. The common graphics APIs (at least
> Cairo, Quartz and java.awt.Graphics, and any SVG implementation) all
> have dashes specified by passing an array of dash lengths (alternating
> on/off), so that should be alright as long as you define what units
> it's measured in and what happens when you specify an odd number of
> values and how errors are handled and what happens if you update the
> array later. But after that, what does it do when stroking multiple
> subpaths, in terms of offsetting the dashes? When you use strokeRect,
> where is offset 0? Does moveTo reset the offset? How does it interact
> with lineCap/lineJoin? All the potential issues need test cases too,
> and the implementations need to make sure they handle any edge cases
> that the underlying graphics library does differently. (SVG Tiny 1.2
> appears to skip some of the problems by leaving things undefined and
> allowing whatever behaviour the graphics library has.)
  -->


  <h6><dfn>Shadows</dfn></h6>

  <p>All drawing operations are affected by the four global shadow
  attributes.</p>

  <p>The <dfn
  title="dom-context-2d-shadowColor"><code>shadowColor</code></dfn>
  attribute sets the color of the shadow.</p>

  <p>When the context is created, the <code
  title="dom-context-2d-shadowColor">shadowColor</code> attribute
  initially must be fully-transparent black.</p>

  <p>On getting, the <span title="serialisation of a
  color">serialisation of the color</span> must be returned.</p>

  <p>On setting, the new value must be parsed as a CSS &lt;color&gt;
  value and the color assigned. If the value is not a valid color,
  then it must be ignored, and the attribute must retain its previous
  value.  <a href="#refsCSS3COLOR">[CSS3COLOR]</a></p>

  <p>The <dfn
  title="dom-context-2d-shadowOffsetX"><code>shadowOffsetX</code></dfn>
  and <dfn
  title="dom-context-2d-shadowOffsetY"><code>shadowOffsetY</code></dfn>
  attributes specify the distance that the shadow will be offset in
  the positive horizontal and positive vertical distance
  respectively. Their values are in coordinate space units. They are
  not affected by the current transformation matrix.</p>

  <p>When the context is created, the shadow offset attributes
  initially have the value <code>0</code>.</p>

  <p>On getting, they must return their current value. On setting, the
  attribute being set must be set to the new value, except if the
  value is infinite or NaN, in which case the new value must be
  ignored.</p>

  <p>The <dfn
  title="dom-context-2d-shadowBlur"><code>shadowBlur</code></dfn>
  attribute specifies the size of the blurring effect. (The units do
  not map to coordinate space units, and are not affected by the
  current transformation matrix.)</p>

  <p>When the context is created, the <code
  title="dom-context-2d-shadowBlur">shadowBlur</code> attribute must
  initially have the value <code>0</code>.</p>

  <p>On getting, the attribute must return its current value. On
  setting the attribute must be set to the new value, except if the
  value is negative, infinite or NaN, in which case the new value must
  be ignored.</p>

  <p>Support for shadows is optional. When they are supported, then,
  when shadows are drawn, they must be rendered as follows:</p>

  <ol>

   <li> <p>Let <var title="">A</var> be the source image for which a
   shadow is being created.</p> </li>

   <li> <p>Let <var title="">B</var> be an infinite transparent black
   bitmap, with a coordinate space and an origin identical to <var
   title="">A</var>.</p> </li>

   <li> <p>Copy the alpha channel of <var title="">A</var> to <var
   title="">B</var>, offset by <code
   title="dom-context-2d-shadowOffsetX">shadowOffsetX</code> in the
   positive <var title="">x</var> direction, and <code
   title="dom-context-2d-shadowOffsetY">shadowOffsetY</code> in the
   positive <var title="">y</var> direction.</p> </li>

   <li> <p>If <code
   title="dom-context-2d-shadowBlur">shadowBlur</code> is greater than
   0:</p>

    <ol>

     <li> <p>If <code
     title="dom-context-2d-shadowBlur">shadowBlur</code> is less than
     8, let <var title="">&sigma;</var> be half the value of <code
     title="dom-context-2d-shadowBlur">shadowBlur</code>; otherwise,
     let <var title="">&sigma;</var> be the square root of multiplying
     the value of <code
     title="dom-context-2d-shadowBlur">shadowBlur</code> by
     2.</p></li>

     <li> <p>Perform a 2D Gaussian Blur on <var title="">B</var>,
     using <var title="">&sigma;</var> as the standard
     deviation. </li> <!-- need a reference for this XXX -->

    </ol>

    <p>User agents may limit values of <var title="">&sigma;</var> to
    an implementation-specific maximum value to avoid exceeding
    hardware limitations during the Gaussian blur operation.</p>

   </li>

   <li> <p>Set the red, green, and blue components of every pixel in
   <var title="">B</var> to the red, green, and blue components
   (respectively) of the color of <code
   title="dom-context-2d-shadowColor">shadowColor</code>.</p> </li>

   <li> <p>Multiply the alpha component of every pixel in <var
   title="">B</var> by the alpha component of the color of <code
   title="dom-context-2d-shadowColor">shadowColor</code>.</p> </li>

   <li> <p>The shadow is in the bitmap <var title="">B</var>, and is
   rendered as part of the drawing model described below.</p> </li>

  </ol>


  <h6>Simple shapes (rectangles)</h6>

  <p>There are three methods that immediately draw rectangles to the
  bitmap. They each take four arguments; the first two give the <var
  title="">x</var> and <var title="">y</var> coordinates of the top
  left of the rectangle, and the second two give the width <var
  title="">w</var> and height <var title="">h</var> of the rectangle,
  respectively.</p>

  <p>The <span title="dom-context-2d-transformation">current
  transformation matrix</span> must be applied to the following four
  coordinates, which form the path that must then be closed to get the
  specified rectangle: <span>(<var title="">x</var>, <var
  title="">y</var>)</span>, <span>(<span><var title="">x</var>+<var
  title="">w</var></span>, <var title="">y</var>)</span>,
  <span>(<span><var title="">x</var>+<var title="">w</var></span>,
  <span><var title="">y</var>+<var title="">h</var></span>)</span>,
  <span>(<var title="">x</var>, <span><var title="">y</var>+<var
  title="">h</var></span>)</span>.</p>

  <p>Shapes are painted without affecting the current path, and are
  subject to the <span title="clipping region">clipping region</span>,
  and, with the exception of <code
  title="dom-context-2d-clearRect">clearRect()</code>, also <span
  title="shadows">shadow effects</span>, <span
  title="dom-context-2d-globalAlpha">global alpha</span>, and <span
  title="dom-context-2d-globalCompositeOperation">global composition
  operators</span>.</p>

  <p>The <dfn title="dom-context-2d-clearRect"><code>clearRect(<var
  title="">x</var>, <var title="">y</var>, <var title="">w</var>, <var
  title="">h</var>)</code></dfn> method must clear the pixels in the
  specified rectangle that also intersect the current clipping region
  to a fully transparent black, erasing any previous image. If either
  height or width are zero, this method has no effect.</p>

  <p>The <dfn title="dom-context-2d-fillRect"><code>fillRect(<var
  title="">x</var>, <var title="">y</var>, <var title="">w</var>, <var
  title="">h</var>)</code></dfn> method must paint the specified
  rectangular area using the <code
  title="dom-context-2d-fillStyle">fillStyle</code>. If either height
  or width are zero, this method has no effect.</p>

  <p>The <dfn title="dom-context-2d-strokeRect"><code>strokeRect(<var
  title="">x</var>, <var title="">y</var>, <var title="">w</var>, <var
  title="">h</var>)</code></dfn> method must stroke the specified
  rectangle's path using the <code
  title="dom-context-2d-strokeStyle">strokeStyle</code>, <code
  title="dom-context-2d-lineWidth">lineWidth</code>, <code
  title="dom-context-2d-lineJoin">lineJoin</code>, and (if
  appropriate) <code
  title="dom-context-2d-miterLimit">miterLimit</code> attributes. If
  both height and width are zero, this method has no effect, since
  there is no path to stroke (it's a point). If only one of the two is
  zero, then the method will draw a line instead (the path for the
  outline is just a straight line along the non-zero dimension).</p>


  <h6>Complex shapes (paths)</h6>

  <p>The context always has a current path. There is only one current
  path, it is not part of the <span title="dom-context-2d-">drawing
  state</span>.</p>

  <p>A <dfn>path</dfn> has a list of zero or more subpaths. Each
  subpath consists of a list of one or more points, connected by
  straight or curved lines, and a flag indicating whether the subpath
  is closed or not. A closed subpath is one where the last point of
  the subpath is connected to the first point of the subpath by a
  straight line. Subpaths with fewer than two points are ignored when
  painting the path.</p>

  <p>Initially, the context's path must have zero subpaths.</p>

  <p>The points and lines added to the path by these methods must be
  transformed according to the <span
  title="dom-context-2d-transformation">current transformation
  matrix</span> as they are added.</p>


  <p>The <dfn
  title="dom-context-2d-beginPath"><code>beginPath()</code></dfn>
  method must empty the list of subpaths so that the context once
  again has zero subpaths.</p>


  <p>The <dfn title="dom-context-2d-moveTo"><code>moveTo(<var
  title="">x</var>, <var title="">y</var>)</code></dfn> method must
  create a new subpath with the specified point as its first (and
  only) point.</p>


  <p>The <dfn
  title="dom-context-2d-closePath"><code>closePath()</code></dfn>
  method must do nothing if the context has no subpaths. Otherwise, it
  must mark the last subpath as closed, create a new subpath whose
  first point is the same as the previous subpath's first point, and
  finally add this new subpath to the path. (If the last subpath had
  more than one point in its list of points, then this is equivalent
  to adding a straight line connecting the last point back to the
  first point, thus "closing" the shape, and then repeating the last
  <code title="dom-context-2d-moveTo">moveTo()</code> call.)</p>


  <p>New points and the lines connecting them are added to subpaths
  using the methods described below. In all cases, the methods only
  modify the last subpath in the context's paths.</p>


  <p>The <dfn title="dom-context-2d-lineTo"><code>lineTo(<var
  title="">x</var>, <var title="">y</var>)</code></dfn> method must do
  nothing if the context has no subpaths. Otherwise, it must connect
  the last point in the subpath to the given point (<var
  title="">x</var>, <var title="">y</var>) using a straight line, and
  must then add the given point (<var title="">x</var>, <var
  title="">y</var>) to the subpath.</p>


  <p>The <dfn
  title="dom-context-2d-quadraticCurveTo"><code>quadraticCurveTo(<var
  title="">cpx</var>, <var title="">cpy</var>, <var title="">x</var>,
  <var title="">y</var>)</code></dfn> method must do nothing if the
  context has no subpaths. Otherwise it must connect the last point in
  the subpath to the given point (<var title="">x</var>, <var
  title="">y</var>) using a quadratic B&eacute;zier curve with control
  point (<var title="">cpx</var>, <var title="">cpy</var>), and must
  then add the given point (<var title="">x</var>, <var
  title="">y</var>) to the subpath. <a href="#refsBEZIER">[BEZIER]</a></p>
  <!-- XXX [BEZIER] Paul de Casteljau, Courbes &agrave; p&ocirc;les, INPI, 1959 -->


  <p>The <dfn
  title="dom-context-2d-bezierCurveTo"><code>bezierCurveTo(<var
  title="">cp1x</var>, <var title="">cp1y</var>, <var
  title="">cp2x</var>, <var title="">cp2y</var>, <var
  title="">x</var>, <var title="">y</var>)</code></dfn> method must do
  nothing if the context has no subpaths. Otherwise, it must connect
  the last point in the subpath to the given point (<var
  title="">x</var>, <var title="">y</var>) using a cubic B&eacute;zier
  curve with control points (<var title="">cp1x</var>, <var
  title="">cp1y</var>) and (<var title="">cp2x</var>, <var
  title="">cp2y</var>). Then, it must add the point (<var
  title="">x</var>, <var title="">y</var>) to the subpath. <a
  href="#refsBEZIER">[BEZIER]</a></p>
  <!-- XXX [BEZIER] Paul de Casteljau, Courbes &agrave; p&ocirc;les, INPI, 1959 -->


  <p>The <dfn title="dom-context-2d-arcTo"><code>arcTo(<var
  title="">x1</var>, <var title="">y1</var>, <var title="">x2</var>,
  <var title="">y2</var>, <var title="">radius</var>)</code></dfn>
  method must do nothing if the context has no subpaths. If the
  context <em>does</em> have a subpath, then the behaviour depends on
  the arguments and the last point in the subpath.</p>

  <p>Negative values for <var title="">radius</var> must cause the
  implementation to raise an <code>INDEX_SIZE_ERR</code>
  exception.</p>

  <p>Let the point (<var title="">x0</var>, <var title="">y0</var>) be
  the last point in the subpath.</p>

  <p>If the point (<var title="">x0</var>, <var title="">y0</var>) is
  equal to the point (<var title="">x1</var>, <var title="">y1</var>),
  or if the point (<var title="">x1</var>, <var title="">y1</var>) is
  equal to the point (<var title="">x2</var>, <var title="">y2</var>),
  then the method must add the point (<var title="">x1</var>, <var
  title="">y1</var>) to the subpath, and connect that point to the
  previous point (<var title="">x0</var>, <var title="">y0</var>) by a
  straight line.</p>

  <p>Otherwise, if the points (<var title="">x0</var>, <var
  title="">y0</var>), (<var title="">x1</var>, <var
  title="">y1</var>), and (<var title="">x2</var>, <var
  title="">y2</var>) all lie on a single straight line, then: if the
  direction from (<var title="">x0</var>, <var title="">y0</var>) to
  (<var title="">x1</var>, <var title="">y1</var>) is the same as the
  direction from (<var title="">x1</var>, <var title="">y1</var>) to
  (<var title="">x2</var>, <var title="">y2</var>), then method must
  add the point (<var title="">x1</var>, <var title="">y1</var>) to
  the subpath, and connect that point to the previous point (<var
  title="">x0</var>, <var title="">y0</var>) by a straight line;
  otherwise, the direction from (<var title="">x0</var>, <var
  title="">y0</var>) to (<var title="">x1</var>, <var
  title="">y1</var>) is the opposite of the direction from (<var
  title="">x1</var>, <var title="">y1</var>) to (<var
  title="">x2</var>, <var title="">y2</var>), and the method must add
  a point (<var title="">x<sub>&infin;</sub></var>, <var
  title="">y<sub>&infin;</sub></var>) to the subpath, and connect that
  point to the previous point (<var title="">x0</var>, <var
  title="">y0</var>) by a straight line, where (<var
  title="">x<sub>&infin;</sub></var>, <var
  title="">y<sub>&infin;</sub></var>) is the point that is infinitely
  far away from (<var title="">x1</var>, <var title="">y1</var>), that
  lies on the same line as (<var title="">x0</var>, <var
  title="">y0</var>), (<var title="">x1</var>, <var
  title="">y1</var>), and (<var title="">x2</var>, <var
  title="">y2</var>), and that is on the same side of (<var
  title="">x1</var>, <var title="">y1</var>) on that line as (<var
  title="">x2</var>, <var title="">y2</var>).</p>

  <p>Otherwise, let <var title="">The Arc</var> be the shortest arc
  given by circumference of the circle that has radius <var
  title="">radius</var>, and that has one point tangent to the
  half-infinite line that crosses the point (<var title="">x0</var>,
  <var title="">y0</var>) and ends at the point (<var
  title="">x1</var>, <var title="">y1</var>), and that has a different
  point tangent to the half-infinite line that ends at the point (<var
  title="">x1</var>, <var title="">y1</var>) and crosses the point
  (<var title="">x2</var>, <var title="">y2</var>). The points at
  which this circle touches these two lines are called the start and
  end tangent points respectively.</p>

  <p>The method must connect the point (<var title="">x0</var>, <var
  title="">y0</var>) to the start tangent point by a straight line,
  adding the start tangent point to the subpath, and then must connect
  the start tangent point to the end tangent point by <var
  title="">The Arc</var>, adding the end tangent point to the
  subpath.</p>


  <p>The <dfn title="dom-context-2d-arc"><code>arc(<var
  title="">x</var>, <var title="">y</var>, <var title="">radius</var>,
  <var title="">startAngle</var>, <var title="">endAngle</var>, <var
  title="">anticlockwise</var>)</code></dfn> method draws an arc. If
  the context has any subpaths, then the method must add a straight
  line from the last point in the subpath to the start point of the
  arc. In any case, it must draw the arc between the start point of
  the arc and the end point of the arc, and add the start and end
  points of the arc to the subpath. The arc and its start and end
  points are defined as follows:</p>

  <p>Consider a circle that has its origin at (<var title="">x</var>,
  <var title="">y</var>) and that has radius <var
  title="">radius</var>. The points at <var title="">startAngle</var>
  and <var title="">endAngle</var> along the circle's circumference,
  measured in radians clockwise from the positive x-axis, are the
  start and end points respectively. The arc is the path along the
  circumference of this circle from the start point to the end point,
  going anti-clockwise if the <var title="">anticlockwise</var>
  argument is true, and clockwise otherwise. Since the points are on
  the circle, as opposed to being simply angles from zero, the arc can
  never cover an angle greater than 2&pi; radians. If the two angles
  are equal, or if the radius is zero, then the arc is defined as
  being of zero length in both directions.</p>

  <p>Negative values for <var title="">radius</var> must cause the
  implementation to raise an <code>INDEX_SIZE_ERR</code>
  exception.</p>


  <p>The <dfn title="dom-context-2d-rect"><code>rect(<var
  title="">x</var>, <var title="">y</var>, <var title="">w</var>, <var
  title="">h</var>)</code></dfn> method must create a new subpath
  containing just the four points (<var title="">x</var>, <var
  title="">y</var>), (<var title="">x</var>+<var title="">w</var>,
  <var title="">y</var>), (<var title="">x</var>+<var
  title="">w</var>, <var title="">y</var>+<var title="">h</var>),
  (<var title="">x</var>, <var title="">y</var>+<var
  title="">h</var>), with those four points connected by straight
  lines, and must then mark the subpath as closed. It must then create
  a new subpath with the point (<var title="">x</var>, <var
  title="">y</var>) as the only point in the subpath.</p>


  <p>The <dfn title="dom-context-2d-fill"><code>fill()</code></dfn>
  method must fill all the subpaths of the current path, using
  <code title="dom-context-2d-fillStyle">fillStyle</code>, and using
  the non-zero winding number rule. Open subpaths must be implicitly
  closed when being filled (without affecting the actual
  subpaths).</p>

  <p class="note">Thus, if two overlapping but otherwise independent
  subpaths have opposite windings, they cancel out and result in no
  fill. If they have the same winding, that area just gets painted
  once.</p>

  <p>The <dfn
  title="dom-context-2d-stroke"><code>stroke()</code></dfn> method
  must calculate the strokes of all the subpaths of the current path,
  using the <code title="dom-context-2d-lineWidth">lineWidth</code>,
  <code title="dom-context-2d-lineCap">lineCap</code>, <code
  title="dom-context-2d-lineJoin">lineJoin</code>, and (if
  appropriate) <code
  title="dom-context-2d-miterLimit">miterLimit</code> attributes, and
  then fill the combined stroke area using the <code
  title="dom-context-2d-strokeStyle">strokeStyle</code>,
  attribute.</p>

  <p class="note">Since the subpaths are all stroked as one,
  overlapping parts of the paths in one stroke operation are treated
  as if their union was what was painted.</p>

  <p>Paths, when filled or stroked, must be painted without affecting
  the current path, and must be subject to <span
  title="shadows">shadow effects</span>, <span
  title="dom-context-2d-globalAlpha">global alpha</span>, the <span
  title="clipping region">clipping region</span>, and <span
  title="dom-context-2d-globalCompositeOperation">global composition
  operators</span>. (Transformations affect the path when the path is
  created, not when it is painted, though the stroke <em>style</em> is
  still affected by the transformation during painting.)</p>

  <p>Zero-length line segments must be pruned before stroking a
  path. Empty subpaths must be ignored.</p>


  <p>The <dfn title="dom-context-2d-clip"><code>clip()</code></dfn>
  method must create a new <dfn>clipping region</dfn> by calculating
  the intersection of the current clipping region and the area
  described by the current path, using the non-zero winding number
  rule. Open subpaths must be implicitly closed when computing the
  clipping region, without affecting the actual subpaths. The new
  clipping region replaces the current clipping region.</p>

  <p>When the context is initialised, the clipping region must be set
  to the rectangle with the top left corner at (0,0) and the width and
  height of the coordinate space.</p>

  <!-- XXXv3
   Jordan OSETE suggests:
    * support ways of extending the clipping region (union instead of intersection)
       - also "add", "substract", "replace", "intersect" and "xor"
    * support ways of resetting the clipping region without save/restore
  -->


  <p>The <dfn
  title="dom-context-2d-isPointInPath"><code>isPointInPath(<var
  title="">x</var>, <var title="">y</var>)</code></dfn> method must
  return true if the point given by the <var title="">x</var> and <var
  title="">y</var> coordinates passed to the method, when treated as
  coordinates in the canvas coordinate space unaffected by the current
  transformation, is inside the current path; and must return false
  otherwise. Points on the path itself are considered to be inside the
  path. If either of the arguments is infinite or NaN, then the method
  must return false.</p>



  <h6>Images</h6>

  <p>To draw images onto the canvas, the <dfn
  title="dom-context-2d-drawImage"><code>drawImage</code></dfn> method
  can be used.</p>

  <p>This method is overloaded with three variants: <code
  title="">drawImage(<var title="">image</var>, <var
  title="">dx</var>, <var title="">dy</var>)</code>, <code
  title="">drawImage(<var title="">image</var>, <var
  title="">dx</var>, <var title="">dy</var>, <var title="">dw</var>,
  <var title="">dh</var>)</code>, and <code title="">drawImage(<var
  title="">image</var>, <var title="">sx</var>, <var
  title="">sy</var>, <var title="">sw</var>, <var title="">sh</var>,
  <var title="">dx</var>, <var title="">dy</var>, <var
  title="">dw</var>, <var title="">dh</var>)</code>. (Actually it is
  overloaded with six; each of those three can take either an
  <code>HTMLImageElement</code> or an <code>HTMLCanvasElement</code>
  for the <var title="">image</var> argument.)  If not specified, the
  <var title="">dw</var> and <var title="">dh</var> arguments must
  default to the values of <var title="">sw</var> and <var
  title="">sh</var>, interpreted such that one CSS pixel in the image
  is treated as one unit in the canvas coordinate space. If the <var
  title="">sx</var>, <var title="">sy</var>, <var title="">sw</var>,
  and <var title="">sh</var> arguments are omitted, they must default
  to 0, 0, the image's intrinsic width in image pixels, and the
  image's intrinsic height in image pixels, respectively.</p>

  <p>The <var title="">image</var> argument must be an instance of an
  <code>HTMLImageElement</code> or <code>HTMLCanvasElement</code>. If
  the <var title="">image</var> is of the wrong type or null, the
  implementation must raise a <code>TYPE_MISMATCH_ERR</code>
  exception.</p>
  <!-- createPattern() has an equivalent paragraph -->

  <p>If the <var title="">image</var> argument is an
  <code>HTMLImageElement</code> object whose <code
  title="dom-img-complete">complete</code> attribute is false, then
  the implementation must raise an <code>INVALID_STATE_ERR</code>
  exception.</p>
  <!-- createPattern() has an equivalent paragraph -->

  <!-- handled by the next paragraph
  <p>If the <var title="">image</var> argument is an
  <code>HTMLCanvasElement</code> object with either a horizonal
  dimension or a vertical dimension equal to zero, then the
  implementation must raise an <code>INVALID_STATE_ERR</code>
  exception.</p>
  -->
  <!-- createPattern() has an equivalent paragraph -->

  <p>The source rectangle is the rectangle whose corners are the four
  points (<var title="">sx</var>, <var title="">sy</var>), (<span><var
  title="">sx</var>+<var title="">sw</var></span>, <var
  title="">sy</var>), (<span><var title="">sx</var>+<var
  title="">sw</var></span>, <span><var title="">sy</var>+<var
  title="">sh</var></span>), (<var title="">sx</var>, <span><var
  title="">sy</var>+<var title="">sh</var></span>).</p>

  <p>If the source rectangle is not entirely within the source image,
  or if one of the <var title="">sw</var> or <var title="">sh</var>
  arguments is zero, the implementation must raise an
  <code>INDEX_SIZE_ERR</code> exception.</p>

  <p>The destination rectangle is the rectangle whose corners are the
  four points (<var title="">dx</var>, <var title="">dy</var>),
  (<span><var title="">dx</var>+<var title="">dw</var></span>, <var
  title="">dy</var>), (<span><var title="">dx</var>+<var
  title="">dw</var></span>, <span><var title="">dy</var>+<var
  title="">dh</var></span>), (<var title="">dx</var>, <span><var
  title="">dy</var>+<var title="">dh</var></span>).</p>

  <p>When <code title="dom-context-2d-drawImage">drawImage()</code> is
  invoked, the region of the image specified by the source rectangle
  must be painted on the region of the canvas specified by the
  destination rectangle, after applying the <span
  title="dom-context-2d-transformation">current transformation
  matrix</span> to the points of the destination rectangle.</p>

  <p><img src="images/drawImage.png" alt=""></p> <!-- no alt="" text
  since the image is just repeating what was stated in the previous
  paragraph. -->

  <p class="note">When a canvas is drawn onto itself, the drawing
  model requires the source to be copied before the image is drawn
  back onto the canvas, so it is possible to copy parts of a canvas
  onto overlapping parts of itself.</p>

  <p>When the <code
  title="dom-context-2d-drawImage">drawImage()</code> method is
  passed, as its <var title="">image</var> argument, an animated
  image, the poster frame of the animation, or the first frame of the
  animation if there is no poster frame, must be used.</p>
  <!-- createPattern() has an equivalent paragraph -->

  <p>Images are painted without affecting the current path, and are
  subject to <span title="shadows">shadow effects</span>, <span
  title="dom-context-2d-globalAlpha">global alpha</span>, the <span
  title="clipping region">clipping region</span>, and <span
  title="dom-context-2d-globalCompositeOperation">global composition
  operators</span>.</p>

  <!-- XXX should somehow say that the image used is the actual image
  of the target element, not the rendered image (e.g. height/width
  attributes don't affect it -->



  <h6><dfn>Pixel manipulation</dfn></h6>

<!--
  <span>ImageData</span> <span title="dom-context-2d-createImageData">createImageData</span>(in float sw, in float sh);
  <span>ImageData</span> <span title="dom-context-2d-getImageData">getImageData</span>(in float sx, in float sy, in float sw, in float sh);
  void <span title="dom-context-2d-putImageData">putImageData</span>(in <span>ImageData</span> imagedata, in float dx, in float dy);
  void <span title="dom-context-2d-putImageData">putImageData</span>(in <span>ImageData</span> imagedata, in float dx, in float dy, in float dirtyX, in float dirtyY, in float dirtyWidth, in float dirtyHeight);
-->

  <p>The <dfn
  title="dom-context-2d-createImageData"><code>createImageData(<var
  title="">sw</var>, <var title="">sh</var>)</code></dfn> method must
  return an <code>ImageData</code> object representing a rectangle
  with a width in CSS pixels equal to the absolute magnitude of <var
  title="">sw</var> and a height in CSS pixels equal to the absolute
  magnitude of <var title="">sh</var>, filled with transparent
  black.</p>

  <p>The <dfn
  title="dom-context-2d-getImageData"><code>getImageData(<var
  title="">sx</var>, <var title="">sy</var>, <var title="">sw</var>,
  <var title="">sh</var>)</code></dfn> method must return an
  <code>ImageData</code> object representing the underlying pixel data
  for the area of the canvas denoted by the rectanglewhose corners are
  the four points (<var title="">sx</var>, <var title="">sy</var>),
  (<span><var title="">sx</var>+<var title="">sw</var></span>, <var
  title="">sy</var>), (<span><var title="">sx</var>+<var
  title="">sw</var></span>, <span><var title="">sy</var>+<var
  title="">sh</var></span>), (<var title="">sx</var>, <span><var
  title="">sy</var>+<var title="">sh</var></span>), in canvas
  coordinate space units. Pixels outside the canvas must be returned
  as transparent black. Pixels must be returned as non-premultiplied
  alpha values.</p>

  <p>If any of the arguments to <code
  title="dom-context-2d-createImageData">createImageData()</code> or
  <code title="dom-context-2d-getImageData">getImageData()</code> are
  infinite or NaN, or if either the <var title="">sw</var> or <var
  title="">sh</var> arguments are zero, the method must instead raise
  an <code>INDEX_SIZE_ERR</code> exception.</p>

  <p><code>ImageData</code> objects must be initialised so that their
  <dfn title="dom-imagedata-width"><code>width</code></dfn> attribute
  is set to <var title="">w</var>, the number of physical device
  pixels per row in the image data, their <dfn
  title="dom-imagedata-height"><code>height</code></dfn> attribute is
  set to <var title="">h</var>, the number of rows in the image data,
  and the <dfn title="dom-imagedata-data"><code>data</code></dfn>
  attribute is initialised to an array of <var
  title="">h</var>&times;<var title="">w</var>&times;4 integers. The
  pixels must be represented in this array in left-to-right order, row
  by row, starting at the top left, with each pixel's red, green,
  blue, and alpha components being given in that order. Each component
  of each device pixel represented in this array must be in the range
  0..255, representing the 8 bit value for that component. At least
  one pixel must be returned.</p>

  <p>The values of the <code title="dom-imagedata-data">data</code>
  array may be changed (the length of the array, and the other
  attributes in <code>ImageData</code> objects, are all read-only). On
  setting, JS <code>undefined</code> values must be converted to zero.
  Other values must first be converted to numbers using JavaScript's
  ToNumber algorithm, and if the result is a NaN value, a
  <code>TYPE_MISMATCH_ERR</code> exception must be raised. If the
  result is less than 0, it must be clamped to zero. If the result is
  more than 255, it must be clamped to 255. If the number is not an
  integer, it must be rounded to the nearest integer using the IEEE
  754r <i>roundTiesToEven</i> rounding mode.  <a
  href="#refsECMA262">[ECMA262]</a> <a
  href="#refsIEEE754r">[IEEE754R]</a></p>

  <p class="note">The width and height (<var title="">w</var> and <var
  title="">h</var>) might be different from the <var title="">sw</var>
  and <var title="">sh</var> arguments to the above methods, e.g. if
  the canvas is backed by a high-resolution bitmap, or if the <var
  title="">sw</var> and <var title="">sh</var> arguments are
  negative.</p>

  <p>The <dfn
  title="dom-context-2d-putImageData"><code>putImageData(<var
  title="">imagedata</var>, <var title="">dx</var>, <var
  title="">dy</var>, <var title="">dirtyX</var>, <var
  title="">dirtyY</var>, <var title="">dirtyWidth</var>, <var
  title="">dirtyHeight</var>)</code></dfn> method writes data from
  <code>ImageData</code> structures back to the canvas.</p>

  <p>If the first argment to the method is null or not an
  <code>ImageData</code> object that was returned by <code
  title="dom-context-2d-createImageData">createImageData()</code> or
  <code title="dom-context-2d-getImageData">getImageData()</code> then
  the <code title="dom-context-2d-putImageData">putImageData()</code>
  method must raise a <code>TYPE_MISMATCH_ERR</code> exception.</p>

  <p>If any of the arguments to the method are infinite or NaN, the
  method must raise an <code>INDEX_SIZE_ERR</code> exception.</p>

  <p>When the last four arguments are omitted, they must be assumed to
  have the values 0, 0, the <code
  title="dom-imagedata-width">width</code> member of the <var
  title="">imagedata</var> structure, and the <code
  title="dom-imagedata-height">height</code>member of the <var
  title="">imagedata</var> structure, respectively.</p>

  <p>When invoked with arguments that do not, per the last few
  paragraphs, cause an exception to be raised, the <code
  title="dom-context-2d-putImageData">putImageData()</code> method
  must act as follows:</p>

  <ol>

   <li>

    <p>Let <var title="">dx<sub>device</sub></var> be the x-coordinate
    of the device pixel in the underlying pixel data of the canvas
    corresponding to the <var title="">dx</var> coordinate in the
    canvas coordinate space.</p>

    <p>Let <var title="">dy<sub>device</sub></var> be the y-coordinate
    of the device pixel in the underlying pixel data of the canvas
    corresponding to the <var title="">dy</var> coordinate in the
    canvas coordinate space.</p>

   </li>

   <li>

    <p>If <var title="">dirtyWidth</var> is negative, let <var
    title="">dirtyX</var> be <span><var title="">dirtyX</var>+<var
    title="">dirtyWidth</var></span>, and let <var
    title="">dirtyWidth</var> be equal to the absolute magnitude of
    <var title="">dirtyWidth</var>.</p>

    <p>If <var title="">dirtyHeight</var> is negative, let <var
    title="">dirtyY</var> be <span><var title="">dirtyY</var>+<var
    title="">dirtyHeight</var></span>, and let <var
    title="">dirtyHeight</var> be equal to the absolute magnitude of
    <var title="">dirtyHeight</var>.</p>

   </li>

   <li>

    <p>If <var title="">dirtyX</var> is negative, let <var
    title="">dirtyWidth</var> be <span><var
    title="">dirtyWidth</var>+<var title="">dirtyX</var></span>, and
    let <var title="">dirtyX</var> be zero.</p>

    <p>If <var title="">dirtyY</var> is negative, let <var
    title="">dirtyHeight</var> be <span><var
    title="">dirtyHeight</var>+<var title="">dirtyY</var></span>, and
    let <var title="">dirtyY</var> be zero.</p>

   </li>

   <li>

    <p>If <span><var title="">dirtyX</var>+<var
    title="">dirtyWidth</var></span> is greater than the <code
    title="dom-imagedata-width">width</code> attribute of the <var
    title="">imagedata</var> argument, let <var
    title="">dirtyWidth</var> be the value of that <code
    title="dom-imagedata-width">width</code> attribute, minus the
    value of <var title="">dirtyX</var>.</p>

    <p>If <span><var title="">dirtyY</var>+<var
    title="">dirtyHeight</var></span> is greater than the <code
    title="dom-imagedata-height">height</code> attribute of the <var
    title="">imagedata</var> argument, let <var
    title="">dirtyHeight</var> be the value of that <code
    title="dom-imagedata-height">height</code> attribute, minus the
    value of <var title="">dirtyY</var>.</p>

   </li>

   <li>

    <p>If, after those changes, either <var title="">dirtyWidth</var>
    or <var title="">dirtyHeight</var> is negative or zero, stop these
    steps without affecting the canvas.</p>

   </li>

   <li><p>Otherwise, for all values of <var title="">x</var> and <var
   title="">y</var> where <span><var
   title="">dirtyX</var>&nbsp;&le;&nbsp;<var
   title="">x</var>&nbsp;&lt;&nbsp;<span><var
   title="">dirtyX</var>+<var title="">dirtyWidth</var></span></span>
   and <span><var title="">dirtyY</var>&nbsp;&le;&nbsp;<var
   title="">y</var>&nbsp;&lt;&nbsp;<span><var
   title="">dirtyY</var>+<var
   title="">dirtyHeight</var></span></span>, copy the four channels of
   thr pixel with coordinate (<var title="">x</var>, <var
   title="">y</var>) in the <var title="">imagedata</var> data
   structure to the pixel with coordinate (<span><var
   title="">x<sub>device</sub></var>+<var title="">x</var></span>,
   <span><var title="">y<sub>device</sub></var>+<var
   title="">y</var></span>) in the underlying pixel data of the
   canvas.</p></li>

  </ol>

  <p>The handling of pixel rounding when the specified coordinates do
  not exactly map to the device coordinate space is not defined by
  this specification, except that the following must result in no
  visible changes to the rendering:</p>

  <pre>context.putImageData(context.getImageData(x, y, w, h), x, y);</pre>

  <p>...for any value of <var title="">x</var> and <var
  title="">y</var>. In other words, while user agents may round the
  arguments of the two methods so that they map to device pixel
  boundaries, any rounding performed must be performed consistently
  for both the <code
  title="dom-context-2d-getImageData">getImageData()</code> and <code
  title="dom-context-2d-putImageData">putImageData()</code>
  operations.</p>

  <p>The current path, <span
  title="dom-context-2d-transformation">transformation matrix</span>,
  <span title="shadows">shadow attributes</span>, <span
  title="dom-context-2d-globalAlpha">global alpha</span>, the <span
  title="clipping region">clipping region</span>, and <span
  title="dom-context-2d-globalCompositeOperation">global composition
  operator</span> must not affect the <code
  title="dom-context-2d-getImageData">getImageData()</code> and <code
  title="dom-context-2d-putImageData">putImageData()</code>
  methods.</p>

  <div class="example">

   <p>The data returned by <code
   title="dom-context-2d-getImageData">getImageData()</code> is at the
   resolution of the canvas backing store, which is likely to not be
   one device pixel to each CSS pixel if the display used is a high
   resolution display. Thus, while one could create an
   <code>ImageData</code> object, one would not necessarily know what
   resolution the canvas expected (how many pixels the canvas wants to
   paint over one coordinate space unit pixel).</p>

   <p>In the following example, the script first obtains the size of
   the canvas backing store, and then generates a few new
   <code>ImageData</code> objects which can be used.</p>

   <pre>
  // canvas is a reference to a &lt;canvas> element
  var context = canvas.getContext('2d');

  // create a blank slate
  var data = context.createImageData(canvas.width, canvas.height);

  // create some plasma
  FillPlasma(data, 'green'); // green plasma

  // add a cloud to the plasma
  AddCloud(data, data.width/2, data.height/2); // put a cloud in the middle

  // paint the plasma+cloud on the canvas
  context.putImageData(data, 0, 0);

  // support methods
  function FillPlasma(data, color) { ... }
  function AddCloud(data, x, y) { ... }
</pre>

  </div>

  <div class="example">

   <p>Here is an example of using <code
   title="dom-context-2d-getImageData">getImageData()</code> and <code
   title="dom-context-2d-putImageData">putImageData()</code> to
   implement an edge detection filter.</p>

   <pre>&lt;!DOCTYPE HTML>
&lt;html>
 &lt;head>
  &lt;title>Edge detection demo&lt;/title>
  &lt;script>
   var image = new Image();
   function init() {
     image.onload = demo;
     image.src = "image.jpeg";
   }
   function demo() {
     var canvas = document.getElementsByTagName('canvas')[0];
     var context = canvas.getContext('2d');

     // draw the image onto the canvas
     context.drawImage(image, 0, 0);

     // get the image data to manipulate
     var input = context.getImageData(0, 0, canvas.width, canvas.height);

     // get an empty slate to put the data into
     var output = context.crateImageData(canvas.width, canvas.height);

     // alias some variables for convenience
     // notice that we are using input.width and input.height here
     // as they might not be the same as canvas.width and canvas.height
     // (in particular, they might be different on high-res displays)
     var w = input.width, h = input.height;
     var inputData = input.data;
     var outputData = output.data;

     // edge detection
     for (var y = 1; y &lt; h-1; y += 1) {
       for (var x = 1; x &lt; w-1; x += 1) {
         for (var c = 0; c &lt; 3; c += 1) {
           var i = (y*w + x)*4 + c;
           outputData[i] = 127 + -inputData[i - w*4 - 4] -   inputData[i - w*4] - inputData[i - w*4 + 4] +
                                 -inputData[i - 4]       + 8*inputData[i]       - inputData[i + 4] +
                                 -inputData[i + w*4 - 4] -   inputData[i + w*4] - inputData[i + w*4 + 4];
         }
         outputData[(y*w + x)*4 + 3] = 255; // alpha
       }
     }

     // put the image data back after manipulation
     context.putImageData(output, 0, 0);
   }
  &lt;/script>
 &lt;/head>
 &lt;body onload="init()">
  &lt;canvas>&lt;/canvas>
 &lt;/body>
&lt;/html></pre>

  </div>


  <h6>Drawing model</h6>

  <p>When a shape or image is painted, user agents must follow these
  steps, in the order given (or act as if they do):</p>

  <ol>

   <li><p>Render the shape or image, creating image <var
   title="">A</var>, as described in the previous sections. For
   shapes, the current fill, stroke, and line styles must be honoured,
   and the stroke must itself also be subjected to the current
   transformation matrix.</p></li>

   <li><p>If shadows are supported:</p>

    <ol>

     <li><p>Render the shadow from image <var title="">A</var>, using
     the current shadow styles, creating image <var
     title="">B</var>.</p></li>

     <li><p>Multiply the alpha component of every pixel in <var
     title="">B</var> by <code
     title="dom-context-2d-globalAlpha">globalAlpha</code>.</p></li>

     <li><p>Within the clipping region, composite <var
     title="">B</var> over the current canvas bitmap using the current
     composition operator.</p></li>

    </ol>

   </li>

   <li><p>Multiply the alpha component of every pixel in <var
   title="">A</var> by <code
   title="dom-context-2d-globalAlpha">globalAlpha</code>.</p></li>

   <li><p>Within the clipping region, composite <var title="">A</var>
   over the current canvas bitmap using the current composition
   operator.</p></li>

  </ol>

  <!-- XXX add xrefs in the list above -->



<!--
  <h5 id="3d">The 3D context</h5>

  <p class="big-issue">Well, one day.</p>
-->




  <h5>Color spaces and color correction</h5>

  <p>The <code>canvas</code> APIs must perform colour correction at
  only two points: when rendering images with their own gamma
  correction and color space information onto the canvas, to convert
  the image to the color space used by the canvas (e.g. using the
  <code title="dom-context-2d-drawImage">drawImage()</code> method
  with an <code>HTMLImageElement</code> object), and when rendering
  the actual canvas bitmap to the output device.</p>

  <p class="note">Thus, in the 2D context, colors used to draw shapes
  onto the canvas will exactly match colors obtained through the <code
  title="dom-context-2d-getImageData">getImageData()</code>
  method.</p>

  <p>The <code title="dom-canvas-toDataURL">toDataURL()</code> method
  must not include color space information in the resource
  returned. Where the output format allows it, the color of pixels in
  resources created by <code
  title="dom-canvas-toDataURL">toDataURL()</code> must match those
  returned by the <code
  title="dom-context-2d-getImageData">getImageData()</code>
  method.</p>

  <p>In user agents that support CSS, the color space used by a
  <code>canvas</code> element must match the color space used for
  processing any colors for that element in CSS.</p>

  <p>The gamma correction and color space information of images must
  be handled in such a way that an image rendered directly using an
  <code>img</code> element would use the same colors as one painted on
  a <code>canvas</code> element that is then itself
  rendered. Furthermore, the rendering of images that have no color
  correction information (such as those returned by the <code
  title="dom-canvas-toDataURL">toDataURL()</code> method) must be
  rendered with no color correction.</p>

  <p class="note">Thus, in the 2D context, calling the <code
  title="dom-context-2d-drawImage">drawImage()</code> method to render
  the output of the <code
  title="dom-canvas-toDataURL">toDataURL()</code> method to the
  canvas, given the appropriate dimensions, has no visible effect.</p>


  <h5>Security with <code>canvas</code> elements</h5>

  <p><strong>Information leakage</strong> can occur if scripts from
  one origin are exposed to images from another origin.</p>

  <p>To mitigate this, <code>canvas</code> elements are defined to
  have a flag indicating whether they are <i>origin-clean</i>. All
  <code>canvas</code> elements must start with their
  <i>origin-clean</i> set to true. The flag must be set to false if
  any of the following actions occur:</p>

  <ul>

   <li><p>The element's 2D context's <code
   title="dom-context-2d-drawImage">drawImage()</code> method is
   called with an <code>HTMLImageElement</code> whose
   <span>origin</span> differs from that of the <code>Document</code>
   object that owns the <code>canvas</code> element.</p></li>

   <li><p>The element's 2D context's <code
   title="dom-context-2d-drawImage">drawImage()</code> method is
   called with an <code>HTMLCanvasElement</code> whose
   <i>origin-clean</i> flag is false.</p></li>

   <li><p>The element's 2D context's <code
   title="dom-context-2d-fillStyle">fillStyle</code> attribute is set
   to a <code>CanvasPattern</code> object that was created from an
   <code>HTMLImageElement</code> whose <span>origin</span> differs
   from that of the <code>Document</code> object that owns the
   <code>canvas</code> element.</p></li>

   <li><p>The element's 2D context's <code
   title="dom-context-2d-fillStyle">fillStyle</code> attribute is set
   to a <code>CanvasPattern</code> object that was created from an
   <code>HTMLCanvasElement</code> whose <i>origin-clean</i> flag is
   false.</p></li>

   <li><p>The element's 2D context's <code
   title="dom-context-2d-strokeStyle">strokeStyle</code> attribute is
   set to a <code>CanvasPattern</code> object that was created from an
   <code>HTMLImageElement</code> whose <span>origin</span> differs
   from that of the <code>Document</code> object that owns the
   <code>canvas</code> element.</p></li>

   <li><p>The element's 2D context's <code
   title="dom-context-2d-strokeStyle">strokeStyle</code> attribute is
   set to a <code>CanvasPattern</code> object that was created from an
   <code>HTMLCanvasElement</code> whose <i>origin-clean</i> flag is
   false.</p></li>

  </ul>

  <p>Whenever the <code
  title="dom-canvas-toDataURL">toDataURL()</code> method of a
  <code>canvas</code> element whose <i>origin-clean</i> flag is set to
  false is called, the method must immediately raise a security
  exception.</p>

  <p>Whenever the <code
  title="dom-context-2d-getImageData">getImageData()</code> method of
  the 2D context of a <code>canvas</code> element whose
  <i>origin-clean</i> flag is set to false is called, the method must
  immediately raise a security exception.</p>



  <h4>The <dfn><code>map</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Flow content</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>flow content</span> is expected.</dd>
   <dt>Content model:</dt>
   <dd><span>Flow content</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None, but the <code title="attr-id">id</code> global attribute has special requirements on this element.</dd>
   <dt>DOM interface:</dt>
   <dd>
<pre class="idl">interface <dfn>HTMLMapElement</dfn> : <span>HTMLElement</span> {
  readonly attribute <span>HTMLCollection</span> <span title="dom-map-areas">areas</span>;
  readonly attribute <span>HTMLCollection</span> <span title="dom-map-images">images</span>;
};</pre>
   </dd>
  </dl>

  <p>The <code>map</code> element, in conjuction with any
  <code>area</code> element descendants, defines an <span>image
  map</span>.</p>

  <p>There must always be an <code title="attr-id">id</code> attribute
  present on <code>map</code> elements.</p>

  <p>The <dfn title="dom-map-areas"><code>areas</code></dfn> attribute
  must return an <code>HTMLCollection</code> rooted at the
  <code>map</code> element, whose filter matches only
  <code>area</code> elements.</p>

  <p>The <dfn title="dom-map-images"><code>images</code></dfn>
  attribute must return an <code>HTMLCollection</code> rooted at the
  <code>Document</code> node, whose filter matches only
  <code>img</code> and <code>object</code> elements that are
  associated with this <code>map</code> element according to the
  <span>image map</span> processing model.</p>
  


  <h4>The <dfn><code>area</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Phrasing content</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>phrasing content</span> is expected, but only if there is a <code>map</code> element ancestor.</dd>
   <dt>Content model:</dt>
   <dd>Empty.</dd>
   <dt>Element-specific attributes:</dt>
   <dd><code title="attr-area-alt">alt</code></dd>
   <dd><code title="attr-area-coords">coords</code></dd>
   <dd><code title="attr-area-shape">shape</code></dd>
   <dd><code title="attr-hyperlink-href">href</code></dd>
   <dd><code title="attr-hyperlink-target">target</code></dd>
   <dd><code title="attr-hyperlink-ping">ping</code></dd>
   <dd><code title="attr-hyperlink-rel">rel</code></dd>
   <dd><code title="attr-hyperlink-media">media</code></dd>
   <dd><code title="attr-hyperlink-hreflang">hreflang</code></dd>
   <dd><code title="attr-hyperlink-type">type</code></dd>
   <dt>DOM interface:</dt>
   <dd>
<pre class="idl">interface <dfn>HTMLAreaElement</dfn> : <span>HTMLElement</span> {
           attribute DOMString <span title="dom-area-alt">alt</span>;
           attribute DOMString <span title="dom-area-coords">coords</span>;
           attribute DOMString <span title="dom-area-shape">shape</span>;
           attribute DOMString <span title="dom-area-href">href</span>;
           attribute DOMString <span title="dom-area-target">target</span>;
           attribute DOMString <span title="dom-area-ping">ping</span>;
           attribute DOMString <span title="dom-area-rel">rel</span>;
  readonly attribute DOMTokenList <span title="dom-area-relList">relList</span>;
           attribute DOMString <span title="dom-area-media">media</span>;
           attribute DOMString <span title="dom-area-hreflang">hreflang</span>;
           attribute DOMString <span title="dom-area-type">type</span>;
};</pre>
   </dd>
  </dl>

  <p>The <code>area</code> element represents either a hyperlink with
  some text and a corresponding area on an <span>image map</span>, or
  a dead area on an image map.</p>

  <p>If the <code>area</code> element has an <code
  title="attr-hyperlink-href">href</code> attribute, then the
  <code>area</code> element represents a <span>hyperlink</span>; the
  <dfn title="attr-area-alt"><code>alt</code></dfn> attribute, which
  must then be present, specifies the text.</p>

  <p>However, if the <code>area</code> element has no <code
  title="attr-hyperlink-href">href</code> attribute, then the area
  represented by the element cannot be selected, and the <code
  title="attr-area-alt">alt</code> attribute must be omitted.</p>

  <p>In both cases, the <code title="attr-area-shape">shape</code> and
  <code title="attr-area-coords">coords</code> attributes specify the
  area.</p>

  <p>The <dfn title="attr-area-shape"><code>shape</code></dfn>
  attribute is an <span>enumerated attribute</span>. The following
  table lists the keywords defined for this attribute. The states
  given in the first cell of the the rows with keywords give the
  states to which those keywords map. Some of the keywords are
  non-conforming, as noted in the last column.</p>

  <table>
   <thead>
    <tr>
     <th>State
     <th>Keywords
     <th>Notes
   <tbody>
    <tr>
     <td rowspan=2><dfn title="attr-area-shape-circle">Circle state</dfn>
     <td><code title="">circ</code>
     <td>Non-conforming
    <tr>
     <td><code title="">circle</code>
     <td>
    <tr>
     <td><dfn title="attr-area-shape-default">Default state</dfn>
     <td><code title="">default</code>
     <td>
    <tr>
     <td rowspan=2><dfn title="attr-area-shape-poly">Polygon state</dfn>
     <td><code title="">poly</code>
     <td>
    <tr>
     <td><code title="">polygon</code>
     <td>Non-conforming
    <tr>
     <td rowspan=2><dfn title="attr-area-shape-rect">Rectangle state</dfn>
     <td><code title="">rect</code>
     <td>
    <tr>
     <td><code title="">rectangle</code>
     <td>Non-conforming
  </table>

  <p>The attribute may be ommited. The <i>missing value default</i> is
  the <span title="attr-area-shape-rect">rectangle</span> state.</p>

  <p>The <dfn title="attr-area-coords"><code>coords</code></dfn>
  attribute must, if specified, contain a <span>valid list of
  integers</span>. This attribute gives the coordinates for the shape
  described by the <code title="attr-area-shape">shape</code>
  attribute. The processing for this attribute is described as part of
  the <span>image map</span> processing model.</p>

  <p>In the <span title="attr-area-shape-circle">circle state</span>,
  <code>area</code> elements must have a <code
  title="attr-area-coords">coords</code> attribute present, with three
  integers, the last of which must be non-negative. The first integer
  must be the distance in CSS pixels from the left edge of the image
  to the center of the circle, the second integer must be the distance
  in CSS pixels from the top edge of the image to the center of the
  circle, and the third integer must be the radius of the circle,
  again in CSS pixels.</p>

  <p>In the <span title="attr-area-shape-default">default state</span>
  state, <code>area</code> elements must not have a <code
  title="attr-area-coords">coords</code> attribute.</p>

  <p>In the <span title="attr-area-shape-poly">polygon state</span>,
  <code>area</code> elements must have a <code
  title="attr-area-coords">coords</code> attribute with at least six
  integers, and the number of integers must be even. Each pair of
  integers must represent a coordinate given as the distances from the
  left and the top of the image in CSS pixels respectively, and all
  the coordinates together must represent the points of the polygon,
  in order.</p>

  <p>In the <span title="attr-area-shape-rect">rectangle state</span>,
  <code>area</code> elements must have a <code
  title="attr-area-coords">coords</code> attribute with exactly four
  integers, the first of which must be less than the third, and the
  second of which must be less than the fourth. The four points must
  represent, respectively, the distance from the left edge of the
  image to the top left side of the rectangle, the distance from the
  top edge to the top side, the distance from the left edge to the
  right side, and the distance from the top edge to the bottom side,
  all in CSS pixels.</p>

  <p>When user agents allow users to <span title="following
  hyperlinks">follow hyperlinks</span> created using the
  <code>area</code> element, as described in the next section, the
  <code title="attr-hyperlink-href">href</code>,
  <code title="attr-hyperlink-target">target</code> and <code
  title="attr-hyperlink-ping">ping</code> attributes decide how the
  link is followed. The <code title="attr-hyperlink-rel">rel</code>,
  <code title="attr-hyperlink-media">media</code>, <code
  title="attr-hyperlink-hreflang">hreflang</code>, and <code
  title="attr-hyperlink-type">type</code> attributes may be used to
  indicate to the user the likely nature of the target resource before
  the user follows the link.</p>

  <p>The <code title="attr-hyperlink-target">target</code>, <code
  title="attr-hyperlink-ping">ping</code>, <code
  title="attr-hyperlink-rel">rel</code>, <code
  title="attr-hyperlink-media">media</code>, <code
  title="attr-hyperlink-hreflang">hreflang</code>, and <code
  title="attr-hyperlink-type">type</code> attributes must be omitted
  if the <code title="attr-hyperlink-href">href</code> attribute is
  not present.</p>

  <p>The <span>activation behavior</span> of <code>area</code>
  elements is to run the following steps:</p>

  <ol>

   <li>If the <code title="event-DOMActivate">DOMActivate</code> event
   in question is not <span
   title="concept-events-trusted">trusted</span> (i.e. a <code
   title="dom-click">click()</code> method call was the reason for the
   event being dispatched), and the <code>area</code> element's <code
   title="attr-area-target">target</code> attribute is <span
   class="big-issue">...</span> then raise an
   <code>INVALID_ACCESS_ERR</code> exception.</li>

   <li>Otherwise, the user agent must <span title="following
   hyperlinks">follow the hyperlink</span> defined by the
   <code>area</code> element, if any.</li>

  </ol>

  <p class="note">One way that a user agent can enable users to follow
  hyperlinks is by allowing <code>area</code> elements to be clicked,
  or focussed and activated by the keyboard. This <span
  title="interactive elements">will cause</span> the aforementioned
  <span>activation behavior</span> to be invoked.</p>

  <p>The DOM attributes <dfn
  title="dom-area-alt"><code>alt</code></dfn>, <dfn
  title="dom-area-coords"><code>coords</code></dfn>, <dfn
  title="dom-area-shape"><code>shape</code></dfn>, <dfn
  title="dom-area-href"><code>href</code></dfn>, <dfn
  title="dom-area-target"><code>target</code></dfn>, <dfn
  title="dom-area-ping"><code>ping</code></dfn>, <dfn
  title="dom-area-rel"><code>rel</code></dfn>, <dfn
  title="dom-area-media"><code>media</code></dfn>, <dfn
  title="dom-area-hreflang"><code>hreflang</code></dfn>, and <dfn
  title="dom-area-type"><code>type</code></dfn>, each must
  <span>reflect</span> the respective content attributes of the same
  name.</p>

  <p>The DOM attribute <dfn
  title="dom-area-rellist"><code>relList</code></dfn> must
  <span>reflect</span> the <code title="attr-hyperlink-rel">rel</code>
  content attribute.</p>



  <h4 id="image-maps">Image maps</h4>

  <!-- TESTS
  http://software.hixie.ch/utilities/js/live-dom-viewer/?%3C%21DOCTYPE%20html%3E%0A%3Cimg%20src%3D%22http%3A//hixie.ch/resources/images/smallcats%22%20usemap%3D%23a%20onclick%3Dw%28%27img%27%29%3E%0A%3Cmap%20name%3Da%3E%0A%20%3Carea%20onclick%3Dw%28%271%27%29%20coords%3D%270%25%200%25%20100%25%20100%25%27%20href%3Djavascript%3A%3E%0A%3C/map%3E
  http://software.hixie.ch/utilities/js/live-dom-viewer/?%3C%21DOCTYPE%20html%3E%0A%3Cbody%20onfocus%3D%22w%28document.activeElement.tagName%29%22%3E%0A%3Cimg%20src%3D%22http%3A//hixie.ch/resources/images/smallcats%22%20usemap%3D%23a%20onclick%3Dw%28%27img%27%29%20onfocus%3D%22w%28document.activeElement.tagName%29%22%3E%0A%3Cimg%20src%3D%22http%3A//hixie.ch/resources/images/sample%22%20usemap%3D%23a%20onclick%3Dw%28%27img%27%29%20onfocus%3D%22w%28document.activeElement.tagName%29%22%3E%0A%3Cmap%20name%3Da%20onfocus%3D%22w%28document.activeElement.tagName%29%22%3E%0A%20%3Carea%20onclick%3Dw%28%271%27%29%20coords%3D%270%200%2050%2050%27%20href%3Djavascript%3A%20onfocus%3D%22w%28document.activeElement.tagName%29%22%3E%0A%3C/map%3E%0A%3Cscript%3E%0A%20var%20x%20%3D%20document.getElementsByTagName%28%27img%27%29%5B0%5D%3B%0A%20x.parentNode.appendChild%28x%29%3B%0A%20document.getElementsByTagName%28%27area%27%29%5B0%5D.focus%28%29%3B%0A%3C/script%3E
  http://software.hixie.ch/utilities/js/live-dom-viewer/?%3C%21DOCTYPE%20html%3Ex%3Cmap%3E%3Carea%20shape%3Dpolyg%20coords%3D%221%2C2%203%22%3E%3C/map%3E%0A%3Cscript%3Ex%20%3D%20document.getElementsByTagName%28%27area%27%29%5B0%5D%3B%20w%28x.shape%20+%20%27%20%27%20+%20x.coords%29%3C/script%3E
  http://software.hixie.ch/utilities/js/live-dom-viewer/?%3C%21DOCTYPE%20html%3E%0D%0A%3Cp%3E%3Cimg%20src%3D%22http%3A//hixie.ch/resources/images/astrophy/128%22%20usemap%3D%23a%3E%0D%0A%3Cmap%20name%3Da%3E%3Carea%20shape%3Dcirc%20coords%3D%2220%2C20%2C10%25%22%20href%3D%23%3E%3Carea%20shape%3Dcirc%20coords%3D%2220%2C20%2C10%22%20href%3D%23%3E%3C/map%3E%0D%0A%3Cscript%3Edocument.write%28document.getElementsByTagName%28%27area%27%29%5B0%5D.coords%29%3C/script%3E
  -->

  <p>An <dfn>image map</dfn> allows geometric areas on an image to be
  associated with <span title="hyperlink">hyperlinks</span>.</p>

  <p>An image, in the form of an <code>img</code> element or an
  <code>object</code> element representing an image, may be associated
  with an image map (in the form of a <code>map</code> element) by
  specifying a <dfn
  title="attr-hyperlink-usemap"><code>usemap</code></dfn> attribute on
  the <code>img</code> or <code>object</code> element. The <code
  title="attr-area-usemap">usemap</code> attribute, if specified, must
  be a <span>valid hashed ID reference</span> to a <code>map</code>
  element.</p>

  <p>If an <code>img</code> element or an <code>object</code> element
  representing an image has a <code
  title="attr-area-usemap">usemap</code> attribute specified, user
  agents must process it as follows:</p>

  <ol>

   <li><p>First, <span>rules for parsing a hashed ID reference</span>
   to a <code>map</code> element must be followed. This will return
   either an element (the <var title="">map</var>) or null.</p></li>

   <li><p>If that returned null, then abort these steps. The image is
   not associated with an image map after all.</p></li>

   <li><p>Otherwise, the user agent must collect all the
   <code>area</code> elements that are descendants of the <var
   title="">map</var>. Let those be the <var
   title="">areas</var>.</p></li>

  </ol>

  <p>Having obtained the list of <code>area</code> elements that form
  the image map (the <var title="">areas</var>), interactive user
  agents must process the list in one of two ways.</p>

  <p>If the user agent intends to show the text that the
  <code>img</code> element represents, then it must use the following
  steps.</p>

  <p class="note">In user agents that do not support images, or that
  have images disabled, <code>object</code> elements cannot represent
  images, and thus this section never applies (the <span>fallback
  content</span> is shown instead). The following steps therefore only
  apply to <code>img</code> elements.</p>

  <ol>

   <li><p>Remove all the <code>area</code> elements in <var
   title="">areas</var> that have no <code
   title="attr-hyperlink-href">href</code> attribute.</p></li>

   <li><p>Remove all the <code>area</code> elements in <var
   title="">areas</var> that have no <code
   title="attr-area-alt">alt</code> attribute, or whose <code
   title="attr-area-alt">alt</code> attribute's value is the empty
   string, <em>if</em> there is another <code>area</code> element in
   <var title="">areas</var> with the same value in the <code
   title="attr-hyperlink-href">href</code> attribute and with a
   non-empty <code title="attr-area-alt">alt</code> attribute.</li>

   <li><p>Each remaining <code>area</code> element in <var
   title="">areas</var> represents a <span>hyperlink</span>. Those
   hyperlinks should all be made available to the user in a manner
   associated with the text of the <code>img</code> or
   <code>input</code> element.</p>

   <p>In this context, user agents may represent <code>area</code> and
   <code>img</code> elements with no specified <code
   title="">alt</code> attributes, or whose <code title="">alt</code>
   attributes are the empty string or some other non-visible text, in
   a user-agent-defined fashion intended to indicate the lack of
   suitable author-provided text.</p></li>

  </ol>

  <p>If the user agent intends to show the image and allow interaction
  with the image to select hyperlinks, then the image must be
  associated with a set of layered shapes, taken from the
  <code>area</code> elements in <var title="">areas</var>, in reverse
  tree order (so the last specified <code>area</code> element in the
  <var title="">map</var> is the bottom-most shape, and the first
  element in the <var title="">map</var>, in tree order, is the
  top-most shape).</p>

  <p>Each <code>area</code> element in <var title="">areas</var> must
  be processed as follows to obtain a shape to layer onto the
  image:</p>

  <ol>

   <li><p>Find the state that the element's <code
   title="attr-area-shape">shape</code> attribute represents.</p></li>

   <li><p>Use the <span>rules for parsing a list of integers</span> to
   parse the element's <code title="attr-area-coords">coords</code>
   attribute, if it is present, and let the result be the <var
   title="">coords</var> list. If the attribute is absent, let the
   <var title="">coords</var> list be the empty list.</p></li>

   <li><p>If the number of items in the <var title="">coords</var>
   list is less than the minimum number given for the
   <code>area</code> element's current state, as per the following
   table, then the shape is empty; abort these steps.</p>
    <table>
     <thead>
      <tr>
       <th>State
       <th>Minimum number of items
     <tbody>
      <tr>
       <td><span title="attr-area-shape-circle">Circle state</span>
       <td>3
      <tr>
       <td><span title="attr-area-shape-default">Default state</span>
       <td>0
      <tr>
       <td><span title="attr-area-shape-poly">Polygon state</span>
       <td>6
      <tr>
       <td><span title="attr-area-shape-rect">Rectangle state</span>
       <td>4
    </table>
   </li>

   <li><p>Check for excess items in the <var title="">coords</var>
   list as per the entry in the following list corresponding to the
   <code title="attr-area-shape">shape</code> attribute's state:</p>
    <dl class="switch">
     <dt><span title="attr-area-shape-circle">Circle state</span></dt>
     <dd>Drop any items in the list beyond the third.</dd>
     <dt><span title="attr-area-shape-default">Default state</span></dt>
     <dd>Drop all items in the list.</dd>
     <dt><span title="attr-area-shape-poly">Polygon state</span></dt>
     <dd>Drop the last item if there's an odd number of items.</dd>
     <dt><span title="attr-area-shape-rect">Rectangle state</span></dt>
     <dd>Drop any items in the list beyond the fourth.</dd>
    </dl>
   </li>

   <li><p>If the <code title="attr-area-shape">shape</code> attribute
   represents the <span title="attr-area-shape-rect">rectangle
   state</span>, and the first number in the list is numerically less
   than the third number in the list, then swap those two numbers
   around.</p></li>

   <li><p>If the <code title="attr-area-shape">shape</code> attribute
   represents the <span title="attr-area-shape-rect">rectangle
   state</span>, and the second number in the list is numerically less
   than the fourth number in the list, then swap those two numbers
   around.</p></li>

   <li><p>If the <code title="attr-area-shape">shape</code> attribute
   represents the <span title="attr-area-shape-circle">circle
   state</span>, and the third number in the list is less than or
   equal to zero, then the shape is empty; abort these steps.</p></li>

   <li><p>Now, the shape represented by the element is the one
   described for the entry in the list below corresponding to the
   state of the <code title="attr-area-shape">shape</code>
   attribute:</p>

    <dl class="switch">

     <dt><span title="attr-area-shape-circle">Circle state</span></dt>
     <dd>
      <p>Let <var title="">x</var> be the first number in <var
      title="">coords</var>, <var title="">y</var> be the second
      number, and <var title="">r</var> be the third number.</p>
      <p>The shape is a circle whose center is <var title="">x</var>
      CSS pixels from the left edge of the image and <var
      title="">x</var> CSS pixels from the top edge of the image, and
      whose radius is <var title="">r</var> pixels.</p>
     </dd>

     <dt><span title="attr-area-shape-default">Default state</span></dt>
     <dd>
      <p>The shape is a rectangle that exactly covers the entire
      image.</p>
     </dd>

     <dt><span title="attr-area-shape-poly">Polygon state</span></dt>
     <dd>

      <p>Let <var title="">x<sub title=""><var
      title="">i</var></sub></var> be the <span>(2<var
      title="">i</var>)</span>th entry in <var title="">coords</var>,
      and <var title="">y<sub title=""><var
      title="">i</var></sub></var> be the <span>(2<var
      title="">i</var>+1)</span>th entry in <var title="">coords</var>
      (the first entry in <var title="">coords</var> being the one
      with index 0).</p>

      <p>Let <var title="">the coordinates</var> be (<var
      title="">x<sub title=""><var title="">i</var></sub></var>, <var
      title="">y<sub title=""><var title="">i</var></sub></var>),
      interpreted in CSS pixels measured from the top left of the
      image, for all integer values of <var title="">i</var> from 0 to
      <span>(<var title="">N</var>/2)-1</span>, where <var
      title="">N</var> is the number of items in <var
      title="">coords</var>.</p>

      <p>The shape is a polygon whose vertices are given by <var
      title="">the coordinates</var>, and whose interior is
      established using the even-odd rule. <a
      href="#refsGRAPHICS">[GRAPHICS]</a></p>

      <!-- If anyone has this book ("Computer Graphics: Principles and
           Practice in C"), please check page 34 or so and see if it
           makes any references to literature in the bibliographic
           section to define the "even-odd" rule for polygon filling
           and hit testing.
        <dd id="refsGRAPHICS">[GRAPHICS]</dd>
        <dd>(Non-normative) <cite>Computer Graphics: Principles and Practice in C</cite>, Second Edition, J. Foley, A. van Dam, S. Feiner, J. Hughes. Addison-Wesley, July 1995. ISBN 0-201-84840-6.</dd>
      -->

      <!--
        browsers implement the even-odd rule / even winding rule:
        http://software.hixie.ch/utilities/js/live-dom-viewer/?%3C%21DOCTYPE%20html%3E%0A%3Cimg%20usemap%3D%22%23x%22%20src%3D%22/resources/images/sample%22%3E%0A%3Cmap%20name%3D%22x%22%3E%0A%20%20%3Carea%20shape%3Dpolygon%20coords%3D%220%2C0%200%2C100%20100%2C100%20100%2C2%201%2C2%202%2C1%202%2C99%2099%2C99%2099%2C0%22%20href%3Da%3E%0A%3C/map%3E%0A
       -->

     </dd>

     <dt><span title="attr-area-shape-rect">Rectangle state</span></dt>

     <dd>

      <p>Let <var title="">x1</var> be the first number in <var
      title="">coords</var>, <var title="">y1</var> be the second
      number, <var title="">x2</var> be the third number, and <var
      title="">y2</var> be the fourth number.</p>

      <p>The shape is a rectangle whose top-left corner is given by
      the coordinate (<var title="">x1</var>, <var title="">y1</var>)
      and whose bottom right corner is given by the coordinate (<var
      title="">x2</var>, <var title="">y2</var>), those coordinates
      being interpreted as CSS pixels from the top left corner of the
      image.</p>

     </dd>

    </dl>

    <p>For historical reasons, the coordinates must be interpreted
    relative to the <em>displayed</em> image, even if it stretched
    using CSS or the image element's <code title="">width</code> and
    <code title="">height</code> attributes.</p>

   </li>

  </ol>

  <p>Mouse clicks on an image associated with a set of layered shapes
  per the above algorithm must be dispatched to the top-most shape
  covering the point that the pointing device indicated (if any), and
  then, must be dispatched again (with a new <code>Event</code>
  object) to the image element itself. User agents may also allow
  individual <code>area</code> elements representing <span
  title="hyperlink">hyperlinks</span> to be selected and activated
  (e.g. using a keyboard); events from this are not also propagated to
  the image.</p>

  <p class="note">Because a <code>map</code> element (and its
  <code>area</code> elements) can be associated with multiple
  <code>img</code> and <code>object</code> elements, it is possible
  for an <code>area</code> element to correspond to multiple focusable
  areas of the document.</p>

  <p>Image maps are <em>live</em>; if the DOM is mutated, then the
  user agent must act as if it had rerun the algorithms for image
  maps.</p>



  <h4><dfn>Dimension attributes</dfn></h4>

  <p>The <dfn title="attr-dim-width"><code>width</code></dfn> and <dfn
  title="attr-dim-height"><code>height</code></dfn> attributes on
  <code>img</code>, <code>embed</code>, <code>object</code>, and
  <code>video</code> elements may be specified to give the dimensions
  of the visual content of the element (the width and height
  respectively, relative to the nominal direction of the output
  medium), in CSS pixels. The attributes, if specified, must have
  values that are <span>valid positive non-zero integers</span>.</p>

  <p>The specified dimensions given may differ from the dimensions
  specified in the resource itself, since the resource may have a
  resolution that differs from the CSS pixel resolution. (On screens,
  CSS pixels have a resolution of 96ppi, but in general the CSS pixel
  resolution depends on the reading distance.) If both attributes are
  specified, then the ratio of the specified width to the specified
  height must be the same as the ratio of the logical width to the
  logical height in the resource. The two attributes must be omitted
  if the resource in question does not have both a logical width and a
  logical height.</p>

  <p>To parse the attributes, user agents must use the <span>rules for
  parsing dimension values</span>. This will return either an integer
  length, a percentage value, or nothing. The user agent requirements
  for processing the values obtained from parsing these attributes are
  described <span title="sizing of embedded content">in the rendering
  section</span><!-- XXX xref -->. If one of these attributes, when
  parsing, returns no value, it must be treated, for the purposes of
  those requirements, as if it was not specified.</p>

  <p>The <dfn title="dom-dim-width"><code>width</code></dfn> and <dfn
  title="dom-dim-height"><code>height</code></dfn> DOM attributes on
  the <code>embed</code>, <code>object</code>, and <code>video</code>
  elements must reflect the content attributes of the same name.</p>




  <h3>Tabular data</h3>

  <h4>The <dfn><code>table</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Flow content</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>flow content</span> is expected.</dd>
   <dt>Content model:</dt>
   <dd>In this order: optionally a <code>caption</code> element,
   followed by either zero or more <code>colgroup</code> elements,
   followed optionally by a <code>thead</code> element, followed
   optionally by a <code>tfoot</code> element, followed by either zero
   or more <code>tbody</code> elements <em>or</em> one or more
   <code>tr</code> elements, followed optionally by a
   <code>tfoot</code> element (but there can only be one
   <code>tfoot</code> element child in total).</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None.</dd>
   <dt>DOM interface:</dt>
   <dd>
<pre class="idl">interface <dfn>HTMLTableElement</dfn> : <span>HTMLElement</span> {
           attribute <span>HTMLTableCaptionElement</span> <span title="dom-table-caption">caption</span>;
  HTMLElement <span title="dom-table-createCaption">createCaption</span>();
  void <span title="dom-table-deleteCaption">deleteCaption</span>();
           attribute <span>HTMLTableSectionElement</span> <span title="dom-table-tHead">tHead</span>;
  HTMLElement <span title="dom-table-createTHead">createTHead</span>();
  void <span title="dom-table-deleteTHead">deleteTHead</span>();
           attribute <span>HTMLTableSectionElement</span> <span title="dom-table-tFoot">tFoot</span>;
  HTMLElement <span title="dom-table-createTFoot">createTFoot</span>();
  void <span title="dom-table-deleteTFoot">deleteTFoot</span>();
  readonly attribute <span>HTMLCollection</span> <span title="dom-table-tBodies">tBodies</span>;
  readonly attribute <span>HTMLCollection</span> <span title="dom-table-rows">rows</span>;
  HTMLElement <span title="dom-table-insertRow">insertRow</span>(in long index);
  void <span title="dom-table-deleteRow">deleteRow</span>(in long index);
};</pre>
   </dd>
  </dl>

  <p>The <code>table</code> element represents data with more than one
  dimension (a <span title="concept-table">table</span>).</p>

  <p class="big-issue">we need some editorial text on how layout
  tables are bad practice and non-conforming</p>

  <p>The children of a <code>table</code> element must be, in
  order:</p><!-- XXX do we need this? it's already up there... -->

  <ol>

   <li><p>Zero or one <code>caption</code> elements.</p></li>

   <li><p>Zero or more <code>colgroup</code> elements.</p></li>

   <li><p>Zero or one <code>thead</code> elements.</p></li>

   <li><p>Zero or one <code>tfoot</code> elements, if the last element
   in the table is not a <code>tfoot</code> element.</p></li>

   <li><p>Either:</p>

    <ul>

     <li>Zero or more <code>tbody</code> elements, or</li>

     <li>One or more <code>tr</code> elements. <strong
     class="note">(Only expressible in the <span title="">XML
     serialisation</span><!-- XXX xref -->.)</strong></li>

    </ul>

   </li>

   <li><p>Zero or one <code>tfoot</code> element, if there are no
   other <code>tfoot</code> elements in the table.</p></li>

  </ol>

  <p>The <code>table</code> element takes part in the <span>table
  model</span>.</p>

  <p>The <dfn title="dom-table-caption"><code>caption</code></dfn> DOM
  attribute must return, on getting, the first <code>caption</code>
  element child of the <code>table</code> element. On setting, if the
  new value is a <code>caption</code> element, the first
  <code>caption</code> element child of the <code>table</code>
  element, if any, must be removed, and the new value must be inserted
  as the first node of the <code>table</code> element. If the new
  value is not a <code>caption</code> element, then a
  <code>HIERARCHY_REQUEST_ERR</code> DOM exception must be raised
  instead.</p>

  <p>The <dfn
  title="dom-table-createCaption"><code>createCaption()</code></dfn>
  method must return the first <code>caption</code> element child of
  the <code>table</code> element, if any; otherwise a new
  <code>caption</code> element must be created, inserted as the first
  node of the <code>table</code> element, and then returned.</p>

  <p>The <dfn
  title="dom-table-deleteCaption"><code>deleteCaption()</code></dfn>
  method must remove the first <code>caption</code> element child of
  the <code>table</code> element, if any.</p>

  <p>The <dfn title="dom-table-tHead"><code>tHead</code></dfn> DOM
  attribute must return, on getting, the first <code>thead</code>
  element child of the <code>table</code> element. On setting, if the
  new value is a <code>thead</code> element, the first
  <code>thead</code> element child of the <code>table</code> element,
  if any, must be removed, and the new value must be inserted
  immediately before the first element in the <code>table</code>
  element that is neither a <code>caption</code> element nor a
  <code>colgroup</code> element, if any, or at the end of the table
  otherwise. If the new value is not a <code>thead</code> element,
  then a <code>HIERARCHY_REQUEST_ERR</code> DOM exception must be
  raised instead.</p>

  <p>The <dfn
  title="dom-table-createTHead"><code>createTHead()</code></dfn>
  method must return the first <code>thead</code> element child of the
  <code>table</code> element, if any; otherwise a new
  <code>thead</code> element must be created and inserted immediately
  before the first element in the <code>table</code> element that is
  neither a <code>caption</code> element nor a <code>colgroup</code>
  element, if any, or at the end of the table otherwise, and then that
  new element must be returned.</p>

  <p>The <dfn
  title="dom-table-deleteTHead"><code>deleteTHead()</code></dfn>
  method must remove the first <code>thead</code> element child of the
  <code>table</code> element, if any.</p>

  <p>The <dfn title="dom-table-tFoot"><code>tFoot</code></dfn> DOM
  attribute must return, on getting, the first <code>tfoot</code>
  element child of the <code>table</code> element. On setting, if the
  new value is a <code>tfoot</code> element, the first
  <code>tfoot</code> element child of the <code>table</code> element,
  if any, must be removed, and the new value must be inserted
  immediately before the first element in the <code>table</code>
  element that is neither a <code>caption</code> element, a
  <code>colgroup</code> element, nor a <code>thead</code> element, if
  any, or at the end of the table if there are no such elements. If
  the new value is not a <code>tfoot</code> element, then a
  <code>HIERARCHY_REQUEST_ERR</code> DOM exception must be raised
  instead.</p>

  <p>The <dfn
  title="dom-table-createTFoot"><code>createTFoot()</code></dfn>
  method must return the first <code>tfoot</code> element child of the
  <code>table</code> element, if any; otherwise a new
  <code>tfoot</code> element must be created and inserted immediately
  before the first element in the <code>table</code> element that is
  neither a <code>caption</code> element, a <code>colgroup</code>
  element, nor a <code>thead</code> element, if any, or at the end of
  the table if there are no such elements, and then that new element
  must be returned.</p>

  <p>The <dfn
  title="dom-table-deleteTFoot"><code>deleteTFoot()</code></dfn>
  method must remove the first <code>tfoot</code> element child of the
  <code>table</code> element, if any.</p>

  <p>The <dfn title="dom-table-tBodies"><code>tBodies</code></dfn>
  attribute must return an <code>HTMLCollection</code> rooted at the
  <code>table</code> node, whose filter matches only
  <code>tbody</code> elements that are children of the
  <code>table</code> element.</p>

  <p>The <dfn title="dom-table-rows"><code>rows</code></dfn> attribute
  must return an <code>HTMLCollection</code> rooted at the
  <code>table</code> node, whose filter matches only <code>tr</code>
  elements that are either children of the <code>table</code> element,
  or children of <code>thead</code>, <code>tbody</code>, or
  <code>tfoot</code> elements that are themselves children of the
  <code>table</code> element. The elements in the collection must be
  ordered such that those elements whose parent is a
  <code>thead</code> are included first, in tree order, followed by
  those elements whose parent is either a <code>table</code> or
  <code>tbody</code> element, again in tree order, followed finally by
  those elements whose parent is a <code>tfoot</code> element, still
  in tree order.</p>

  <p>The behaviour of the <dfn
  title="dom-table-insertRow"><code>insertRow(<var
  title="">index</var>)</code></dfn> method depends on the state of
  the table. When it is called, the method must act as required by the
  first item in the following list of conditions that describes the
  state of the table and the <var title="">index</var> argument:</p>

  <dl class="switch">

   <dt>If <var title="">index</var> is less than -1 or greater than
   the number of elements in <code title="dom-table-rows">rows</code>
   collection:</dt>

   <dd>The method must raise an <code>INDEX_SIZE_ERR</code>
   exception.</dd>

   <dt>If the <code title="dom-table-rows">rows</code> collection has
   zero elements in it, and the <code>table</code> has no
   <code>tbody</code> elements in it:</dt>

   <dd>The method must create a <code>tbody</code> element, then
   create a <code>tr</code> element, then append the <code>tr</code>
   element to the <code>tbody</code> element, then append the
   <code>tbody</code> element to the <code>table</code> element, and
   finally return the <code>tr</code> element.</dd>

   <dt>If the <code title="dom-table-rows">rows</code> collection has
   zero elements in it:</dt>

   <dd>The method must create a <code>tr</code> element, append it to
   the last <code>tbody</code> element in the table, and return the
   <code>tr</code> element.</dd>

   <dt>If <var title="">index</var> is equal to -1 or equal to the
   number of items in <code title="dom-table-rows">rows</code>
   collection:</dt>

   <dd>The method must create a <code>tr</code> element, and append it
   to the parent of the last <code>tr</code> element in the <code
   title="dom-table-rows">rows</code> collection. Then, the newly
   created <code>tr</code> element must be returned.</dd>

   <dt>Otherwise:</dt>

   <dd>The method must create a <code>tr</code> element, insert it
   immediately before the <var title="">index</var>th <code>tr</code>
   element in the <code title="dom-table-rows">rows</code> collection,
   in the same parent, and finally must return the newly created
   <code>tr</code> element.</dd>

  </dl>

  <p>The <dfn title="dom-table-deleteRow"><code>deleteRow(<var
  title="">index</var>)</code></dfn> method must remove the <var
  title="">index</var>th element in the <code
  title="dom-table-rows">rows</code> collection from its parent. If
  <var title="">index</var> is less than zero or greater than or equal
  to the number of elements in the <code
  title="dom-table-rows">rows</code> collection, the method must
  instead raise an <code>INDEX_SIZE_ERR</code> exception.</p>


  <h4>The <dfn><code>caption</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd>None.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>As the first element child of a <code>table</code> element.</dd>
   <dt>Content model:</dt>
   <dd><span>Phrasing content</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>caption</code> element represents the title of the
  <code>table</code> that is its parent, if it has a parent and that
  is a <code>table</code> element.</p>

  <p>The <code>caption</code> element takes part in the <span>table
  model</span>.</p>


  <h4>The <dfn><code>colgroup</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd>None.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>As a child of a <code>table</code> element, after any
   <code>caption</code> elements and before any <code>thead</code>,
   <code>tbody</code>, <code>tfoot</code>, and <code>tr</code>
   elements.</dd>
   <dt>Content model:</dt>
   <dd>Zero or more <code>col</code> elements.</dd>
   <dt>Element-specific attributes:</dt>
   <dd><code title="attr-colgroup-span">span</code></dd>
   <dt>DOM interface:</dt>
   <dd>
<pre class="idl">interface <dfn>HTMLTableColElement</dfn> : <span>HTMLElement</span> {
           attribute unsigned long <span title="dom-colgroup-span">span</span>;
};</pre>
   </dd>
  </dl>

  <p>The <code>colgroup</code> element represents a <span
  title="concept-column-group">group</span> of one or more <span
  title="concept-column">columns</span> in the <code>table</code> that
  is its parent, if it has a parent and that is a <code>table</code>
  element.</p>

  <p>If the <code>colgroup</code> element contains no <code>col</code>
  elements, then the element may have a <dfn
  title="attr-colgroup-span"><code>span</code></dfn> content attribute
  specified, whose value must be a <span>valid non-negative
  integer</span> greater than zero. Its default value, which must be
  used if <span title="rules for parsing non-negative
  integers">parsing the attribute as a non-negative integer</span>
  returns either an error or zero, is 1.</p>

  <p>The <code>colgroup</code> element and its <code
  title="attr-colgroup-span">span</code> attribute take part in the
  <span>table model</span>.</p>

  <p>The <dfn title="dom-colgroup-span"><code>span</code></dfn> DOM
  attribute must <span>reflect</span> the content attribute of the
  same name, with the exception that on setting, if the new value is
  0, then an <code>INDEX_SIZE_ERR</code> exception must be raised.</p>


  <h4>The <dfn><code>col</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd>None.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>As a child of a <code>colgroup</code> element that doesn't have
   a <code title="attr-col-span">span</code> attribute.</dd>
   <dt>Content model:</dt>
   <dd>Empty.</dd>
   <dt>Element-specific attributes:</dt>
   <dd><code title="attr-col-span">span</code></dd>
   <dt>DOM interface:</dt>
   <dd>
    <p><code>HTMLTableColElement</code>, same as for
    <code>colgroup</code> elements. This interface defines one member,
    <code title="dom-col-span">span</code>.</p>
   </dd>
  </dl>

  <p>If a <code>col</code> element has a parent and that is a
  <code>colgroup</code> element that itself has a parent that is a
  <code>table</code> element, then the <code>col</code> element
  represents one or more <span title="concept-column">columns</span>
  in the <span title="concept-column-group">column group</span>
  represented by that <code>colgroup</code>.</p>

  <p>The element may have a <dfn
  title="attr-col-span"><code>span</code></dfn> content attribute
  specified, whose value must be a <span>valid non-negative
  integer</span> greater than zero. Its default value, which must be
  used if <span title="rules for parsing non-negative
  integers">parsing the attribute as a non-negative integer</span>
  returns either an error or zero, is 1.</p>

  <p>The <code>col</code> element and its <code
  title="attr-col-span">span</code> attribute take part in the
  <span>table model</span>.</p>

  <p>The <dfn title="dom-col-span"><code>span</code></dfn> DOM
  attribute must <span>reflect</span> the content attribute of the
  same name, with the exception that on setting, if the new value is
  0, then an <code>INDEX_SIZE_ERR</code> exception must be raised.</p>


  <h4>The <dfn><code>tbody</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd>None.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>As a child of a <code>table</code> element, after any
   <code>caption</code>, <code>colgroup</code>, and
   <code>thead</code> elements, but only if there are no
   <code>tr</code> elements that are children of the
   <code>table</code> element.</dd>
   <dt>Content model:</dt>
   <dd>One or more <code>tr</code> elements</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None.</dd>
   <dt>DOM interface:</dt>
   <dd>
    <pre class="idl">interface <dfn>HTMLTableSectionElement</dfn> : <span>HTMLElement</span> {
  readonly attribute <span>HTMLCollection</span> <span title="dom-tbody-rows">rows</span>;
  <span>HTMLElement</span> <span title="dom-tbody-insertRow">insertRow</span>(in long index);
  void <span title="dom-tbody-deleteRow">deleteRow</span>(in long index);
};</pre>
    <p>The <code>HTMLTableSectionElement</code> interface is also
    used for <code>thead</code> and <code>tfoot</code> elements.</p>
   </dd>
  </dl>

  <p>The <code>tbody</code> element represents a <span
  title="concept-row-group">block</span> of <span
  title="concept-row">rows</span> that consist of a body of data for
  the parent <code>table</code> element, if the <code>tbody</code>
  element has a parent and it is a <code>table</code>.</p>

  <p>The <code>tbody</code> element takes part in the <span>table
  model</span>.</p>

  <p>The <dfn title="dom-tbody-rows"><code>rows</code></dfn> attribute
  must return an <code>HTMLCollection</code> rooted at the element,
  whose filter matches only <code>tr</code> elements that are children
  of the element.</p>

  <p>The <dfn title="dom-tbody-insertRow"><code>insertRow(<var
  title="">index</var>)</code></dfn> method must, when invoked on an
  element <var title="">table section</var>, act as follows:</p>

  <p>If <var title="">index</var> is less than -1 or greater than the
  number of elements in the <code title="dom-tbody-rows">rows</code>
  collection, the method must raise an <code>INDEX_SIZE_ERR</code>
  exception.</p>

  <p>If <var title="">index</var> is equal to -1 or equal to the
  number of items in the <code title="dom-tbody-rows">rows</code>
  collection, the method must create a <code>tr</code> element, append
  it to the element <var title="">table section</var>, and return the
  newly created <code>tr</code> element.</p>

  <p>Otherwise, the method must create a <code>tr</code> element,
  insert it as a child of the <var title="">table section</var>
  element, immediately before the <var title="">index</var>th
  <code>tr</code> element in the <code
  title="dom-tbody-rows">rows</code> collection, and finally must
  return the newly created <code>tr</code> element.</p>

  <p>The <dfn title="dom-tbody-deleteRow"><code>deleteRow(<var
  title="">index</var>)</code></dfn> method must remove the <var
  title="">index</var>th element in the <code
  title="dom-tbody-rows">rows</code> collection from its parent. If
  <var title="">index</var> is less than zero or greater than or equal
  to the number of elements in the <code
  title="dom-tbody-rows">rows</code> collection, the method must
  instead raise an <code>INDEX_SIZE_ERR</code> exception.</p>



  <h4>The <dfn><code>thead</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd>None.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>As a child of a <code>table</code> element, after any
   <code>caption</code>, and <code>colgroup</code>
   elements and before any <code>tbody</code>, <code>tfoot</code>, and
   <code>tr</code> elements, but only if there are no other
   <code>thead</code> elements that are children of the
   <code>table</code> element.</dd>
   <dt>Content model:</dt>
   <dd>One or more <code>tr</code> elements</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None.</dd>
   <dt>DOM interface:</dt>
   <dd><code>HTMLTableSectionElement</code>, as defined for
   <code>tbody</code> elements.</dd>
  </dl>

  <p>The <code>thead</code> element represents the <span
  title="concept-row-group">block</span> of <span
  title="concept-row">rows</span> that consist of the column labels
  (headers) for the parent <code>table</code> element, if the
  <code>thead</code> element has a parent and it is a
  <code>table</code>.</p>

  <p>The <code>thead</code> element takes part in the <span>table
  model</span>.</p>


  <h4>The <dfn><code>tfoot</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd>None.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>As a child of a <code>table</code> element, after any
   <code>caption</code>, <code>colgroup</code>, and <code>thead</code>
   elements and before any <code>tbody</code> and <code>tr</code>
   elements, but only if there are no other <code>tfoot</code>
   elements that are children of the <code>table</code> element.</dd>
   <dd>As a child of a <code>table</code> element, after any
   <code>caption</code>, <code>colgroup</code>, <code>thead</code>,
   <code>tbody</code>, and <code>tr</code> elements, but only if there
   are no other <code>tfoot</code> elements that are children of the
   <code>table</code> element.</dd>
   <dt>Content model:</dt>
   <dd>One or more <code>tr</code> elements</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None.</dd>
   <dt>DOM interface:</dt>
   <dd><code>HTMLTableSectionElement</code>, as defined for
   <code>tbody</code> elements.</dd>
  </dl>

  <p>The <code>tfoot</code> element represents the <span
  title="concept-row-group">block</span> of <span
  title="concept-row">rows</span> that consist of the column summaries
  (footers) for the parent <code>table</code> element, if the
  <code>tfoot</code> element has a parent and it is a
  <code>table</code>.</p>

  <p>The <code>tfoot</code> element takes part in the <span>table
  model</span>.</p>


  <h4>The <dfn><code>tr</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd>None.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>As a child of a <code>thead</code> element.</dd>
   <dd>As a child of a <code>tbody</code> element.</dd>
   <dd>As a child of a <code>tfoot</code> element.</dd>
   <dd>As a child of a <code>table</code> element, after any
   <code>caption</code>, <code>colgroup</code>, and <code>thead</code>
   elements, but only if there are no <code>tbody</code> elements that
   are children of the <code>table</code> element.</dd>
   <dt>Content model:</dt>
   <dd>One or more <code>td</code> or <code>th</code> elements</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None.</dd>
   <dt>DOM interface:</dt>
   <dd>
    <pre class="idl">interface <dfn>HTMLTableRowElement</dfn> : <span>HTMLElement</span> {
  readonly attribute long <span title="dom-tr-rowIndex">rowIndex</span>;
  readonly attribute long <span title="dom-tr-sectionRowIndex">sectionRowIndex</span>;
  readonly attribute <span>HTMLCollection</span> <span title="dom-tr-cells">cells</span>;
  <span>HTMLElement</span> <span title="dom-tr-insertCell">insertCell</span>(in long index);
  void <span>deleteCell</span>(in long index);
};</pre>
   </dd>
  </dl>

  <p>The <code>tr</code> element represents a <span
  title="concept-row">row</span> of <span
  title="concept-cell">cells</span> in a <span
  title="concept-table">table</span>.</p>

  <p>The <code>tr</code> element takes part in the <span>table
  model</span>.</p>

  <p>The <dfn title="dom-tr-rowIndex"><code>rowIndex</code></dfn>
  element must, if the element has a parent <code>table</code>
  element, or a parent <code>tbody</code>, <code>thead</code>, or
  <code>tfoot</code> element and a <em>grandparent</em>
  <code>table</code> element, return the index of the <code>tr</code>
  element in that <code>table</code> element's <code
  title="dom-table-rows">rows</code> collection. If there is no such
  <code>table</code> element, then the attribute must return 0.</p>

  <p>The <dfn
  title="dom-tr-sectionRowIndex"><code>sectionRowIndex</code></dfn>
  DOM attribute must, if the element has a parent <code>table</code>,
  <code>tbody</code>, <code>thead</code>, or <code>tfoot</code>
  element, return the index of the <code>tr</code> element in the
  parent element's <code title="">rows</code> collection (for tables,
  that's the <code title="dom-table-rows">rows</code> collection; for
  table sections, that's the <code title="dom-tbody-rows">rows</code>
  collection). If there is no such parent element, then the attribute
  must return 0.</p>

  <p>The <dfn title="dom-tr-cells"><code>cells</code></dfn> attribute
  must return an <code>HTMLCollection</code> rooted at the
  <code>tr</code> element, whose filter matches only <code>td</code>
  and <code>th</code> elements that are children of the
  <code>tr</code> element.</p>

  <p>The <dfn title="dom-tr-insertCell"><code>insertCell(<var
  title="">index</var>)</code></dfn> method must act as follows:</p>

  <p>If <var title="">index</var> is less than -1 or greater than the
  number of elements in the <code title="dom-tr-cells">cells</code>
  collection, the method must raise an <code>INDEX_SIZE_ERR</code>
  exception.</p>

  <p>If <var title="">index</var> is equal to -1 or equal to the
  number of items in <code title="dom-tr-cells">cells</code>
  collection, the method must create a <code>td</code> element, append
  it to the <code>tr</code> element, and return the newly created
  <code>td</code> element.</p>

  <p>Otherwise, the method must create a <code>td</code> element,
  insert it as a child of the <code>tr</code> element, immediately
  before the <var title="">index</var>th <code>td</code> or
  <code>th</code> element in the <code
  title="dom-tr-cells">cells</code> collection, and finally must
  return the newly created <code>td</code> element.</p>

  <p>The <dfn title="dom-tr-deleteCell"><code>deleteCell(<var
  title="">index</var>)</code></dfn> method must remove the <var
  title="">index</var>th element in the <code
  title="dom-tr-cells">cells</code> collection from its parent. If
  <var title="">index</var> is less than zero or greater than or equal
  to the number of elements in the <code
  title="dom-tr-cells">cells</code> collection, the method must
  instead raise an <code>INDEX_SIZE_ERR</code> exception.</p>


  <h4>The <dfn><code>td</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Sectioning root</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>As a child of a <code>tr</code> element.</dd>
   <dt>Content model:</dt>
   <dd><span>Flow content</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd><code title="attr-td-colspan">colspan</code></dd>
   <dd><code title="attr-td-rowspan">rowspan</code></dd>
   <dt>DOM interface:</dt>
   <dd>
    <pre class="idl">interface <dfn>HTMLTableCellElement</dfn> : <span>HTMLElement</span> {
           attribute long <span title="dom-td-colSpan">colSpan</span>;
           attribute long <span title="dom-td-rowSpan">rowSpan</span>;
  readonly attribute long <span title="dom-td-cellIndex">cellIndex</span>;
};</pre>
   </dd>
  </dl>

  <p>The <code>td</code> element represents a data <span
  title="concept-cell">cell</span> in a table.</p>

  <p>The <code>td</code> element may have a <dfn
  title="attr-td-colspan"><code>colspan</code></dfn> content attribute
  specified, whose value must be a <span>valid non-negative
  integer</span> greater than zero. Its default value, which must be
  used if <span title="rules for parsing non-negative
  integers">parsing the attribute as a non-negative integer</span>
  returns either an error or zero, is 1.</p>

  <p>The <code>td</code> element may also have a <dfn
  title="attr-td-rowspan"><code>rowspan</code></dfn> content attribute
  specified, whose value must be a <span>valid non-negative
  integer</span>. Its default value, which must be used if <span
  title="rules for parsing non-negative integers">parsing the
  attribute as a non-negative integer</span> returns an error, is also
  1.</p>

  <p>The <code>td</code> element and its <code
  title="attr-td-colspan">colspan</code> and <code
  title="attr-td-rowspan">rowspan</code> attributes take part in the
  <span>table model</span>.</p>

  <p>The <dfn title="dom-td-colspan"><code>colspan</code></dfn> DOM
  attribute must <span>reflect</span> the content attribute of the
  same name, with the exception that on setting, if the new value is
  0, then an <code>INDEX_SIZE_ERR</code> exception must be raised.</p>

  <p>The <dfn title="dom-td-rowspan"><code>rowspan</code></dfn> DOM
  attribute must <span>reflect</span> the content attribute of the
  same name.</p>

  <p>The <dfn title="dom-td-cellIndex"><code>cellIndex</code></dfn>
  DOM attribute must, if the element has a parent <code>tr</code>
  element, return the index of the cell's element in the parent
  element's <code title="dom-tr-cells">cells</code> collection. If
  there is no such parent element, then the attribute must return
  0.</p>

  <p class="big-issue">There has been some suggestion that the <code
  title="">headers</code> attribute from HTML4, or some other
  mechanism that is more powerful than <code title="">scope=""</code>,
  should be included. This has not yet been considered.</p>


  <h4>The <dfn><code>th</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd>None.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>As a child of a <code>tr</code> element.</dd>
   <dt>Content model:</dt>
   <dd><span>Phrasing content</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd><code title="attr-th-colspan">colspan</code></dd>
   <dd><code title="attr-th-rowspan">rowspan</code></dd>
   <dd><code title="attr-th-scope">scope</code></dd>
   <dt>DOM interface:</dt>
   <dd>
    <pre class="idl">interface <dfn>HTMLTableHeaderCellElement</dfn> : <span>HTMLTableCellElement</span> {
           attribute DOMString <span title="dom-th-scope">scope</span>;
};</pre>
   </dd>
  </dl>

  <p>The <code>th</code> element represents a header <span
  title="concept-cell">cell</span> in a table.</p>

  <p>The <code>th</code> element may have a <dfn
  title="attr-th-colspan"><code>colspan</code></dfn> content attribute
  specified, whose value must be a <span>valid non-negative
  integer</span> greater than zero. Its default value, which must be
  used if <span title="rules for parsing non-negative
  integers">parsing the attribute as a non-negative integer</span>
  returns either an error or zero, is 1.</p>

  <p>The <code>th</code> element may also have a <dfn
  title="attr-th-rowspan"><code>rowspan</code></dfn> content attribute
  specified, whose value must be a <span>valid non-negative
  integer</span>. Its default value, which must be used if <span
  title="rules for parsing non-negative integers">parsing the
  attribute as a non-negative integer</span> returns an error, is also
  1.</p>

  <p>The <code>th</code> element may have a <dfn
  title="attr-th-scope"><code>scope</code></dfn> content attribute
  specified. The <code title="attr-th-scope">scope</code> attribute is
  an <span>enumerated attribute</span> with five states, four of which
  have explicit keywords:</p>

  <dl>

   <dt>The <dfn title="attr-th-scope-row"><code>row</code></dfn>
   keyword, which maps to the <em>row</em> state</dt>

   <dd>The <em>row</em> state means the header cell applies to all the
   remaining cells in the row.</dd>

   <dt>The <dfn title="attr-th-scope-col"><code>col</code></dfn>
   keyword, which maps to the <em>column</em> state</dt>

   <dd>The <em>column</em> state means the header cell applies to all
   the remaining cells in the column.</dd>

   <dt>The <dfn
   title="attr-th-scope-rowgroup"><code>rowgroup</code></dfn> keyword,
   which maps to the <em>row group</em> state</dt>

   <dd>The <em>row group</em> state means the header cell applies to
   all the remaining cells in the row group.</dd>

   <dt>The <dfn
   title="attr-th-scope-colgroup"><code>colgroup</code></dfn> keyword,
   which maps to the <em>column group</em> state</dt>

   <dd>The <em>column group</em> state means the header cell applies
   to all the remaining cells in the column group.</dd>

   <dt>The <em>auto</em> state</dt>

   <dd>The <em>auto</em> state makes the header cell apply to a set of
   cells selected based on context.</dd>

  </dl>

  <p>The <code title="attr-th-scope">scope</code> attribute's
  <em>missing value default</em> is the <em>auto</em> state.</p>

  <p>The exact effect of these values is described in detail in the
  <span>algorithm for assigning header cells to data cells</span>,
  which user agents must apply to determine the relationships between
  data cells and header cells.</p>

  <p>The <code>th</code> element and its <code
  title="attr-th-colspan">colspan</code>, <code
  title="attr-th-rowspan">rowspan</code>, and <code
  title="attr-th-scope">scope</code> attributes take part in the
  <span>table model</span>.</p>

  <p>The <dfn title="dom-th-scope"><code>scope</code></dfn> DOM
  attribute must <span>reflect</span> the content attribute of the
  same name.</p>

  <p>The <code>HTMLTableHeaderCellElement</code> interface inherits
  from the <code>HTMLTableCellElement</code> interface and therefore
  also has the DOM attributes defined above in the <code>td</code>
  section.</p>


  <h4>Processing model</h4>

  <p>The various table elements and their content attributes together
  define the <dfn>table model</dfn>.</p>

  <p>A <dfn title="concept-table">table</dfn> consists of cells
  aligned on a two-dimensional grid of <dfn
  title="concept-slots">slots</dfn> with coordinates (<var
  title="">x</var>, <var title="">y</var>). The grid is finite, and is
  either empty or has one or more slots. If the grid has one or more
  slots, then the <var title="">x</var> coordinates are always in the
  range <span>1&nbsp;&le;&nbsp;<var
  title="">x</var>&nbsp;&le;&nbsp;<var title="">x<sub
  title="">max</sub></var></span>, and the <var title="">y</var>
  coordinates are always in the range <span>1&nbsp;&le;&nbsp;<var
  title="">y</var>&nbsp;&le;&nbsp;<var title="">y<sub
  title="">max</sub></var></span>. If one or both of <var
  title="">x<sub title="">max</sub></var> and <var title="">y<sub
  title="">max</sub></var> are zero, then the table is empty (has no
  slots). Tables correspond to <code>table</code> elements.</p>

  <p>A <dfn title="concept-cell">cell</dfn> is a set of slots anchored
  at a slot (<var title="">cell<sub title="">x</sub></var>, <var
  title="">cell<sub title="">y</sub></var>), and with a particular
  <var title="">width</var> and <var title="">height</var> such that
  the cell covers all the slots with coordinates (<var
  title="">x</var>, <var title="">y</var>) where <span><var
  title="">cell<sub title="">x</sub></var>&nbsp;&le;&nbsp;<var
  title="">x</var>&nbsp;&lt;&nbsp;<var title="">cell<sub
  title="">x</sub></var>+<var title="">width</var></span> and
  <span><var title="">cell<sub
  title="">y</sub></var>&nbsp;&le;&nbsp;<var
  title="">y</var>&nbsp;&lt;&nbsp;<var title="">cell<sub
  title="">y</sub></var>+<var title="">height</var></span>. Cell can
  either be <em>data cells</em> or <em>header cells</em>. Data cells
  correspond to <code>td</code> elements, and have zero or more
  associated header cells. Header cells correspond to <code>th</code>
  elements.</p>

  <p>A <dfn title="concept-row">row</dfn> is a complete set of slots
  from <span><var title="">x</var>=1</span> to <span><var
  title="">x</var>=<var title="">x<sub
  title="">max</sub></var></span>, for a particular value of <var
  title="">y</var>. Rows correspond to <code>tr</code> elements.</p>

  <p>A <dfn title="concept-column">column</dfn> is a complete set of
  slots from <span><var title="">y</var>=1</span> to <span><var
  title="">y</var>=<var title="">y<sub
  title="">max</sub></var></span>, for a particular value of <var
  title="">x</var>. Columns can correspond to <code>col</code>
  elements, but in the absense of <code>col</code> elements are
  implied.</p>

  <p>A <dfn title="concept-row-group">row group</dfn> is a set of
  <span title="concept-row">rows</span> anchored at a slot (1, <var
  title="">group<sub title="">y</sub></var>) with a particular <var
  title="">height</var> such that the row group covers all the slots
  with coordinates (<var title="">x</var>, <var title="">y</var>)
  where <span>1&nbsp;&le;&nbsp;<var
  title="">x</var>&nbsp;&lt;&nbsp;<var title="">x<sub
  title="">max</sub></var></span> and <span><var title="">group<sub
  title="">y</sub></var>&nbsp;&le;&nbsp;<var
  title="">y</var>&nbsp;&lt;&nbsp;<var title="">group<sub
  title="">y</sub></var>+<var title="">height</var></span>. Row groups
  correspond to <code>tbody</code>, <code>thead</code>, and
  <code>tfoot</code> elements. Not every row is necessarily in a row
  group.</p>

  <p>A <dfn title="concept-column-group">column group</dfn> is a set
  of <span title="concept-column">columns</span> anchored at a slot
  (<var title="">group<sub title="">x</sub></var>, 1) with a
  particular <var title="">width</var> such that the column group
  covers all the slots with coordinates (<var title="">x</var>, <var
  title="">y</var>) where <span><var title="">group<sub
  title="">x</sub></var>&nbsp;&le;&nbsp;<var
  title="">x</var>&nbsp;&lt;&nbsp;<var title="">group<sub
  title="">x</sub></var>+<var title="">width</var></span> and
  <span>1&nbsp;&le;&nbsp;<var title="">y</var>&nbsp;&lt;&nbsp;<var
  title="">y<sub title="">max</sub></var></span>. Column groups
  correspond to <code>colgroup</code> elements. Not every column is
  necessarily in a column group.</p>

  <p><span title="concept-row-group">Row groups</span> cannot overlap
  each other. Similarly, <span title="concept-column-group">column
  groups</span> cannot overlap each other.</p>

  <p>A <span title="concept-cell">cell</span> cannot cover slots that
  are from two or more <span title="concept-row-group">row
  groups</span>. It is, however, possible for a cell to be in multiple
  <span title="concept-column-group">column groups</span>. All the
  slots that form part of one cell are part of zero or one <span
  title="concept-row-group">row groups</span> and zero or more <span
  title="concept-column-group">column groups</span>.</p>

  <p>In addition to <span title="concept-cell">cells</span>, <span
  title="concept-column">columns</span>, <span
  title="concept-row">rows</span>, <span title="concept-row-group">row
  groups</span>, and <span title="concept-column-group">column
  groups</span>, <span title="concept-table">tables</span> can have a
  <code>caption</code> element associated with them. This gives the
  table a heading, or legend.</p>

  <p>A <dfn>table model error</dfn> is an error with the data
  represented by <code>table</code> elements and their
  descendants. Documents must not have table model errors.</p>


  <h5>Forming a table</h5>

  <p>To determine which elements correspond to which slots in a <span
  title="concept-table">table</span> associated with a
  <code>table</code> element, to determine the dimensions of the table
  (<var title="">x<sub title="">max</sub></var> and <var
  title="">y<sub title="">max</sub></var>), and to determine if there
  are any <span title="table model error">table model errors</span>,
  user agents must use the following algorithm:</p>

  <ol>

   <li>
    <p>Let <var title="">x<sub title="">max</sub></var> be zero.</p>
   </li>

   <li>
    <p>Let <var title="">y<sub title="">max</sub></var> be zero.</p>
   </li>

   <li>
    <p>Let <var title="">the table</var> be the <span
    title="concept-table">table</span> represented by the
    <code>table</code> element. The <var title="">x<sub
    title="">max</sub></var> and <var title="">y<sub
    title="">max</sub></var> variables give <var title="">the
    table</var>'s extent. <var title="">The table</var> is initially
    empty.</p>
   </li>

   <li>

    <p>If the <code>table</code> element has no table children, then
    return <var title="">the table</var> (which will be empty), and
    abort these steps.</p>

   </li>

   <li>

    <p>Let the <var title="">current element</var> be the first
    element child of the <code>table</code> element.</p>

    <p>If a step in this algorithm ever requires the <var
    title="">current element</var> to be advanced to the next child of
    the <code>table</code> when there is no such next child, then the
    algorithm must be aborted at that point and the algorithm must
    return <var title="">the table</var>.</p>

   </li>

   <li>

    <p>While the <var title="">current element</var> is not one of the
    following elements, advance the <var title="">current
    element</var> to the next child of the <code>table</code>:</p>

    <ul class="brief">
     <li><code>caption</code></li>
     <li><code>colgroup</code></li>
     <li><code>thead</code></li>
     <li><code>tbody</code></li>
     <li><code>tfoot</code></li>
     <li><code>tr</code></li>
    </ul>

   </li>

   <li>

    <p>If the <var title="">current element</var> is a
    <code>caption</code>, then that is the <code>caption</code>
    element associated with <var title="">the table</var>. Otherwise,
    it has no associated <code>caption</code> element.</p>

   </li>

   <li>

    <p>If the <var title="">current element</var> is a
    <code>caption</code>, then while the <var title="">current
    element</var> is not one of the following elements, advance the
    <var title="">current element</var> to the next child of the
    <code>table</code>:</p>

    <ul class="brief">
     <li><code>colgroup</code></li>
     <li><code>thead</code></li>
     <li><code>tbody</code></li>
     <li><code>tfoot</code></li>
     <li><code>tr</code></li>
    </ul>

    <p>(Otherwise, the <var title="">current element</var> will
    already be one of those elements.)</p>

   </li>

   <li>

    <p>If the <var title="">current element</var> is a
    <code>colgroup</code>, follow these substeps:</p>

    <ol>

     <li>

      <p><em>Column groups.</em> Process the <var title="">current
      element</var> according to the appropriate one of the following
      two cases:</p>

      <dl class="switch">

       <dt>If the <var title="">current element</var> has any
       <code>col</code> element children</dt>

       <dd>

        <p>Follow these steps:</p>

        <ol>

         <li>

          <p>Let <var title="">x<sub title="">start</sub></var> have
          the value <span><var title="">x<sub
          title="">max</sub></var>+1</span>.</p>

         </li>

         <li>

          <p>Let the <var title="">current column</var> be the first
          <code>col</code> element child of the <code>colgroup</code>
          element.</p>

         </li>

         <li>

          <p><em>Columns.</em> If the <var title="">current
          column</var> <code>col</code> element has a <code
          title="attr-col-span">span</code> attribute, then parse its
          value using the <span>rules for parsing non-negative
          integers</span>.</p>

          <p>If the result of parsing the value is not an error or
          zero, then let <var title="">span</var> be that value.</p>

          <p>Otherwise, if the <code>col</code> element has no <code
          title="attr-col-span">span</code> attribute, or if trying to
          parse the attribute's value resulted in an error, then let
          <var title="">span</var> be 1.</p>

         </li>

         <li>

          <p>Increase <var title="">x<sub title="">max</sub></var> by
          <var title="">span</var>.</p>

         </li>

         <li>

          <p>Let the last <var title="">span</var> <span
          title="concept-column">columns</span> in <var title="">the
          table</var> correspond to the <var title="">current
          column</var> <code>col</code> element.</p>

         </li>

         <li>

          <p>If <var title="">current column</var> is not the last
          <code>col</code> element child of the <code>colgroup</code>
          element, then let the <var title="">current column</var> be
          the next <code>col</code> element child of the
          <code>colgroup</code> element, and return to the third step
          of this innermost group of steps (columns).</p>

         </li>

         <li>

          <p>Let all the last <span
          title="concept-column">columns</span> in <var title="">the
          table</var> from <span>x=<var title="">x<sub
          title="">start</sub></var></span> to <span>x=<var
          title="">x<sub title="">max</sub></var></span> form a new
          <span title="concept-column-group">column group</span>,
          anchored at the slot (<var title="">x<sub
          title="">start</sub></var>, 1), with width <var
          title="">x<sub title="">max</sub></var>-<var title="">x<sub
          title="">start</sub></var>-1, corresponding to the
          <code>colgroup</code> element.</p>

         </li>

        </ol>

       </dd>


       <dt>If the <var title="">current element</var> has no
       <code>col</code> element children</dt>

       <dd>

        <ol>

         <li>

          <p>If the <code>colgroup</code> element has a <code
          title="attr-colgroup-span">span</code> attribute, then parse
          its value using the <span>rules for parsing non-negative
          integers</span>.</p>

          <p>If the result of parsing the value is not an error or
          zero, then let <var title="">span</var> be that value.</p>

          <p>Otherwise, if the <code>colgroup</code> element has no
          <code title="attr-col-span">span</code> attribute, or if
          trying to parse the attribute's value resulted in an error,
          then let <var title="">span</var> be 1.</p>

         </li>

         <li>

          <p>Increase <var title="">x<sub title="">max</sub></var> by
          <var title="">span</var>.</p>

         </li>

         <li>

          <p>Let the last <var title="">span</var> <span
          title="concept-column">columns</span> in <var title="">the
          table</var> form a new <span
          title="concept-column-group">column group</span>, anchored
          at the slot (<var title="">x<sub
          title="">max</sub></var>-<var title="">span</var>+1, 1),
          with width <var title="">span</var>, corresponding to the
          <code>colgroup</code> element.</p>

         </li>

        </ol>

       </dd>

      </dl>

     </li>

     <li>

      <p>Advance the <var title="">current element</var> to the next
      child of the <code>table</code>.</p>

     </li>

     <li>

      <p>While the <var title="">current element</var> is not one of
      the following elements, advance the <var title="">current
      element</var> to the next child of the <code>table</code>:</p>

      <ul class="brief">
       <li><code>colgroup</code></li>
       <li><code>thead</code></li>
       <li><code>tbody</code></li>
       <li><code>tfoot</code></li>
       <li><code>tr</code></li>
      </ul>

     </li>

     <li>

      <p>If the <var title="">current element</var> is a
      <code>colgroup</code> element, jump to step 1 in these substeps
      (column groups).</p>

     </li>

    </ol>

   </li>

   <li>

    <p>Let <var title="">y<sub title="">current</sub></var> be
    zero. When the algorithm is aborted, if <var title="">y<sub
    title="">current</sub></var> does not equal <var title="">y<sub
    title="">max</sub></var>, then that is a <span>table model
    error</span>.</p>

   </li>

   <li>

    <p>Let the <var title="">list of downward-growing cells</var> be
    an empty list.</p>

   </li>

   <li>

    <p><em>Rows.</em> While the <var title="">current element</var> is
    not one of the following elements, advance the <var
    title="">current element</var> to the next child of the
    <code>table</code>:</p>

    <ul class="brief">
     <li><code>thead</code></li>
     <li><code>tbody</code></li>
     <li><code>tfoot</code></li>
     <li><code>tr</code></li>
    </ul>

   </li>

   <li>

    <p>If the <var title="">current element</var> is a
    <code>tr</code>, then run the <span>algorithm for processing
    rows</span> (defined below), then return to the previous step
    (rows).</p>

   </li>

   <li>

    <p>Otherwise, run the <span>algorithm for ending a row
    group</span>.</p>

   </li>

   <li>

    <p>Let <var title="">y<sub title="">start</sub></var> have the
    value <span><var title="">y<sub
    title="">max</sub></var>+1</span>.</p>

   </li>

   <li>

    <p>For each <code>tr</code> element that is a child of the <var
    title="">current element</var>, in tree order, run the
    <span>algorithm for processing rows</span> (defined below).</p>

   </li>

   <li>

    <!-- if we added any rows, make them part of a row group -->
    <p>If <span><var title="">y<sub
    title="">max</sub></var>&nbsp;&ge;&nbsp;<var title="">y<sub
    title="">start</sub></var></span>, then let all the last <span
    title="concept-row">rows</span> in <var title="">the table</var>
    from <span>y=<var title="">y<sub title="">start</sub></var></span>
    to <span>y=<var title="">y<sub title="">max</sub></var></span>
    form a new <span title="concept-row-group">row group</span>,
    anchored at the slot with coordinate (1, <var title="">y<sub
    title="">start</sub></var>), with height <var title="">y<sub
    title="">max</sub></var>-<var title="">y<sub
    title="">start</sub></var>+1, corresponding to the <var
    title="">current element</var>.</p>

   </li>

   <li>

    <p>Run the <span>algorithm for ending a row group</span>
    again.</p>

   </li>

   <li>

    <p>Return to step 12 (rows).</p>

   </li>

  </ol>

  <p>The <dfn>algorithm for ending a row group</dfn>, which is invoked
  by the set of steps above when starting and ending a block of rows,
  is:</p>

  <ol>

   <li>

    <p>If <var title="">y<sub title="">current</sub></var> is less
    than <var title="">y<sub title="">max</sub></var>, then this is a
    <span>table model error</span>.</p>

   </li>

   <li>

    <p>While <var title="">y<sub title="">current</sub></var> is less
    than <var title="">y<sub title="">max</sub></var>, follow these
    steps:</p>

    <ol>

     <li>

      <p>Increase <var title="">y<sub title="">current</sub></var> by
      1.</p>

     </li>

     <li>

      <p>Run the <span>algorithm for growing downward-growing
      cells</span>.</p>

     </li>

    </ol>

   </li>

   <li>

    <p>Empty the <var title="">list of downward-growing
    cells</var>.</p>

   </li>

  </ol>

  <p>The <dfn>algorithm for processing rows</dfn>, which is invoked by
  the set of steps above for processing <code>tr</code> elements,
  is:</p>

  <ol>

   <li>

    <p>Increase <var title="">y<sub title="">current</sub></var> by
    1.</p>
    <!-- ymax is increased below once we know cell dimensions -->

   </li>

   <li>

    <p>Run the <span>algorithm for growing downward-growing
    cells</span>.</p>

   </li>

   <li>

    <p>Let <var title="">x<sub title="">current</sub></var> be 1.</p>
    <!-- xmax is increased below once we know cell dimensions -->

   </li>

   <li>

    <p>If the <code>tr</code> element being processed contains no
    <code>td</code> or <code>th</code> elements, then abort this set
    of steps and return to the algorithm above.</p>

   </li>

   <li>

    <p>Let <var title="">current cell</var> be the first
    <code>td</code> or <code>th</code> element in the <code>tr</code>
    element being processed.</p>

   </li>

   <li>

    <p><em>Cells.</em> While <var title="">x<sub
    title="">current</sub></var> is less than or equal to <var
    title="">x<sub title="">max</sub></var> and the slot with
    coordinate (<var title="">x<sub title="">current</sub></var>, <var
    title="">y<sub title="">current</sub></var>) already has a cell
    assigned to it, increase <var title="">x<sub
    title="">current</sub></var> by 1.</p>

   </li>

   <li>

    <p>If <var title="">x<sub title="">current</sub></var> is greater
    than <var title="">x<sub title="">max</sub></var>, increase <var
    title="">x<sub title="">max</sub></var> by 1 (which will make them
    equal).</p>

   </li>

   <li>

    <p>If the <var title="">current cell</var> has a <code
    title="">colspan</code> attribute, then <span title="rules for
    parsing non-negative integer values">parse that attribute's
    value</span>, and let <var title="">colspan</var> be the result.</p>

    <p>If parsing that value failed, or returned zero, or if the
    attribute is absent, then let <var title="">colspan</var> be 1,
    instead.</p>

   </li>

   <li>

    <p>If the <var title="">current cell</var> has a <code
    title="">rowspan</code> attribute, then <span title="rules for
    parsing non-negative integer values">parse that attribute's
    value</span>, and let <var title="">rowspan</var> be the result.</p>

    <p>If parsing that value failed or if the attribute is absent,
    then let <var title="">rowspan</var> be 1, instead.</p>

   </li>

   <li>

    <p>If <var title="">rowspan</var> is zero, then let <var
    title="">cell grows downward</var> be true, and set <var
    title="">rowspan</var> to 1. Otherwise, let <var title="">cell
    grows downward</var> be false.</p>

   </li>

   <li>

    <p>If <span><var title="">x<sub
    title="">max</sub></var>&nbsp;&lt;&nbsp;<var title="">x<sub
    title="">current</sub></var>+<var title="">colspan</var>-1</span>,
    then let <var title="">x<sub title="">max</sub></var> be <var
    title="">x<sub title="">current</sub></var>+<var
    title="">colspan</var>-1.</p>

   </li>

   <li>

    <p>If <span><var title="">y<sub
    title="">max</sub></var>&nbsp;&lt;&nbsp;<var title="">y<sub
    title="">current</sub></var>+<var title="">rowspan</var>-1</span>,
    then let <var title="">y<sub title="">max</sub></var> be <var
    title="">y<sub title="">current</sub></var>+<var
    title="">rowspan</var>-1.</p>

   </li>

   <li>

    <p>Let the slots with coordinates (<var title="">x</var>, <var
    title="">y</var>) such that <span><var title="">x<sub
    title="">current</sub></var>&nbsp;&le;&nbsp;<var
    title="">x</var>&nbsp;&lt;&nbsp;<var title="">x<sub
    title="">current</sub></var>+<var title="">colspan</var></span>
    and <span><var title="">y<sub
    title="">current</sub></var>&nbsp;&le;&nbsp;<var
    title="">y</var>&nbsp;&lt;&nbsp;<var title="">y<sub
    title="">current</sub></var>+<var title="">rowspan</var></span> be
    covered by a new <span title="concept-cell">cell</span> <var
    title="">c</var>, anchored at (<var title="">x<sub
    title="">current</sub></var>, <var title="">y<sub
    title="">current</sub></var>), which has width <var
    title="">colspan</var> and height <var title="">rowspan</var>,
    corresponding to the <var title="">current cell</var> element.</p>

    <p>If the <var title="">current cell</var> element is a
    <code>th</code> element, let this new cell <var title="">c</var>
    be a header cell; otherwise, let it be a data cell. To establish
    what header cells apply to a data cell, use the <span>algorithm
    for assigning header cells to data cells</span> described in the
    next section.</p>

    <p>If any of the slots involved already had a <span
    title="concept-cell">cell</span> covering them, then this is a
    <span>table model error</span>. Those slots now have two cells
    overlapping.</p>

   </li>

   <li>

    <p>If <var title="">cell grows downward</var> is true, then add
    the tuple {<var title="">c</var>, <var title="">x<sub
    title="">current</sub></var>, <var title="">colspan</var>} to the
    <var title="">list of downward-growing cells</var>.</p>

   </li>

   <li>

    <p>Increase <var title="">x<sub title="">current</sub></var> by
    <var title="">colspan</var>.</p>

   </li>

   <li>

    <p>If <var title="">current cell</var> is the last <code>td</code>
    or <code>th</code> element in the <code>tr</code> element being
    processed, then abort this set of steps and return to the
    algorithm above.</p>

   </li>

   <li>

    <p>Let <var title="">current cell</var> be the next
    <code>td</code> or <code>th</code> element in the <code>tr</code>
    element being processed.</p>

   </li>

   <li>

    <p>Return to step 5 (cells).</p>

   </li>

  </ol>

  <p>The <dfn>algorithm for growing downward-growing cells</dfn>, used
  when adding a new row, is as follows:</p>

  <ol>

   <li>

    <p>If the <var title="">list of downward-growing cells</var> is
    empty, do nothing. Abort these steps; return to the step that
    invoked this algorithm.</p>

   </li>

   <li>

    <p>Otherwise, if <var title="">y<sub title="">max</sub></var> is
    less than <var title="">y<sub title="">current</sub></var>, then
    increase <var title="">y<sub title="">max</sub></var> by 1 (this
    will make it equal to <var title="">y<sub
    title="">current</sub></var>).</p>

   </li>

   <li>

    <p>For each {<var title="">cell</var>, <var title="">cell<sub
    title="">x</sub></var>, <var title="">width</var>} tuple in the
    <var title="">list of downward-growing cells</var>, extend the
    <span title="concept-cell">cell</span> <var title="">cell</var> so
    that it also covers the slots with coordinates (<var
    title="">x</var>, <var title="">y<sub
    title="">current</sub></var>), where <span><var title="">cell<sub
    title="">x</sub></var>&nbsp;&le;&nbsp;<var
    title="">x</var>&nbsp;&lt;&nbsp;<var title="">cell<sub
    title="">x</sub></var>+<var title="">width</var>-1</span>.</p>

   </li>

  </ol>

  <p>If, after establishing which elements correspond to which slots,
  there exists a <span title="concept-column">column</span> in the
  <span title="concept-table">table</span> containing only <span
  title="concept-slot">slots</span> that do not have a <span
  title="concept-cell">cell</span> anchored to them, then this is a
  <span>table model error</span>.</p>


  <h5 id="header-and-data-cell-semantics">Forming relationships between data cells and header cells</h5>

  <p>Each data cell can be assigned zero or more header cells. The
  <dfn>algorithm for assigning header cells to data cells</dfn> is as
  follows.</p>

  <p>For each header cell in the table, in <span>tree
  order</span>:</p>

  <ol>

   <li>

    <p>Let (<var title="">header<sub title="">x</sub></var>, <var
    title="">header<sub title="">y</sub></var>) be the coordinate of
    the slot to which the header cell is anchored.</p>

   </li>

   <li>

    <p>Examine the <code title="attr-th-scope">scope</code> attribute
    of the <code>th</code> element corresponding to the header cell,
    and, based on its state, apply the appropriate substep:</p>

    <dl class="switch">

     <dt>If it is in the <em title="attr-th-scope-row">row</em> state</dt>

     <dd>

      <p>Assign the header cell to any data cells anchored at slots
      with coordinates (<var title="">data<sub title="">x</sub></var>,
      <var title="">data<sub title="">y</sub></var>) where <span><var
      title="">header<sub title="">x</sub></var>&nbsp;&lt;&nbsp;<var
      title="">data<sub title="">x</sub></var>&nbsp;&le;&nbsp;<var
      title="">x<sub title="">max</sub></var></span> and <span><var
      title="">data<sub title="">y</sub></var>&nbsp;=&nbsp;<var
      title="">header<sub title="">y</sub></var></span>.</p>

     </dd>

     <dt>If it is in the <em title="attr-th-scope-col">column</em> state</dt>

     <dd>

      <p>Assign the header cell to any data cells anchored at slots
      with coordinates (<var title="">data<sub title="">x</sub></var>,
      <var title="">data<sub title="">y</sub></var>) where <span><var
      title="">data<sub title="">x</sub></var>&nbsp;=&nbsp;<var
      title="">header<sub title="">x</sub></var></span> and <span><var
      title="">header<sub title="">y</sub></var>&nbsp;&lt;&nbsp;<var
      title="">data<sub title="">y</sub></var>&nbsp;&le;&nbsp;<var
      title="">y<sub title="">max</sub></var></span>.</p>

     </dd>

     <dt>If it is in the <em title="attr-th-scope-rowgroup">row group</em> state</dt>

     <dd>

      <p>If the header cell is not in a <span
      title="concept-row-group">row group</span>, then don't assign
      the header cell to any data cells.</p>

      <p>Otherwise, let (1, <var title="">group<sub
      title="">y</sub></var>) be the slot at which the row group is
      anchored, let <var title="">height</var> be the number of rows
      in the row group, and assign the header cell to any data cells
      anchored at slots with coordinates (<var title="">data<sub
      title="">x</sub></var>, <var title="">data<sub
      title="">y</sub></var>) where <span><var title="">header<sub
      title="">x</sub></var>&nbsp;&le;&nbsp;<var title="">data<sub
      title="">x</sub></var>&nbsp;&le;&nbsp;<var title="">x<sub
      title="">max</sub></var></span> and <span><var
      title="">header<sub title="">y</sub></var>&nbsp;&le;&nbsp;<var
      title="">data<sub title="">y</sub></var>&nbsp;&lt;&nbsp;<var
      title="">group<sub title="">y</sub></var>+<var
      title="">height</var></span>.</p>

     </dd>

     <dt>If it is in the <em title="attr-th-scope-colgroup">column group</em> state</dt>

     <dd>

      <p>If the header cell is not in a <span
      title="concept-column-group">column group</span>, then don't
      assign the header cell to any data cells.</p>

      <p>Otherwise, let (<var title="">group<sub
      title="">x</sub></var>, 1) be the slot at which the column group
      is anchored, let <var title="">width</var> be the number of
      columns in the column group, and assign the header cell to any
      data cells anchored at slots with coordinates (<var
      title="">data<sub title="">x</sub></var>, <var title="">data<sub
      title="">y</sub></var>) where <span><var title="">header<sub
      title="">x</sub></var>&nbsp;&le;&nbsp;<var title="">data<sub
      title="">x</sub></var>&nbsp;&lt;&nbsp;<var title="">group<sub
      title="">x</sub></var>+<var title="">width</var></span> and
      <span><var title="">header<sub
      title="">y</sub></var>&nbsp;&le;&nbsp;<var title="">data<sub
      title="">y</sub></var>&nbsp;&le;&nbsp;<var title="">y<sub
      title="">max</sub></var></span>.</p>

     </dd>

     <dt>Otherwise, it is in the <em title="">auto</em> state</dt>

     <dd>

      <p>If the header cell is not in the first row of the table, or
      not in the first cell of a row, then don't assign the header
      cell to any data cells.</p>

      <p>Otherwise, if the header cell is in the first row of the
      table, assign the header cell to any data cells anchored at
      slots with coordinates (<var title="">data<sub
      title="">x</sub></var>, <var title="">data<sub
      title="">y</sub></var>) where <span><var title="">data<sub
      title="">x</sub></var>&nbsp;=&nbsp;<var title="">header<sub
      title="">x</sub></var></span> and <span><var title="">header<sub
      title="">y</sub></var>&nbsp;&lt;&nbsp;<var title="">data<sub
      title="">y</sub></var>&nbsp;&le;&nbsp;<var title="">y<sub
      title="">max</sub></var></span>.</p>

      <p>Otherwise, the header cell is in the first column of the
      table; assign the header cell to any data cells anchored at
      slots with coordinates (<var title="">data<sub
      title="">x</sub></var>, <var title="">data<sub
      title="">y</sub></var>) where <span><var title="">header<sub
      title="">x</sub></var>&nbsp;&lt;&nbsp;<var title="">data<sub
      title="">x</sub></var>&nbsp;&le;&nbsp;<var title="">x<sub
      title="">max</sub></var></span> and <span><var title="">data<sub
      title="">y</sub></var>&nbsp;=&nbsp;<var title="">header<sub
      title="">y</sub></var></span>.</p>

     </dd>

    </dl>

   </li>

  </ol>



  <h3 id="forms">Forms</h3>
  <!-- XXX everything in WF2 -->

  <p class="big-issue">This section will contain definitions of the
  <code>form</code> element and so forth.</p>

  <p class="big-issue">This section will be a rewrite of the HTML4
  Forms and Web Forms 2.0 specifications, with hopefully no normative
  changes.</p>

  <!-- From HTML4: BUTTON FIELDSET FORM INPUT LABEL OPTGROUP OPTION
  SELECT TEXTAREA -->

  <h4>The <code>form</code> element</h4>

  <h4>The <code>fieldset</code> element</h4>

  <h4>The <code>input</code> element</h4>

  <h4>The <code>button</code> element</h4>

  <h4>The <code>label</code> element</h4>

  <h4>The <code>select</code> element</h4>

  <h4>The <code>datalist</code> element</h4>

  <h4>The <code>optgroup</code> element</h4>

  <h4>The <code>option</code> element</h4>

  <h4>The <code>textarea</code> element</h4>

  <h4>The <code>output</code> element</h4>

  <h4>Processing model</h4>

  <p class="big-issue">See <a href="http://www.whatwg.org/specs/web-forms/current-work/#extend-form-controls">WF2</a> for now</p>

  <h5>Form submission</h5>

  <p class="big-issue">See <a href="http://www.whatwg.org/specs/web-forms/current-work/#form-submission">WF2</a> for now</p>



  <h3>Scripting</h3>

  <h4 id="script">The <dfn><code>script</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Metadata content</span>.</dd>
   <dd><span>Phrasing content</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>metadata content</span> is expected.</dd>
   <dd>Where <span>phrasing content</span> is expected.</dd>
   <dt>Content model:</dt>
   <dd>If there is no <code title="attr-script-src">src</code>
   attribute, depends on the value of the <code
   title="attr-script-type">type</code> attribute.</dd>
   <dd>If there <em>is</em> a <code title="attr-script-src">src</code>
   attribute, the element must be empty.</dd>
   <dt>Element-specific attributes:</dt>
   <dd><code title="attr-script-src">src</code></dd>
   <dd><code title="attr-script-async">async</code></dd>
   <dd><code title="attr-script-defer">defer</code></dd>
   <dd><code title="attr-script-type">type</code></dd>
   <dt>DOM interface:</dt>
   <dd>
<pre class="idl">interface <dfn>HTMLScriptElement</dfn> : <span>HTMLElement</span> {
           attribute DOMString <code title="dom-script-src">src</code>;
           attribute boolean <code title="dom-script-async">async</code>;
           attribute boolean <code title="dom-script-defer">defer</code>;
           attribute DOMString <code title="dom-script-type">type</code>;
           attribute DOMString <code title="dom-script-text">text</code>;
};</pre>
   </dd>
  </dl>

  <p>The <code>script</code> element allows authors to include dynamic
  script in their documents.</p>

  <p>When the <dfn title="attr-script-src"><code>src</code></dfn>
  attribute is set, the <code>script</code> element refers to an
  external file. The value of the attribute must be a URI (or
  IRI).</p>

  <p>If the <code title="attr-script-src">src</code> attribute is not
  set, then the script is given by the contents of the element.</p>

  <p>The language of the script may be given by the <dfn
  title="attr-script-type"><code>type</code></dfn> attribute. If the
  attribute is present, its value must be a valid MIME type,
  optionally with parameters. <a href="#refsRFC2046">[RFC2046]</a></p>

  <p>The <dfn title="attr-script-async"><code>async</code></dfn> and
  <dfn title="attr-script-defer"><code>defer</code></dfn> attributes
  are <span title="boolean attribute">boolean attributes</span> that
  indicate how the script should be executed.</p>

  <p>There are three possible modes that can be selected using these
  attributes. If the <code title="attr-script-async">async</code>
  attribute is present, then the script will be executed
  asynchronously, as soon as it is available. If the <code
  title="attr-script-async">async</code> attribute is not present but
  the <code title="attr-script-defer">defer</code> attribute is
  present, then the script is executed when the page has finished
  parsing. If neither attribute is present, then the script is
  downloaded and executed immediately, before the user agent continues
  parsing the page. The exact processing details for these attributes
  is described below.</p>

  <p>The <code title="attr-script-defer">defer</code> attribute may be
  specified even if the <code title="attr-script-async">async</code>
  attribute is specified, to cause legacy Web browsers that only
  support <code title="attr-script-defer">defer</code> (and not <code
  title="attr-script-async">async</code>) to fall back to the <code
  title="attr-script-defer">defer</code> behavior instead of the
  synchronous blocking behavior that is the default.</p>

  <p>Changing the <code title="attr-script-src">src</code>, <code
  title="attr-script-type">type</code>, <code
  title="attr-script-async">async</code>, and <code
  title="attr-script-defer">defer</code> attributes dynamically has no
  direct effect; these attribute are only used at specific times
  described below (namely, when the element is inserted into the
  document).</p>

  <p><code>script</code> elements have three associated pieces of
  metadata. The first is a flag indicating whether or not the script
  block has been <dfn>"already executed"</dfn>. Initially,
  <code>script</code> elements must have this flag unset (script
  blocks, when created, are not "already executed"). When a
  <code>script</code> element is cloned, the "already executed" flag,
  if set, must be propagated to the clone when it is created. The
  second is a flag indicating whether the element was
  <dfn>"parser-inserted"</dfn>. This flag is set by the <span>HTML
  parser</span> and is used to handle <code
  title="dom-document-write-HTML">document.write()</code> calls. The
  third piece of metadata is <dfn><var>the script's
  type</var></dfn>. It is determined when the script is run, based on
  the attributes on the element at that time.</p>

  <p><dfn title="running a script">Running a script</dfn>: when a
  script block is <span>inserted into a document</span>, the user
  agent must act as follows:</p>

  <ol>

   <li>

    <p>If the <code>script</code> element has a <code
    title="attr-script-type">type</code> attribute but its value is
    the empty string, or if the <code>script</code> element has no
    <code title="attr-script-type">type</code> attribute but it has a
    <code title="attr-script-language">language</code> attribute, and
    <em>that</em> attribute's value is the empty string, let <var>the
    script's type</var> for this <code>script</code> element be "<code
    title="">text/javascript</code>".</p>

    <p>Otherwise, if the <code>script</code> element has a <code
    title="attr-script-type">type</code> attribute, let <var>the
    script's type</var> for this <code>script</code> element be the
    value of that attribute.</p>

    <p>Otherwise, if the element has a <code
    title="attr-script-language">language</code> attribute, let
    <var>the script's type</var> for this <code>script</code> element
    be the concatenation of the string "<code title="">text/</code>"
    followed by the value of the <code
    title="attr-script-language">language</code> attribute.</p>

   </li>

   <li>

    <p>If <span>scripting is disabled</span>, or if the
    <code>Document</code> has <code
    title="dom-document-designMode">designMode</code> enabled, or if
    the <code>script</code> element was created by an <span>XML
    parser</span> that itself was created as part of the processing of
    the <code title="dom-innerHTML-XML">innerHTML</code> attribute's
    setter<!-- no need to worry about the innerHTML-HTML case, as the
    HTML parser handles that for us-->, or if the user agent does not
    <span>support the scripting language</span> given by <var>the
    script's type</var> for this <code>script</code> element, or if
    the <code>script</code> element has its <span>"already
    executed"</span> flag set, then the user agent must abort these
    steps at this point. The script is not executed.</p>

   </li>

   <li>

    <p>The user agent must set the element's <span>"already
    executed"</span> flag.</p>

   </li>

   <li>

    <p>If the element has a <code title="attr-script-src">src</code>
    attribute, then a load for the specified content must be
    started.</p>

    <p class="note">Later, once the load has completed, the user agent
    will have to complete <span title="when a script completes
    loading">the steps described below</span>.</p>

    <p>For performance reasons, user agents may start loading the
    script as soon as the attribute is set, instead, in the hope that
    the element will be inserted into the document. Either way, once
    the element is inserted into the document, the load must have
    started. If the UA performs such prefetching, but the element is
    never inserted in the document, or the <code
    title="attr-script-src">src</code> attribute is dynamically
    changed, then the user agent will not execute the script, and the
    load will have been effectively wasted.</p>

   </li>

   <li>

    <p>Then, the first of the following options that describes the
    situation must be followed:</p>

    <dl class="switch">

     <dt>If the document is still being parsed, and the element has a
     <code title="attr-script-defer">defer</code> attribute, and the
     element does not have an <code
     title="attr-script-async">async</code> attribute</dt>

     <dd>The element must be added to the end of the <span>list of
     scripts that will execute when the document has finished
     parsing</span>. The user agent must begin <span title="when a
     script completes loading">the next set of steps</span> when the
     script is ready.
 
     <span class="big-issue">This isn't compatible with IE for inline
     deferred scripts, but then what IE does is pretty hard to pin down
     exactly. Do we want to keep this like it is? Be more compatible?</span>
     <!--XXX  
     http://www.websiteoptimization.com/speed/tweak/defer/test/
     internal deferred scripts execute before any external scripts execute, or before the LOAD if there are none
     external deferred scripts execute before the LOAD
     -->

     </dd>


     <dt>If the element has an <code
     title="attr-script-async">async</code> attribute and a <code
     title="attr-script-src">src</code> attribute</dt>

     <dd>The element must be added to the end of the <span>list of
     scripts that will execute asynchronously</span>. The user agent
     must jump to <span title="when a script completes loading">the
     next set of steps</span> once the script is ready.</dd>


     <dt>If the element has an <code
     title="attr-script-async">async</code> attribute but no <code
     title="attr-script-src">src</code> attribute, and the <span>list
     of scripts that will execute asynchronously</span> is not
     empty</dt>

     <dd>The element must be added to the end of the <span>list of
     scripts that will execute asynchronously</span>.</dd>


     <dt>If the element has a <code title="attr-script-src">src</code>
     attribute and has been flagged as
     <span>"parser-inserted"</span></dt>

     <dd>The element is <span>the script that will execute as soon as
     the parser resumes</span>. (There can only be one such script at
     a time.)</dd>


     <dt>If the element has a <code title="attr-script-src">src</code>
     attribute</dt>

     <dd>The element must be added to the end of the <span>list of
     scripts that will execute as soon as possible</span>. The user
     agent must jump to <span title="when a script completes
     loading">the next set of steps</span> when the script is
     ready.</dd>


     <dt>Otherwise</dt>

     <dd>The user agent must immediately <span title="executing a
     script block">execute the script</span>, even if other scripts
     are already executing.</dd>

    </dl>

   </li>

  </ol>


  <p><dfn title="when a script completes loading">When a script
  completes loading</dfn>: If a script whose element was added to one
  of the lists mentioned above completes loading while the document is
  still being parsed, then the parser handles it. Otherwise, when a
  script completes loading, the UA must run the following steps as
  soon as as any other scripts that may be executing have finished
  executing:</p>

  <dl class="switch">

   <dt>If the script's element was added to the <dfn>list of scripts
   that will execute when the document has finished parsing</dfn>:</dt>

   <dd>

    <ol>

     <li>

      <p>If the script's element is not the first element in the list,
      then do nothing yet. Stop going through these steps.</p>

     </li>

     <li>

      <p>Otherwise, <span title="executing a script block">execute the
      script</span> (that is, the script associated with the first
      element in the list).</p>

     </li>

     <li>

      <p>Remove the script's element from the list (i.e. shift out the
      first entry in the list).</p>

     </li>

     <li>

      <p>If there are any more entries in the list, and if the script
      associated with the element that is now the first in the list is
      already loaded, then jump back to step two to execute it.</p>

     </li>

    </ol>

   </dd>

   <dt>If the script's element was added to the <dfn>list of scripts
   that will execute asynchronously</dfn>:</dt>

   <dd>

    <ol>

     <li>

      <p>If the script is not the first element in the list, then do
      nothing yet. Stop going through these steps.</p>

     </li>

     <li>

      <p><span title="executing a script block">Execute the
      script</span> (the script associated with the first element in
      the list).</p>

     </li>

     <li>

      <p>Remove the script's element from the list (i.e. shift out the
      first entry in the list).</p>

     </li>

     <li>

      <p>If there are any more scripts in the list, and the element
      now at the head of the list had no <code
      title="attr-script-src">src</code> attribute when it was added
      to the list, or had one, but its associated script has finished
      loading, then jump back to step two to execute the script
      associated with this element.</p>

     </li>

    </ol>

   </dd>

   <dt>If the script's element was added to the <dfn>list of scripts
   that will execute as soon as possible</dfn>:</dt>

   <dd>

    <ol>

     <li>

      <p><span title="executing a script block">Execute the
      script</span>.</p>

     </li>

     <li>

      <p>Remove the script's element from the list.</p>

     </li>

    </ol>

   </dd>

   <dt>If the script is <dfn>the script that will execute as soon as
   the parser resumes</dfn>:</dt>

   <dd>

    <p>The script will be handled <a
    href="#scriptTagParserResumes">when the parser resumes</a>
    (amazingly enough).</p>

   </dd>

  </dl>

  <p>The download of an external script must <span>delay the <code
  title="event-load">load</code> event</span>.</p>

  <p><dfn title="executing a script block">Executing a script
  block</dfn>: If the load resulted in an error (for example a DNS
  error, or an HTTP 404 error), then executing the script must just
  consist of <span title="fire an error event">firing an <code
  title="event-error">error</code> event</span> at the element.</p>

  <p>If the load was successful, then first the user agent must
  <span>fire a <code title="event-load">load</code> event</span> at
  the element, and then, if <span>scripting is enabled</span>, and the
  <code>Document</code> does not have <code
  title="dom-document-designMode">designMode</code> enabled, and the
  <code>Document</code> is the <span>active document</span> in its
  <span>browsing context</span>, the user agent must execute the
  script:</p>

  <p>If the script is from an external file, then that file must be
  used as the file to execute.</p>

  <p>If the script is inline, then, for scripting languages that
  consist of pure text, user agents must use the value of the DOM
  <code title="dom-script-text">text</code> attribute (defined below)
  as the script to execute, and for XML-based scripting languages,
  user agents must use all the child nodes of the <code>script</code>
  element as the script to execute.</p>

  <p>In any case, the user agent must execute the script according to
  the semantics defined by the language associated with <var>the
  script's type</var> (see the <a href="#scriptingLanguages">scripting
  languages</a> section below).</p>

  <p>Scripts must be executed in the scope of the <span>browsing
  context</span> of the element's <code>Document</code>.</p>

  <p class="note">The element's attributes' values might have changed
  between when the element was inserted into the document and when the
  script has finished loading, as may its other attributes; similarly,
  the element itself might have been taken back out of the DOM, or had
  other changes made. These changes do not in any way affect the above
  steps; only the values of the attributes at the time the
  <code>script</code> element is first inserted into the document
  matter.</p>

  <p>The DOM attributes <dfn
  title="dom-script-src"><code>src</code></dfn>, <dfn
  title="dom-script-type"><code>type</code></dfn>, <dfn
  title="dom-script-async"><code>async</code></dfn>, and <dfn
  title="dom-script-defer"><code>defer</code></dfn>, each must
  <span>reflect</span> the respective content attributes of the same
  name.</p>

  <p>The DOM attribute <dfn
  title="dom-script-text"><code>text</code></dfn> must return a
  concatenation of the contents of all the <span title="text
  node">text nodes</span> that are direct children of the
  <code>script</code> element (ignoring any other nodes such as
  comments or elements), in tree order. On setting, it must act the
  same way as the <code>textContent</code> DOM attribute.</p>


  <h5 id="scriptingLanguages">Scripting languages</h5>

  <p>A user agent is said to <dfn>support the scripting language</dfn>
  if <var>the script's type</var> matches the MIME type of a scripting
  language that the user agent implements.</p>

  <p>The following lists some MIME types and the languages to which
  they refer:</p>

  <dl>

   <dt><code>text/javascript</code></dt>
   <dd>ECMAScript. <a href="#refsECMA262">[ECMA262]</a></dd>

   <dt><code>text/javascript;e4x=1</code></dt>
   <dd>ECMAScript with ECMAScript for XML. <a href="#refsECMA357">[ECMA357]</a></dd>

  </dl>

  <p>User agents may support other MIME types and other languages.</p>

  <p>When examining types to determine if they support the language,
  user agents must not ignore unknown MIME parameters &mdash; types
  with unknown parameters must be assumed to be unsupported.</p>

  <!--
   XXX we should reference #refsRFC4329 http://www.ietf.org/rfc/rfc4329
  -->



  <h4>The <dfn><code>noscript</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Metadata content</span>.</dd>
   <dd><span>Phrasing content</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>In a <code>head</code> element of an <span title=">HTML documents">HTML document</span>, if there are no ancestor <code>noscript</code> elements.</dd>
   <dd>Where <span>phrasing content</span> is expected in <span>HTML documents</span>, if there are no ancestor <code>noscript</code> elements.</dd>
   <dt>Content model:</dt>
   <dd>When <span>scripting is disabled</span>, in a <code>head</code> element: in any order, zero or more <code>link</code> elements, zero or more <code>style</code> elements, and zero or more <code>meta</code> elements.</dd>
   <dd>When <span>scripting is disabled</span>, not in a <code>head</code> element: <span>transparent</span>, but there must be no <code>noscript</code> element descendants.</dd>
   <dd>When <span>scripting is enabled</span>: text that conforms to the requirements given in the prose.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>noscript</code> element does not represent anything. It
  is used to present different markup to user agents that support
  scripting and those that don't support scripting, by affecting how
  the document is parsed.</p>

  <p>The <code>noscript</code> element must not be used in <span>XML
  documents</span>.</p>

  <p class="note"><strong>The <code>noscript</code> element is only
  effective in the <span title="">HTML serialisation</span><!-- XXX
  xref -->, it has no effect in the <span title="">XML
  serialisation</span><!-- XXX xref -->.</strong></p>

  <p>When used in <span>HTML documents</span>, the allowed content
  model depends on whether scripting is enabled or not, and whether
  the element is in a <code>head</code> element or not.</p>

  <p>In a <code>head</code> element, if <span>scripting is
  disabled</span>, then the content model of a <code>noscript</code>
  element must contain only <code>link</code>, <code>style</code>, and
  <code>meta</code> elements. If <span>scripting is enabled</span>,
  then the content model of a <code>noscript</code> element is text,
  except that invoking the <span>HTML fragment parsing
  algorithm</span> with the <code>noscript</code> element as the <var
  title="">context</var> element and the text contents as the <var
  title="">input</var> must result in a list of nodes that consists
  only of <code>link</code>, <code>style</code>, and <code>meta</code>
  elements.</p>

  <p>Outside of <code>head</code> elements, if <span>scripting is
  disabled</span>, then the content model of a <code>noscript</code>
  element is <span>transparent</span>, with the additional restriction
  that a <code>noscript</code> element must not have a
  <code>noscript</code> element as an ancestor (that is,
  <code>noscript</code> can't be nested).</p>

  <p>Outside of <code>head</code> elements, if <span>scripting is
  enabled</span>, then the content model of a <code>noscript</code>
  element is text, except that the text must be such that running the
  following algorithm results in a conforming document with no
  <code>noscript</code> elements and no <code>script</code> elements,
  and such that no step in the algorithm causes an <span>HTML
  parser</span> to flag a <span>parse error</span>:</p>

  <ol>

   <li>Remove every <code>script</code> element from the
   document.</li>

   <li>Make a list of every <code>noscript</code> element in the
   document. For every <code>noscript</code> element in that list,
   perform the following steps:

    <ol>

     <li>Let the <var title="">parent element</var> be the parent
     element of the <code>noscript</code> element.</li>

     <li>Take all the children of the <var title="">parent element</var>
     that come before the <code>noscript</code> element, and call these
     elements <var title="">the before children</var>.</li>

     <li>Take all the children of the <var title="">parent element</var>
     that come <em>after</em> the <code>noscript</code> element, and
     call these elements <var title="">the after children</var>.</li>

     <li>Let <var title="">s</var> be the concatenation of all the
     <span>text node</span> children of the <code>noscript</code>
     element.</li>

     <li>Set the <code title="dom-innerHTML-HTML">innerHTML</code>
     attribute of the <var title="">parent element</var> to the value
     of <var title="">s</var>. (This, as a side-effect, causes the
     <code>noscript</code> element to be removed from the
     document.)</li>

     <li>Insert <var title="">the before children</var> at the start of
     the <var title="">parent element</var>, preserving their original
     relative order.</li>

     <li>Insert <var title="">the after children</var> at the end of the
     <var title="">parent element</var>, preserving their original
     relative order.</li>

    </ol>

   </li>

  </ol>

  <p>The <code>noscript</code> element has no other requirements. In
  particular, children of the <code>noscript</code> element are not
  exempt from form submission, scripting, and so forth, even when
  scripting is enabled.</p>

  <p class="note">All these contortions are required because, for
  historical reasons, the <code>noscript</code> element causes the
  <span>HTML parser</span> to act differently based on whether
  scripting is enabled or not. The element is not allowed in XML,
  because in XML the parser is not affected by such state, and thus
  the element would not have the desired effect.</p>


  <h4>The <dfn><code>event-source</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Metadata content</span>.</dd>
   <dd><span>Phrasing content</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>metadata content</span> is expected.</dd>
   <dd>Where <span>phrasing content</span> is expected.</dd>
   <dt>Content model:</dt>
   <dd>Empty.</dd>
   <dt>Element-specific attributes:</dt>
   <dd><code title="attr-event-source-src">src</code></dd>
   <dt>DOM interface:</dt>
   <dd>
<pre class="idl">interface <dfn>HTMLEventSourceElement</dfn> : <span>HTMLElement</span> {
           attribute DOMString <span title="dom-event-source-src">src</span>;
};</pre>
   </dd>
  </dl>

  <p>The <code>event-source</code> element represents a target for
  events generated by a remote server.</p>

  <p>The <dfn title="attr-event-source-src"><code>src</code></dfn>
  attribute, if specified, must give a URI (or IRI) pointing to a
  resource that uses the <code>text/event-stream</code> format.</p>

  <p>When the element is inserted into the document, if it has the
  <code title="attr-event-source-src">src</code> attribute specified,
  the user agent must act as if the <code
  title="dom-remoteEventTarget-addEventSource">addEventSource()</code>
  method on the <code>event-source</code> element had been invoked
  with the URI resulting from resolving the <code
  title="attr-event-source-src">src</code> attribute's value to an
  absolute URI.</p>

  <p>While the element is in a document, if its <code
  title="attr-event-source-src">src</code> attribute is mutated, the
  user agent must act as if first the <code
  title="dom-remoteEventTarget-removeEventSource">removeEventSource()</code>
  method on the <code>event-source</code> element had been invoked
  with the URI resulting from resolving the old value of the attribute
  to an absolute URI, and then as if the <code
  title="dom-remoteEventTarget-addEventSource">addEventSource()</code>
  method on the element had been invoked with the URI resulting from
  resolving the <em>new</em> value of the <code
  title="attr-event-source-src">src</code> attribute to an absolute
  URI.</p>

  <p>When the element is removed from the document, if it has the
  <code title="attr-event-source-src">src</code> attribute specified,
  or, when the <code title="attr-event-source-src">src</code>
  attribute is about to be removed, the user agent must act as if the
  <code
  title="dom-remoteEventTarget-removeEventSource">removeEventSource()</code>
  method on the <code>event-source</code> element had been invoked
  with the URI resulting from resolving the <code
  title="attr-event-source-src">src</code> attribute's value to an
  absolute URI.</p>

  <p>There can be more than one <code>event-source</code> element per
  document, but authors should take care to avoid opening multiple
  connections to the same server as HTTP recommends a limit to the
  number of simultaneous connections that a user agent can open per
  server.</p>

  <!-- XXX should we make 'load', 'error', 'abort' events fire on this
  element? -->

  <p>The <dfn title="dom-event-source-src"><code>src</code></dfn> DOM
  attribute must reflect the content attribute of the same name.</p>



  <h3 id="interactive-elements">Interactive elements</h3>

  <h4>The <dfn><code>details</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Flow element</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>flow content</span> is expected.</dd>
   <dt>Content model:</dt>
   <dd>One <code>legend</code> element followed by <span>flow content</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd><code title="attr-details-open">open</code></dd>
   <dt>DOM interface:</dt>
   <dd>
<pre class="idl">interface <dfn>HTMLDetailsElement</dfn> : <span>HTMLElement</span> {
           attribute boolean <span title="dom-details-open">open</span>;
};</pre>
   </dd>
  </dl>

  <p>The <code>details</code> element represents additional
  information or controls which the user can obtain on demand.</p>

  <p>The first element child of a <code>details</code> element, if it
  is a <code>legend</code> element, represents the summary of the
  details.</p>

  <p>If the first element is not a <code>legend</code> element, the
  UA should provide its own legend (e.g. "Details").</p>

  <p>The <dfn title="attr-details-open"><code>open</code></dfn>
  content attribute is a <span>boolean attribute</span>. If present,
  it indicates that the details should be shown to the user. If the
  attribute is absent, the details should not be shown.</p>

  <p>If the attribute is removed, then the details should be
  hidden. If the attribute is added, the details should be shown.</p>

  <p>The user should be able to request that the details be shown or
  hidden.</p>

  <p>The <dfn title="dom-details-open"><code>open</code></dfn>
  attribute must <span>reflect</span> the <code
  title="attr-details-open">open</code> content attribute.</p>

<!--
http://mail.gnome.org/archives/usability/2006-June/msg00015.html
http://developer.apple.com/documentation/UserExperience/Conceptual/OSXHIGuidelines/XHIGControls/chapter_18_section_7.html
https://www.google.com/base/settings
-->

  <p class="big-issue">Rendering will be described in the Rendering
  section in due course. Basically CSS :open and :closed match the
  element, it's a block-level element by default, and when it matches
  :closed it renders as if it had an XBL binding attached to it whose
  template was just <code>&lt;template>&#x25B6;&lt;content
  includes="legend:first-child"&gt;Details&lt;/content>&lt;/template></code>,
  and when it's :open it acts as if it had an XBL binding attached to
  it whose template was just <code>&lt;template>&#x25BC;&lt;content
  includes="legend:first-child"&gt;Details&lt;/content>&lt;content/>&lt;/template></code>
  or some such.</p>

  <p class="big-issue">Clicking the legend would make it open/close
  (and would change the content attribute). Question: Do we want the
  content attribute to reflect the actual state like this? I think we
  do, the DOM not reflecting state has been a pain in the neck
  before. But is it semantically ok?</p>



  <h4 id="datagrid">The <dfn><code>datagrid</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Flow element</span>.</dd>
   <dd><span>Interactive element</span>.</dd>
   <dd><span>Sectioning root</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>flow content</span> is expected.</dd>
   <dt>Content model:</dt>
   <dd>Either: Nothing.</dd>
   <dd>Or: <span>Flow content</span>, but where the first element child node, if any, is not a <code>table</code> element.</dd>
   <dd>Or: A single <code>table</code> element.</dd>
   <dd>Or: A single <code>select</code> element.</dd>
   <dd>Or: A single <code>datalist</code> element.</dd>
   <dt>Element-specific attributes:</dt>
   <dd><code title="attr-datagrid-multiple">multiple</code></dd>
   <dd><code title="attr-datagrid-disabled">disabled</code></dd>
   <dt>DOM interface:</dt>
   <dd>
<pre class="idl">interface <dfn>HTMLDataGridElement</dfn> : <span>HTMLElement</span> {
           attribute <span>DataGridDataProvider</span> <span title="dom-datagrid-data">data</span>;
  readonly attribute <span>DataGridSelection</span> <span title="dom-datagrid-selection">selection</span>;
           attribute boolean <span title="dom-datagrid-multiple">multiple</span>;
           attribute boolean <span title="dom-datagrid-disabled">disabled</span>;
  void <span title="dom-datagrid-updateEverything">updateEverything</span>();
  void <span title="dom-datagrid-updateRowsChanged">updateRowsChanged</span>(in <span>RowSpecification</span> row, in unsigned long count);
  void <span title="dom-datagrid-updateRowsInserted">updateRowsInserted</span>(in <span>RowSpecification</span> row, in unsigned long count);
  void <span title="dom-datagrid-updateRowsRemoved">updateRowsRemoved</span>(in <span>RowSpecification</span> row, in unsigned long count);
  void <span title="dom-datagrid-updateRowChanged">updateRowChanged</span>(in <span>RowSpecification</span> row);
  void <span title="dom-datagrid-updateColumnChanged">updateColumnChanged</span>(in unsigned long column);
  void <span title="dom-datagrid-updateCellChanged">updateCellChanged</span>(in <span>RowSpecification</span> row, in unsigned long column);
};</pre>
   </dd>
  </dl>

  <p class="big-issue">One possible thing to be added is a way to
  detect when a row/selection has been deleted, activated, etc, by the
  user (delete key, enter key, etc).</p> <!-- XXXPA -->

  <p class="big-issue">This element is defined as interactive, which
  means it can't contain other interactive elements, despite the fact
  that we expect it to work with other interactive elements e.g.
  checkboxes and input fields. It should be called something like a
  Leaf Interactive Element or something, which counts for ancestors
  looking in and not descendants looking out.</p>

  <p>The <code>datagrid</code> element represents an interactive
  representation of tree, list, or tabular data.</p>

  <p>The data being presented can come either from the content, as
  elements given as children of the <code>datagrid</code> element, or
  from a scripted data provider given by the <code
  title="dom-datagrid-data">data</code> DOM attribute.</p>

  <p>The <code title="attr-datagrid-multiple">multiple</code> and
  <code title="attr-datagrid-disabled">disabled</code> attributes are
  <span title="boolean attribute">boolean attributes</span>. Their
  effects are described in the processing model sections below.</p>

  <p>The <dfn
  title="dom-datagrid-multiple"><code>multiple</code></dfn> and <dfn
  title="dom-datagrid-disabled"><code>disabled</code></dfn> DOM
  attributes must <span>reflect</span> the <code
  title="attr-datagrid-multiple">multiple</code> and <code
  title="attr-datagrid-disabled">disabled</code> content attributes
  respectively.</p>


  <h5>The <code>datagrid</code> data model</h5>

  <p><em>This section is non-normative.</em></p>

  <p>In the <code>datagrid</code> data model, data is structured as a
  set of rows representing a tree, each row being split into a number
  of columns. The columns are always present in the data model,
  although individual columns may be hidden in the presentation.</p>

  <p>Each row can have child rows. Child rows may be hidden or
  shown, by closing or opening (respectively) the parent row.</p>

  <p>Rows are referred to by the path along the tree that one would
  take to reach the row, using zero-based indices. Thus, the first row
  of a list is row "0", the second row is row "1"; the first child row
  of the first row is row "0,0", the second child row of the first row
  is row "0,1"; the fourth child of the seventh child of the third
  child of the tenth row is "9,2,6,3", etc.</p>

  <p>The columns can have captions. Those captions are not considered
  a row in their own right, they are obtained separately.</p>

  <p>Selection of data in a <code>datagrid</code> operates at the row
  level. If the <code title="attr-datagrid-multiple">multiple</code>
  attribute is present, multiple rows can be selected at once,
  otherwise the user can only select one row at a time.</p>

  <p>The <code>datagrid</code> element can be disabled entirely by
  setting the <code title="attr-datagrid-disabled">disabled</code>
  attribute.</p>
<!--XXXDND
  <p class="big-issue">selection draggable [normative definitions are
  in the interactive part below]</p>
-->

  <p>Columns, rows, and cells can each have specific flags, known as
  classes, applied to them by the data provider. These classes <a
  href="#datagridClassSummary">affect the functionality</a> of the
  <code>datagrid</code> element, and are also <a
  href="#datagridPseudos">passed to the style system</a>. They are
  similar in concept to the <code title="attr-class">class</code>
  attribute, except that they are not specified on elements but are
  given by scripted data providers.</p> <!-- XXX check xrefs -->


  <h5>How rows are identified</h5>

  <p>The chains of numbers that give a row's path, or identifier, are
  represented by objects that implement the
  <span>RowSpecification</span> interface.</p>

  <pre class="idl">interface <dfn>RowSpecification</dfn> {
  // binding-specific interface
};</pre>

  <p>In ECMAScript, two classes of objects are said to implement this
  interface: Numbers representing non-negative integers, and
  homogeneous arrays of Numbers representing non-negative
  integers. Thus, <code>[1,0,9]</code> is a
  <span>RowSpecification</span>, as is <code>1</code> on its
  own. However, <code>[1,0.2,9]</code> is not a
  <span>RowSpecification</span> object, since its second value is not
  an integer.</p>

  <p>User agents must always represent <code>RowSpecification</code>s
  in ECMAScript by using arrays, even if the path only has one
  number.</p>

  <p>The root of the tree is represented by the empty path; in
  ECMAScript, this is the empty array (<code>[]</code>). Only the
  <code title="dom-provider-getRowCount">getRowCount()</code> and
  <code
  title="dom-provider-getChildAtPosition">GetChildAtPosition()</code>
  methods ever get called with the empty path.</p>


  <h5>The data provider interface</h5>

  <p><em>The conformance criteria in this section apply to any
  implementation of the <code>DataGridDataProvider</code>, including
  (and most commonly) the content author's implementation(s).</em></p>

  <pre class="idl">// To be implemented by Web authors as a JS object
interface <dfn>DataGridDataProvider</dfn> {
  void <span title="dom-provider-initialize">initialize</span>(in HTMLDataGridElement datagrid);
  unsigned long <span title="dom-provider-getRowCount">getRowCount</span>(in <span>RowSpecification</span> row);
  unsigned long <span title="dom-provider-getChildAtPosition">getChildAtPosition</span>(in <span>RowSpecification</span> parentRow, in unsigned long position);
  unsigned long <span title="dom-provider-getColumnCount">getColumnCount</span>();
  DOMString <span title="dom-provider-getCaptionText">getCaptionText</span>(in unsigned long column);
  void <span title="dom-provider-getCaptionClasses">getCaptionClasses</span>(in unsigned long column, in DOMTokenList classes);
  DOMString <span title="dom-provider-getRowImage">getRowImage</span>(in <span>RowSpecification</span> row);
  <span>HTMLMenuElement</span> <span title="dom-provider-getRowMenu">getRowMenu</span>(in <span>RowSpecification</span> row);
  void <span title="dom-provider-getRowClasses">getRowClasses</span>(in <span>RowSpecification</span> row, in DOMTokenList classes);
  DOMString <span title="dom-provider-getCellData">getCellData</span>(in <span>RowSpecification</span> row, in unsigned long column);
  void <span title="dom-provider-getCellClasses">getCellClasses</span>(in <span>RowSpecification</span> row, in unsigned long column, in DOMTokenList classes);
<!--XXXDND
  boolean <span title="dom-provider-canDrop">canDrop</span>(in <span>RowSpecification</span> row, in <span>RowSpecification</span> position, data);
  boolean <span title="dom-provider-dropped">dropped</span>(in <span>RowSpecification</span> row, in <span>RowSpecification</span> position, data);
-->  void <span title="dom-provider-toggleColumnSortState">toggleColumnSortState</span>(in unsigned long column);
  void <span title="dom-provider-setCellCheckedState">setCellCheckedState</span>(in <span>RowSpecification</span> row, in unsigned long column, in long state);
  void <span title="dom-provider-cycleCell">cycleCell</span>(in <span>RowSpecification</span> row, in unsigned long column);
  void <span title="dom-provider-editCell">editCell</span>(in <span>RowSpecification</span> row, in unsigned long column, in DOMString data);
<!--XXXPA
  void <span title="dom-provider-performAction">performAction</span>(in DOMString action); // required if .performAction() is ever invoked on the datagrid
  void <span title="dom-provider-performActionOnRow">performActionOnRow</span>(in <span>RowSpecification</span> row, in DOMString action); // required if getRowClasses ever includes 'deletable' or if <span title="dom-provider-.performActionOnRow">.performActionOnRow</span>() is ever invoked on the datagrid
  void <span title="dom-provider-performActionOnCell">performActionOnCell</span>(in <span>RowSpecification</span> row, in unsigned long column, in DOMString action); // required if .performActionOnCell() is ever invoked on the datagrid
-->};</pre>
<!-- based on http://lxr.mozilla.org/seamonkey/source/layout/xul/base/src/tree/public/nsITreeView.idl -->

  <p>The <code>DataGridDataProvider</code> interface represents the
  interface that objects must implement to be used as custom data
  views for <code>datagrid</code> elements.</p>

  <p>Not all the methods are required. The minimum number of methods
  that must be implemented in a useful view is two: the <code
  title="dom-provider-getRowCount">getRowCount()</code> and <code
  title="dom-provider-getCellData">getCellData()</code> methods.</p>

  <p>Once the object is written, it must be hooked up to the
  <code>datagrid</code> using the <dfn
  title="dom-datagrid-data"><code>data</code></dfn> DOM attribute.</p>

  <p>The following methods may be usefully implemented:</p>

  <dl>

   <dt><dfn title="dom-provider-initialize"><code>initialize(<var title="">datagrid</var>)</code></dfn></dt>

   <dd>Called by the <code>datagrid</code> element (the one given by
   the <var title="">datagrid</var> argument) after it has first
   populated itself. This would typically be used to set the initial
   selection of the <code>datagrid</code> element when it is first
   loaded. The data provider could also use this method call to
   register a <code title="event-select">select</code> event handler
   on the <code>datagrid</code> in order to monitor selection
   changes.</dd>

   <dt><dfn title="dom-provider-getRowCount"><code>getRowCount(<var title="">row</var>)</code></dfn></dt>

   <dd>Must return the number of rows that are children of the
   specified <var title="">row</var>, including rows that are
   off-screen. If <var title="">row</var> is empty, then the number of
   rows at the top level must be returned. If the value that this
   method would return for a given <var title="">row</var> changes,
   the relevant update methods on the <code>datagrid</code> must be
   called first. Otherwise, this method must always return the same
   number. For a list (as opposed to a tree), this method must return
   0 whenever it is called with a <var title="">row</var> identifier
   that is not empty.</dd>

   <dt><dfn title="dom-provider-getChildAtPosition"><code>getChildAtPosition(<var title="">parentRow</var>, <var title="">position</var>)</code></dfn></dt>

   <dd>Must return the index of the row that is a child of <var
   title="">parentRow</var> and that is to be positioned as the <var
   title="">position</var>th row under <var title="">parentRow</var>
   when rendering the children of <var title="">parentRow</var>. If
   <var title="">parentRow</var> is empty, then <var
   title="">position</var> refers to the <var
   title="">position</var>th row at the top level of the data
   grid. May be omitted if the rows are always to be sorted in the
   natural order. (The natural order is the one where the method
   always returns <var title="">position</var>.) For a given <var
   title="">parentRow</var>, this method must never return the same
   value for different values of <var title="">position</var>. The
   returned value <var title="">x</var> must be in the range
   0&nbsp;&le;&nbsp;<var title="">x</var>&nbsp;&lt;&nbsp;<var
   title="">n</var>, where <var title="">n</var> is the value returned
   by <code title="dom-provider-getRowCount">getRowCount(<var
   title="">parentRow</var>)</code>.</dd>

   <dt><dfn title="dom-provider-getColumnCount"><code>getColumnCount()</code></dfn></dt>

   <dd>Must return the number of columns currently in the data model
   (including columns that might be hidden). May be omitted if there
   is only one column. If the value that this method would return
   changes, the <code>datagrid</code>'s <code
   title="dom-datagrid-updateEverything">updateEverything()</code>
   method must be called.</dd>

   <dt><dfn title="dom-provider-getCaptionText"><code>getCaptionText(<var title="">column</var>)</code></dfn></dt>

   <dd>Must return the caption, or label, for column <var
   title="">column</var>. May be omitted if the columns have no
   captions. If the value that this method would return changes, the
   <code>datagrid</code>'s <code
   title="dom-datagrid-updateColumnChanged">updateColumnChanged()</code>
   method must be called with the appropriate column index.</dd>

   <dt><dfn title="dom-provider-getCaptionClasses"><code>getCaptionClasses(<var title="">column</var>, <var title="">classes</var>)</code></dfn></dt>

   <dd>Must add the classes that apply to column <var
   title="">column</var> to the <var title="">classes</var> object.
   May be omitted if the columns have no special classes. If the
   classes that this method would add changes, the
   <code>datagrid</code>'s <code
   title="dom-datagrid-updateColumnChanged">updateColumnChanged()</code>
   method must be called with the appropriate column index. Some
   classes have <a href="#datagridClassSummary">predefined
   meanings</a>.</dd>

   <dt><dfn title="dom-provider-getRowImage"><code>getRowImage(<var title="">row</var>)</code></dfn></dt>

   <dd>Must return a URI to an image that represents row <var
   title="">row</var>, or the empty string if there is no applicable
   image. May be omitted if no rows have associated images. If the
   value that this method would return changes, the
   <code>datagrid</code>'s update methods must be called to update the
   row in question.</dd>

   <dt><dfn title="dom-provider-getRowMenu"><code>getRowMenu(<var title="">row</var>)</code></dfn></dt>

   <dd>Must return an <code>HTMLMenuElement</code> object that is to
   be used as a context menu for row <var title="">row</var>, or null
   if there is no particular context menu. May be omitted if none of
   the rows have a special context menu. As this method is called
   immediately before showing the menu in question, no precautions
   need to be taken if the return value of this method changes.</dd>

   <dt><dfn title="dom-provider-getRowClasses"><code>getRowClasses(<var title="">row</var>, <var title="">classes</var>)</code></dfn></dt>

   <dd>Must add the classes that apply to row <var title="">row</var>
   to the <var title="">classes</var> object. May be omitted if the
   rows have no special classes. If the classes that this method would
   add changes, the <code>datagrid</code>'s update methods must be
   called to update the row in question. Some classes have <a
   href="#datagridClassSummary">predefined meanings</a>.</dd>

   <dt><dfn title="dom-provider-getCellData"><code>getCellData(<var title="">row</var>, <var title="">column</var>)</code></dfn></dt>

   <dd>Must return the value of the cell on row <var
   title="">row</var> in column <var title="">column</var>. For text
   cells, this must be the text to show for that cell. For <span
   title="datagrid-cell-class-progress">progress bar cells</span>,
   this must be either a floating point number in the range 0.0 to 1.0
   (converted to a string representation<!-- XXX this isn't
   technically enough to define what the author must be doing here,
   but let's let that slide until someone notices -->), indicating the
   fraction of the progress bar to show as full (1.0 meaning
   complete), or the empty string, indicating an indeterminate
   progress bar. If the value that this method would return changes,
   the <code>datagrid</code>'s update methods must be called to update
   the rows that changed. If only one cell changed, the <code
   title="dom-datagrid-updateCellChanged">updateCellChanged()</code>
   method may be used.</dd>

   <dt><dfn title="dom-provider-getCellClasses"><code>getCellClasses(<var title="">row</var>, <var title="">column</var>, <var title="">classes</var>)</code></dfn></dt>

   <dd>Must add the classes that apply to the cell on row <var
   title="">row</var> in column <var title="">column</var> to the <var
   title="">classes</var> object. May be omitted if the cells have no
   special classes. If the classes that this method would add changes,
   the <code>datagrid</code>'s update methods must be called to update
   the rows or cells in question. Some classes have <a
   href="#datagridClassSummary">predefined meanings</a>.</dd>

   <dt><dfn title="dom-provider-toggleColumnSortState"><code>toggleColumnSortState(<var title="">column</var>)</code></dfn></dt>

   <dd>Called by the <code>datagrid</code> when the user tries to sort
   the data using a particular column <var title="">column</var>. The
   data provider must update its state so that the <code
   title="dom-provider-getChildAtPosition">GetChildAtPosition()</code>
   method returns the new order, and the classes of the columns
   returned by <code
   title="dom-provider-getCaptionClasses">getCaptionClasses()</code>
   represent the new sort status. There is no need to tell the
   <code>datagrid</code> that it the data has changed, as the
   <code>datagrid</code> automatically assumes that the entire data
   model will need updating.</dd>

   <dt><dfn title="dom-provider-setCellCheckedState"><code>setCellCheckedState(<var title="">row</var>, <var title="">column</var>, <var title="">state</var>)</code></dfn></dt>

   <dd>Called by the <code>datagrid</code> when the user changes the
   state of a checkbox cell on row <var title="">row</var>, column
   <var title="">column</var>. The checkbox should be toggled to the
   state given by <var title="">state</var>, which is a positive
   integer (1) if the checkbox is to be checked, zero (0) if it is to
   be unchecked, and a negative number (-1) if it is to be set to the
   indeterminate state. There is no need to tell the
   <code>datagrid</code> that the cell has changed, as the
   <code>datagrid</code> automatically assumes that the given cell
   will need updating.</dd>

   <dt><dfn title="dom-provider-cycleCell"><code>cycleCell(<var title="">row</var>, <var title="">column</var>)</code></dfn></dt>

   <dd>Called by the <code>datagrid</code> when the user changes the
   state of a cyclable cell on row <var title="">row</var>, column
   <var title="">column</var>. The data provider should change the
   state of the cell to the new state, as appropriate. There is no
   need to tell the <code>datagrid</code> that the cell has
   changed, as the <code>datagrid</code> automatically assumes that
   the given cell will need updating.</dd>

   <dt><dfn title="dom-provider-editCell"><code>editCell(<var title="">row</var>, <var title="">column</var>, <var title="">data</var>)</code></dfn></dt>

   <dd>Called by the <code>datagrid</code> when the user edits the
   cell on row <var title="">row</var>, column <var
   title="">column</var>. The new value of the cell is given by <var
   title="">data</var>. The data provider should update the cell
   accordingly. There is no need to tell the <code>datagrid</code>
   that the cell has changed, as the <code>datagrid</code>
   automatically assumes that the given cell will need updating.</dd>

<!--XXXPA
  void performAction(in DOMString action); // required if .performAction() is ever invoked on the datagrid
  void performActionOnRow(in <span>RowSpecification</span> row, in DOMString action); // required if getRowClasses ever includes 'deletable' or if .performActionOnRow() is ever invoked on the datagrid
  void performActionOnCell(in <span>RowSpecification</span> row, in unsigned long column, in DOMString action); // required if .performActionOnCell() is ever invoked on the datagrid
-->

  </dl>

  <p>The following classes (for rows, columns, and cells) may be
  usefully used in conjunction with this interface:</p>

  <table id="datagridClassSummary">
   <tr>
    <th>Class name</th>
    <th>Applies to</th>
    <th>Description</th>
   </tr>

   <tr>
    <td><!--checked--><dfn title="datagrid-cell-class-checked"><code>checked</code></dfn></td>
    <td>Cells</td>
    <td>The cell has a checkbox and it is checked. (The <code
    title="datagrid-cell-class-cyclable">cyclable</code> and <code
    title="datagrid-cell-class-progress">progress</code> classes
    override this, though.)</td>
   </tr>

   <tr>
    <td><!--cyclable--><dfn title="datagrid-cell-class-cyclable"><code>cyclable</code></dfn></td>
    <td>Cells</td>
    <td>The cell can be cycled through multiple values. (The <code
    title="datagrid-cell-class-progress">progress</code> class
    overrides this, though.)</td>
   </tr>

   <tr>
    <td><!--editable--><dfn title="datagrid-cell-class-editable"><code>editable</code></dfn></td>
    <td>Cells</td>
    <td>The cell can be edited. (The <code
    title="datagrid-cell-class-cyclable">cyclable</code>, <code
    title="datagrid-cell-class-progress">progress</code>, <code
    title="datagrid-cell-class-checked">checked</code>, <code
    title="datagrid-cell-class-checked">unchecked</code> and <code
    title="datagrid-cell-class-checked">indeterminate</code> classes
    override this, though.)</td>
   </tr>

   <tr>
    <td><!--header--><dfn title="datagrid-row-class-header"><code>header</code></dfn></td>
    <td>Rows</td>
    <td>The row is a heading, not a data row.</td>
   </tr>

   <tr>
    <td><!--indeterminate--><dfn title="datagrid-cell-class-indeterminate"><code>indeterminate</code></dfn></td>
    <td>Cells</td>
    <td>The cell has a checkbox, and it can be set to an indeterminate
    state. If neither the <code
    title="datagrid-cell-class-checked">checked</code> nor <code
    title="datagrid-cell-class-checked">unchecked</code> classes are
    present, then the checkbox is in that state, too. (The <code
    title="datagrid-cell-class-cyclable">cyclable</code> and <code
    title="datagrid-cell-class-progress">progress</code> classes
    override this, though.)</td>
   </tr>

   <tr>
    <td><!--initially-hidden--><dfn title="datagrid-column-class-initially-hidden"><code>initially-hidden</code></dfn></td>
    <td>Columns</td>
    <td>The column will not be shown when the <code>datagrid</code> is
    initially rendered. If this class is not present on the column
    when the <code>datagrid</code> is initially rendered, the column
    will be visible if space allows.</td>
   </tr>

   <tr>
    <td><!--initially-closed--><dfn title="datagrid-row-class-initially-closed"><code>initially-closed</code></dfn></td>
    <td>Rows</td>
    <td>The row will be closed when the <code>datagrid</code> is
    initially rendered. If neither this class nor the <code
    title="datagrid-row-class-initially-open">initially-open</code>
    class is present on the row when the <code>datagrid</code> is
    initially rendered, the initial state will depend on platform
    conventions.</td>
   </tr>

   <tr>
    <td><!--initially-open--><dfn title="datagrid-row-class-initially-open"><code>initially-open</code></dfn></td>
    <td>Rows</td>
    <td>The row will be opened when the <code>datagrid</code> is
    initially rendered. If neither this class nor the <code
    title="datagrid-row-class-initially-closed">initially-closed</code>
    class is present on the row when the <code>datagrid</code> is
    initially rendered, the initial state will depend on platform
    conventions.</td>
   </tr>

   <tr>
    <td><!--progress--><dfn title="datagrid-cell-class-progress"><code>progress</code></dfn></td>
    <td>Cells</td>
    <td>The cell is a progress bar.</td>
   </tr>

   <tr>
    <td><!--reversed--><dfn title="datagrid-column-class-reversed"><code>reversed</code></dfn></td>
    <td>Columns</td>
    <td>If the cell is sorted, the sort direction is descending,
    instead of ascending.</td>
   </tr>

   <tr>
    <td><!--selectable-separator--><dfn title="datagrid-row-class-selectable-separator"><code>selectable-separator</code></dfn></td>
    <td>Rows</td>
    <td>The row is a normal, selectable, data row, except that instead
    of having data, it only has a separator. (The <code
    title="datagrid-row-class-header">header</code> and <code
    title="datagrid-row-class-separator">separator</code> classes
    override this, though.)</td>
   </tr>

   <tr>
    <td><!--separator--><dfn title="datagrid-row-class-separator"><code>separator</code></dfn></td>
    <td>Rows</td>
    <td>The row is a separator row, not a data row. (The <code
    title="datagrid-row-class-header">header</code> class
    overrides this, though.)</td>
   </tr>

   <tr>
    <td><!--sortable--><dfn title="datagrid-column-class-sortable"><code>sortable</code></dfn></td>
    <td>Columns</td>
    <td>The data can be sorted by this column.</td>
   </tr>

   <tr>
    <td><!--sorted--><dfn title="datagrid-column-class-sorted"><code>sorted</code></dfn></td>
    <td>Columns</td>
    <td>The data is sorted by this column. Unless the <code
    title="datagrid-column-class-reversed">reversed</code> class is
    also present, the sort direction is ascending.</td>
   </tr>

   <tr>
    <td><!--unchecked--><dfn title="datagrid-cell-class-unchecked"><code>unchecked</code></dfn></td>
    <td>Cells</td>
    <td>The cell has a checkbox and, unless the <code
    title="datagrid-cell-class-checked">checked</code> class is
    present as well, it is unchecked. (The <code
    title="datagrid-cell-class-cyclable">cyclable</code> and <code
    title="datagrid-cell-class-progress">progress</code> classes
    override this, though.)</td>
   </tr>

<!--XXXPA
   <tr>
    <td><!- -deletable- -><dfn title="datagrid-row-class-deletable"><code>deletable</code></dfn></td>
    <td>Rows</td>
    <td></td>
   </tr>
-->

  </table>


  <h5>The default data provider</h5>

  <p>The user agent must supply a default data provider for the case
  where the <code>datagrid</code>'s <code
  title="dom-datagrid-data">data</code> attribute is null. It must act
  as described in this section.</p>

  <p>The behaviour of the default data provider depends on the nature
  of the first element child of the <code>datagrid</code>.</p>

  <dl class="switch">

   <dt>While the first element child is a <code>table</code> element</dt>

   <dd>

    <p><strong><code
    title="dom-provider-getRowCount">getRowCount(<var title="">row</var>)</code></strong>:
    The number of rows returned by the default data provider for the
    root of the tree (when <var title="">row</var> is empty) must be the total number of <code>tr</code> elements
    that are children of <code>tbody</code> elements that are children
    of the <code>table</code>, if there are any such child
    <code>tbody</code> elements. If there are no such
    <code>tbody</code> elements then the number of rows returned for
    the root must be the number of <code>tr</code> elements that are
    children of the <code>table</code>.</p>

    <p>When <var title="">row</var> is not empty, the number of rows
    returned must be zero.</p>

    <p class="note">The <code>table</code>-based default data provider
    cannot represent a tree.</p>

    <p class="note">Rows in <code>thead</code> elements do not
    contribute to the number of rows returned, although they do affect
    the columns and column captions. Rows in <code>tfoot</code>
    elements are <span title="ignore">ignored</span> completely by
    this algorithm.</p>

    <p id="defaultDataProviderTableMapper"><strong><code
    title="dom-provider-getChildAtPosition">getChildAtPosition(<var
    title="">row</var>, <var title="">i</var>)</code></strong>: The
    default data provider must return the mapping appropriate to the
    <a href="#defaultDataProviderTableSort">current sort
    order</a>.</p>

    <p><strong><code
    title="dom-provider-getColumnCount">getColumnCount()</code></strong>:
    The number of columns returned must be the number of
    <code>td</code> element children in the first <code>tr</code>
    element child of the first <code>tbody</code> element child of the
    <code>table</code>, if there are any such <code>tbody</code>
    elements. If there are no such <code>tbody</code> elements, then
    it must be the number of <code>td</code> element children in the
    first <code>tr</code> element child of the <code>table</code>, if
    any, or otherwise 1. If the number that would be returned by these
    rules is 0, then 1 must be returned instead.</p>

    <p><strong><code
    title="dom-provider-getCaptionText">getCaptionText(<var
    title="">i</var>)</code></strong>: If the <code>table</code> has
    no <code>thead</code> element child, or if its first
    <code>thead</code> element child has no <code>tr</code> element
    child, the default data provider must return the empty string for
    all captions. Otherwise, the value of the <code>textContent</code>
    attribute of the <var title="">i</var>th <code>th</code> element
    child of the first <code>tr</code> element child of the first
    <code>thead</code> element child of the <code>table</code> element
    must be returned. If there is no such <code>th</code> element, the
    empty string must be returned.</p>

    <p><strong><code
    title="dom-provider-getCaptionClasses">getCaptionClasses(<var
    title="">i</var>, <var title="">classes</var>)</code></strong>: If
    the <code>table</code> has no <code>thead</code> element child, or
    if its first <code>thead</code> element child has no
    <code>tr</code> element child, the default data provider must not
    add any classes for any of the captions. Otherwise, each class
    in the <code title="attr-class">class</code> attribute of the <var
    title="">i</var>th <code>th</code> element child of the first
    <code>tr</code> element child of the first <code>thead</code>
    element child of the <code>table</code> element must be added to
    the <var title="">classes</var>. If there is no such
    <code>th</code> element, no classes must be added. The user agent
    must then:</p>

    <ol>

     <li>Remove the <code
     title="datagrid-column-class-sorted">sorted</code> and <code
     title="datagrid-column-class-reversed">reversed</code>
     classes.</li>

     <li>If the <code>table</code> element has a <code
     title="attr-class">class</code> attribute that includes the <code
     title="">sortable</code> class, add the <code
     title="datagrid-column-class-sortable">sortable</code>
     class.</li>

     <li>If the column is the one currently being used to
     sort the data, add the <code
     title="datagrid-column-class-sorted">sorted</code> class.</li>

     <li>If the column is the one currently being used to sort the
     data, and it is sorted in descending order, add the <code
     title="datagrid-column-class-reversed">reversed</code> class as
     well.</li>

    </ol>

    <p>The various row- and cell- related methods operate relative to
    a particular element, the element of the row or cell specified by
    their arguments.</p>

    <p><strong>For rows</strong>: Since the default data provider for
    a <code>table</code> always returns 0 as the number of children
    for any row other than the root, the path to the row passed to
    these methods will always consist of a single number. In the prose
    below, this number is referred to as <var title="">i</var>.</p>

    <p>If the <code>table</code> has <code>tbody</code> element
    children, the element for the <var title="">i</var>th row is the
    <var title="">i</var>th <code>tr</code> element that is a child of
    a <code>tbody</code> element that is a child of the
    <code>table</code> element. If the <code>table</code> does not
    have <code>tbody</code> element children, then the element for the
    <var title="">i</var>th real row is the <var title="">i</var>th
    <code>tr</code> element that is a child of the <code>table</code>
    element.</p>

    <p><strong>For cells</strong>: Given a row and its element, the
    row's <var title="">i</var>th cell's element is the <var
    title="">i</var>th <code>td</code> element child of the row
    element.</p>

    <p class="note">The <code>colspan</code> and <code>rowspan</code>
    attributes are <span title="ignore">ignored</span> by this
    algorithm.</p>

    <p><strong><code title="dom-provider-getRowImage">getRowImage(<var
    title="">i</var>)</code></strong>: If the row's first cell's
    element has an <code>img</code> element child, then the URI of the
    row's image is the URI of the first <code>img</code> element child
    of the row's first cell's element. Otherwise, the URI of the row's
    image is the empty string.</p><!-- XXX well. that sentence could
    have gone better, that's for sure. -->

    <p><strong><code title="dom-provider-getRowMenu">getRowMenu(<var
    title="">i</var>)</code></strong>: If the row's first cell's
    element has a <code>menu</code> element child, then the row's menu
    is the first <code>menu</code> element child of the row's first
    cell's element. Otherwise, the row has no menu.</p>

    <p><strong><code
    title="dom-provider-getRowClasses">getRowClasses(<var
    title="">i</var>, <var title="">classes</var>)</code></strong>:
    The default data provider must never add a class to the row's
    classes.</p>

    <p id="defaultDataProviderTableSort"><strong><code
    title="dom-provider-toggleColumnSortState">toggleColumnSortState(<var
    title="">i</var>)</code></strong>: If the data is already being
    sorted on the given column, then the user agent must change the
    current sort mapping to be the inverse of the current sort
    mapping; if the sort order was ascending before, it is now
    descending, otherwise it is now ascending. Otherwise, if the
    current sort column is another column, or the data model is
    currently not sorted, the user agent must create a new mapping,
    which maps rows in the data model to rows in the DOM so that the
    rows in the data model are sorted by the specified column, in
    ascending order. (Which sort comparison operator to use is left up
    to the UA to decide.)</p>

    <p>When the sort mapping is changed, the values returned by the
    <code
    title="dom-provider-getChildAtPosition">getChildAtPosition()</code>
    method for the default data provider <a
    href="#defaultDataProviderTableMapper">will change
    appropriately</a>.</p>

    <p><strong><code title="dom-provider-getCellData">getCellData(<var
    title="">i</var>, <var title="">j</var>)</code>, <code
    title="dom-provider-getCellClasses">getCellClasses(<var
    title="">i</var>, <var title="">j</var>, <var
    title="">classes</var>)</code>, <code
    title="dom-provider-setCellCheckedState">getCellCheckedState(<var
    title="">i</var>, <var title="">j</var>, <var
    title="">state</var>)</code>, <code
    title="dom-provider-cycleCell">cycleCell(<var title="">i</var>,
    <var title="">j</var>)</code>, and <code
    title="dom-provider-editCell">editCell(<var title="">i</var>,
    <var title="">j</var>, <var title="">data</var>)</code></strong>:
    See <a href="#commonDefaultDataGridMethodDefinitions">the common
    definitions below</a>.</p>

    <p>The data provider must call the <code>datagrid</code>'s update
    methods appropriately whenever the descendants of the
    <code>datagrid</code> mutate. For example, if a <code>tr</code> is
    removed, then the <code
    title="dom-datagrid-updateRowsRemoved">updateRowsRemoved()</code>
    methods would probably need to be invoked, and any change to a
    cell or its descendants must cause the cell to be updated. If the
    <code>table</code> element stops being the first child of the
    <code>datagrid</code>, then the data provider must call the <code
    title="dom-datagrid-updateEverything">updateEverything()</code>
    method on the <code>datagrid</code>. Any change to a cell that is
    in the column that the data provider is currently using as its
    sort column must also cause the sort to be reperformed, with a
    call to <code
    title="dom-datagrid-updateEverything">updateEverything()</code> if
    the change did affect the sort order.</p>

   </dd>


   <dt>While the first element child is a <code>select</code> or <code>datalist</code> element</dt>

   <dd>

    <p>The default data provider must return 1 for the column count,
    the empty string for the column's caption, and must not add any
    classes to the column's classes.</p>

    <p>For the rows, assume the existence of a node filter view of the
    descendants of the first element child of the
    <code>datagrid</code> element (the <code>select</code> or
    <code>datalist</code> element), that skips all nodes other than
    <code>optgroup</code> and <code>option</code> elements, as well as
    any descendents of any <code>option</code> elements.</p>

    <p>Given a path <var title="">row</var>, the corresponding element
    is the one obtained by drilling into the view, taking the child
    given by the path each time.</p>

    <div class="example">

     <p>Given the following XML markup:</p>

     <pre>&lt;datagrid>
 &lt;select>
  &lt;!-- the options and optgroups have had their labels and values removed
       to make the underlying structure clearer -->
  &lt;optgroup>
   &lt;option/>
   &lt;option/>
  &lt;/optgroup>
  &lt;optgroup>
   &lt;option/>
   &lt;optgroup id="a">
    &lt;option/>
    &lt;option/>
    &lt;bogus/>
    &lt;option id="b"/>
   &lt;/optgroup>
   &lt;option/>
  &lt;/optgroup>
 &lt;/select>
&lt;/datagrid></pre>

     <p>The path "1,1,2" would select the element with ID "b". In the
     filtered view, the text nodes, comment nodes, and bogus elements
     are ignored; so for instance, the element with ID "a" (path
     "1,1") has only 3 child nodes in the view.</p>

    </div>

    <p><code title="dom-provider-getRowCount">getRowCount(<var
    title="">row</var>)</code> must drill through the view to find the
    element corresponding to the method's argument, and return the
    number of child nodes in the filtered view that the corresponding
    element has. (If the <var title="">row</var> is empty, the
    corresponding element is the <code>select</code> element at the
    root of the filtered view.)</p>

    <p><code
    title="dom-provider-getChildAtPosition">getChildAtPosition(<var
    title="">row</var>, <var title="">position</var>)</code> must
    return <var title="">position</var>. (The
    <code>select</code>/<code>datalist</code> default data provider
    does not support sorting the data grid.)</p>

    <p><code title="dom-provider-getRowImage">getRowImage(<var
    title="">i</var>)</code> must return the empty string, <code
    title="dom-provider-getRowMenu">getRowMenu(<var
    title="">i</var>)</code> must return null.</p>

    <p><code title="dom-provider-getRowClasses">getRowClasses(<var
    title="">row</var>, <var title="">classes</var>)</code> must add the
    classes from the following list to <var title="">classes</var>
    when their condition is met:</p>

    <ul>

     <li>If the <var title="">row</var>'s corresponding element is an
     <code>optgroup</code> element: <code
     title="datagrid-row-class-header">header</code></li>

     <li>If the <var title="">row</var>'s corresponding element
     contains other elements that are also in the view, and the
     element's <code title="attr-class">class</code> attribute
     contains the <code title="">closed</code> class: <code
     title="datagrid-row-class-initially-closed">initially-closed</code></li>

     <li>If the <var title="">row</var>'s corresponding element
     contains other elements that are also in the view, and the
     element's <code title="attr-class">class</code> attribute
     contains the <code title="">open</code> class: <code
     title="datagrid-row-class-initially-open">initially-open</code></li>

    </ul>

    <p>The <code title="dom-provider-getCellData">getCellData(<var
    title="">row</var>, <var title="">cell</var>)</code> method must
    return the value of the <code
    title="attr-optgroup-label">label</code> attribute if the <var
    title="">row</var>'s corresponding element is an
    <code>optgroup</code> element, otherwise, if the <var
    title="">row</var>'s corresponding element is an
    <code>option</code>element, its <code
    title="attr-option-label">label</code> attribute if it has one,
    otherwise the value of its <code>textContent</code> DOM
    attribute.</p>

    <p>The <code
    title="dom-provider-getCellClasses">getCellClasses(<var
    title="">row</var>, <var title="">cell</var>, <var
    title="">classes</var>)</code> method must add no classes.</p>

    <p class="big-issue"><!-- select-provider-selection
    XXX-->autoselect some rows when initialised, reflect the selection
    in the select, reflect the multiple attribute somehow.</p>

    <p>The data provider must call the <code>datagrid</code>'s update
    methods appropriately whenever the descendants of the
    <code>datagrid</code> mutate.</p>

   </dd>


   <dt>While the first element child is another element</dt>

   <dd>

    <p>The default data provider must return 1 for the column count,
    the empty string for the column's caption, and must not add any
    classes to the column's classes.</p>

    <p>For the rows, assume the existence of a node filter view of the
    descendants of the <code>datagrid</code> that skips all nodes
    other than <code>li</code>, <code>h1</code>-<code>h6</code>, and
    <code>hr</code> elements, and skips any descendants of
    <code>menu</code> elements.</p>

    <p>Given this view, each element in the view represents a row in
    the data model. The element corresponding to a path <var
    title="">row</var> is the one obtained by drilling into the view,
    taking the child given by the path each time. The element of the
    row of a particular method call is the element given by drilling
    into the view along the path given by the method's arguments.</p>

    <p><code title="dom-provider-getRowCount">getRowCount(<var
    title="">row</var>)</code> must return the number of child
    elements in this view for the given row, or the number of elements
    at the root of the view if the <var title="">row</var> is
    empty.</p>

    <div class="example">

     <p>In the following example, the elements are identified by the
     paths given by their child text nodes:</p>

     <pre>&lt;datagrid>
 &lt;ol>
  &lt;li> row 0 &lt;/li>
  &lt;li> row 1
   &lt;ol>
    &lt;li> row 1,0 &lt;/li>
   &lt;/ol>
  &lt;/li>
  &lt;li> row 2 &lt;/li>
 &lt;/ol>
&lt;/datagrid></pre>

     <p>In this example, only the <code>li</code> elements actually
     appear in the data grid; the <code>ol</code> element does not
     affect the data grid's processing model.</p>

    </div>

    <p><code
    title="dom-provider-getChildAtPosition">getChildAtPosition(<var
    title="">row</var>, <var title="">position</var>)</code> must
    return <var title="">position</var>. (The generic default data
    provider does not support sorting the data grid.)</p>

    <p><code title="dom-provider-getRowImage">getRowImage(<var
    title="">i</var>)</code> must return the URI of the image given by
    the first <code>img</code> element descendant (in the real DOM) of
    the row's element, that is not also a descendant of another
    element in the filtered view that is a descendant of the row's
    element.</p>

    <div class="example">

     <p>In the following example, the row with path "1,0" returns
     "http://example.com/a" as its image URI, and the other rows
     (including the row with path "1") return the empty string:</p>

     <pre>&lt;datagrid>
 &lt;ol>
  &lt;li> row 0 &lt;/li>
  &lt;li> row 1
   &lt;ol>
    &lt;li> row 1,0 &lt;img src="http://example.com/a" alt=""> &lt;/li>
   &lt;/ol>
  &lt;/li>
  &lt;li> row 2 &lt;/li>
 &lt;/ol>
&lt;/datagrid></pre>

    </div>

    <p><code title="dom-provider-getRowMenu">getRowMenu(<var
    title="">i</var>)</code> must return the first <code>menu</code>
    element descendant (in the real DOM) of the row's element, that is
    not also a descendant of another element in the filtered view that
    is a decsendant of the row's element. (This is analogous to the
    image case above.)</p>

    <p><code title="dom-provider-getRowClasses">getRowClasses(<var
    title="">i</var>, <var title="">classes</var>)</code> must add the
    classes from the following list to <var title="">classes</var>
    when their condition is met:</p>

    <ul>

     <li>If the row's element contains other elements that are also in
     the view, and the element's <code title="attr-class">class</code>
     attribute contains the <code title="">closed</code> class: <code
     title="datagrid-row-class-initially-closed">initially-closed</code></li>

     <li>If the row's element contains other elements that are also in
     the view, and the element's <code title="attr-class">class</code>
     attribute contains the <code title="">open</code> class: <code
     title="datagrid-row-class-initially-open">initially-open</code></li>

     <li>If the row's element is an <code>h1</code>-<code>h6</code>
     element: <code
     title="datagrid-row-class-header">header</code></li>

     <li>If the row's element is an <code>hr</code> element: <code
     title="datagrid-row-class-separator">separator</code></li> <!--
     XXX no way to get selectable-separator -->

    </ul>

    <p>The <code title="dom-provider-getCellData">getCellData(<var
    title="">i</var>, <var title="">j</var>)</code>, <code
    title="dom-provider-getCellClasses">getCellClasses(<var
    title="">i</var>, <var title="">j</var>, <var
    title="">classes</var>)</code>, <code
    title="dom-provider-setCellCheckedState">getCellCheckedState(<var
    title="">i</var>, <var title="">j</var>, <var
    title="">state</var>)</code>, <code
    title="dom-provider-cycleCell">cycleCell(<var title="">i</var>,
    <var title="">j</var>)</code>, and <code
    title="dom-provider-editCell">editCell(<var title="">i</var>, <var
    title="">j</var>, <var title="">data</var>)</code> methods must
    act as described in <a
    href="#commonDefaultDataGridMethodDefinitions">the common
    definitions below</a>, treating the row's element as being the
    cell's element.</p>

    <p class="big-issue" id="generic-provider-selection">selection
    handling?</p>

    <p>The data provider must call the <code>datagrid</code>'s update
    methods appropriately whenever the descendants of the
    <code>datagrid</code> mutate.</p>

   </dd>


   <dt>Otherwise, while there is no element child</dt>

   <dd>

    <p>The data provider must return 0 for the number of rows, 1 for
    the number of columns, the empty string for the first column's
    caption, and must add no classes when asked for that column's
    classes. If the <code>datagrid</code>'s child list changes such
    that there is a first element child, then the data provider must
    call the <code
    title="dom-datagrid-updateEverything">updateEverything()</code>
    method on the <code>datagrid</code>.</p>

   </dd>

  </dl>

  <h6 id="commonDefaultDataGridMethodDefinitions">Common default data
  provider method definitions for cells</h6>

  <p>These definitions are used for the cell-specific methods of the
  default data providers (other than in the
  <code>select</code>/<code>datalist</code> case).  How they behave is
  based on the contents of an element that represents the cell given
  by their first two arguments. Which element that is is defined in
  the previous section.</p>

  <dl>

   <dt>Cyclable cells</dt>

   <dd>

    <p>If the first element child of a cell's element is a
    <code>select</code> element that has a no <code
    title="attr-select-multiple">multiple</code> attribute and has at
    least one <code>option</code> element descendent, then the cell
    acts as a cyclable cell.</p>

    <p>The "current" <code>option</code> element is the selected
    <code>option</code> element, or the first <code>option</code>
    element if none is selected.</p>

    <p>The <code title="dom-provider-getCellData">getCellData()</code>
    method must return the <code>textContent</code> of the current
    <code>option</code> element (the <code
    title="attr-option-label">label</code> attribute is <span
    title="ignore">ignored</span> in this context as the
    <code>optgroup</code>s are not displayed).</p>

    <p>The <code
    title="dom-provider-getCellClasses">getCellClasses()</code> method
    must add the <code
    title="datagrid-cell-class-cyclable">cyclable</code> class and
    then all the classes of the current <code>option</code>
    element.</p>

    <p>The <code title="dom-provider-cycleCell">cycleCell()</code>
    method must change the selection of the <code>select</code>
    element such that the next <code>option</code> element after the
    current <code>option</code> element is the only one that is
    selected (in <span>tree order</span>). If the current <code>option</code>
    element is the last <code>option</code> element descendent of the
    <code>select</code>, then the first <code>option</code> element
    descendent must be selected instead.</p>

    <p>The <code
    title="dom-provider-setCellCheckedState">setCellCheckedState()</code>
    and <code title="dom-provider-editCell">editCell()</code> methods
    must do nothing.</p>

   </dd>

   <dt>Progress bar cells</dt>

   <dd>

    <p>If the first element child of a cell's element is a
    <code>progress</code> element, then the cell acts as a progress
    bar cell.</p>

    <p>The <code title="dom-provider-getCellData">getCellData()</code>
    method must return the value returned by the <code>progress</code>
    element's <code title="dom-progress-position">position</code> DOM
    attribute.</p>

    <p>The <code
    title="dom-provider-getCellClasses">getCellClasses()</code> method
    must add the <code
    title="datagrid-cell-class-progress">progress</code> class.</p>

    <p>The <code
    title="dom-provider-setCellCheckedState">setCellCheckedState()</code>,
    <code title="dom-provider-cycleCell">cycleCell()</code>, and
    <code title="dom-provider-editCell">editCell()</code> methods must
    do nothing.</p>

   </dd>

   <dt>Checkbox cells</dt>

   <dd>

    <p>If the first element child of a cell's element is an
    <code>input</code> element that has a <code
    title="attr-input-type">type</code> attribute with the value <code
    title="">checkbox</code>, then the cell acts as a check box
    cell.</p>

    <p>The <code title="dom-provider-getCellData">getCellData()</code>
    method must return the <code>textContent</code> of the cell
    element.</p>

    <p>The <code
    title="dom-provider-getCellClasses">getCellClasses()</code> method
    must add the <code
    title="datagrid-cell-class-checked">checked</code> class if the
    <code>input</code> element is <span
    title="dom-input-checked">checked</span>, and the <code
    title="datagrid-cell-class-unchecked">unchecked</code> class
    otherwise.</p>

    <p>The <code
    title="dom-provider-setCellCheckedState">setCellCheckedState()</code>
    method must set the <code>input</code> element's checkbox <span
    title="dom-input-checked">state</span> to checked if the method's
    third argument is 1, and to unchecked otherwise.</p>

    <p>The <code title="dom-provider-cycleCell">cycleCell()</code> and
    <code title="dom-provider-editCell">editCell()</code> methods must
    do nothing.</p>

   </dd>

   <dt>Editable cells</dt>

   <dd>

    <p>If the first element child of a cell's element is an
    <code>input</code> element that has a <code
    title="attr-input-type">type</code> attribute with the value <code
    title="">text</code> or that has no <code
    title="attr-input-type">type</code> attribute at all, then the
    cell acts as an editable cell.</p>

    <p>The <code title="dom-provider-getCellData">getCellData()</code>
    method must return the <code title="dom-input-value">value</code>
    of the <code>input</code> element.</p>

    <p>The <code
    title="dom-provider-getCellClasses">getCellClasses()</code> method
    must add the <code
    title="datagrid-cell-class-editable">editable</code> class.</p>

    <p>The <code title="dom-provider-editCell">editCell()</code>
    method must set the <code>input</code> element's <code
    title="dom-input-value">value</code> DOM attribute to the value of
    the third argument to the method.</p>

    <p>The <code
    title="dom-provider-setCellCheckedState">setCellCheckedState()</code>
    and <code title="dom-provider-cycleCell">cycleCell()</code>
    methods must do nothing.</p>

   </dd>

  </dl>

  <!-- XXX Calculated cells, like in spreadsheets? -->


  <h5>Populating the <code>datagrid</code> element</h5>

  <p>A <code>datagrid</code> must be disabled until its end tag has
  been parsed (in the case of a <code>datagrid</code> element in the
  original document markup) or until it has been inserted into the
  document (in the case of a dynamically created element). After that
  point, the element must fire a single <code
  title="event-load">load</code> event at itself, which doesn't bubble
  and cannot be canceled.</p>

  <p class="big-issue">The end-tag parsing thing should be moved to
  the parsing section.</p>

  <p>The <code>datagrid</code> must then populate itself using the
  data provided by the data provider assigned to the <code
  title="dom-datagrid-data">data</code> DOM attribute. After the view
  is populated (using the methods described below), the
  <code>datagrid</code> must invoke the <code
  title="dom-provider-initialize">initialize()</code> method on the
  data provider specified by the <code
  title="dom-datagrid-data">data</code> attribute, passing itself (the
  <code>HTMLDataGridElement</code> object) as the only argument.</p>

  <p>When the <code title="dom-datagrid-data">data</code> attribute is
  null, the <code>datagrid</code> must use the default data provider
  described in the previous section.</p>

  <p>To obtain data from the data provider, the element must invoke
  methods on the data provider object in the following ways:</p>

  <dl>

   <dt>To determine the total number of columns</dt>

   <dd>Invoke the <code
   title="dom-provider-getColumnCount">getColumnCount()</code> method
   with no arguments. The return value is the number of columns. If
   the return value is zero or negative, not an integer, or simply not
   a numeric type, or if the method is not defined, then 1 must be
   used instead.</dd>

   <dt>To get the captions to use for the columns</dt>

   <dd>Invoke the <code
   title="dom-provider-getCaptionText">getCaptionText()</code> method
   with the index of the column in question. The index <var
   title="">i</var> must be in the range 0 &le; <var title="">i</var>
   &lt; <var title="">N</var>, where <var title="">N</var> is the
   total number of columns. The return value is the string to use when
   referring to that column. If the method returns null or the empty
   string, the column has no caption. If the method is not defined,
   then none of the columns have any captions.</dd>

   <dt>To establish what classes apply to a column</dt>

   <dd>Invoke the <code
   title="dom-provider-getCaptionClasses">getCaptionClasses()</code>
   method with the index of the column in question, and an object
   implementing the <code>DOMTokenList</code> interface, associated
   with an anonymous empty string. The index <var title="">i</var>
   must be in the range 0 &le; <var title="">i</var> &lt; <var
   title="">N</var>, where <var title="">N</var> is the total number
   of columns. The tokens contained in the string underlying
   <code>DOMTokenList</code> object when the method returns represent
   the classes that apply to the given column. If the method is not
   defined, no classes apply to the column.</dd>

   <dt>To establish whether a column should be initially included in
   the visible columns</dt>

   <dd>Check whether the <code
   title="datagrid-column-class-initially-hidden">initially-hidden</code>
   class applies to the column. If it does, then the column should not
   be initially included; if it does not, then the column should be
   initially included.</dd>

   <dt id="columnType2">To establish whether the data can be sorted
   relative to a particular column</dt>

   <dd>Check whether the <code
   title="datagrid-column-class-sortable">sortable</code> class
   applies to the column. If it does, then the user should be able to
   ask the UA to display the data sorted by that column; if it does
   not, then the user agent must not allow the user to ask for the
   data to be sorted by that column.</dd>

   <dt>To establish if a column is a sorted column</dt>

   <dd>If the user agent can handle multiple columns being marked as
   sorted simultaneously: Check whether the <code
   title="datagrid-column-class-sorted">sorted</code> class applies to
   the column. If it does, then that column is the sorted column,
   otherwise it is not.</dd>

   <dd>If the user agent can only handle one column being marked as
   sorted at a time: Check each column in turn, starting with the
   first one, to see whether the <code
   title="datagrid-column-class-sorted">sorted</code> class applies to
   that column. The first column that has that class, if any, is the
   sorted column. If none of the columns have that class, there is no
   sorted column.</dd>

   <dt>To establish the sort direction of a sorted column</dt>

   <dd>Check whether the <code
   title="datagrid-column-class-reversed">reversed</code> class
   applies to the column. If it does, then the sort direction is
   descending (down; first rows have the highest values), otherwise it
   is ascending (up; first rows have the lowest values).</dd>

   <dt>To determine the total number of rows</dt>

   <dd>Determine the number of rows for the root of the data grid, and
   determine the number of child rows for each open row. The total
   number of rows is the sum of all these numbers.</dd>

   <dt>To determine the number of rows for the root of the data grid</dt>

   <dd>Invoke the <code
   title="dom-provider-getRowCount">getRowCount()</code> method with a
   <code>RowSpecification</code> object representing the empty path as
   its only argument. The return value is the number of rows at the
   top level of the data grid. If the return value of the method is
   negative, not an integer, or simply not a numeric type, or if the
   method is not defined, then zero must be used instead.</dd>

   <dt>To determine the number of child rows for a row</dt>

   <dd>Invoke the <code
   title="dom-provider-getRowCount">getRowCount()</code> method with a
   <code>RowSpecification</code> object representing the path to the
   row in question. The return value is the number of child rows for
   the given row. If the return value of the method is negative, not
   an integer, or simply not a numeric type, or if the method is not
   defined, then zero must be used instead.</dd>

   <dt>To determine what order to render rows in</dt>

   <dd>

    <p>Invoke the <code
    title="dom-provider-getChildAtPosition">getChildAtPosition()</code>
    method with a <code>RowSpecification</code> object representing
    the path to the parent of the rows that are being rendered as the
    first argument, and the position that is being rendered as the
    second argument. The return value is the index of the row to
    render in that position.</p>

    <div class="example">

     <p>If the rows are:</p>

     <ol>
      <li> Row "0"
       <ol>
        <li> Row "0,0"
        <li> Row "0,1"
       </ol>
      </li>
      <li> Row "1"
       <ol>
        <li> Row "1,0"
        <li> Row "1,1"
       </ol>
      </li>
     </ol>

     <p>...and the <code
    title="dom-provider-getChildAtPosition">getChildAtPosition()</code>
    method is implemented as follows:</p>

    <pre>function getChildAtPosition(parent, child) {
  // always return the reverse order
  return getRowCount(parent)-child-1;
}</pre>

     <p>...then the rendering would actually be:</p>

     <ol>
      <li> Row "1"
       <ol>
        <li> Row "1,1"
        <li> Row "1,0"
       </ol>
      </li>
      <li> Row "0"
       <ol>
        <li> Row "0,1"
        <li> Row "0,0"
       </ol>
      </li>
     </ol>

    </div>

    <p>If the return value of the method is negative, larger than the
    number of rows that the <code
    title="dom-provider-getRowCount">getRowCount()</code> method
    reported for that parent, not an integer, or simply not a numeric
    type, then the entire data grid should be disabled. Similarly, if
    the method returns the same value for two or more different values
    for the second argument (with the same first argument, and
    assuming that the data grid hasn't had relevant update methods
    invoked in the meantime), then the data grid should be
    disabled. Instead of disabling the data grid, the user agent may
    act as if the <code
    title="dom-provider-getChildAtPosition">getChildAtPosition()</code>
    method was not defined on the data provider (thus disabling
    sorting for that data grid, but still letting the user interact
    with the data). If the method is not defined, then the return
    value must be assumed to be the same as the second argument (an
    indentity transform; the data is rendered in its natural
    order).</p>

   </dd>

   <dt>To establish what classes apply to a row</dt>

   <dd>Invoke the <code
   title="dom-provider-getRowClasses">getRowClasses()</code> method
   with a <code>RowSpecification</code> object representing the row in
   question, and a <code>DOMTokenList</code> associated with an empty
   string. The tokens contained in the <code>DOMTokenList</code>
   object's underlying string when the method returns represent the
   classes that apply to the row in question. If the method is not
   defined, no classes apply to the row.</dd>

   <dt>To establish whether a row is a data row or a special row</dt>

   <dd>Examine the classes that apply to the row. If the <code
   title="datagrid-row-class-header">header</code> class applies to
   the row, then it is not a data row, it is a subheading. The data
   from the first cell of the row is the text of the subheading, the
   rest of the cells must be ignored. Otherwise, if the <code
   title="datagrid-row-class-separator">separator</code> class applies
   to the row, then in the place of the row, a separator should be
   shown. Otherwise, if the <code
   title="datagrid-row-class-selectable-separator">selectable-separator</code>
   class applies to the row, then the row should be a data row, but
   represented as a separator. (The difference between a <code
   title="datagrid-row-class-separator">separator</code> and a <code
   title="datagrid-row-class-selectable-separator">selectable-separator</code>
   is that the former is not an item that can be actually selected,
   whereas the second can be selected and thus has a context menu that
   applies to it, and so forth.) For both kinds of separator rows, the
   data of the rows' cells must all be ignored. If none of those three
   classes apply then the row is a simple data row.</dd>

   <dt id="rowType1">To establish whether a row is openable</dt>

   <dd>Determine the number of child rows for that row. If there are
   one or more child rows, then the row is openable.</dd>

   <dt>To establish whether a row should be initially open or closed</dt>

   <dd>If <a href="#rowType1">the row is openable</a>, examine the
   classes that apply to the row. If the <code
   title="datagrid-row-class-initially-open">initially-open</code>
   class applies to the row, then it should be initially
   open. Otherwise, if the <code
   title="datagrid-row-class-initially-closed">initially-closed</code>
   class applies to the row, then it must be initially
   closed. Otherwise, if neither class applies to the row, or if the
   row is not openable, then the initial state of the row is entirely
   up to the UA.</dd>

<!-- XXXPA
   <dt>To establish whether a row is deletable</dt>

   <dd>Check whether the <code
   title="datagrid-row-class-deletable">deletable</code> class applies
   to the row. If it does, the row is deletable, and interactive user
   agents should provide a way for the user to request that the row be
   deleted. (See the <code
   title="dom-provider-performActionOnRow">performActionOnRow()</code>
   method for more details.) Otherwise, the user agent should not
   provide the user with a method for requesting that the row be
   deleted.</dd>
-->
   <dt>To obtain a URI to an image representing a row</dt>

   <dd>Invoke the <code
   title="dom-provider-getRowImage">getRowImage()</code> method with a
   <code>RowSpecification</code> object representing the row in
   question. The return value is a string representing a URI (or IRI)
   to an image. Relative URIs must be interpreted relative to the
   <code>datagrid</code>'s base URI. If the method returns the empty
   string, null, or if the method is not defined, then the row has no
   associated image.</dd>

   <dt>To obtain a context menu appropriate for a particular row</dt>

   <dd>Invoke the <code
   title="dom-provider-getRowMenu">getRowMenu()</code> method with a
   <code>RowSpecification</code> object representing the row in
   question. The return value is a reference to an object implementing
   the <code>HTMLMenuElement</code> interface, i.e. a
   <code>menu</code> element DOM node. (This element must then be
   interpreted as described in the section on context menus to obtain
   the actual context menu to use.<!-- XXXX update once menu section
   works; with xrefs -->) If the method returns something that is not
   an <code>HTMLMenuElement</code>, or if the method is not defined,
   then the row has no associated context menu. User agents may
   provide their own default context menu, and may add items to the
   author-provided context menu. For example, such a menu could allow
   the user to change the presentation of the <code>datagrid</code>
   element.</dd>

   <dt>To establish the value of a particular cell</dt>

   <dd>Invoke the <code
   title="dom-provider-getCellData">getCellData()</code> method with
   the first argument being a <code>RowSpecification</code> object
   representing the row of the cell in question and the second
   argument being the index of the cell's column. The second argument
   must be a non-negative integer less than the total number of
   columns. The return value is the value of the cell. If the return
   value is null or the empty string, or if the method is not defined,
   then the cell has no data. (For progress bar cells, the cell's
   value must be further interpreted, as described below.)</dd>

   <dt>To establish what classes apply to a cell</dt>

   <dd>Invoke the <code
   title="dom-provider-getCellClasses">getCellClasses()</code> method
   with the first argument being a <code>RowSpecification</code>
   object representing the row of the cell in question, the second
   argument being the index of the cell's column, and the third being
   an object implementing the <code>DOMTokenList</code> interface,
   associated with an empty string. The second argument must be a
   non-negative integer less than the total number of columns. The
   tokens contained in the <code>DOMTokenList</code> object's
   underlying string when the method returns represent the classes
   that apply to that cell. If the method is not defined, no classes
   apply to the cell.</dd>

   <dt id="cellType1">To establish how the type of a cell</dt>

   <dd>Examine the classes that apply to the cell. If the <code
   title="datagrid-cell-class-progress">progress</code> class applies
   to the cell, it is a progress bar. Otherwise, if the <code
   title="datagrid-cell-class-cyclable">cyclable</code> class applies
   to the cell, it is a cycling cell whose value can be cycled between
   multiple states. Otherwise, none of these classes apply, and the
   cell is a simple text cell.</dd>

   <dt>To establish the value of a progress bar cell</dt>

   <dd>If the value <var title="">x</var> of the cell is a string that
   can be <span title="rules for parsing floating point number
   values">converted to a floating-point number</span> in the range
   0.0&nbsp;&le;&nbsp;<var title="">x</var>&nbsp;&le;&nbsp;1.0, then
   the progress bar has that value (0.0 means no progress, 1.0 means
   complete). Otherwise, the progress bar is an indeterminate progress
   bar.</dd>

   <dt id="cellType2">To establish how a simple text cell should be presented</dt>

   <dd>Check whether one of the <code
   title="datagrid-cell-class-checked">checked</code>, <code
   title="datagrid-cell-class-unchecked">unchecked</code>, or <code
   title="datagrid-cell-class-indeterminate">indeterminate</code>
   classes applies to the cell. If any of these are present, then the
   cell has a checkbox, otherwise none are present and the cell does
   not have a checkbox. If the cell has no checkbox, check whether the
   <code title="datagrid-cell-class-editable">editable</code> class
   applies to the cell. If it does, then the cell value is editable,
   otherwise the cell value is static.</dd>

   <dt>To establish the state of a cell's checkbox, if it has one</dt>

   <dd>Check whether the <code
   title="datagrid-cell-class-checked">checked</code> class applies to
   the cell. If it does, the cell is checked. Otherwise, check whether
   the <code title="datagrid-cell-class-unchecked">unchecked</code>
   class applies to the cell. If it does, the cell is unchecked.
   Otherwise, the <code
   title="datagrid-cell-class-indeterminate">indeterminate</code>
   class appplies to the cell and the cell's checkbox is in an
   indeterminate state. When the <code
   title="datagrid-cell-class-indeterminate">indeterminate</code>
   class appplies to the cell, the checkbox is a tristate checkbox,
   and the user can set it to the indeterminate state. Otherwise, only
   the <code title="datagrid-cell-class-checked">checked</code> and/or
   <code title="datagrid-cell-class-unchecked">unchecked</code>
   classes apply to the cell, and the cell can only be toggled betwen
   those two states.</dd>

  </dl>

  <p>If the data provider ever raises an exception while the
  <code>datagrid</code> is invoking one of its methods, the
  <code>datagrid</code> must act, for the purposes of that particular
  method call, as if the relevant method had not been defined.</p>

  <p>A <code>RowSpecification</code> object <var title="">p</var> with
  <var title="">n</var> path components passed to a method of the data
  provider must fulfill the constraint <span>0&nbsp;&le;&nbsp;<var
  title="">p<sub title=""><var
  title="">i</var></sub></var>&nbsp;&lt;&nbsp;<var
  title="">m</var>-1</span> for all integer values of <var
  title="">i</var> in the range <span>0&nbsp;&le;&nbsp;<var
  title="">i</var>&nbsp;&lt;&nbsp;<var title="">n</var>-1</span>,
  where <var title="">m</var> is the value that was last returned by
  the <code title="dom-provider-getRowCount">getRowCount()</code>
  method when it was passed the <code>RowSpecification</code> object
  <var title="">q</var> with <span><var title="">i</var>-1</span>
  items, where <span><var title="">p<sub title=""><var
  title="">i</var></sub></var>&nbsp;=&nbsp;<var title="">q<sub
  title=""><var title="">i</var></sub></var></span> for all integer
  values of <var title="">i</var> in the range
  <span>0&nbsp;&le;&nbsp;<var title="">i</var>&nbsp;&lt;&nbsp;<var
  title="">n</var>-1</span>, with any changes implied by the update
  methods taken into account.</p>

  <p id="inconsistentDataProvider">The data model is considered
  stable: user agents may assume that subsequent calls to the data
  provider methods will return the same data, until one of the update
  methods is called on the <code>datagrid</code> element. If a user
  agent is returned inconsistent data, for example if the number of
  rows returned by <code
  title="dom-provider-getRowCount">getRowCount()</code> varies in ways
  that do not match the calls made to the update methods, the user
  agent may disable the <code>datagrid</code>. User agents that do not
  disable the <code>datagrid</code> in inconsistent cases must honour
  the most recently returned values.</p>

  <p>User agents may cache returned values so that the data provider
  is never asked for data that could contradict earlier data. User
  agents must not cache the return value of the <code
  title="dom-provider-getRowMenu">getRowMenu</code> method.</p>

  <p>The exact algorithm used to populate the data grid is not defined
  here, since it will differ based on the presentation used. However,
  the behaviour of user agents must be consistent with the
  descriptions above. For example, it would be non-conformant for a
  user agent to make cells have both a checkbox and be editable, as
  the descriptions above state that cells that have a checkbox cannot
  be edited.</p> <!-- XXX speaking of which, do we actually want that
  limitation? -->


  <h5>Updating the <code>datagrid</code></h5>

  <p>Whenever the <code title="dom-datagrid-data">data</code>
  attribute is set to a new value, the <code>datagrid</code> must
  clear the current selection, remove all the displayed rows, and plan
  to repopulate itself using the information from the new data
  provider at the earliest opportunity.</p>

  <p>There are a number of update methods that can be invoked on the
  <code>datagrid</code> element to cause it to refresh itself in
  slightly less drastic ways:</p>

  <p>When the <dfn
  title="dom-datagrid-updateEverything"><code>updateEverything()</code></dfn>
  method is called, the user agent must repopulate the entire
  <code>datagrid</code>. If the number of rows decreased, the
  selection must be updated appropriately. If the number of rows
  increased, the new rows should be left unselected.</p>

  <p>When the <dfn
  title="dom-datagrid-updateRowsChanged"><code>updateRowsChanged(<var
  title="">row</var>, <var title="">count</var>)</code></dfn> method
  is called, the user agent must refresh the rendering of the rows
  starting from the row specified by <var title="">row</var>, and
  including the <var title="">count</var> next siblings of the row (or
  as many next siblings as it has, if that is less than <var
  title="">count</var>), including all descendant rows.</p>

  <p>When the <dfn
  title="dom-datagrid-updateRowsInserted"><code>updateRowsInserted(<var
  title="">row</var>, <var title="">count</var>)</code></dfn> method
  is called, the user agent must assume that <var title="">count</var>
  new rows have been inserted, such that the first new row is
  indentified by <var title="">row</var>. The user agent must update
  its rendering and the selection accordingly. The new rows should not
  be selected.</p>

  <p>When the <dfn
  title="dom-datagrid-updateRowsRemoved"><code>updateRowsRemoved(<var
  title="">row</var>, <var title="">count</var>)</code></dfn> method
  is called, the user agent must assume that <var title="">count</var>
  rows have been removed starting from the row that used to be
  identifier by <var title="">row</var>.  The user agent must update
  its rendering and the selection accordingly.</p>

  <p>The <dfn
  title="dom-datagrid-updateRowChanged"><code>updateRowChanged(<var
  title="">row</var>)</code></dfn> method must be exactly equivalent
  to calling <code
  title="dom-datagrid-updateRowsChanged">updateRowsChanged(<var
  title="">row</var>, 1)</code>.</p>

  <p>When the <dfn
  title="dom-datagrid-updateColumnChanged"><code>updateColumnChanged(<var
  title="">column</var>)</code></dfn> method is called, the user agent
  must refresh the rendering of the specified column <var
  title="">column</var>, for all rows.</p>

  <p>When the <dfn
  title="dom-datagrid-updateCellChanged"><code>updateCellChanged(<var
  title="">row</var>, <var title="">column</var>)</code></dfn> method
  is called, the user agent must refresh the rendering of the cell on
  row <var title="">row</var>, in column <var
  title="">column</var>.</p>

  <p>Any effects the update methods have on the
  <code>datagrid</code>'s selection is not considered a change to the
  selection, and must therefore not fire the <code
  title="event-select">select</code> event.</p>

  <p>These update methods should only be called by the data provider,
  or code acting on behalf of the data provider. In particular,
  calling the <code
  title="dom-datagrid-updateRowsInserted">updateRowsInserted()</code>
  and <code
  title="dom-datagrid-updateRowsRemoved">updateRowsRemoved()</code>
  methods without actually inserting or removing rows from the data
  provider is <a href="#inconsistentDataProvider">likely to result in
  inconsistent renderings</a>, and the user agent is likely to disable
  the data grid.</p>


  <h5>Requirements for interactive user agents</h5>

  <p><em>This section only applies to interactive user agents.</em></p>

  <p>If the <code>datagrid</code> element has a <dfn
  title="attr-datagrid-disabled"><code>disabled</code></dfn>
  attribute, then the user agent must disable the
  <code>datagrid</code>, preventing the user from interacting with it.
  The <code>datagrid</code> element should still continue to update
  itself when the data provider signals changes to the data, though.
  Obviously, conformance requirements stating that
  <code>datagrid</code> elements must react to users in particular
  ways do not apply when one is disabled.</p>

  <p>If <a href="#rowType1">a row is openable</a>, then the user
  should be able to toggle its open/closed state. When a row's
  open/closed state changes, the user agent must update the rendering
  to match the new state.</p>

  <p>If a cell is a cell whose value <a href="#cellType1">can be
  cycled between multiple states</a>, then the user must be able to
  activate the cell to cycle its value. When the user activates this
  "cycling" behaviour of a cell, then the <code>datagrid</code> must
  invoke the data provider's <code
  title="dom-provider-cycleCell">cycleCell()</code> method, with a
  <code>RowSpecification</code> object representing the cell's row as
  the first argument and the cell's column index as the second. The
  <code>datagrid</code> must act as if the <code>datagrid</code>'s
  <code
  title="dom-datagrid-updateCellChanged">updateCellChanged()</code>
  method had been invoked with those same arguments immediately before
  the provider's method was invoked.</p>

  <p>When a cell <a href="#cellType2">has a checkbox</a>, the user
  must be able to set the checkbox's state. When the user changes the
  state of a checkbox in such a cell, the <code>datagrid</code> must
  invoke the data provider's <code
  title="dom-provider-setCellCheckedState">setCellCheckedState()</code>
  method, with a <code>RowSpecification</code> object representing the
  cell's row as the first argument, the cell's column index as the
  second, and the checkbox's new state as the third. The state should
  be represented by the number 1 if the new state is checked, 0 if the
  new state is unchecked, and -1 if the new state is indeterminate
  (which must only be possible if the cell has the <code
  title="datagrid-cell-class-indeterminate">indeterminate</code> class
  set). The <code>datagrid</code> must act as if the
  <code>datagrid</code>'s <code
  title="dom-datagrid-updateCellChanged">updateCellChanged()</code>
  method had been invoked, specifying the same cell, immediately
  before the provider's method was invoked.</p>

  <p>If a cell <a href="#cellType2">is editable</a>, the user must be
  able to edit the data for that cell, and doing so must cause the
  user agent to invoke the <code
  title="dom-provider-editCell">editCell()</code> method of the data
  provider with three arguments: a <code>RowSpecification</code>
  object representing the cell's row, the cell's column's index, and
  the new text entered by the user. The user agent must act as if the
  <code
  title="dom-datagrid-updateCellChanged">updateCellChanged()</code>
  method had been invoked, with the same row and column specified,
  immediately before the provider's method was invoked.</p>

  <!-- XXXPA <p class="big-issue">define actions (performAction(), etc)</p> -->

  <h5>The selection</h5>

  <p><em>This section only applies to interactive user agents. For
  other user agents, the <code
  title="dom-datagrid-selection">selection</code> attribute must
  return null.</em></p>

  <pre class="idl">interface <dfn>DataGridSelection</dfn> {
  readonly attribute unsigned long <span title="dom-DataGridSelection-count">length</span>;
  <span>RowSpecification</span> <span title="dom-DataGridSelection-">item</span>(in unsigned long index);
  boolean <span title="dom-DataGridSelection-isSelected">isSelected</span>(in <span>RowSpecification</span> row);
  void <span title="dom-DataGridSelection-setSelected">setSelected</span>(in <span>RowSpecification</span> row, in boolean selected);
<!--  void <span title="dom-DataGridSelection-addRange">addRange</span>(in <span>RowSpecification</span> first, in <span>RowSpecification</span> last);
  void <span title="dom-DataGridSelection-removeRange">removeRange</span>(in <span>RowSpecification</span> first, in <span>RowSpecification</span> last);
XXX selection ranges -->
  void <span title="dom-DataGridSelection-selectAll">selectAll</span>();
  void <span title="dom-DataGridSelection-invert">invert</span>();
  void <span title="dom-DataGridSelection-clear">clear</span>();
};</pre>

  <p>Each <code>datagrid</code> element must keep track of which rows
  are currently selected. Initially no rows are selected, but this can
  be changed via the methods described in this section. <!--XXX
  select-provider-selection The default data provider, for instance,
  changes which rows are selected when it is first initialised.--></p>

  <p>The selection of a <code>datagrid</code> is represented by its
  <dfn title="dom-datagrid-selection"><code>selection</code></dfn> DOM
  attribute, which must be a <code>DataGridSelection</code> object.</p>

  <p><code>DataGridSelection</code> objects represent the rows in the
  selection. In the selection the rows must be ordered in the natural
  order of the data provider (and not, e.g., the rendered order). Rows
  that are not rendered because one of their ancestors is closed must
  share the same selection state as their nearest rendered
  ancestor. Such rows are not considered part of the selection for the
  purposes of iterating over the selection.</p>

  <p class="note">This selection API doesn't allow for hidden rows to
  be selected because it is trivial to create a data provider that has
  infinite depth, which would then require the selection to be
  infinite if every row, including every hidden row, was selected.</p>

  <p>The <dfn
  title="dom-DataGridSelection-length"><code>length</code></dfn>
  attribute must return the number of rows currently present in the
  selection. The <dfn
  title="dom-DataGridSelection-item"><code>item(<var
  title="">index</var>)</code></dfn> method must return the <var
  title="">index</var>th row in the selection. If the argument is out
  of range (less than zero or greater than the number of selected rows
  minus one), then it must raise an <code>INDEX_SIZE_ERR</code>
  exception. <a href="#refsDOM3CORE">[DOM3CORE]</a></p>

  <p>The <dfn
  title="dom-DataGridSelection-isSelected"><code>isSelected()</code></dfn>
  method must return the selected state of the row specified by its
  argument. If the specified row exists and is selected, it must
  return true, otherwise it must return false.</p>

  <p>The <dfn
  title="dom-DataGridSelection-setSelected"><code>setSelected()</code></dfn>
  method takes two arguments, <var title="">row</var> and <var
  title="">selected</var>. When invoked, it must set the selection
  state of row <var title="">row</var> to selected if <var
  title="">selected</var> is true, and unselected if it is false. If
  <var title="">row</var> is not a row in the data grid, the method
  must raise an <code>INDEX_SIZE_ERR</code> exception. If the
  specified row is not rendered because one of its ancestors is
  closed, the method must do nothing.</p>

  <p>The <dfn
  title="dom-DataGridSelection-selectAll"><code>selectAll()</code></dfn>
  method must mark all the rows in the data grid as selected. After a
  call to <code
  title="dom-DataGridSelection-selectAll">selectAll()</code>, the
  <code title="dom-DataGridSelection-length">length</code> attribute
  will return the number of rows in the data grid, not counting
  children of closed rows.</p>

  <p>The <dfn
  title="dom-DataGridSelection-invert"><code>invert()</code></dfn>
  method must cause all the rows in the selection that were marked as
  selected to now be marked as not selected, and vice versa.</p>

  <p>The <dfn
  title="dom-DataGridSelection-clear"><code>clear()</code></dfn>
  method must mark all the rows in the data grid to be marked as not
  selected.  After a call to <code
  title="dom-DataGridSelection-clear">clear()</code>, the <code
  title="dom-DataGridSelection-length">length</code> attribute will
  return zero.</p>

  <p>If the <code>datagrid</code> element has a <dfn
  title="attr-datagrid-multiple"><code>multiple</code></dfn>
  attribute, then the user must be able to select any number of rows
  (zero or more). If the attribute is not present, then the user must
  only be able to select a single row at a time, and selecting another
  one must unselect all the other rows.</p>

  <p class="note">This only applies to the user. Scripts can select
  multiple rows even when the <code
  title="attr-datagrid-multiple">multiple</code> attribute is
  absent.</p>

  <p>Whenever the selection of a <code>datagrid</code> changes,
  whether due to the user interacting with the element, or as a result
  of calls to methods of the <code
  title="dom-datagrid-selection">selection</code> object, a <dfn
  title="event-select"><code>select</code></dfn><!-- XXX check if we
  really should be DFNing this here. It's a DOM3 Core event. What's
  our story going to be regarding events and defining them? --> event
  that bubbles but is not cancelable must be fired on the
  <code>datagrid</code> element. If changes are made to the selection
  via calls to the object's methods during the execution of a
  script<!-- XXX should xref to a better explanation -->, then the
  <code title="event-select">select</code> events must be coalesced
  into one, which must then be fired<!--XXX xref again--> when the
  script execution has completed<!-- XXX xref -->.</p>

  <p class="note">The <code>DataGridSelection</code> interface has no
  relation to the <code>Selection</code> interface.</p>


  <h5>Columns and captions</h5>

  <p><em>This section only applies to interactive user agents.</em></p>

  <p>Each <code>datagrid</code> element must keep track of which
  columns are currently being rendered. User agents should initially
  show all the columns except those with the <code
  title="datagrid-column-class-initially-hidden">initially-hidden</code>
  class, but may allow users to hide or show columns. User agents
  should initially display the columns in the order given by the data
  provider, but may allow this order to be changed by the user.</p>

  <p>If columns are not being used, as might be the case if the data
  grid is being presented in an icon view, or if an overview of data
  is being read in an aural context, then the text of the first column
  of each row should be used to represent the row.</p>

  <p>If none of the columns have any captions (i.e. if the data
  provider does not provide a <code
  title="dom-provider-getCaptionText">getCaptionText()</code> method),
  then user agents may avoid showing the column headers at all. This
  may prevent the user from performing actions on the columns (such as
  reordering them, changing the sort column, and so on).</p>

  <p class="note">Whatever the order used for rendering, and
  irrespective of what columns are being shown or hidden, the "first
  column" as referred to in this specification is always the column
  with index zero, and the "last column" is always the column with the
  index one less than the value returned by the <code
  title="dom-provider-getcolumnCount">getColumnCount()</code> method
  of the data provider.</p>

  <p>If <a href="#columnType2">a column is sortable</a>, then the user
  must be able to invoke it to sort the data. When the user does so,
  then the <code>datagrid</code> must invoke the data provider's <code
  title="dom-provider-toggleColumnSortState">toggleColumnSortState()</code>
  method, with the column's index as the only argument. The
  <code>datagrid</code> must <em>then</em> act as if the
  <code>datagrid</code>'s <code
  title="dom-datagrid-updateEverything">updateEverything()</code>
  method had been invoked.</p>

<!--XXXDND
  <h5>Drag and drop in <code>datagrid</code>s</h5>

  <p><em>This section only applies to interactive user agents.</p>

  <p class="big-issue">define drag and drop in datagrids; selectiondraggable, etc.</p>
-->

  <h4 id="the-command">The <dfn><code>command</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Metadata content</span>.</dd>
   <dd><span>Phrasing content</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>metadata content</span> is expected.</dd>
   <dd>Where <span>phrasing content</span> is expected.</dd>
   <dt>Content model:</dt>
   <dd>Empty.</dd>
   <dt>Element-specific attributes:</dt>
   <dd><code title="attr-command-type">type</code></dd>
   <dd><code title="attr-command-label">label</code></dd>
   <dd><code title="attr-command-icon">icon</code></dd>
   <dd><code title="attr-command-hidden">hidden</code></dd>
   <dd><code title="attr-command-disabled">disabled</code></dd>
   <dd><code title="attr-command-checked">checked</code></dd>
   <dd><code title="attr-command-radiogroup">radiogroup</code></dd>
   <dd><code title="attr-command-default">default</code></dd>
   <dd>Also, the <code title="attr-command-title">title</code> attribute has special semantics on this element.</dd>
   <dt>DOM interface:</dt>
   <dd>
<pre class="idl">interface <dfn>HTMLCommandElement</dfn> : <span>HTMLElement</span> {
           attribute DOMString <span title="dom-command-type">type</span>;
           attribute DOMString <span title="dom-command-label">label</span>;
           attribute DOMString <span title="dom-command-icon">icon</span>;
           attribute boolean <span title="dom-command-hidden">hidden</span>;
           attribute boolean <span title="dom-command-disabled">disabled</span>;
           attribute boolean <span title="dom-command-checked">checked</span>;
           attribute DOMString <span title="dom-command-radiogroup">radiogroup</span>;
           attribute boolean <span title="dom-command-default">default</span>;
 void <span title="dom-command-click">click</span>(); // shadows <code>HTMLElement</code>.<code title="dom-click">click()</code>
};</pre>
    <p>The <code title="command-ro">Command</code> interface must also be implemented by
    this element.</p>
   </dd>
  </dl>

  <p>The <code>command</code> element represents a command that the user
  can invoke.</p>

  <p>The <dfn title="attr-command-type"><code>type</code></dfn>
  attribute indicates the kind of command: either a normal command
  with an associated action, or a state or option that can be toggled,
  or a selection of one item from a list of items.</p>

  <p>The attribute's value must be either "<code
  title="">command</code>", "<code title="">checkbox</code>", or
  "<code title="">radio</code>", denoting each of these three types of
  commands respectively. The attribute may also be omitted if the
  element is to represent the first of these types, a simple
  command.</p>

  <p>The <dfn title="attr-command-label"><code>label</code></dfn>
  attribute gives the name of the command, as shown to the user.</p>

  <p>The <dfn title="attr-command-title"><code>title</code></dfn>
  attribute gives a hint describing the command, which might be shown
  to the user to help him.</p>

  <p>The <dfn title="attr-command-icon"><code>icon</code></dfn>
  attribute gives a picture that represents the command. If the
  attribute is specified, the attribute's value must contain a URI (or
  IRI).</p>

  <p>The <dfn title="attr-command-hidden"><code>hidden</code></dfn>
  attribute is a <span>boolean attribute</span> that, if present,
  indicates that the command is not relevant and is to be hidden.</p>

  <p>The <dfn
  title="attr-command-disabled"><code>disabled</code></dfn> attribute
  is a <span>boolean attribute</span> that, if present, indicates that
  the command is not available in the current state.</p>

  <p class="note">The distinction between <span
  title="command-facet-DisabledState">Disabled State</span> and <span
  title="command-facet-HiddenState">Hidden State</span> is subtle. A
  command should be Disabled if, in the same context, it could be
  enabled if only certain aspects of the situation were changed. A
  command should be marked as Hidden if, in that situation, the
  command will never be enabled. For example, in the context menu for
  a water faucet, the command "open" might be Disabled if the faucet
  is already open, but the command "eat" would be marked Hidden since
  the faucet could never be eaten.</p>

  <p>The <dfn title="attr-command-checked"><code>checked</code></dfn>
  attribute is a <span>boolean attribute</span> that, if present,
  indicates that the command is selected.</p>

  <p>The <dfn
  title="attr-command-radiogroup"><code>radiogroup</code></dfn>
  attribute gives the name of the group of commands that will be
  toggled when the command itself is toggled, for commands whose <code
  title="attr-command-type">type</code> attribute has the value "<code
  title="">radio</code>". The scope of the name is the child list of
  the parent element.</p>

  <p>If the <code>command</code> element is used when <span
  title="menu generation">generating</span> a <span>context
  menu</span>, then the <dfn
  title="attr-command-default"><code>default</code></dfn> attribute
  indicates, if present, that the command is the one that would have
  been invoked if the user had directly activated the menu's subject
  instead of using its context menu. The <code
  title="attr-command-default">default</code> attribute is a
  <span>boolean attribute</span>.</p>

  <div class="example">

   <p class="big-issue">Need an example that shows an element that, if
   double-clicked, invokes an action, but that also has a context
   menu, showing the various <code>command</code> attributes off, and
   that has a default command.</p>

  </div>

  <p>The <dfn title="dom-command-type"><code>type</code></dfn>, <dfn
  title="dom-command-label"><code>label</code></dfn>, <dfn
  title="dom-command-icon"><code>icon</code></dfn>, <dfn
  title="dom-command-hidden"><code>hidden</code></dfn>, <dfn
  title="dom-command-disabled"><code>disabled</code></dfn>, <dfn
  title="dom-command-checked"><code>checked</code></dfn>, <dfn
  title="dom-command-radiogroup"><code>radiogroup</code></dfn>, and  <dfn
  title="dom-command-default"><code>default</code></dfn> DOM
  attributes must <span>reflect</span> their respective namesake
  content attributes.</p>

  <p>The <dfn title="dom-command-click"><code>click()</code></dfn>
  method's behaviour depends on the value of the <code
  title="attr-command-type">type</code> attribute of the element, as
  follows:</p>

  <dl class="switch">

   <dt>If the <code title="attr-command-type">type</code> attribute
   has the value <code title="">checkbox</code></dt>

   <dd><p>If the element has a <code
   title="attr-command-checked">checked</code> attribute, the UA must
   remove that attribute. Otherwise, the UA must add a <code
   title="attr-command-checked">checked</code> attribute, with the
   literal value <code title="">checked</code>. The UA must then
   <span>fire a <code title="">click</code> event</span> at the
   element.</p></dd>


   <dt>If the <code title="attr-command-type">type</code> attribute
   has the value <code title="">radio</code></dt>

   <dd><p>If the element has a parent, then the UA must walk the list
   of child nodes of that parent element, and for each node that is a
   <code>command</code> element, if that element has a <code
   title="attr-command-radiogroup">radiogroup</code> attribute whose
   value exactly matches the current element's (treating missing <code
   title="attr-command-radiogroup">radiogroup</code> attributes as if
   they were the empty string), and has a <code
   title="attr-command-checked">checked</code> attribute, must remove
   that attribute and <span>fire a <code title="">click</code>
   event</span> at the element.</p>

   <p>Then, the element's <code
   title="attr-command-checked">checked</code> attribute attribute
   must be set to the literal value <code title="">checked</code> and
   a <span title="file a click event"><code title="">click</code>
   event must be fired</span> at the element.</p></dd>


   <dt>Otherwise</dt>

   <dd><p>The UA must <span>fire a <code title="">click</code>
   event</span> at the element.</p></dd>

  </dl>

  <p class="note">Firing a synthetic <code
  title="event-click">click</code> event at the element does not cause
  any of the actions described above to happen.</p>

  <p class="big-issue"> should change all the above so it actually is
  just trigged by a click event, then we could remove the shadowing
  click() method and rely on actual events. </p>

  <p class="big-issue">Need to define the command="" attribute</p>

  <p class="note"><code>command</code> elements are not rendered
  unless they <span title="menu">form part of a menu</span>.</p>


  <h4 id="menus">The <dfn><code>menu</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Flow content</span>.</dd>
   <dd>If there is a <code>menu</code> element ancestor: <span>phrasing content</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>flow content</span> is expected.</dd>
   <dd>If there is a <code>menu</code> element ancestor: where <span>phrasing content</span> is expected.</dd>
   <dt>Content model:</dt>
   <dd>Either: Zero or more <code>li</code> elements.</dd>
   <dd>Or: <span>Phrasing content</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd><code title="attr-menu-type">type</code></dd>
   <dd><code title="attr-menu-label">label</code></dd>
   <dd><code title="attr-menu-autosubmit">autosubmit</code></dd>
   <dt>DOM interface:</dt>
   <dd>
<pre class="idl">interface <dfn>HTMLMenuElement</dfn> : <span>HTMLElement</span> {
           attribute DOMString <span title="dom-menu-type">type</span>;
           attribute DOMString <span title="dom-menu-label">label</span>;
           attribute boolean <span title="dom-menu-autosubmit">autosubmit</span>;
};</pre>
  </dl>

  <p>The <code>menu</code> element represents a list of commands.</p>

  <p>The <dfn title="attr-menu-type"><code>type</code></dfn> attribute
  is an <span>enumerated attribute</span> indicating the kind of menu
  being declared. The attribute has three states. The <code
  title="attr-menu-type-context">context</code> keyword maps to the
  <dfn title="context menu state">context menu</dfn> state, in which
  the element is declaring a context menu. The <code
  title="attr-menu-type-toolbar">toolbar</code> keyword maps to the
  <dfn title="tool bar state">tool bar</dfn> state, in which the
  element is declaraing a tool bar. The attribute may also be
  omitted. The <i>missing value default</i> is the <dfn title="list
  state">list</dfn> state, which indicates that the element is merely
  a list of commands that is neither declaring a context menu nor
  defining a tool bar.</p>

  <p>If a <code>menu</code> element's <code
  title="attr-menu-type">type</code> attribute is in the <span
  title="context menu state">context menu</span> state, then the
  element represents the commands of a context menu, and the user can
  only interact with the commands if that context menu is
  activated.</p>

  <p>If a <code>menu</code> element's <code
  title="attr-menu-type">type</code> attribute is in the <span
  title="tool bar state">tool bar</span> state, then the element
  represents a list of active commands that the user can immediately
  interact with.</p>

  <p>If a <code>menu</code> element's <code
  title="attr-menu-type">type</code> attribute is in the <span
  title="list state">list</span> state, then the element either
  represents an unordered list of items (each represented by an
  <code>li</code> element), each of which represents a command that
  the user may perform or activate, or, if the element has no
  <code>li</code> element children, <span>flow content</span>
  describing available commands.</p>

  <p>The <dfn title="attr-menu-label"><code>label</code></dfn>
  attribute gives the label of the menu. It is used by user agents to
  display nested menus in the UI. For example, a context menu
  containing another menu would use the nested menu's <code
  title="attr-menu-label">label</code> attribute for the submenu's
  menu label.</p>

  <p>The <dfn
  title="attr-menu-autosubmit"><code>autosubmit</code></dfn> attribute
  is a <span>boolean attribute</span> that, if present, indicates that
  selections made to form controls in this menu are to result in the
  control's form being immediately submitted.</p>

  <p>If a <code title="event-change">change</code> event bubbles
  through a <code>menu</code> element, then, in addition to any other
  default action that that event might have, the UA must act as if the
  following was an additional default action for that event: if (when
  it comes time to execute the default action) the <code>menu</code>
  element has an <code title="attr-menu-autosubmit">autosubmit</code>
  attribute, and the target of the event is an <code>input</code>
  element, and that element has a <code
  title="attr-input-type">type</code> attribute whose value is either
  <code title="">radio</code> or <code title="">checkbox</code>, and
  the <code>input</code> element in question has a non-null <code
  title="dom-input-form">form</code> DOM attribute, then the UA must
  invoke the <code title="dom-form-submit">submit()</code> method of
  the <code>form</code> element indicated by that DOM attribute.</p>



  <h5 id="menus-intro">Introduction</h5>

  <p><em>This section is non-normative.</em></p>

  <p class="big-issue">...</p>

<!--


  <pre>&lt;menu type="commands"&gt;
 &lt;li&gt;
  &lt;menu label="File"&gt;
   &lt;button type="button" onclick="fnew()"&gt;New...&lt;/button&gt;
   &lt;button type="button" onclick="fopen()"&gt;Open...&lt;/button&gt;
   &lt;button type="button" onclick="fsave()" id="save"&gt;Save&lt;/button&gt;
   &lt;button type="button" onclick="fsaveas()"&gt;Save as...&lt;/button&gt;
  &lt;/menu&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;menu label="Edit"&gt;
   &lt;button type="button" onclick="ecopy()"&gt;Copy&lt;/button&gt;
   &lt;button type="button" onclick="ecut()"&gt;Cut&lt;/button&gt;
   &lt;button type="button" onclick="epaste()"&gt;Paste&lt;/button&gt;
  &lt;/menu&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;menu label="Help"&gt;
   &lt;li&gt;&lt;a href="help.html"&gt;Help&lt;/a&gt;&lt;/li&gt;
   &lt;li&gt;&lt;a href="about.html"&gt;About&lt;/a&gt;&lt;/li&gt;
  &lt;/menu&gt;
 &lt;/li&gt;
&lt;/menubar&gt;

...

&lt;input command="save"/&gt; &lt;!- - This will act exactly like the
                             Save button above, including reflecting
                             its <code>disabled</code> state dynamically - -&gt;

</pre>

  <p>Here's some markup that falls back on the traditional abuse of
  the <code>select</code> element as a navigation menu, but which is
  implemented as a semi-correct menu using the new techniques of this
  document:</p>

<pre>&lt;form action="redirect.cgi"&gt;
 &lt;menu type="commands"&gt;
  &lt;label for="goto"&gt;Go to...&lt;/label&gt;
  &lt;menu label="Go"&gt;
   &lt;select id="goto"
           onchange="if (this.options[this.selectedIndex].value)
                     window.location = this.options[this.selectedIndex].value"&gt;
    &lt;option value="" selected="selected"&gt; Select site: &lt;/option&gt;
    &lt;option value="http://www.apple.com/"&gt; Apple &lt;/option&gt;
    &lt;option value="http://www.mozilla.org/"&gt; Mozilla &lt;/option&gt;
    &lt;option value="http://www.opera.com/"&gt; Opera &lt;/option&gt;
   &lt;/select&gt;
   &lt;span&gt;&lt;input type="submit" value="Go"&gt;&lt;/span&gt;
  &lt;/menu&gt;
 &lt;/menubar&gt;
&lt;/form&gt;</pre>

<form ...>
 <menu type="toolbar" autosubmit>
  <li>
   <select name="foo" onchange="form.submit()">
     ...
   </select>
   <button>Go</button>
  </li>
  <li>
   <select name="bar" onchange="form.submit()">
     ...
   </select>
   <button>Go</button>
  </li>
 </menu>
</form>

<form ...>
 <menu type="toolbar" autosubmit>
  <menu label="Foo">
   <select name="foo" onchange="form.submit()">
     ...
   </select>
   <button>Go</button>
  </menu>
  <menu label="Bar">
   <select name="bar" onchange="form.submit()">
     ...
   </select>
   <button>Go</button>
  </menu>
 </menu>
</form>

-->


  <h5><dfn>Building menus and tool bars</dfn></h5>

  <p>A menu (or tool bar) consists of a list of zero or more of the
  following components:</p>

  <ul class="brief">
   <li><span title="concept-command">Commands</span>, which can be marked as default commands</li>
   <li>Separators</li>
   <li>Other menus (which allows the list to be nested)</li>
  </ul>

  <p>The list corresponding to a particular <code>menu</code> element
  is built by iterating over its child nodes. For each child node in
  <span>tree order</span>, the required behaviour depends on what the
  node is, as follows:</p>

  <dl class="switch">

   <dt>An element that <span title="concept-command">defines a command</span></dt>

   <dd>Append the command to the menu. If the element is a
   <code>command</code> element with a <code
   title="attr-command-default">default</code> attribute, mark the
   command as being a default command.</dd>


   <dt>An <code>hr</code> element</dt>
   <dt>An <code>option</code> element that has a <code
   title="attr-option-value">value</code> attribute set to the empty
   string, and has a <code
   title="attr-option-disabled">disabled</code> attribute, and whose
   <code>textContent</code> consists of a string of one or more
   hyphens (U+002D HYPHEN-MINUS)</dt>

   <dd>Append a separator to the menu.</dd>


   <dt>An <code>li</code> element</dt>

   <dd>Iterate over the children of the <code>li</code> element.</dd>


   <dt>A <code>menu</code> element with no <code title="attr-menu-label">label</code> attribute</dt>
   <dt>A <code>select</code> element</dt>

   <dd>Append a separator to the menu, then iterate over the children
   of the <code>menu</code> or <code>select</code> element, then
   append another separator.</dd>


   <dt>A <code>menu</code> element with a <code title="attr-menu-label">label</code> attribute</dt>
   <dt>An <code>optgroup</code> element</dt>

   <dd>Append a submenu to the menu, using the value of the element's
   <code title="">label</code> attribute as the label of the menu. The
   submenu must be constructed by taking the element and creating a
   new menu for it using the complete process described in this
   section.</dd>


   <dt>Any other node</dt>

   <dd><span>Ignore</span> the node.</dd>

  </dl>

  <p class="issue">We should support <code>label</code> in the
  algorithm above -- just iterate through the contents like with
  <code>li</code>, to support <code>input</code> elements in
  <code>label</code> elements. Also, <code>optgroup</code> elements
  without labels should be ignored (maybe? or at least should say they
  have no label so that they are dropped below), and
  <code>select</code> elements inside <code>label</code> elements may
  need special processing.</p>

  <p>Once all the nodes have been processed as described above, the
  user agent must the post-process the menu as follows:</p>

  <ol>

   <li>Any menu item with no label, or whose label is the empty string, must be removed.</li>

   <li>Any sequence of two or more separators in a row must be collapsed to a single separator.</li>

   <li>Any separator at the start or end of the menu must be removed.</li>

  </ol>


  <h5><dfn>Context menus</dfn></h5>

  <p>The <dfn title="attr-contextmenu"><code>contextmenu</code></dfn>
  attribute gives the element's <span title="context menus">context
  menu</span>. The value must be the ID of a <code>menu</code> element
  in the DOM. If the node that would be obtained by the invoking the
  <code>getElementById()</code> method using the attribute's value as
  the only argument is null or not a <code>menu</code> element, then
  the element has no assigned context menu. Otherwise, the element's
  assigned context menu is the element so identified.</p>

  <p>When an element's context menu is requested (e.g. by the user
  right-clicking the element, or pressing a context menu key), the UA
  must <span>fire a <code title="">contextmenu</code> event</span> on
  the element for which the menu was requested.</p>

  <p class="note">Typically, therefore, the firing of the <code
  title="event-contextmenu">contextmenu</code> event will be the
  default action of a <code title="mouseup">mouseup</code> or <code
  title="event-keyup">keyup</code> event. The exact sequence of events
  is UA-dependent, as it will vary based on platform conventions.</p>

  <p>The default action of the <code
  title="event-contextmenu">contextmenu</code> event depends on
  whether the element has a context menu assigned (using the <code
  title="attr-contextmenu">contextmenu</code> attribute) or not. If it
  does not, the default action must be for the user agent to show its
  default context menu, if it has one.</p>

  <p>If the element <em>does</em> have a context menu assigned, then
  the user agent must <span>fire a <code title="">show</code>
  event</span> on the relevant <code>menu</code> element.</p>

  <p>The default action of <em>this</em> event is that the user agent
  must show a context menu <span title="building menus and tool
  bars">built</span> from the <code>menu</code> element.</p>

  <p>The user agent may also provide access to its default context
  menu, if any, with the context menu shown. For example, it could
  merge the menu items from the two menus together, or provide the
  page's context menu as a submenu of the default menu.</p>

  <p>If the user dismisses the menu without making a selection,
  nothing in particular happens.</p>

  <p>If the user selects a menu item that represents a <span
  title="concept-commands">command</span>, then the UA must invoke
  that command's <span title="command-facet-Action">Action</span>.</p>

  <p>Context menus must not, while being shown, reflect changes in the
  DOM; they are constructed as the default action of the <code
  title="event-show">show</code> event and must remain like that until
  dismissed.</p>

  <p>User agents may provide means for bypassing the context menu
  processing model, ensuring that the user can always access the UA's
  default context menus. For example, the user agent could handle
  right-clicks that have the Shift key depressed in such a way that it
  does not fire the <code title="event-contextmenu">contextmenu</code>
  event and instead always shows the default context menu.</p>

  <p>The <dfn title="dom-contextMenu"><code>contextMenu</code></dfn>
  attribute must <span>reflect</span> the <code
  title="attr-contextmenu">contextmenu</code> content attribute.</p>


  <h5>Toolbars</h5>

  <p><dfn>Toolbars</dfn> are a kind of menu that is always visible.</p>

  <p>When a <code>menu</code> element has a <code
  title="attr-menu-type">type</code> attribute with the value <code
  title="">toolbar</code>, then the user agent must <span
  title="building menus and tool bars">build</span> the menu for that
  <code>menu</code> element and <span
  title="render-toolbar">render</span><!-- XXX xref --> it in the
  document in a position appropriate for that <code>menu</code>
  element.</p>

  <p>The user agent must reflect changes made to the
  <code>menu</code>'s DOM immediately in the UI.</p>



  <h4 id="commands">Commands</h4>

  <p>A <dfn title="concept-command">command</dfn> is the abstraction
  behind menu items, buttons, and links. Once a command is defined,
  other parts of the interface can refer to the same command, allowing
  many access points to a single feature to share aspects such as the
  disabled state.</p>

  <p id="facets">Commands are defined to have the following
  <em>facets</em>:</p>

  <dl>

   <dt><dfn title="command-facet-Type">Type</dfn></dt>

   <dd>The kind of command: "command", meaning it is a normal command;
   "radio", meaning that triggering the command will, amongst other
   things, set the <span title="command-facet-CheckedState">Checked
   State</span> to true (and probably uncheck some other commands); or
   "checkbox", meaning that triggering the command will, amongst other
   things, toggle the value of the <span
   title="command-facet-CheckedState">Checked State</span>.</dd>

   <dt><dfn title="command-facet-ID">ID</dfn></dt>

   <dd>The name of the command, for referring to the command from the
   markup or from script. If a command has no ID, it is an
   <dfn>anonymous command</dfn>.</dd>

   <dt><dfn title="command-facet-Label">Label</dfn></dt>

   <dd>The name of the command as seen by the user.</dd>

   <dt><dfn title="command-facet-Hint">Hint</dfn></dt>

   <dd>A helpful or descriptive string that can be shown to the
   user.</dd>

   <dt><dfn title="command-facet-Icon">Icon</dfn></dt>

   <dd>A graphical image that represents the action.</dd>

   <dt><dfn title="command-facet-HiddenState">Hidden State</dfn></dt>

   <dd>Whether the command is hidden or not (basically, whether it
   should be shown in menus).</dd>

   <dt><dfn title="command-facet-DisabledState">Disabled State</dfn></dt>

   <dd>Whether the command can be triggered or not. If the <span
   title="command-facet-HiddenState">Hidden State</span> is true
   (hidden) then the <span
   title="command-facet-DisabledState">Disabled State</span> will be
   true (disabled) regardless. <span class="issue">We could make this
   into a string value that acts as a Hint for why the command is
   disabled.</span></dd>

   <dt><dfn title="command-facet-CheckedState">Checked State</dfn></dt>

   <dd>Whether the command is checked or not.</dd>

   <dt><dfn title="command-facet-Action">Action</dfn></dt>

   <dd>The actual effect that triggering the command will have. This
   could be a scripted event handler, a URI to which to navigate, or a
   form submission.</dd>

   <dt><dfn title="command-facet-Triggers">Triggers</dfn></dt>

   <dd>The list of elements that can trigger the command. The element
   defining a command is always in the list of elements that can
   trigger the command. For anonymous commands, only the element
   defining the command is on the list, since other elements have no
   way to refer to it.</dd>

  </dl>

  <p>Commands are represented by elements in the DOM. Any element that
  can define a command also implements the <code title="command-ro">Command</code>
  interface:</p>

  <pre class="idl">interface <dfn title="command-ro">Command</dfn> {<!--
 NOTE: to avoid clashing with the HTMLCommandElement interface's names,
       the members of this interface use cross-references with the title
       dom-command-ro-foo (note the "ro", which stands for "readonly").
-->
  readonly attribute DOMString <span title="dom-command-ro-commandType">commandType</span>;          
  readonly attribute DOMString <span title="dom-command-ro-id">id</span>;
  readonly attribute DOMString <span title="dom-command-ro-label">label</span>;
  readonly attribute DOMString <span title="dom-command-ro-title">title</span>;
  readonly attribute DOMString <span title="dom-command-ro-icon">icon</span>;
  readonly attribute boolean <span title="dom-command-ro-hidden">hidden</span>;
  readonly attribute boolean <span title="dom-command-ro-disabled">disabled</span>;              
  readonly attribute boolean <span title="dom-command-ro-checked">checked</span>;              
  void <span title="dom-command-ro-click">click</span>();
  readonly attribute <span>HTMLCollection</span> <span title="dom-command-ro-triggers">triggers</span>;
  readonly attribute <span>Command</span> <span title="dom-command-ro-command">command</span>;
};</pre>

  <p>The <code title="command-ro">Command</code> interface is implemented by any element
  capable of defining a command. (If an element can define a command,
  its definition will list this interface explicitly.) All the
  attributes of the <code title="command-ro">Command</code> interface are
  read-only. Elements implementing this interface may implement other
  interfaces that have attributes with identical names but that are
  mutable; in bindings that simply flatten all supported interfaces on
  the object, the mutable attributes must shadow the readonly
  attributes defined in the <code title="command-ro">Command</code> interface.</p>

  <p>The <dfn
  title="dom-command-ro-commandType"><code>commandType</code></dfn>
  attribute must return a string whose value is either "<code
  title="">command</code>", "<code title="">radio</code>", or "<code
  title="">checked</code>", depending on whether the <span
  title="command-facet-Type">Type</span> of the command defined by the
  element is "command", "radio", or "checked" respectively. If the
  element does not define a command, it must return null.</p>

  <p>The <dfn title="dom-command-ro-id"><code>id</code></dfn> attribute
  must return the command's <span title="command-facet-ID">ID</span>,
  or null if the element does not define a command or defines an
  <span>anonymous command</span>. This attribute will be shadowed by
  the <code title="dom-id">id</code> DOM attribute on the
  <code>HTMLElement</code> interface.</p>

  <p>The <dfn title="dom-command-ro-label"><code>label</code></dfn>
  attribute must return the command's <span
  title="command-facet-Label">Label</span>, or null if the element
  does not define a command or does not specify a <span
  title="command-facet-Label">Label</span>. This attribute will be
  shadowed by the <code title="">label</code> DOM attribute on
  <code>option</code> and <code>command</code> elements.</p>

  <p>The <dfn title="dom-command-ro-title"><code>title</code></dfn>
  attribute must return the command's <span
  title="command-facet-Hint">Hint</span>, or null if the element does
  not define a command or does not specify a <span
  title="command-facet-Hint">Hint</span>. This attribute will be
  shadowed by the <code title="dom-title">title</code> DOM attribute
  on the <code>HTMLElement</code> interface.</p>

  <p>The <dfn title="dom-command-ro-icon"><code>icon</code></dfn>
  attribute must return an absolute URI to the command's <span
  title="command-facet-Icon">Icon</span>. If the element does not
  specify an icon, or if the element does not define a command, then
  the attribute must return null. This attribute will be shadowed by
  the <code title="dom-command-icon">icon</code> DOM attribute on
  <code>command</code> elements.</p>

  <p>The <dfn title="dom-command-ro-hidden"><code>hidden</code></dfn>
  attribute must return true if the command's <span
  title="command-facet-HiddenState">Hidden State</span> is that the
  command is hidden, and false if it is that the command is not
  hidden. If the element does not define a command, the attribute must
  return false. This attribute will be shadowed by the <code
  title="dom-command-hidden">hidden</code> DOM attribute on
  <code>command</code> elements.</p>

  <p>The <dfn
  title="dom-command-ro-disabled"><code>disabled</code></dfn>
  attribute must return true if the command's <span
  title="command-facet-DisabledState">Disabled State</span> is that
  the command is disabled, and false if the command is not
  disabled. This attribute is not affected by the command's <span
  title="command-facet-HiddenState">Hidden State</span>. If the
  element does not define a command, the attribute must return
  false. This attribute will be shadowed by the <code
  title="">disabled</code> attribute on <code>button</code>,
  <code>input</code>, <code>option</code>, and <code>command</code>
  elements.</p>

  <p>The <dfn
  title="dom-command-ro-checked"><code>checked</code></dfn> attribute
  must return true if the command's <span
  title="command-facet-CheckedState">Checked State</span> is that the
  command is checked, and false if it is that the command is not
  checked. If the element does not define a command, the attribute
  must return false. This attribute will be shadowed by the <code
  title="">checked</code> attribute on <code>input</code> and
  <code>command</code> elements.</p>

  <p>The <dfn title="dom-command-ro-click"><code>click()</code></dfn>
  method must trigger the <span
  title="command-facet-Action">Action</span> for the command. If the
  element does not define a command, this method must do nothing. This
  method will be shadowed by the <code
  title="dom-click">click()</code> method on <span>HTML
  elements</span>, and is included only for completeness.</p>

  <p>The <dfn
  title="dom-command-ro-triggers"><code>triggers</code></dfn>
  attribute must return a list containing the elements that can
  trigger the command (the command's <span
  title="command-facet-Triggers">Triggers</span>). The list must be
  <span>live</span>. While the element does not define a command, the
  list must be empty.</p>

  <p>The <dfn
  title="dom-document-commands"><code>commands</code></dfn> attribute
  of the document's <code>HTMLDocument</code> interface must return an
  <code>HTMLCollection</code> rooted at the <code>Document</code>
  node, whose filter matches only elements that define commands and
  have IDs.</p>

  <p>The following elements can define commands: <code
  title="a-command">a</code>, <code
  title="button-command">button</code>, <code
  title="input-command">input</code>, <code
  title="option-command">option</code>, <code
  title="command-element">command</code>.</p>


  <h5><dfn title="a-command">Using the <code>a</code> element to define a command</dfn></h5>

  <p>An <code>a</code> element with an <code
  title="attr-hyperlink-href">href</code> attribute <span
  title="concept-command">defines a command</span>.</p>

  <p>The <span title="command-facet-Type">Type</span> of the command
  is "command".</p>

  <p>The <span title="command-facet-ID">ID</span> of the command is
  the value of the <code title="attr-id">id</code> attribute of the
  element, if the attribute is present and not empty. Otherwise the
  command is an <span>anonymous command</span>.</p>

  <p>The <span title="command-facet-Label">Label</span> of the command
  is the string given by the element's <code>textContent</code> DOM
  attribute.</p>

  <p>The <span title="command-facet-Hint">Hint</span> of the command
  is the value of the <code title="attr-title">title</code> attribute
  of the <code>a</code> element. If the attribute is not present, the
  <span title="command-facet-Hint">Hint</span> is the empty
  string.</p>

  <p>The <span title="command-facet-Icon">Icon</span> of the command
  is the absolute URI of the first image in the element. Specifically,
  in a depth-first search of the children of the element, the first
  element that is <!--either an--> <code>img</code> element with a
  <code>src</code> attribute<!--, or an <code>object</code> element
  with a <code>data</code> attribute, or, if the UA supports SVG, an
  <code>svg</code> element in the SVG namespace with a valid <code
  title="">id</code> attribute,--> is the one that is used as the
  image. <!--If it is an <code>img</code> element then--> The URI must
  be taken from the element's <code>src</code> attribute. <!--If it is
  an <code>object</code> element then the URI is taken from the
  <code>data</code> attribute. --> Relative URIs must be resolved
  relative to the base URI of the image element. <!-- If it is an
  <code>svg</code> element then the URI is formed by taking the URI of
  the document and appending a "#" (U+0023 NUMBER SIGN) and the ID of
  the element.--> If no image is found, then the Icon facet is left
  blank.</p>

  <p>The <span title="command-facet-HiddenState">Hidden State</span>
  and <span title="command-facet-DisabledState">Disabled State</span>
  facets of the command are always false. (The command is always
  enabled.)</p>

  <p>The <span title="command-facet-CheckedState">Checked State</span>
  of the command is always false. (The command is never checked.)</p>

  <p>The <span title="command-facet-Action">Action</span> of the
  command is to <span title="fire a click event">fire a <code
  title="">click</code> event</span> at the element.</p>


  <h5><dfn title="button-command">Using the <code>button</code> element to define a command</dfn></h5>

  <p>A <code>button</code> element always <span
  title="concept-command">defines a command</span>.</p>

  <p>The <span title="command-facet-Type">Type</span>, <span
  title="command-facet-ID">ID</span>, <span
  title="command-facet-Label">Label</span>, <span
  title="command-facet-Hint">Hint</span>, <span
  title="command-facet-Icon">Icon</span>, <span
  title="command-facet-HiddenState">Hidden State</span>, <span
  title="command-facet-CheckedState">Checked State</span>, and <span
  title="command-facet-Action">Action</span> facets of the command are
  determined <span title="a-command">as for <code>a</code>
  elements</span> (see the previous section).</p>

  <p>The <span title="command-facet-DisabledState">Disabled
  State</span> of the command mirrors the disabled state of the
  button. Typically this is given by the element's <code
  title="attr-button-disabled">disabled</code> attribute, but certain
  button types become disabled at other times too (for example, the
  <code>move-up</code> button type is disabled when it would have no
  effect).</p>


  <h5><dfn title="input-command">Using the <code>input</code> element to define a command</dfn></h5>

  <p>An <code>input</code> element whose <code
  title="attr-input-type">type</code> attribute is one of
  <code>submit</code>, <code>reset</code>, <code>button</code>,
  <code>radio</code>, <code>checkbox</code>, <code>move-up</code>,
  <code>move-down</code>, <code>add</code>, and <code>remove</code>
  <span title="concept-command">defines a command</span>.</p>

  <p>The <span title="command-facet-Type">Type</span> of the command
  is "radio" if the <code title="attr-input-type">type</code>
  attribute has the value <code>radio</code>, "checkbox" if the
  <code>type</code> attribute has the value <code>checkbox</code>, and
  "command" otherwise.</p>

  <p>The <span title="command-facet-ID">ID</span> of the command is
  the value of the <code title="attr-id">id</code> attribute of the
  element, if the attribute is present and not empty. Otherwise the
  command is an <span>anonymous command</span>.</p>

  <p>The <span title="command-facet-Label">Label</span> of the command
  depends on the Type of the command:</p>

  <p>If the <span title="command-facet-Type">Type</span> is "command",
  then it is the string given by the <code
  title="attr-input-value">value</code> attribute, if any, and a
  <span>UA-dependent value</span><!-- XXX xref--> that the UA uses to
  label the button itself if the attribute is absent.</p>

  <p>Otherwise, the <span title="command-facet-Type">Type</span> is
  "radio" or "checkbox". If the element has a <code>label</code>
  element associated with it, the <code>textContent</code> of the
  first such element is the <span
  title="command-facet-Label">Label</span> (in DOM terms, this the
  string given by
  <code><var title="">element</var>.labels[0].textContent</code>).  Otherwise,
  the value of the <code>value</code> attribute, if present, is the
  <span title="command-facet-Label">Label</span>. Otherwise, the <span
  title="command-facet-Label">Label</span> is the empty string.</p>

  <p>The <span title="command-facet-Hint">Hint</span> of the command
  is the value of the <code title="attr-title">title</code> attribute
  of the <code>input</code> element. If the attribute is not present, the
  <span title="command-facet-Hint">Hint</span> is the empty
  string.</p>

  <p>There is no <span title="command-facet-Icon">Icon</span> for the
  command.</p>

  <p>The <span title="command-facet-HiddenState">Hidden State</span>
  of the command is always false. (The command is never hidden.)</p>

  <p>The <span title="command-facet-DisabledState">Disabled
  State</span> of the command mirrors the disabled state of the
  control. Typically this is given by the element's <code
  title="attr-input-disabled">disabled</code> attribute, but certain
  input types become disabled at other times too (for example, the
  <code>move-up</code> input type is disabled when it would have no
  effect).</p>

  <p>The <span title="command-facet-CheckedState">Checked State</span>
  of the command is true if the command is of <span
  title="command-facet-Type">Type</span> "radio" or "checkbox" and the
  element has a <code title="attr-input-checked">checked</code>
  attribute, and false otherwise.</p>

  <p>The <span title="command-facet-Action">Action</span> of the
  command is to <span title="fire a click event">fire a <code
  title="">click</code> event</span> at the element.</p> <!-- XXX this
  is probably wrong for radio and checkbox types, depending on how we
  define <input>. -->


  <h5><dfn title="option-command">Using the <code>option</code> element to define a command</dfn></h5>

  <p>An <code>option</code> element with an ancestor
  <code>select</code> element and either no <code
  title="attr-option-value">value</code> attribute or a <code
  title="attr-option-value">value</code> attribute that is not the
  empty string <span title="concept-command">defines a
  command</span>.</p>

  <p>The <span title="command-facet-Type">Type</span> of the command
  is "radio" if the <code>option</code>'s nearest ancestor
  <code>select</code> element has no <code
  title="attr-select-multiple">multiple</code> attribute, and
  "checkbox" if it does.</p>

  <p>The <span title="command-facet-ID">ID</span> of the command is
  the value of the <code title="attr-id">id</code> attribute of the
  element, if the attribute is present and not empty. Otherwise the
  command is an <span>anonymous command</span>.</p>

  <p>The <span title="command-facet-Label">Label</span> of the command
  is the value of the <code>option</code> element's <code
  title="attr-option-label">label</code> attribute, if there is one,
  or the value of the <code>option</code> element's
  <code>textContent</code> DOM attribute if it doesn't.</p>

  <p>The <span title="command-facet-Hint">Hint</span> of the command
  is the string given by the element's <code
  title="attr-title">title</code> attribute, if any, and the empty
  string if the attribute is absent.</p>

  <p>There is no <span title="command-facet-Icon">Icon</span> for the
  command.</p>

  <p>The <span title="command-facet-HiddenState">Hidden State</span>
  of the command is always false. (The command is never hidden.)</p>

  <p>The <span title="command-facet-DisabledState">Disabled
  State</span> of the command is true (disabled) if the element has a
  <code title="attr-option-disabled">disabled</code> attribute, and
  false otherwise.</p>

  <p>The <span title="command-facet-CheckedState">Checked State</span>
  of the command is true (checked) if the element's <code
  title="dom-option-selected">selected</code> DOM attribute is true,
  and false otherwise.</p>

  <p>The <span title="command-facet-Action">Action</span> of the
  command depends on its <span
  title="command-facet-Type">Type</span>. If the command is of <span
  title="command-facet-Type">Type</span> "radio" then this must set
  the <code title="dom-option-selected">selected</code> DOM attribute
  of the <code>option</code> element to true, otherwise it must toggle
  the state of the <code title="dom-option-selected">selected</code>
  DOM attribute (set it to true if it is false and vice versa). Then
  <span title="fire a change event">a <code title="">change</code>
  event must be fired</span> on the <code>option</code> element's
  nearest ancestor <code>select</code> element (if there is one), as
  if the selection had been changed directly.</p>


  <h5>Using the <dfn
  title="command-element"><code>command</code></dfn> element to define
  a command</h5>

  <p>A <code>command</code> element <span
  title="concept-command">defines a command</span>.</p>

  <p>The <span title="command-facet-Type">Type</span> of the command
  is "radio" if the <code>command</code>'s <code
  title="attr-command-type">type</code> attribute is
  "<code>radio</code>", "checkbox" if the attribute's value is
  "<code>checkbox</code>", and "command" otherwise.</p>

  <p>The <span title="command-facet-ID">ID</span> of the command is
  the value of the <code title="attr-id">id</code> attribute of the
  element, if the attribute is present and not empty. Otherwise the
  command is an <span>anonymous command</span>.</p>

  <p>The <span title="command-facet-Label">Label</span> of the command
  is the value of the element's <code
  title="attr-command-label">label</code> attribute, if there is one,
  or the empty string if it doesn't.</p>

  <p>The <span title="command-facet-Hint">Hint</span> of the command
  is the string given by the element's <code
  title="attr-command-title">title</code> attribute, if any, and the
  empty string if the attribute is absent.</p>

  <p>The <span title="command-facet-Icon">Icon</span> for the command
  is the absolute URI resulting from resolving the value of the
  element's <code title="attr-command-icon">icon</code> attribute as a
  URI relative to the element's base URI. If the element has no <code
  title="attr-command-icon">icon</code> attribute then the command has
  no <span title="command-facet-Icon">Icon</span>.</p>

  <p>The <span title="command-facet-HiddenState">Hidden State</span>
  of the command is true (hidden) if the element has a <code
  title="attr-command-hidden">hidden</code> attribute, and false
  otherwise.</p>

  <p>The <span title="command-facet-DisabledState">Disabled
  State</span> of the command is true (disabled) if the element has
  either a <code title="attr-command-disabled">disabled</code>
  attribute or a <code title="attr-command-hidden">hidden</code>
  attribute (or both), and false otherwise.</p>

  <p>The <span title="command-facet-CheckedState">Checked State</span>
  of the command is true (checked) if the element has a <code
  title="attr-command-checked">checked</code> attribute, and false
  otherwise.</p>

  <p>The <span title="command-facet-Action">Action</span> of the
  command is to invoke the behaviour described in the definition of
  the <code title="dom-command-click">click()</code> method of the
  <code>HTMLCommandElement</code> interface.</p> <!-- XXX update to
  point to dom-click when we remove dom-command-click -->



  <h3 id="datatemplate">Data Templates</h3>

  <h4>Introduction</h4>

  <p class="big-issue">...examples...</p>


  <h4>The <dfn><code>datatemplate</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Metadata content</span>.</dd>
   <dd><span>Flow content</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>As the root element of an <span title="xml documents">XML document</span>.</dd>
   <dd>Where <span>metadata content</span> is expected.</dd>
   <dd>Where <span>flow content</span> is expected.</dd>
   <dt>Content model:</dt>
   <dd>Zero or more <code>rule</code> elements.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>datatemplate</code> element brings together the various
  rules that form a data template. The element doesn't itself do
  anything exciting.</p>


  <h4>The <dfn><code>rule</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd>None.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>As a child of a <code>datatemplate</code> element.</dd>
   <dt>Content model:</dt>
   <dd>Anything, regardless of the children's required contexts (but see prose).</dd>
   <dt>Element-specific attributes:</dt>
   <dd><code title="attr-rule-condition">condition</code></dd>
   <dd><code title="attr-rule-mode">mode</code></dd>
   <dt>DOM interface:</dt>
   <dd>
<pre class="idl">interface <dfn>HTMLRuleElement</dfn> : <span>HTMLElement</span> {
           attribute DOMString <span title="dom-rule-condition">condition</span>;
           attribute DOMString <span title="dom-rule-mode">mode</span>;
  readonly attribute DOMTokenString <span title="dom-rule-modeList">modeList</span>;
};</pre>
   </dd>
  </dl>

  <p>The <code>rule</code> element represents a template of content
  that is to be used for elements when <span
  title="datatemplate-regen">updating an element's generated
  content</span>.</p>

  <p>The <dfn title="attr-rule-condition"><code>condition</code></dfn>
  attribute, if specified, must contain a valid selector. It specifies
  which nodes in the data tree will have the condition's template
  applied. <a href="#refsSELECTORS">[SELECTORS]</a></p>

  <p>If the <code title="attr-rule-condition">condition</code>
  attribute is not specified, then the condition applies to all
  elements, text nodes, CDATA nodes, and processing instructions.</p>

  <p>The <dfn title="attr-rule-mode"><code>mode</code></dfn>
  attribute, if specified, must have a value that is an
  <span>unordered set of unique space-separated tokens</span>
  representing the various modes for which the rule applies. When, and
  only when, the <code title="attr-rule-mode">mode</code> attribute is
  omitted, the rule applies if and only if the mode is the empty
  string. A mode is invoked by the <code>nest</code> element; for the
  first node (the root node) of the data tree, the mode is the empty
  string.</p>

  <p>The contents of <code>rule</code> elements form a template, and
  may be anything that, when the parent <code>datatemplate</code> is
  applied to some conforming data, results in a conforming DOM
  tree.</p> <!-- XXX examples of conforming and non-conforming rules
  -->

  <p>The <dfn title="dom-rule-condition"><code>condition</code></dfn>
  DOM attribute must reflect the <code
  title="attr-rule-condition">condition</code> content attribute.</p>

  <p>The <dfn title="dom-rule-mode"><code>mode</code></dfn> and <dfn
  title="dom-rule-modeList"><code>modeList</code></dfn> DOM attributes
  must reflect the <code title="attr-rule-mode">mode</code> content
  attribute.</p>


  <h4>The <dfn><code>nest</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd>None.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>As a child of a descendant of a <code>rule</code> element, regardless of the element's content model.</dd>
   <dt>Content model:</dt>
   <dd>Empty.</dd>
   <dt>Element-specific attributes:</dt>
   <dd><code title="attr-nest-filter">filter</code></dd>
   <dd><code title="attr-nest-mode">mode</code></dd>
   <dt>DOM interface:</dt>
   <dd>
<pre class="idl">interface <dfn>HTMLNestElement</dfn> : <span>HTMLElement</span> {
           attribute DOMString <span title="dom-nest-filter">filter</span>;
           attribute DOMString <span title="dom-nest-mode">mode</span>;
};</pre>
   </dd>
  </dl>

  <p>The <code>nest</code> element represents a point in a template
  where the user agent should recurse and start inserting the children
  of the data node that matches the <code>rule</code> in which the
  <code>nest</code> element finds itself.</p>

  <p>The <dfn title="attr-nest-filter"><code>filter</code></dfn>
  attribute, if specified, must contain a valid selector. It specifies
  which of the child nodes in the data tree will be examined for
  further processing at this point. <a
  href="#refsSELECTORS">[SELECTORS]</a></p>

  <p>If the <code title="attr-nest-filter">filter</code> attribute is
  not specified, then all elements, text nodes, CDATA nodes, and
  processing instructions are processed.</p>

  <p>The <dfn title="attr-nest-mode"><code>mode</code></dfn>
  attribute, if specified, must have a value that is a word token
  consisting of one or more characters, none of which are <span
  title="space character">space characters</span>. It gives the mode
  which will be in effect when looking at the rules in the data
  template.</p>

  <p>The <dfn title="dom-nest-filter"><code>filter</code></dfn> DOM
  attribute must reflect the <code
  title="attr-nest-filter">filter</code> content attribute.</p>

  <p>The <dfn title="dom-nest-mode"><code>mode</code></dfn> DOM
  attribute must reflect the <code title="attr-nest-mode">mode</code>
  content attribute.</p>


  <h4>Global attributes for data templates</h4>
  <!-- authoring side, with DOM reflections -->

  <p>The <dfn title="attr-template"><code>template</code></dfn>
  attribute may be added to an element to indicate that the template
  processing model is to be applied to that element.</p>

  <p>The <code title="attr-template">template</code> attribute, when
  specified, must be a URI to an XML or HTML document, or a fragment
  identifier pointing at another part of the document. If there is a
  fragment identifier present, then the element with that ID in the
  target document must be a <code>datatemplate</code> element,
  otherwise, the root element must be a <code>datatemplate</code>
  element.</p>

  <p>The <dfn title="dom-template"><code>template</code></dfn> DOM
  attribute must reflect the <code
  title="attr-template">template</code> content attribute.</p>


  <p>The <dfn title="attr-ref"><code>ref</code></dfn> attribute may be
  specified on any element on which the <code
  title="attr-template">template</code> attribute is specified. If it
  is specified, it must be a URI to an XML or HTML document, or a
  fragment identifier pointing at another part of the document.</p>

  <p>When an element has a <code title="attr-template">template</code>
  attribute but no <code title="attr-ref">ref</code> attribute, the
  element may, instead of its usual content model, have a single
  element of any kind. That element is then used as the root node of
  the data for the template.</p>

  <p>The <dfn title="dom-ref"><code>ref</code></dfn> DOM
  attribute must reflect the <code
  title="attr-ref">ref</code> content attribute.</p>


  <p>The <dfn
  title="attr-registrationmark"><code>registrationmark</code></dfn>
  attribute may be specified on any element that is a descendant of a
  <code>rule</code> element, except <code>nest</code> elements. Its
  value may be any string, including the empty string (which is the
  value that is assumed if the attribute is omitted). This attribute
  performs a role similar to registration marks in printing presses:
  when the generated content is regenerated, elements with the same
  <code title="attr-registrationmark">registrationmark</code> are
  lined up. This allows the author to disambiguate how elements should
  be moved around when generated content is regenerated in the face of
  changes to the data tree.</p>

  <p>The <dfn
  title="dom-registrationMark"><code>registrationMark</code></dfn> DOM
  attribute must reflect the <code
  title="attr-registrationmark">registrationmark</code> content
  attribute.</p>



  <h4>Processing model</h4>
  <!-- ua side -->

  <h5>The <code title="dom-originalContent">originalContent</code> DOM
  attribute</h5>

  <p>The <dfn
  title="dom-originalContent"><code>originalContent</code></dfn> is
  set to a <code>DocumentFragment</code> to hold the original children
  of an element that has been replaced by content generated for a data
  template. Initially, it must be null. Its value is set when the
  <code title="attr-template">template</code> attribute is set to a
  usable value, and is unset when the attribute is removed.</p>

  <p class="note">The <code
  title="dom-originalContent">originalContent</code> DOM attribute can
  thus be used as an indicator of whether a template is currently
  being applied, just as the <code
  title="dom-templateElement">templateElement</code> DOM attribute
  can.</p>


  <h5>The <code title="attr-template">template</code> attribute</h5>

  <p><dfn title="datatemplate-template-set">Setting</dfn>: When an
  <span title="HTML elements">HTML element</span> without a <code
  title="attr-template">template</code> attribute has its <code
  title="attr-template">template</code> attribute set, the user agent
  must fetch the specified file<!-- XXX or queue it up to be fetched,
  or something --> and parse it (without a <span>browsing
  context</span>, and with <span>scripting disabled</span><!-- XXX
  xref -->) to obtain a DOM. If the URI is the same as the URI of the
  current document<!-- XXX xref -->, then the current document's DOM
  must be assumed to be that parsed DOM. While this loading and
  parsing is in progress, the element is said to be <em>busy loading
  the template rules or data</em>.</p>

  <p>If the resource specified by the <code
  title="attr-template">template</code> attribute is not the current
  document<!-- XXX xref --> and does not have an XML MIME type, or if
  an XML parse error is found while parsing the resource, then the
  resource cannot be successfully parsed, and the user agent must jump
  to the <span title="datatemplate-template-failed">failed to
  parse</span> steps below.</p>

  <p>Once the DOM in question has been parsed, assuming that it indeed
  can be parsed and does so successfully, the user agent must wait for
  no scripts to be executing, and as soon as that opportunity
  arises<!-- XXX xref to a strict definition of this -->, run the
  following algorithm:</p>

  <ol>
   <!-- precondition: the originalContent is null and the element
        contains its original content. -->

   <li>

    <p>If the <code title="attr-template">template</code> attribute's
    value has a fragment identifier, and, in the DOM in question, it
    identifies<!-- XXX how --> a <code>datatemplate</code> element,
    then set the <code
    title="dom-templateElement">templateElement</code> DOM attribute
    to that element.</p>

    <p>Otherwise, if the <code title="attr-template">template</code>
    attribute value does not have a fragment identifier, and the root
    element of the DOM in question is a <code>datatemplate</code>
    element, then set the <code
    title="dom-templateElement">templateElement</code> DOM attribute
    to that element.</p>

    <p>Otherwise, jump to the <span
    title="datatemplate-template-failed">failed to parse</span> steps
    below.</p>

   </li>

   <li><p>Create a new <code>DocumentFragment</code> and move all the
   nodes that are children of the element to that
   <code>DocumentFragment</code> object. Set the <code
   title="dom-originalContent">originalContent</code> DOM attribute on
   the element to this new <code>DocumentFragment</code>
   object.</p></li>

   <li><p>Jump to the steps below for <span
   title="datatemplate-regen">updating the generated
   content</span>.</p></li>

  </ol>

  <p>If the resource has <dfn
  title="datatemplate-template-failed">failed to parse</dfn>, the user
  agent must <span>fire a simple event</span> with the name <code
  title="event-error">error</code> at the element on which the <code
  title="attr-template">template</code> attribute was found.</p>

  <p><dfn title="datatemplate-template-unset">Unsetting</dfn>: When an
  <span title="HTML elements">HTML element</span> with a <code
  title="attr-template">template</code> attribute has its <code
  title="attr-template">template</code> attribute removed or
  dynamically changed from one value to another, the user agent must
  run the following algorithm:</p>

  <ol>

   <li><p>Set the <code
   title="dom-templateElement">templateElement</code> DOM attribute to
   null.</p></li>

   <li>

    <p>If the <code title="dom-originalContent">originalContent</code>
    DOM attribute of the element is not null, run these substeps:</p>

    <ol>

     <li><p>Remove all the nodes that are children of the
     element.</p></li>

     <li><p>Append the nodes in the <code
     title="dom-originalContent">originalContent</code>
     <code>DocumentFragment</code> to the element.</p></li>

     <li><p>Set <code title="dom-originalContent">originalContent</code>
     to null.</p></li>

    </ol>

    <p>(If the <code
    title="dom-originalContent">originalContent</code> DOM attribute
    of the element is null, then either there was an error loading or
    parsing the previous template, or the previous template never
    finished loading; in either case, there is nothing to undo.)</p>

   </li>

   <li><p>If the <code title="attr-template">template</code> attribute
   was changed (as opposed to simply removed), then <span
   title="datatemplate-template-set">act as if it was now set to its
   new value</span> (fetching the specified page, etc, as described
   above).</p></li>

  </ol>

  <p>The <dfn
  title="dom-templateElement"><code>templateElement</code></dfn> DOM
  attribute is updated by the above algorithm to point to the
  currently active <code>datatemplate</code> element. Initially, the
  attribute must have the value null.</p>


  <h5>The <code title="attr-ref">ref</code> attribute</h5>

  <p><dfn title="datatemplate-ref-set">Setting</dfn>: When an <span
  title="HTML elements">HTML element</span> without a <code
  title="attr-ref">ref</code> attribute has its <code
  title="attr-ref">ref</code> attribute set, the user agent must fetch
  the specified file<!-- XXX or queue it up to be fetched, or
  something --> and parse it (without a <span>browsing context</span>,
  and with <span>scripting disabled</span><!-- XXX xref -->) to obtain
  a DOM. If the URI is the same as the URI of the current document<!--
  XXX xref -->, then the current document's DOM is assumed to be that
  parsed DOM. While this loading and parsing is in progress, the
  element is said to be <em>busy loading the template rules or
  data</em>.</p>

  <p>If the resource specified by the <code
  title="attr-ref">ref</code> attribute is not the current
  document<!-- XXX xref --> and does not have an XML MIME type, or if
  an XML parse error is found while parsing the resource, then the
  resource cannot be successfully parsed, and the user agent must jump
  to the <span title="datatemplate-ref-failed">failed to parse</span>
  steps below.</p>

  <p>Once the DOM in question has been parsed, assuming that it indeed
  can be parsed and does so successfully, the user agent must wait for
  no scripts to be executing, and as soon as that opportunity
  arises<!-- XXX xref to a strict definition of this -->, run the
  following algorithm:</p>

  <ol>

   <li>

    <p>If the <code title="attr-ref">ref</code> attribute value does
    not have a fragment identifier, then set the <code
    title="dom-refNode">refNode</code> DOM attribute to the
    <code>Document</code> node of that DOM.</p>

    <p>Otherwise, if the <code title="attr-ref">ref</code> attribute's
    value has a fragment identifier, and, in the DOM in question, that
    fragment identifier identifies an element, then set the <code
    title="dom-refNode">refNode</code> DOM attribute to that
    element.</p>

    <p>Otherwise, jump to the <span
    title="datatemplate-ref-failed">failed to parse</span> steps
    below.</p>

   </li>

   <li><p>Jump to the steps below for <span
   title="datatemplate-regen">updating the generated
   content</span>.</p></li>

  </ol>

  <p>If the resource has <dfn
  title="datatemplate-ref-failed">failed to parse</dfn>, the user
  agent must <span>fire a simple event</span> with the name <code
  title="event-error">error</code> at the element on which the <code
  title="attr-ref">ref</code> attribute was found, and must then jump
  to the steps below for <span title="datatemplate-regen">updating the
  generated content</span> (the contents of the element will be used
  instead of the specified resource).</p>

  <p><dfn title="datatemplate-ref-unset">Unsetting</dfn>: When an
  <span title="HTML elements">HTML element</span> with a <code
  title="attr-ref">ref</code> attribute has its <code
  title="attr-ref">ref</code> attribute removed or dynamically changed
  from one value to another, the user agent must run the following
  algorithm:</p>

  <ol>

   <li><p>Set the <code title="dom-refNode">refNode</code> DOM
   attribute to null.</p></li>

   <li><p>If the <code title="attr-ref">ref</code> attribute was
   changed (as opposed to simply removed), then <span
   title="datatemplate-ref-set">act as if it was now set to its new
   value</span> (fetching the specified page, etc, as described
   above). Otherwise, jump to the steps below for <span
   title="datatemplate-regen">updating the generated
   content</span>.</p></li>

  </ol>

  <p>The <dfn title="dom-refNode"><code>refNode</code></dfn> DOM
  attribute is updated by the above algorithm to point to the current
  data tree, if one is specified explicitly. If it is null, then the
  data tree is given by the <code
  title="dom-originalContent">originalContent</code> DOM attribute,
  unless that is also null, in which case no template is currently
  being applied. Initially, the attribute must have the value
  null.</p>


  <h5>The <code>NodeDataTemplate</code> interface</h5>

  <p>All objects that implement the <code>Node</code> interface must
  also implement the <code>NodeDataTemplate</code> interface, whose
  members must be accessible using binding-specific casting
  mechanisms.</p>

  <pre class="idl">interface <dfn>NodeDataTemplate</dfn> {
  readonly attribute Node <span title="dom-dataNode">dataNode</span>;
};</pre>

  <p>The <dfn title="dom-dataNode"><code>dataNode</code></dfn> DOM
  attribute returns the node for which <em>this</em> node was
  generated. It must initially be null. It is set on the nodes that
  form the content generated during the <span
  title="datatemplate-regen">algorithm for updating the generated
  content</span> of elements that are using the data template
  feature.</p>


  <h5>Mutations</h5>

  <p>An element with a non-null <code
  title="dom-templateElement">templateElement</code> is said to be a
  <dfn>data tree user</dfn> of the node identified by the element's
  <code title="dom-refNode">refNode</code> attribute, as well as all
  of that node's children, or, if that attribute is null, of the node
  identified by the element's <code
  title="dom-originalContent">originalContent</code>, as well as all
  <em>that</em> node's children.</p>

  <p>Nodes that have one or more <span title="data tree user">data
  tree users</span> associated with them (as per the previous
  paragraph) are themselves termed <dfn title="data tree component
  node">data tree component nodes</dfn>.</p>

  <p>Whenever a <span>data tree component node</span> changes its name
  or value, or has one of its attributes change name or value, or has
  an attribute added or removed, or has a child added or removed, the
  user agent must <span>update the generated content</span> of all of
  that node's <span title="data tree user">data tree users</span>.</p>

  <p>An element with a non-null <code
  title="dom-templateElement">templateElement</code> is also said to
  be a <dfn>template tree user</dfn> of the node identified by the
  element's <code title="dom-templateElement">templateElement</code>
  attribute, as well as all of that node's children.</p>

  <p>Nodes that have one or more <span title="template tree
  user">template tree users</span> associated with them (as per the
  previous paragraph) are themselves termed <dfn title="template tree
  component node">template tree component nodes</dfn>.</p>

  <p>Whenever a <span>template tree component node</span> changes its
  name or value, or has one of its attributes change name or value, or
  has an attribute added or removed, or has a child added or removed,
  the user agent must <span>update the generated content</span> of all
  of that node's <span title="template tree user">template tree
  users</span>.</p>

  <p class="note">In other words, user agents update the content
  generated from a template whenever either the backing data changes
  or the template itself changes.</p>


  <h5>Updating the generated content</h5>

  <p>When the user agent is to <dfn title="datatemplate-regen">update
  the generated content</dfn> of an element that uses a template, the
  user agent must run the following steps:</p>

  <ol>

   <li><p>Let <var title="">destination</var> be the element whose
   generated content is being updated.</p></li>

   <li><p>If the <var title="">destination</var> element is <em>busy
   loading the template rules or data</em>, then abort these
   steps. Either the steps will be invoked again once the loading has
   completed, or the loading will fail and the generated content will
   be removed at that point.</p></li>

   <li><p>Let <var title="">template tree</var> be the element given
   by <var title="">destination</var>'s <code
   title="dom-templateElement">templateElement</code> DOM
   attribute. If it is null, then abort these steps. There are no
   rules to apply.</p></li>

   <li><p>Let <var title="">data tree</var> be the node given by <var
   title="">destination</var>'s <code
   title="dom-refNode">refNode</code> DOM attribute. If it is null,
   then let <var title="">data tree</var> be the node given by the
   <code title="dom-originalContent">originalContent</code> DOM
   node.</p></li>

   <li><p>Let <var title="">existing nodes</var> be a set of ordered
   lists of nodes, each list being identified by a tuple consisting of
   a node, a node type and name, and a <span
   title="attr-registrationmark">registration mark</span> (a
   string).</p></li>

   <li><p>For each node <var title="">node</var> that is a descendant
   of <var title="">destination</var>, if any, add <var
   title="">node</var> to the list identified by the tuple given by:
   <var title="">node</var>'s <code
   title="dom-dataNode">dataNode</code> DOM attribute; the <var
   title="">node</var>'s node type and, if it's an element, its
   qualified name (that is, its namespace and local name), or, if it's
   a processing instruction, its target name<!-- we're basically
   indexing on nodeName here -->, and the value of the <var
   title="">node</var>'s <code
   title="attr-registrationmark">registrationmark</code> attribute, if
   it has one, or the empty string otherwise.</p></li> <!-- XXX should
   non-element nodes inherit the registration marks of their parent?
   or have it set via a PI? -->

   <li><p>Remove all the child nodes of <var
   title="">destination</var>, so that its child node list is
   empty.</p></li>

   <li><p>Run the <span>Levenberg data node algorithm</span>
   (described below) using <var title="">destination</var> as the
   destination node, <var title="">data tree</var> as the source node,
   <var title="">template tree</var> as the rule container, the empty
   string as the mode, and the <var title="">existing nodes</var> lists
   as the lists of existing nodes.</p></li>

<!--(for now, since we can't guarentee that we'll reset the dataNode
attribute of nodes that are dynamically moved around between regens,
we'll just act as if the dataNode attribute is set on creation and
never reset. This is nice and consistent.)

   <li><p>Set the <code title="dom-dataNode">dataNode</code> DOM
   attribute of every node in the <var title="">existing nodes</var>
   lists to null.</p></li>
-->

  </ol>

  <!--<h6 class="notoc">The Levenberg algorithm</h6>-->

  <p>The Levenberg algorithm consists of two algorithms that invoke
  each other recursively, the <span>Levenberg data node
  algorithm</span> and the <span>Levenberg template node
  algorithm</span>. These algorithms use the data structures
  initialised by the set of steps described above.</p>

  <p>The <dfn>Levenberg data node algorithm</dfn> is as follows. It is
  always invoked with three DOM nodes, one string, and a set of lists
  as arguments: the <var title="">destination node</var>, the <var
  title="">source node</var>, the <var title="">rule container</var>,
  the <var title="">mode string</var>, and the <var title="">existing
  nodes lists</var> respectively.</p>

  <ol>

   <li><p>Let <var title="">condition</var> be the first
   <code>rule</code> element child of the <var title="">rule
   container</var> element, or null if there aren't any.</p>

   <li><p>If <var title="">condition</var> is null, follow these
   substeps:</p>

    <ol>

     <li><p>If the <var title="">source node</var> is an element,
     then, for each child <var title="">child node</var> of the <var
     title="">source node</var> element, in tree order, invoke the
     <span>Levenberg data node algorithm</span> recursively, with <var
     title="">destination node</var>, <var title="">child node</var>,
     <var title="">rule container</var>, the empty string, and <var
     title="">existing nodes lists</var> as the five arguments
     respectively.</p></li>

     <li><p>Abort the current instance of the <span>Levenberg data
     node algorithm</span>, returning to whatever algorithm invoked
     it.</p></li>

    </ol>

   </li>

   <li><p>Let <var title="">matches</var> be a boolean with the value
   true.</p></li>

   <li><p>If the <var title="">condition</var> element has a <code
   title="attr-rule-mode">mode</code> attribute, but the value of that
   attribute is not a <span>mode match</span> for the current
   <span>mode string</span>, then let <var title="">matches</var> be
   false.</p></li>

   <li><p>If the <var title="">condition</var> element has a <code
   title="attr-rule-condition">condition</code> attribute, and the
   attribute's value, when <span>evaluated as a selector</span>, does
   not match the current <var title="">source node</var>, then let
   <var title="">matches</var> be false.</p></li>

   <li><p>If <var title="">matches</var> is true, then follow these
   substeps:</p>

    <ol>

     <li><p>For each child <var title="">child node</var> of the
     <var title="">condition</var> element, in tree order, invoke the
     <span>Levenberg template node algorithm</span> recursively, with
     the five arguments being <var title="">destination node</var>,
     <var title="">source node</var>, <var title="">rule
     container</var>, <var title="">child node</var>, and <var
     title="">existing nodes lists</var> respectively.</p></li>

     <li><p>Abort the current instance of the <span>Levenberg data
     node algorithm</span>, returning to whatever algorithm invoked
     it.</p></li>

    </ol>

   </li>

   <li><p>Let <var title="">condition</var> be the next
   <code>rule</code> element that is a child of the <var
   title="">rule container</var> element, after the <var
   title="">condition</var> element itself, or null if there are no
   more <code>rule</code> elements.</p></li>

   <li><p>Jump to step 2 in this set of steps.</p></li>

  </ol>

  <p>The <dfn>Levenberg template node algorithm</dfn> is as
  follows. It is always invoked with four DOM nodes and a set of lists
  as arguments: the <var title="">destination node</var>, the <var
  title="">source node</var>, the <var title="">rule container</var>,
  the <var title="">template node</var>, and the <var
  title="">existing nodes lists</var> respectively.</p>

  <ol>

   <li><p>If <var title="">template node</var> is a comment node,
   abort the current instance of the <span>Levenberg template node
   algorithm</span>, returning to whatever algorithm invoked
   it.</p></li>

   <li><p>If <var title="">template node</var> is a <code>nest</code>
   element, then run these substeps:</p>

    <ol>

     <li><p>If <var title="">source node</var> is not an element, then
     abort the current instance of the <span>Levenberg template node
     algorithm</span>, returning to whatever algorithm invoked
     it.</p></li>

     <li><p>If the <var title="">template node</var> has a <code
     title="attr-nest-mode">mode</code> attribute, then let <var
     title="">mode</var> be the value of that attribute; otherwise,
     let <var title="">mode</var> be the empty string.</p></li>

     <li><p>Let <var title="">child node</var> be the first child of
     the <var title="">source node</var> element, or null if <var
     title="">source node</var> has no children.</p></li>

     <li><p>If <var title="">child node</var> is null, abort the
     current instance of the <span>Levenberg template node
     algorithm</span>, returning to whatever algorithm invoked
     it.</p></li>

     <li><p>If the <var title="">template node</var> element has a
     <code title="attr-nest-filter">filter</code> attribute, and the
     attribute's value, when <span>evaluated as a selector</span>,
     matches <var title="">child node</var>, then invoke the
     <span>Levenberg data node algorithm</span> recursively, with <var
     title="">destination node</var>, <var title="">child node</var>,
     <var title="">rule container</var>, <var title="">mode</var>, and
     <var title="">existing nodes lists</var> as the five arguments
     respectively.</p></li>

     <li><p>Let <var title="">child node</var> be <var title="">child
     node</var>'s next sibling, or null if <var title="">child
     node</var> was the last node of <var title="">source
     node</var>.</p></li>

     <li><p>Return to step 4 in this set of substeps.</p></li>

    </ol>

   </li>

   <li><p>If <var title="">template node</var> is an element, and that
   element has a <code
   title="attr-registrationmark">registrationmark</code> attribute,
   then let <var title="">registration mark</var> have the value of
   that attribute. Otherwise, let <var title="">registration
   mark</var> be the empty string.</p></li>

   <li>

    <p>If there is a list in the <var title="">existing nodes
    lists</var> corresponding to the tuple (<var title="">source
    node</var>, the node type and name of <var title="">template
    node</var>, <var title="">registration mark</var>), and that list
    is not empty, then run the following substeps. (For an element
    node, the name of the node is its qualified tag name, i.e. its
    namespace and local name. For a processing instruction, its name
    is the target. For other types of nodes, there is no name.)</p>

    <ol>

     <li><p>Let <var title="">new node</var> be the first node in that
     list.</p></li>

     <li><p>Remove <var title="">new node</var> from that
     list.</p></li>

     <li><p>If <var title="">new node</var> is an element, remove all
     the child nodes of <var title="">new node</var>, so that its
     child node list is empty.</p></li>

    </ol>

    <p>Otherwise, if there is no matching list, or there was, but it
    is now empty, then run these steps instead:</p>

    <ol>

     <li><p>Let <var title="">new node</var> be a shallow clone of
     <var title="">template node</var>.</p></li>

     <li><p>Let <var title="">new node</var>'s <code
     title="dom-dataNode">dataNode</code> DOM attribute be <var
     title="">source node</var>.</p></li>

    </ol>

   </li>

   <li>

    <p>If <var title="">new node</var> is an element, run these substeps:</p>

    <ol>

     <li><p>For each attribute on <var title="">new node</var>, if
     an attribute with the same qualified name is not present on
     <var title="">template node</var>, remove that attribute.</p>

     <li>

      <p>For each attribute <var title="">attribute</var> on <var
      title="">template node</var>, run these substeps:</p>

      <ol>

       <li><p>Let <var title="">expanded</var> be the result of
       passing the value of <var title="">attribute</var> to the
       <span>text expansion algorithm for templates</span> along
       with <var title="">source node</var>.</p></li>

       <li><p>If an attribute with the same qualified name as <var
       title="">attribute</var> is already present on <var
       title="">new node</var>, then: if its value is different from
       <var title="">expanded</var>, replace its value with <var
       title="">expanded</var>.</p></li>

       <li><p>Otherwise, if there is no attribute with the same
       qualified name as <var title="">attribute</var> on <var
       title="">new node</var>, then add an attribute with the same
       namespace, prefix, and local name as <var
       title="">attribute</var>, with its value set to <var
       title="">expanded</var>'s.</p></li>

      </ol>

     </li>

    </ol>

    <p>Otherwise, the <var title="">new node</var> is a text node,
    CDATA block, or PI. Run these substeps instead:</p>

    <ol>

     <li><p>Let <var title="">expanded</var> be the result of passing
     the node value of <var title="">template node</var> (the content
     of the text node, CDATA block, or PI) to the <span>text expansion
     algorithm for templates</span> along with <var title="">source
     node</var>.</p></li>

     <li><p>If the value of the <var title="">new node</var> is
     different from <var title="">expanded</var>, then set the value
     of <var title="">new node</var> to <var
     title="">expanded</var>.</p></li>

    </ol>

   </li>

   <li><p>Append <var title="">new node</var> to <var
   title="">destination</var>.</p></li>

   <li><p>If <var title="">template node</var> is an element, then,
   for each child <var title="">child node</var> of the <var
   title="">template node</var> element, in tree order, invoke the
   <span>Levenberg template node algorithm</span> recursively, with
   the five arguments being <var title="">new child</var>, <var
   title="">source node</var>, <var title="">rule container</var>,
   <var title="">child node</var>, and <var title="">existing nodes
   lists</var> respectively.</p></li>

  </ol>

  <p class="big-issue">Define: <dfn>evaluated as a selector</dfn></p>

  <p class="big-issue">Define: <dfn>text expansion algorithm for
  templates</dfn></p> <!-- this is basically used for expanding
  nodeValue values -->


  <h3>Miscellaneous elements</h3>

  <h4>The <dfn><code>legend</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd>None.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>As the first child of a <code>fieldset</code> element.</dd>
   <dd>As the first child of a <code>details</code> element.</dd>
   <dd>As a child of a <code>figure</code> element, if there are no other <code>legend</code> element children of that element.</dd>
   <dt>Content model:</dt>
   <dd><span>Phrasing content</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>legend</code> element represents a title or explanatory
  caption for the rest of the contents of the <code>legend</code>
  element's parent element.</p>


  <h4>The <dfn><code>div</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd>None.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>flow content</span> is expected.</dd>
   <dt>Content model:</dt>
   <dd><span>Flow content</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>div</code> element represents nothing at all. It can be
  used with the <code title="attr-class">class</code>, <code
  title="attr-lang">lang</code>/<code
  title="attr-xml-lang">xml:lang</code>, and <code
  title="attr-title">title</code> attributes to mark up semantics
  common to a group of consecutive elements.</p>


  <p class="big-issue">Allowing <code>div</code> elements to contain
  phrasing content makes it easy for authors to abuse
  <code>div</code>, using it with the <code>class=""</code> attribute
  to the point of not having any other elements in the markup. This is
  a disaster from an accessibility point of view, and it would be nice
  if we could somehow make such pages non-compliant without preventing
  people from using <code>div</code>s as the extension mechanism that
  they are, to handle things the spec can't otherwise do (like making
  new widgets).</p>





  <h2>Web browsers</h2>

  <p>This section describes features that apply most directly to Web
  browsers. Having said that, unless specified elsewhere, the
  requirements defined in this section <em>do</em> apply to all user
  agents, whether they are Web browsers or not.</p>

  <h3 id="windows">Browsing contexts</h3>

  <p>A <dfn>browsing context</dfn> is a collection of one or more
  <code>Document</code> objects, and one or more <span
  title="view">views</span>.</p>

  <p>At any one time, one of the <code>Document</code>s in a
  <span>browsing context</span> is the <dfn>active document</dfn>. The
  collection of <code>Document</code>s is the <span>browsing
  context</span>'s <span>session history</span>.</p>

  <p>A <dfn>view</dfn> is a user agent interface tied to a particular
  media used for the presentation of <code>Document</code> objects in
  some media. A view may be interactive. Each view is represented by
  an <code>AbstractView</code> object. Each view belongs to a
  <span>browsing context</span>. <a
  href="#refsDOM2VIEWS">[DOM2VIEWS]</a></p>

  <p class="note">The <code title="">document</code> attribute of an
  <code>AbstractView</code> object representing a <span>view</span>
  gives the <code>Document</code> object of the view's <span>browsing
  context</span>'s <span>active document</span>. <a
  href="#refsDOM2VIEWS">[DOM2VIEWS]</a></p>

  <p class="note">Events that use the <code>UIEvent</code> interface
  are related to a specific <span>view</span> (the view in which the
  event happened); the <code>AbstractView</code> of that view is given
  in the event object's <code title="">view</code> attribute. <a
  href="#refsDOM3EVENTS">[DOM3EVENTS]</a></p>

  <p class="note">A typical Web browser has one obvious
  <span>view</span> per <span>browsing context</span>: the browser's
  window (screen media). If a page is printed, however, a second view
  becomes evident, that of the print media. The two views always share
  the same underlying <code>Document</code>, but they have a different
  presentation of that document. A speech browser also establishes a
  browsing context, one with a view in the speech media.</p>

  <p class="note">A <code>Document</code> does not necessarily have a
  <span>browsing context</span> associated with it. In particular,
  data mining tools are likely to never instantiate browsing
  contexts.</p>

  <p>The main <span>view</span> through which a user primarily
  interacts with a user agent is the <dfn>default view</dfn>.</p>

  <p class="note">The <span>default view</span> of a
  <code>Document</code> is given by the <code
  title="">defaultView</code> attribute on the <code>Document</code>
  object's <code>DocumentView</code> interface. <a
  href="#refsDOM3VIEWS">[DOM3VIEWS]</a></p>

  <p>When a <span>browsing context</span> is first created, it must be
  created with a single <code>Document</code> in its session history,
  whose <span title="the document's address">address</span> is
  <code>about:blank</code><!-- XXX xref -->, which is marked as being
  an <span title="HTML documents">HTML document</span>. The
  <code>Document</code> must have a single child <code>html</code>
  node, which itself has a single child <code>body</code> node. If the
  <span>browsing context</span> is created specifically to be
  immediately navigated, then that initial navigation will have
  <span>replacement enabled</span>.</p>


  <h4>Nested browsing contexts</h4>

  <p>Certain elements (for example, <code>iframe</code> elements) can
  instantiate further <span title="browsing context">browsing
  contexts</span>. These are called <dfn title="nested browsing
  context">nested browsing contexts</dfn>. If a browsing context <var
  title="">P</var> has an element in one of its <code>Document</code>s
  <var title="">D</var> that nests another browsing context <var
  title="">C</var> inside it, then <var title="">P</var> is said to be
  the <dfn>parent browsing context</dfn> of <var title="">C</var>,
  <var title="">C</var> is said to be a <dfn>child browsing
  context</dfn> of <var title="">P</var>, and <var title="">C</var> is
  said to be <dfn title="browsing context nested through">nested
  through</dfn> <var title="">D</var>.</p>

  <p>The browsing context with no <span>parent browsing context</span>
  is the <dfn>top-level browsing context</dfn> of all the browsing
  contexts <span title="nested browsing context">nested</span> within
  it (either directly or indirectly through other nested browsing
  contexts).</p>

  <p>A <code>Document</code> is said to be <dfn>fully active</dfn>
  when it is the <span>active document</span> of its <span>browsing
  context</span>, and either its browsing context is a <span>top-level
  browsing context</span>, or the <code>Document</code> <span
  title="browsing context nested through">through which</span> that
  browsing context is <span title="nested browsing
  context">nested</span> is itself <span>fully active</span>.</p>

  <p>Because they are nested through an element, <span title="child
  browsing context">child browsing contexts</span> are always tied to
  a specific <code>Document</code> in their <span>parent browsing
  context</span>. User agents must not allow the user to interact with
  <span title="child browsing context">child browsing contexts</span>
  of elements that are in <code>Document</code>s that are not
  themselves <span>fully active</span>.</p>


  <h4>Auxiliary browsing contexts</h4>

  <p>It is possible to create new browsing contexts that are related
  to a <span>top level browsing context</span> without being nested
  through an element. Such browsing contexts are called <dfn
  title="auxiliary browsing context">auxiliary browsing
  contexts</dfn>. Auxiliary browsing contexts are always <span
  title="top-level browsing context">top-level browsing
  contexts</span>.</p>

  <p>An <span>auxiliary browsing context</span> has an <dfn>opener
  browsing context</dfn>, which is the <span>browsing context</span>
  from which the <span>auxiliary browsing context</span> was created,
  and it has a <dfn>furthest ancestor browsing context</dfn>, which is
  the <span>top-level browsing context</span> of the <span>opener
  browsing context</span> when the <span>auxiliary browsing
  context</span> was created.</p>

  <p>The <dfn title="dom-opener"><code>opener</code></dfn> DOM
  attribute on the <code>Window</code> object must return the
  <code>Window</code> object of the <span>browsing context</span> from
  which the current browsing context was created (its <span>opener
  browsing context</span>), if there is one and it is still
  available.</p>


  <h4>Secondary browsing contexts</h4>

  <p>User agents may support <dfn title="secondary browsing
  context">secondary browsing contexts</dfn>, which are <span
  title="browsing context">browsing contexts</span> that form part of
  the user agent's interface, apart from the main content area.</p>


  <h4>Threads</h4>

  <p>Each <span>browsing context</span> is defined as having a list of
  zero or more <dfn>directly reachable browsing contexts</dfn>. These
  are:</p>

  <ul>

   <li>All the <span>browsing context</span>'s <span title="child
   browsing context">child browsing contexts</span>.</li>

   <li>The <span>browsing context</span>'s <span>parent browsing
   context</span>.</li>

   <li>All the <span title="browsing context">browsing contexts</span>
   that have the <span>browsing context</span> as their <span>opener
   browsing context</span>.</li>

   <li>The <span>browsing context</span>'s <span>opener browsing
   context</span>.</li>

  </ul>

  <p>The transitive closure of all the <span title="browsing
  context">browsing contexts</span> that are <span>directly reachable
  browsing contexts</span> consists of a <dfn>unit of related browsing
  contexts</dfn>.</p>

  <p>All the executable code in a <span>unit of related browsing
  contexts</span> must execute on a single conceptual thread. The
  dispatch of events fired by the user agent (e.g. in response to user
  actions or network activity) and the execution of any scripts
  associated with timers must be serialised so that for each
  <span>unit of related browsing contexts</span> there is only one
  script being executed at a time.</p>
<!-- XXX queue concept should be made generic across the spec.
   "Once no other scripts are executing in the <span>unit of
   related browsing contexts</span>, ..."
 this applies to anything firing events or calling callbacks
 asynchronously. -->



  <h4>Browsing context names</h4>

  <p>Browsing contexts can have a <dfn>browsing context name</dfn>. By
  default, a browsing context has no name (its name is not set).</p>

  <p>A <dfn>valid browsing context name</dfn> is any string that does
  not start with a U+005F LOW LINE character, or, a string that
  case-insensitively <!-- ASCII --> matches one of: <!--<code
  title="">_blank</code>,--> <code title="">_self</code>, <code
  title="">_parent</code>, or <code title="">_top</code>. (Names
  starting with an underscore are reserved for special keywords.)</p>

  <p><dfn>The rules for chosing a browsing context given a browsing
  context name</dfn> are as follows. The rules assume that they are
  being applied in the context of a <span>browsing context</span>.</p>

  <ol>

   <li><p>If the given browsing context name is the empty string or
   <code title="">_self</code>, then the chosen browsing context must
   be the current one.</p></li>

   <li><p>If the given browsing context name is <code
   title="">_parent</code>, then the chosen browsing context must be
   the <span><em>parent</em> browsing context</span> of the current
   one, unless there isn't one, in which case the chosen browsing
   context must be the current browsing context.</p></li>

   <li><p>If the given browsing context name is <code
   title="">_top</code>, then the chosen browsing context must be the
   most <span>top-level browsing context</span> of the current
   one.</p></li>

   <li>

    <p>If the given browsing context name is not <code
    title="">_blank</code> and there exists a browsing context whose
    <span title="browsing context name">name</span> is the same as the
    given browsing context name, and one of the following is true:

    <ul>

     <li>Either the <span>origin</span> of that browsing context's
     <span>active document</span> is the same as the
     <span>origin</span> of the current browsing context's
     <span>active document</span>,

     <li>Or that browsing context is an <span>auxiliary browsing
     context</span> and its <span>opener browsing context</span> is
     either the current browsing context or a browsing context that
     the user agent considers is closely enough related to the current
     browsing context,

     <li>Or that browsing context is not a <span>top-level browsing
     context</span>, and the <span>origin</span> of the <span>active
     document</span> of the <span>parent browsing context</span> of
     that browsing context is the same as the <span>origin</span> of
     the current browsing context's <span>active document</span>,

    </ul>

    <p>...and the user agent determines that the two browsing contexts
    are related enough that it is ok if they reach each other, then
    that browsing context must be the chosen one. If there are
    multiple matching browsing contexts, the user agent should select
    one in some arbitrary consistent manner, such as the most recently
    opened, most recently focused, or more closely related.</p>

   </li>

   <li>

    <p>Otherwise, a new browsing context is being requested, and what
    happens depends on the user agent's configuration and/or
    abilities:</p>

    <dl>

     <dt>If the user agent has been configured such that in this
     instance it will create a new browsing context</dt>

     <dd>A new <span>auxiliary browsing context</span> must be
     created, with the <span>opener browsing context</span> being the
     current one. If the given browsing context name is not <code
     title="">_blank</code>, then the new auxiliary browsing context's
     name must be the given browsing context name (otherwise, it has
     no name). The chosen browsing context must be this new browsing
     context. If it is immediately <span
     title="navigate">navigated</span>, then the navigation will be
     done with <span>replacement enabled</span>.</dd>

     <dt>If the user agent has been configured such that in this
     instance it will reuse the current browsing context</dt>

     <dd>The chosen browsing context is the current browsing
     context.</dd>

     <dt>If the user agent has been configured such that in this
     instance it will not find a browsing context</dt>

     <dd>There must not be a chosen browsing context.</dd>

    </dl>

   </li>

  </ol>




  <h3>The default view</h3>

  <p>The <code>AbstractView</code> object of <span title="default
  view">default views</span> must also implement the
  <code>Window</code> object.</p>

  <pre class="idl">interface <dfn>Window</dfn> {
  // the current browsing context
  readonly attribute <span>Window</span> <span title="dom-window">window</span>;
  readonly attribute <span>Window</span> <span title="dom-self">self</span>;
           attribute DOMString <span title="dom-name">name</span>;
  readonly attribute <span>Location</span> <span title="dom-document-location">location</span>;
  readonly attribute <span>History</span> <span title="dom-history">history</span>;
  readonly attribute <span>UndoManager</span> <span title="dom-undoManager">undoManager</span>;
  <span>Selection</span> <span title="dom-getSelection">getSelection</span>();

  // the user agent
  readonly attribute <span>ClientInformation</span> <span title="dom-navigator">navigator</span>; <!-- XXX IE6 also has window.clientInformation pointing to this same object -->
  readonly attribute <span>Storage</span> <span title="dom-sessionStorage">sessionStorage</span>;
  readonly attribute <span>Storage</span> <span title="dom-localStorage">localStorage</span>;
  <span>Database</span> <span title="dom-opendatabase">openDatabase</span>(in DOMString name, in DOMString version, in DOMString displayName, in unsigned long estimatedSize);

  // modal user prompts
  void <span title="dom-alert">alert</span>(in DOMString message);
  boolean <span title="dom-confirm">confirm</span>(in DOMString message);
  DOMString <span title="dom-prompt">prompt</span>(in DOMString message);
  DOMString <span title="dom-prompt">prompt</span>(in DOMString message, in DOMString default);
  void <span title="dom-print">print</span>();

  // other browsing contexts
  readonly attribute <span>Window</span> <span title="dom-frames">frames</span>;
  readonly attribute unsigned long <span title="dom-length">length</span>;
  readonly attribute <span>Window</span> <span title="dom-opener">opener</span>;
  <span>Window</span> <span title="dom-open">open</span>();
  <span>Window</span> <span title="dom-open">open</span>(in DOMString url);
  <span>Window</span> <span title="dom-open">open</span>(in DOMString url, in DOMString target);
  <span>Window</span> <span title="dom-open">open</span>(in DOMString url, in DOMString target, in DOMString features);
  <span>Window</span> <span title="dom-open">open</span>(in DOMString url, in DOMString target, in DOMString features, in DOMString replace);

  // <span>cross-document messaging</span>
  void <span title="dom-window-postMessage">postMessage</span>(in DOMString message);
  void <span title="dom-window-postMessage">postMessage</span>(in DOMString message, in DOMString origin);

  // <span>event handler DOM attributes</span>
           attribute <span>EventListener</span> <span title="handler-onabort">onabort</span>;
           attribute <span>EventListener</span> <span title="handler-onbeforeunload">onbeforeunload</span>;
           attribute <span>EventListener</span> <span title="handler-onblur">onblur</span>;
           attribute <span>EventListener</span> <span title="handler-onchange">onchange</span>;
           attribute <span>EventListener</span> <span title="handler-onclick">onclick</span>;
           attribute <span>EventListener</span> <span title="handler-oncontextmenu">oncontextmenu</span>;
           attribute <span>EventListener</span> <span title="handler-ondblclick">ondblclick</span>;
           attribute <span>EventListener</span> <span title="handler-ondrag">ondrag</span>;
           attribute <span>EventListener</span> <span title="handler-ondragend">ondragend</span>;
           attribute <span>EventListener</span> <span title="handler-ondragenter">ondragenter</span>;
           attribute <span>EventListener</span> <span title="handler-ondragleave">ondragleave</span>;
           attribute <span>EventListener</span> <span title="handler-ondragover">ondragover</span>;
           attribute <span>EventListener</span> <span title="handler-ondragstart">ondragstart</span>;
           attribute <span>EventListener</span> <span title="handler-ondrop">ondrop</span>;
           attribute <span>EventListener</span> <span title="handler-onerror">onerror</span>;
           attribute <span>EventListener</span> <span title="handler-onfocus">onfocus</span>;
           attribute <span>EventListener</span> <span title="handler-onkeydown">onkeydown</span>;
           attribute <span>EventListener</span> <span title="handler-onkeypress">onkeypress</span>;
           attribute <span>EventListener</span> <span title="handler-onkeyup">onkeyup</span>;
           attribute <span>EventListener</span> <span title="handler-onload">onload</span>;
           attribute <span>EventListener</span> <span title="handler-onmessage">onmessage</span>;
           attribute <span>EventListener</span> <span title="handler-onmousedown">onmousedown</span>;
           attribute <span>EventListener</span> <span title="handler-onmousemove">onmousemove</span>;
           attribute <span>EventListener</span> <span title="handler-onmouseout">onmouseout</span>;
           attribute <span>EventListener</span> <span title="handler-onmouseover">onmouseover</span>;
           attribute <span>EventListener</span> <span title="handler-onmouseup">onmouseup</span>;
           attribute <span>EventListener</span> <span title="handler-onmousewheel">onmousewheel</span>;
           attribute <span>EventListener</span> <span title="handler-onresize">onresize</span>;
           attribute <span>EventListener</span> <span title="handler-onscroll">onscroll</span>;
           attribute <span>EventListener</span> <span title="handler-onselect">onselect</span>;
           attribute <span>EventListener</span> <span title="handler-onsubmit">onsubmit</span>;
           attribute <span>EventListener</span> <span title="handler-onunload">onunload</span>;
};</pre>

 <!-- XXX XMLHttpRequest
          http://msdn.microsoft.com/workshop/author/dhtml/reference/objects/obj_window.asp
          http://www.mozilla.org/docs/dom/domref/dom_window_ref.html
          http://lxr.mozilla.org/mozilla/source/dom/public/idl/base/nsIDOMWindow.idl
   -->

  <p>The <dfn title="dom-window"><code>window</code></dfn>, <dfn
  title="dom-frames"><code>frames</code></dfn>, and <dfn
  title="dom-self"><code>self</code></dfn> DOM attributes must all
  return the <code>Window</code> object itself.</p>

  <p>The <code>Window</code> object also provides the scope for script
  execution. Each <code>Document</code> in a <span>browsing
  context</span> has an associated <dfn>list of added properties</dfn>
  which, when a document is <span title="active
  document">active</span>, are available on the <code>Document</code>'s
  <span>default view</span> <code>Window</code> object. A
  <code>Document</code> object's <span>list of added properties</span>
  must be empty when the <code>Document</code> object is created.</p>

  <p>Objects implementing the <code>Window</code> interface must also
  implement the <code>EventTarget</code> interface.</p>

  <p class="note"><code>Window</code> objects also <span
  title="dom-item">have an implicit [[Get]] method</span> which
  returns <span>nested browsing contexts</span>.</p>


  <h4>Security</h4>

  <p>User agents must raise a <span>security exception</span> whenever
  any of the members of a <code>Window</code> object are accessed by
  scripts whose <span>origin</span> is not the same as the
  <code>Window</code> object's <span>browsing context</span>'s
  <span>active document</span>'s origin, with the following
  exceptions:</p>

  <ul>

   <li>The <code title="dom-location">location</code> object

   <li>The <code title="dom-window-postMessage">postMessage()</code>
   method

  </ul>

  <p>User agents must not allow scripts to override the <code
  title="dom-location">location</code> object's setter.</p>



  <h4>Constructors</h4>

  <p>All <code>Window</code> objects must provide the following
  constructors:</p>

  <dl>

   <dt><dfn title="dom-audio"><code>Audio()</code></dfn></dt>
   <dt><dfn title="dom-audio-s"><code>Audio(<var title="">src</var>)</code></dfn></dt>

   <dd><p>When invoked as constructors, these must return a new
   <code>HTMLAudioElement</code> object (a new <code>audio</code>
   element). If the <var title="src">src</var> argument is present,
   the object created must have its <code
   title="dom-media-src">src</code> content attribute set to the
   provided value, and the user agent must invoke the <code
   title="dom-media-load">load()</code> method on the object before
   returning.</p></dd>


   <dt><dfn title="dom-image"><code>Image()</code></dfn></dt>
   <dt><dfn title="dom-image-w"><code>Image(in unsigned long <var title="">w</var>)</code></dfn></dt>
   <dt><dfn title="dom-image-wh"><code>Image(in unsigned long <var title="">w</var>, in unsigned long <var title="">h</var>)</code></dfn></dt>

   <dd><p>When invoked as corstructors, these must return a new
   <code>HTMLImageElement</code> object (a new <code>img</code>
   element). If the <var title="">h</var> argument is present, the new
   object's <code title="attr-img-height">height</code> content
   attribute must be set to <var title="">h</var>. If the <var
   title="">w</var> argument is present, the new object's <code
   title="attr-img-width">width</code> content attribute must be set
   to <var title="">w</var>.</p></dd>


   <dt><dfn title="dom-option"><code>Option()</code></dfn></dt>
   <dt><dfn title="dom-option-n"><code>Option(in DOMString <var title="">name</var>)</code></dfn></dt>
   <dt><dfn title="dom-option-nv"><code>Option(in DOMString <var title="">name</var>, in DOMString <var title="">value</var>)</code></dfn></dt>

   <dd><p>When invoked as constructors, these must return a new
   <code>HTMLOptionElement</code> object (a new <code>option</code>
   element). <span class="big-issue">need to define argument
   processing</span></p></dd>

  </dl>

  <p class="big-issue">And when constructors are invoked but without
  using the constructor syntax...?</p>



  <h4>APIs for creating and navigating browsing contexts by name</h4>

  <p>The <dfn title="dom-open"><code>open()</code></dfn> method on
  <code>Window</code> objects provides a mechanism for <span
  title="navigate">navigating</span> an existing <span>browsing
  context</span> or opening and navigating an <span>auxiliary browsing
  context</span>.</p>

  <p>The method has four arguments, though they are all optional.</p>

  <p>The first argument, <var title="">url</var>, gives a URI (or IRI)
  for a page to load in the browsing context. If no arguments are
  provided, then the <var title="">url</var> argument defaults to
  "<code>about:blank</code><!-- XXX xref -->". The argument must be
  resolved to an absolute URI by <span
  class="big-issue">...</span></p>

  <p>The second argument, <var title="">target</var>, specifies the
  <span title="browsing context name">name</span> of the browsing
  context that is to be navigated. It must be a <span>valid browsing
  context name</span>. If fewer than two arguments are provided, then
  the <var title="">name</var> argument defaults to the value
  "<code>_blank</code>".</p>

  <p>The third argument, <var title="">features</var>, has no effect
  and is supported for historical reasons only.</p>

  <p>The fourth argument, <var title="">replace</var>, specifies
  whether or not the new page will <span title="replacement
  enabled">replace</span> the page currently loaded in the browsing
  context, when <var title="">target</var> identifies an existing
  browsing context (as opposed to leaving the current page in the
  browsing context's <span>session history</span>). When three or
  fewer arguments are provided, <var title="">replace</var> defaults
  to false.</p>

  <p>When the method is invoked, the user agent must first select a
  <span>browsing context</span> to navigate by applying <span>the
  rules for chosing a browsing context given a browsing context
  name</span> using the <var title="">target</var> argument as the
  name and the <span>browsing context</span> of the script as the
  context in which the algorithm is executed, unless the user has
  indicated a preference, in which case the browsing context to
  navigate may instead be the one indicated by the user.</p>

  <p class="example">For example, suppose there is a user agent that
  supports control-clicking a link to open it in a new tab. If a user
  clicks in that user agent on an element whose <code
  title="handler-onclick">onclick</code> handler uses the <code
  title="dom-open">window.open()</code> API to open a page in an
  iframe, but, while doing so, holds the control key down, the user
  agent could override the selection of the target browsing context to
  instead target a new tab.</p>

  <p>Then, the user agent must <span>navigate</span> the selected
  <span>browsing context</span> to the URI given in <var
  title="">url</var>. If the <var title="">replace</var> is true, then
  <span title="replacement enabled">replacement must be
  enabled</span>; otherwise, it must not be enabled unless the
  <span>browsing context</span> was just created as part of the
  <span>the rules for chosing a browsing context given a browsing
  context name</span>.</p>

  <p>The method must return the <code>Window</code> object of the
  default view of the <span>browsing context</span> that was
  navigated, or null if no browsing context was navigated.</p>

  <p>The <dfn title="dom-name"><code>name</code></dfn> attribute of
  the <code>Window</code> object must, on getting, return the current
  name of the <span>browsing context</span>, and, on setting, set the
  name of the <span>browsing context</span> to the new value.</p>

  <p class="note">The name <a href="#resetBCName">gets reset</a> when
  the browsing context is navigated to another domain.</p>



  <h4>Accessing other browsing contexts</h4>

  <p>In ECMAScript implementations, objects that implement the
  <code>Window</code> interface must have a <dfn
  title="dom-item">[[Get]]</dfn> method that, when invoked with a
  property name that is a number <var title="">i</var>, returns the
  <var title="">i</var>th <span>child browsing context</span> of the
  <span title="active document">active</span> <code>Document</code>,
  sorted in document order of the elements nesting those browsing
  contexts.</p>

  <p>The <dfn title="dom-length"><code>length</code></dfn> DOM
  attribute on the <code>Window</code> interface must return the
  number of <span title="child browsing context">child browsing
  contexts</span> of the <span title="active document">active</span>
  <code>Document</code>.</p>



  <h3 id="scripting">Scripting</h3>

  <h4>Running executable code</h4>

  <p>Various mechanisms can cause author-provided executable code to
  run in the context of a document. These mechanisms include, but are
  probably not limited to:</p>

  <ul>

   <li>Processing of <code>script</code> elements.</li>

   <li>Processing of inline <code title="javascript
   protocol">javascript:</code> URIs (e.g. the <code
   title="attr-img-src">src</code> attribute of <code>img</code>
   elements, or an <code title="">@import</code> rule in a CSS
   <code>style</code> element block).</li>

   <li>Event handlers, whether registered through the DOM using <code
   title="">addEventListener()</code>, by explicit <span>event handler
   content attributes</span>, by <span>event handler DOM
   attributes</span>, or otherwise.</li>

   <li>Processing of technologies like XBL or SVG that have their own
   scripting features.</li>

  </ul>

  <p>User agents may provide a mechanism to enable or disable the
  execution of author-provided code. When the user agent is configured
  such that author-provided code does not execute, or if the user
  agent is implemented so as to never execute author-provided code, it
  is said that <dfn>scripting is disabled</dfn>. When author-provided
  code <em>does</em> execute, <dfn>scripting is enabled</dfn>. A user
  agent with scripting disabled is a <span title="User agents with no
  scripting support">user agent with no scripting support</span> for
  the purposes of conformance.</p>


  <h4>Origin</h4>
  <!-- Hallowed are the Ori -->

  <!--
    https://bugzilla.mozilla.org/show_bug.cgi?id=346659
    https://bugzilla.mozilla.org/show_bug.cgi?id=344495
  -->

  <p>Access to certain APIs is granted or denied to scripts based on
  the <dfn>origin</dfn> of the script and the API being accessed.</p>

  <p>The origin of a script depends on the context of that script:</p>

  <dl>

   <dt>If a script is in a <code>script</code> element</dt>

   <dd>The origin of the script is the origin of the
   <code>Document</code> to which the <code>script</code> element
   belongs.</dd>


   <dt>If a script is a function or other code reference created by
   another script</dt>

   <dd>The origin of the script is the origin of the script that
   created it.</dd>


   <dt>If a script is a <span title="javascript protocol"><code
   title="">javascript:</code> URI</span> in an attribute</dt>

   <dd>The origin is the origin of the <code>Document</code> of the
   element on which the attribute is found.</dd>


   <dt>If a script is a <span title="javascript protocol"><code
   title="">javascript:</code> URI</span> in a style sheet</dt>

   <dd>The origin is the origin of the <code>Document</code> to which
   the style sheet applies.</dd>


   <dt>If a script is a <span title="javascript protocol"><code
   title="">javascript:</code> URI</span> to which a <span>browsing
   context</span> is being <span title="navigate">navigated</span>,
   the URI having been provided by the user (e.g. by using a
   <i>bookmarklet</i>)</dt>

   <dd>The origin is the origin of the <code>Document</code> of the
   <span>browsing context</span>'s <span>active document</span>.</dd>


   <dt>If a script is a <span title="javascript protocol"><code
   title="">javascript:</code> URI</span> to which a <span>browsing
   context</span> is being <span title="navigate">navigated</span>,
   the URI having been declared in markup</dt>

   <dd>The origin is the origin of the <code>Document</code> of the
   element (e.g. an <code>a</code> or <code>area</code> element) that
   declared the URI.</dd>


   <dt>If a script is a <span title="javascript protocol"><code
   title="">javascript:</code> URI</span> to which a <span>browsing
   context</span> is being <span title="navigate">navigated</span>,
   the URI having been provided by script</dt>

   <dd>The origin is the origin of the script that provided the
   URI.</dd>

   <!-- ... -->

  </dl>

  <p>The origin of scripts thus comes down to finding the origin of
  <code>Document</code> objects.</p>

  <p>The origin of a <code>Document</code> or image that was served
  over the network and whose address uses a URI scheme with a
  server-based naming authority is the tuple consisting of the
  &lt;scheme&gt;, &lt;host&gt;/&lt;ihost&gt;, and &lt;port&gt; parts
  of the <code>Document</code>'s full URI. <a
  href="#refsRFC3986">[RFC3986]</a> <a
  href="#refsRFC3987">[RFC3987]</a></p>

  <p>The origin of a <code>Document</code> or image that was generated
  from a <code>data:</code> URI found in another <code>Document</code>
  or in a script is the origin of the <code>Document</code> or
  script.</p>

  <p>The origin of a <code>Document</code> or image that was generated
  from a <code>data:</code> URI from another source (e.g. typed in by
  the user) is a globally unique identifier assigned when the document
  is created.</p>

  <p>The origin of a <code>Document</code> or image that was generated
  from a <span title="javascript protocol"><code>javascript:</code>
  URI</span> is the same as the origin of that
  <code>javascript:</code> URI.</p>

  <p><dfn>The string representing the script's domain in IDNA
  format</dfn> is obtained as follows: take the domain part of the
  script's <span>origin</span> tuple and apply the IDNA ToASCII
  algorithm and then the IDNA ToUnicode algorithm to each component of
  the domain name (with both the AllowUnassigned and UseSTD3ASCIIRules
  flags set both times). <a href="#refsRFC3490">[RFC3490]</a></p>

  <p>If ToASCII fails to convert one of the components of the string,
  e.g. because it is too long or because it contains invalid
  characters, or if the origin of the script has no domain part, then
  the string representing the script's domain in IDNA format cannot be
  obtained. (ToUnicode is defined to never fail.)</p>

  <p class="big-issue">It's been suggested that we should put IP
  addresses into the origin tuple, to mitigate DNS rebinding
  attacks. However that would kill multi-homed systems like
  GMail. Should we do something like have a DNS record say whether or
  not to include the IP in the origin for a host?</p>


  <h4>Unscripted same-origin checks</h4>

  <p>When two URIs are to be compared to determine if they have the
  <dfn>same scheme/host/port</dfn>, it means that the following
  algorithm must be invoked, where <var title="">uri<sub
  title="">1</sub></var> and <var title="">uri<sub
  title="">2</sub></var> are the two URIs.</p>

  <ol>

   <li>

    <p>First, both <var title="">uri<sub title="">1</sub></var> and
    <var title="">uri<sub title="">2</sub></var> must be normalized to
    obtain the two tuples (<var title="">scheme<sub
    title="">1</sub></var>, <var title="">host<sub
    title="">1</sub></var>, <var title="">port<sub
    title="">1</sub></var>) and (<var title="">scheme<sub
    title="">2</sub></var>, <var title="">host<sub
    title="">2</sub></var>, <var title="">port<sub
    title="">2</sub></var>), by applying the following subalgorithm to
    each URI:</p>

    <ol>

     <li><p>Let <var title="">uri</var> be the URI being normalized.</p></li>

     <li><p>Parse <var title="">uri</var> according to the rules
     described in RFC 3986 and RFC 3987. <a
     href="#refsRFC3986">[RFC3986]</a> <a
     href="#refsRFC3987">[RFC3987]</a></p></li>

     <li><p>If <var title="">uri</var> does not use a server-based
     naming authority, then fail the overall algorithm &mdash; the two
     URIs do not have the same scheme/host/port.</p></li>

     <li><p>Let <var title="">scheme</var> be the &lt;scheme&gt;
     component of the URI. If the UA doesn't support the given
     protocol, then fail the overall algorithm &mdash; the two URIs do
     not have the same scheme/host/port<!-- (this should not be
     possible, since this algorithm is only invoked with URIs that
     have been actually fetched) -->.</p></li>

     <li><p>Let <var title="">host</var> be the
     &lt;host&gt;/&lt;ihost&gt; component of the URI.</p></li>

     <li>

      <p>Apply the IDNA ToASCII algorithm to <var title="">host</var>,
      with both the AllowUnassigned and UseSTD3ASCIIRules flags
      set. Let <var title="">host</var> be the result of the ToASCII
      algorithm.</p>

      <p>If ToASCII fails to convert one of the components of the
      string, e.g. because it is too long or because it contains
      invalid characters, then fail the overall algorithm &mdash; the
      two URIs do not have the same scheme/host/port. <a
      href="#refsRFC3490">[RFC3490]</a></p>

     </li>

     <li><p>If no port is explicitly listed, then let <var
     title="">port</var> be the default port for the protocol given by
     <var title="">scheme</var>. Otherwise, let <var
     title="">port</var> be the &lt;port&gt; component of the
     URI.</p></li>

     <li><p>Return the tuple (<var title="">scheme</var>, <var
     title="">host</var>, <var title="">port</var>).</p></li>

    </ol>

   </li>

   <li><p>If <var title="">scheme<sub title="">1</sub></var> is not
   case-insensitively<!-- XXX ascii case matching --> identical to
   <var title="">scheme<sub title="">2</sub></var>, or if <var
   title="">host<sub title="">1</sub></var> is not
   case-insensitively<!-- XXX ascii case matching --> identical to
   <var title="">host<sub title="">2</sub></var>, or if <var
   title="">port<sub title="">1</sub></var> is not identical to <var
   title="">port<sub title="">2</sub></var>, then fail the overall
   algorithm &mdash; the two URIs do not have the same
   scheme/host/port.</p></li>

   <li><p>Otherwise, the two URIs do have the same
   scheme/host/port.</p></li>

  </ol>

  



  <h4>Security exceptions</h4>

  <p class="big-issue">Define <dfn>security exception</dfn>.</p>


  <h4 id="javascript-protocol"><dfn title="javascript protocol">The <code title="">javascript:</code> protocol</dfn></h4>

  <p>A URI using the <code title="">javascript:</code> protocol must,
  if evaluated, be evaluated using the in-context evaluation operation
  defined for <code title="">javascript:</code> URIs. <a
  href="#refsJSURI">[JSURI]</a></p>

<!--
JSURI: http://ietfreport.isoc.org/all-ids/draft-hoehrmann-javascript-scheme-00.txt and
       http://www.websitedev.de/ietf/draft-hoehrmann-javascript-scheme-00.txt should be as stable as it gets,
       http://ietfreport.isoc.org/idref/draft-hoehrmann-javascript-scheme/ for the latest version
-->

  <p>When a browsing context is <span
  title="navigate">navigated</span> to a <code>javascript:</code> URI,
  and the <span>active document</span> of that browsing context has
  the same <span>origin</span> as the URI, the dereference context
  must be the <span>browsing context</span> being navigated.</p>

  <p>When a browsing context is <span
  title="navigate">navigated</span> to a <code>javascript:</code> URI,
  and the <span>active document</span> of that browsing context has a
  <em>different</em> <span>origin</span> than the URI, the dereference
  context must be an empty object.</p>

  <p>Otherwise, the dereference context must the <span>browsing
  context</span> of the <code>Document</code> to which belongs the
  element for which the URI is being dereferenced, or to which the
  style sheet for which the URI is being dereferenced applies,
  whichever is appropriate.</p>

  <p>URIs using the <code title="">javascript:</code> protocol should
  be evaluated when the resource for that URI is needed, unless
  <span>scripting is disabled</span> or the <code>Document</code>
  corresponding to the dereference context (as defined above), if any,
  has <code title="dom-document-designMode">designMode</code>
  enabled.</p>

  <p>If the dereference by-product is void (there is no return value),
  then the URI must be treated in a manner equivalent to an HTTP
  resource with an HTTP 204 No Content response.</p>

  <p>Otherwise, the URI must be treated in a manner equivalent to an
  HTTP resource with a 200 OK response whose <span
  title="Content-Type">Content-Type metadata</span> is <code
  title="">text/html</code> and whose response body is the dereference
  by-product, converted to a string value.</p>

  <p class="note">Certain contexts, in particular <code>img</code>
  elements, ignore the <span title="Content-Type">Content-Type
  metadata</span>.</p>

  <div class="example">

   <p>So for example a <code title="">javascript:</code> URI for a
   <code title="attr-img-src">src</code> attribute of an
   <code>img</code> element would be evaluated in the context of the
   page as soon as the attribute is set; it would then be sniffed to
   determine the image type and decoded as an image.</p>

   <p>A <code title="">javascript:</code> URI in an <code
   title="attr-a-href">href</code> attribute of an <code>a</code>
   element would only be evaluated when the link was <span
   title="following hyperlinks">followed</span>.</p>

   <p>The <code title="attr-iframe-src">src</code> attribute of an
   <code>iframe</code> element would be evaluated in the context of
   the <code>iframe</code>'s own <span>browsing context</span>; once
   evaluated, its return value (if it was not void) would replace that
   <span>browsing context</span>'s document, thus changing the
   variables visible in that <span>browsing context</span>.</p>

  </div>



  <h4>Events</h4>

  <p class="big-issue">We need to define how to handle events that are
  to be fired on a Document that is no longer the active document of
  its browsing context, and for Documents that have no browsing
  context. Do the events fire? Do the handlers in that document not
  fire? Do we just define scripting to be disabled when the document
  isn't active, with events still running as is? See also the
  <code>script</code> element section, which says scripts don't run
  when the document isn't active.</p>

  <h5 id="event-handler-attributes">Event handler attributes</h5>

  <p><span>HTML elements</span> can have <dfn>event handler
  attributes</dfn> specified. These act as bubbling event listeners
  for the element on which they are specified.</p>

  <p>Each event handler attribute has two parts, an <span title="event
  handler content attributes">event handler content attribute</span>
  and an <span title="event handler DOM attributes">event handler DOM
  attribute</span>. Event handler attributes must initially be set to
  null. When their value changes (through the changing of their event
  handler content attribute or their event handler DOM attribute),
  they will either be null, or have an <code>EventListener</code>
  object assigned to them.</p>

  <p>Objects other than <code>Element</code> objects, in particular
  <code>Window</code>, only have <span title="event handler DOM
  attributes">event handler DOM attribute</span> (since they have no
  content attributes).</p>

  <p><dfn>Event handler content attributes</dfn>, when specified, must
  contain valid ECMAScript code matching the ECMAScript <code
  title="">FunctionBody</code> production. <a
  href="#refsECMA262">[ECMA262]</a></p>

  <p>When an event handler content attribute is set, its new value
  must be interpreted as the body of an anonymous function with a
  single argument called <code>event</code>, with the new function's
  scope chain being linked from the activation object of the handler,
  to the element, to the element's <code>form</code> element if it is
  a form control, to the <code>Document</code> object, to the
  <span>browsing context</span> of that <code>Document</code>. The
  function's <code>this</code> parameter must be the
  <code>Element</code> object representing the element. The resulting
  function must then be set as the value of the corresponding event
  handler attribute, and the new value must be set as the value of the
  content attribute. If the given function body fails to compile, then
  the corresponding event handler attribute must be set to null
  instead (the content attribute must still be updated to the new
  value, though).</p>

  <p class="note">See ECMA262 Edition 3, sections 10.1.6 and 10.2.3,
  for more details on activation objects. <a
  href="#refsECMA262">[ECMA262]</a></p>

  <p class="issue">How do we allow non-JS event handlers?</p>

  <p><dfn>Event handler DOM attributes</dfn>, on setting, must set the
  corresponding event handler attribute to their new value, and on
  getting, must return whatever the current value of the corresponding
  event handler attribute is (possibly null).</p>

  <p>The following are the event handler attributes that must be
  supported by all <span>HTML elements</span>, as both content
  attributes and DOM attributes, and on <code>Window</code> objects,
  as DOM attributes:</p>

  <dl>
   <!-- XXX should change 'the element' below to 'the object' or something -->

   <dt><dfn title="handler-onabort"><code>onabort</code></dfn></dt>

   <dd><p>Must be invoked whenever an <code
   title="event-abort">abort</code> event is targeted at or bubbles
   through the element.</p></dd>

<!--
   <dt><dfn title="handler-onbeforecopy"><code>onbeforecopy</code></dfn></dt> --><!-- widely used --><!--

   <dd><p>Must be invoked whenever a <code
   title="event-beforecopy">beforecopy</code> event is targeted at or bubbles
   through the element.</p></dd>
-->

   <dt><dfn title="handler-onbeforeunload"><code>onbeforeunload</code></dfn></dt>

   <dd><p>Must be invoked whenever a <code
   title="event-beforeunload">beforeunload</code> event is targeted at or bubbles
   through the element.</p></dd>

   <dt><dfn title="handler-onblur"><code>onblur</code></dfn></dt> <!-- widely used -->

   <dd><p>Must be invoked whenever a <code
   title="event-blur">blur</code> event is targeted at or bubbles
   through the element.</p></dd>

   <dt><dfn title="handler-onchange"><code>onchange</code></dfn></dt> <!-- widely used -->

   <dd><p>Must be invoked whenever a <code
   title="event-change">change</code> event is targeted at or bubbles
   through the element.</p></dd>

   <dt><dfn title="handler-onclick"><code>onclick</code></dfn></dt> <!-- widely used -->

   <dd><p>Must be invoked whenever a <code
   title="event-click">click</code> event is targeted at or bubbles
   through the element.</p></dd>

   <dt><dfn title="handler-oncontextmenu"><code>oncontextmenu</code></dfn></dt> <!-- widely used -->

   <dd><p>Must be invoked whenever a <code
   title="event-contextmenu">contextmenu</code> event is targeted at or bubbles
   through the element.</p></dd>

<!--
   <dt><dfn title="handler-oncopy"><code>oncopy</code></dfn></dt> --><!-- widely used --><!--

   <dd><p>Must be invoked whenever a <code
   title="event-copy">copy</code> event is targeted at or bubbles
   through the element.</p></dd>
-->

   <dt><dfn title="handler-ondblclick"><code>ondblclick</code></dfn></dt> <!-- widely used -->

   <dd><p>Must be invoked whenever a <code
   title="event-dblclick">dblclick</code> event is targeted at or bubbles
   through the element.</p></dd>

   <dt><dfn title="handler-ondrag"><code>ondrag</code></dfn></dt>

   <dd><p>Must be invoked whenever a <code
   title="event-drag">drag</code> event is targeted at or bubbles
   through the element.</p></dd>

   <dt><dfn title="handler-ondragend"><code>ondragend</code></dfn></dt>

   <dd><p>Must be invoked whenever a <code
   title="event-dragend">dragend</code> event is targeted at or bubbles
   through the element.</p></dd>

   <dt><dfn title="handler-ondragenter"><code>ondragenter</code></dfn></dt>

   <dd><p>Must be invoked whenever a <code
   title="event-dragenter">dragenter</code> event is targeted at or bubbles
   through the element.</p></dd>

   <dt><dfn title="handler-ondragleave"><code>ondragleave</code></dfn></dt>

   <dd><p>Must be invoked whenever a <code
   title="event-dragleave">dragleave</code> event is targeted at or bubbles
   through the element.</p></dd>

   <dt><dfn title="handler-ondragover"><code>ondragover</code></dfn></dt>

   <dd><p>Must be invoked whenever a <code
   title="event-dragover">dragover</code> event is targeted at or bubbles
   through the element.</p></dd>

   <dt><dfn title="handler-ondragstart"><code>ondragstart</code></dfn></dt> <!-- widely used -->

   <dd><p>Must be invoked whenever a <code
   title="event-dragstart">dragstart</code> event is targeted at or bubbles
   through the element.</p></dd>

   <dt><dfn title="handler-ondrop"><code>ondrop</code></dfn></dt>

   <dd><p>Must be invoked whenever a <code
   title="event-drop">drop</code> event is targeted at or bubbles
   through the element.</p></dd>

   <dt><dfn title="handler-onerror"><code>onerror</code></dfn></dt> <!-- widely used -->

   <dd><p>Must be invoked whenever an <code
   title="event-error">error</code> event is targeted at or bubbles
   through the element.</p>

   <p class="note">The <code title="handler-onerror">onerror</code>
   handler is also used for <a href="#runtime-script-errors">reporting
   script errors</a>.</p></dd>

   <dt><dfn title="handler-onfocus"><code>onfocus</code></dfn></dt> <!-- widely used -->

   <dd><p>Must be invoked whenever a <code
   title="event-focus">focus</code> event is targeted at or bubbles
   through the element.</p></dd>

   <dt><dfn title="handler-onkeydown"><code>onkeydown</code></dfn></dt> <!-- widely used -->

   <dd><p>Must be invoked whenever a <code
   title="event-keydown">keydown</code> event is targeted at or bubbles
   through the element.</p></dd>

   <dt><dfn title="handler-onkeypress"><code>onkeypress</code></dfn></dt> <!-- widely used -->

   <dd><p>Must be invoked whenever a <code
   title="event-keypress">keypress</code> event is targeted at or bubbles
   through the element.</p></dd>

   <dt><dfn title="handler-onkeyup"><code>onkeyup</code></dfn></dt> <!-- widely used -->

   <dd><p>Must be invoked whenever a <code
   title="event-keyup">keyup</code> event is targeted at or bubbles
   through the element.</p></dd>

   <dt><dfn title="handler-onload"><code>onload</code></dfn></dt> <!-- widely used -->

   <dd><p>Must be invoked whenever a <code
   title="event-load">load</code> event is targeted at or bubbles
   through the element.</p></dd>

   <dt><dfn title="handler-onmessage"><code>onmessage</code></dfn></dt> <!-- introduced for <event-source> -->

   <dd><p>Must be invoked whenever a <code
   title="event-message">message</code> event is targeted at or bubbles
   through the element.</p></dd>

   <dt><dfn title="handler-onmousedown"><code>onmousedown</code></dfn></dt> <!-- widely used -->

   <dd><p>Must be invoked whenever a <code
   title="event-mousedown">mousedown</code> event is targeted at or bubbles
   through the element.</p></dd>

   <dt><dfn title="handler-onmousemove"><code>onmousemove</code></dfn></dt> <!-- widely used -->

   <dd><p>Must be invoked whenever a <code
   title="event-mousemove">mousemove</code> event is targeted at or bubbles
   through the element.</p></dd>

   <dt><dfn title="handler-onmouseout"><code>onmouseout</code></dfn></dt> <!-- widely used -->

   <dd><p>Must be invoked whenever a <code
   title="event-mouseout">mouseout</code> event is targeted at or bubbles
   through the element.</p></dd>

   <dt><dfn title="handler-onmouseover"><code>onmouseover</code></dfn></dt> <!-- widely used -->

   <dd><p>Must be invoked whenever a <code
   title="event-mouseover">mouseover</code> event is targeted at or bubbles
   through the element.</p></dd>

   <dt><dfn title="handler-onmouseup"><code>onmouseup</code></dfn></dt> <!-- widely used -->

   <dd><p>Must be invoked whenever a <code
   title="event-mouseup">mouseup</code> event is targeted at or bubbles
   through the element.</p></dd>

   <dt><dfn title="handler-onmousewheel"><code>onmousewheel</code></dfn></dt> <!-- widely used -->

   <dd><p>Must be invoked whenever a <code
   title="event-mousewheel">mousewheel</code> event is targeted at or bubbles
   through the element.</p></dd>

<!--
   <dt><dfn title="handler-onpaste"><code>onpaste</code></dfn></dt> --><!-- widely used --><!--

   <dd><p>Must be invoked whenever a <code
   title="event-paste">paste</code> event is targeted at or bubbles
   through the element.</p></dd>
-->

   <dt><dfn title="handler-onresize"><code>onresize</code></dfn></dt> <!-- widely used -->

   <dd><p>Must be invoked whenever a <code
   title="event-resize">resize</code> event is targeted at or bubbles
   through the element.</p></dd> <!-- XXX should define when it fires -->

   <dt><dfn title="handler-onscroll"><code>onscroll</code></dfn></dt> <!-- widely used -->

   <dd><p>Must be invoked whenever a <code
   title="event-scroll">scroll</code> event is targeted at or bubbles
   through the element.</p></dd> <!-- XXX should define when it fires -->

   <dt><dfn title="handler-onselect"><code>onselect</code></dfn></dt> <!-- widely used -->

   <dd><p>Must be invoked whenever a <code
   title="event-select">select</code> event is targeted at or bubbles
   through the element.</p></dd> <!-- XXX should define when it fires -->

<!--XXX
   <dt><dfn title="handler-onselectstart"><code>onselectstart</code></dfn></dt> --><!-- widely used --><!--

   <dd><p>Must be invoked whenever a <code
   title="event-selectstart">selectstart</code> event is targeted at or bubbles
   through the element.</p></dd>
--> <!-- XXX should define when it fires -->

   <dt><dfn title="handler-onsubmit"><code>onsubmit</code></dfn></dt> <!-- widely used -->

   <dd><p>Must be invoked whenever a <code
   title="event-submit">submit</code> event is targeted at or bubbles
   through the element.</p></dd>

   <dt><dfn title="handler-onunload"><code>onunload</code></dfn></dt> <!-- widely used -->

   <dd><p>Must be invoked whenever an <code
   title="event-unload">unload</code> event is targeted at or bubbles
   through the element.</p></dd> <!-- XXX need to fire this -->

  </dl>

  <p>When an event handler attribute is invoked, its argument must be
  set to the <code>Event</code> object of the event in question. If
  the function returns the exact boolean value false, the event's
  <code>preventDefault()</code> method must then invoked. Exception:
  for historical reasons, for the HTML <code>mouseover</code> event,
  the <code>preventDefault()</code> method must be called when the
  function returns true instead.</p>

  <!-- IE actually uncancels the event if the function returns true -->


  <p>When <span>scripting is disabled</span>, event handler attributes
  must do nothing.</p>

  <p>When <span>scripting is enabled</span>, all event handler
  attributes on an element, whether set to null or to a function, must
  be registered as event listeners on the element, as if the <code
  title="dom-EventTarget-addEventListenerNS">addEventListenerNS()</code>
  method on the <code>Element</code> object's <code>EventTarget</code>
  interface had been invoked when the element was created, with the
  event type (<code title="dom-event-type">type</code> argument) equal
  to the type described for the event handler attribute in the list
  above, the namespace (<code
  title="dom-event-namespaceURI">namespaceURI</code> argument) set to
  null, the listener set to be a target and bubbling phase listener
  (<code title="dom-event-useCapture">useCapture</code> argument set
  to false), the event group set to the default group (<code
  title="dom-event-evtGroup">evtGroup</code> argument set to null),
  and the event listener itself (<code
  title="dom-event-listener">listener</code> argument) set to do
  nothing while the event handler attribute is null, and set to invoke
  the function associated with the event handler attribute
  otherwise.</p>


  <h5>Event firing</h5>

  <p class="big-issue">maybe this should be moved higher up
  (terminology? conformance? DOM?) Also, the whole terminology thing
  should be changed so that we don't define any specific events here,
  we only define 'simple event', 'progress event', 'mouse event', 'key
  event', and the like, and have the actual dispatch use those generic
  terms when firing events.</p>

  <p>Certain operations and methods are defined as firing events on
  elements. For example, the <code title="dom-click">click()</code>
  method on the <code>HTMLElement</code> interface is defined as
  firing a <code title="event-click">click</code> event on the
  element.  <a href="#refsDOM3EVENTS">[DOM3EVENTS]</a></p>

  <p><dfn title="fire a click event">Firing a <code
  title="event-click">click</code> event</dfn> means that a <a
  href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#event-click"><code>click</code></a>
  event with no
  namespace, which bubbles and is cancelable, and which uses the
  <code>MouseEvent</code> interface, must be dispatched at the given
  element. The event object must have its <code
  title="">screenX</code>, <code title="">screenY</code>, <code
  title="">clientX</code>, <code title="">clientY</code>, and <code
  title="">button</code> attributes set to 0, its <code
  title="">ctrlKey</code>, <code title="">shiftKey</code>, <code
  title="">altKey</code>, and <code title="">metaKey</code> attributes
  set according to the current state of the key input device, if any
  (false for any keys that are not available), its <code
  title="">detail</code> attribute set to 1, and its <code
  title="">relatedTarget</code> attribute set to null. The <code
  title="">getModifierState()</code> method on the object must return
  values appropriately describing the state of the key input device at
  the time the event is created.</p>

  <p><dfn title="fire a change event">Firing a <code
  title="event-change">change</code> event</dfn> means that a <a
  href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#event-change"><code>change</code></a>
  event with no namespace, which bubbles but is not cancelable, and
  which uses the <code>Event</code> interface, must be dispatched at
  the given element. The event object must have its <code
  title="">detail</code> attribute set to 0.</p>

  <p><dfn title="fire a contextmenu event">Firing a <code
  title="event-contextmenu">contextmenu</code> event</dfn> means that
  a <code title="event-contextmenu">contextmenu</code> event with no
  namespace, which bubbles and is cancelable, and which uses the
  <code>Event</code> interface, must be dispatched at the given
  element. The event object must have its <code title="">detail</code>
  attribute set to 0.</p>

  <p><dfn title="fire a simple event">Firing a simple event called
  <var title="">e</var></dfn> means that an event with the name <var
  title="">e</var>, with no namespace, which does not bubble but is
  cancelable, and which uses the <code>Event</code> interface, must be
  dispatched at the given element.</p>

  <p><dfn title="fire a show event">Firing a <code
  title="event-show">show</code> event</dfn> means <span title="fire a
  simple event">firing a simple event called <code
  title="event-show">show</code></span>. <span title="issue">Actually
  this should fire an event that has modifier information (shift/ctrl
  etc).</span></p>

  <p><dfn title="fire a load event">Firing a <code
  title="event-load">load</code> event</dfn> means <span title="fire a
  simple event">firing a simple event called <code
  title="event-load">load</code></span>. <!--<dfn title="fire a
  DOMContentLoaded event">Firing a <code
  title="event-DOMContentLoaded">DOMContentLoaded</code> event</dfn>
  means <span title="fire a simple event">firing a simple event called
  <code
  title="event-DOMContentLoaded">DOMContentLoaded</code></span>.-->
  <dfn title="fire an error event">Firing an <code
  title="event-error">error</code> event</dfn> means <span title="fire
  a simple event">firing a simple event called <code
  title="event-error">error</code></span>.</p>

  <!-- XXX need to define the dispatching of DOMActivate -->

  <p class="big-issue"><dfn title="fire a progress event">Firing a
  progress event called <var title="">e</var></dfn> means something
  that hasn't yet been defined, in the <a
  href="#refsPROGRESS">[PROGRESS]</a> spec.</p>

  <p>The default action of these event is to do nothing unless
  otherwise stated.</p>

  <p class="big-issue">If you dispatch a custom "click" event at an
  element that would normally have default actions, should they get
  triggered? If so, we need to go through the entire spec and make
  sure that any default actions are defined in terms of <em>any</em>
  event of the right type on that element, not those that are
  dispatched in expected ways.</p>


  <h5>Events and the <code>Window</code> object</h5>

  <p>When an event is dispatched at a DOM node in a
  <code>Document</code> in a <span>browsing context</span>, if the
  event is not a <code title="event-load">load</code> event, the user
  agent must also dispatch the event to the <code>Window</code>, as
  follows:</p>

  <ol>

   <li>In the capture phase, the event must be dispatched to the
   <code>Window</code> object before being dispatched to any of the
   nodes.</li>

   <li>In the bubble phase, the event must be dispatched to the
   <code>Window</code> object at the end of the phase, unless bubbling
   has been prevented.</li>

  </ol>



  <h5 id="runtime-script-errors">Runtime script errors</h5>

  <p><em>This section only applies to user agents that support
  scripting in general and ECMAScript in particular.</em></p>

  <p>Whenever a runtime script error occurs in one of the scripts
  associated with the document, the value of the <code
  title="handler-onerror">onerror</code> <span>event handler DOM
  attribute</span> of the <code>Window</code> object must be
  processed, as follows:</p>

  <dl class="switch">

   <dt>If the value is a function</dt>

   <dd>

    <p>The function referenced by the <code
    title="handler-onerror">onerror</code> attribute must be invoked
    with three arguments, before notifying the user of the error.</p>

    <p>The three arguments passed to the function are all
    <code>DOMString</code>s; the first must give the message that the
    UA is considering reporting, the second must give the URI to the
    resource in which the error occured, and the third must give the
    line number in that resource on which the error occured.</p>

    <p>If the function returns false, then the error should not be
    reported to the user. Otherwise, if the function returns another
    value (or does not return at all), the error should be reported to
    the user.</p>

    <p>Any exceptions thrown or errors caused by this function must be
    reported to the user immediately after the error that the function
    was called for, without calling the function again.</p>

   </dd>

   <dt>If the value is <code>null</code></dt>

   <dd>

    <p>The error should not reported to the user.</p>

   </dd>

   <dt>If the value is anything else</dt>

   <dd>

    <p>The error should be reported to the user.</p>

   </dd>

  </dl>

  <p>The initial value of <code title="handler-onerror">onerror</code>
  must be <code>undefined</code>.</p>



  <h3>User prompts</h3>

  <p>The <dfn title="dom-alert"><code>alert(<var
  title="">message</var>)</code></dfn> method, when invoked, must show
  the given <var title="">message</var> to the user. The user agent
  may make the method wait for the user to acknowledge the message
  before returning; if so, the user agent must <span>pause</span>
  while the method is waiting.</p>

  <p>The <dfn title="dom-confirm"><code>confirm(<var
  title="">message</var>)</code></dfn> method, when invoked, must show
  the given <var title="">message</var> to the user, and ask the user
  to respond with a positive or negative response. The user agent must
  then <span>pause</span> as the the method waits for the user's
  response. If the user responds positively, the method must return
  true, and if the user responds negatively, the method must return
  false.</p>

  <p>The <dfn title="dom-prompt"><code>prompt(<var
  title="">message</var>, <var title="">default</var>)</code></dfn>
  method, when invoked, must show the given <var
  title="">message</var> to the user, and ask the user to either
  respond with a string value or abort. The user agent must then
  <span>pause</span> as the the method waits for the user's
  response. The second argument is optional. If the second argument
  (<var title="">default</var>) is present, then the response must be
  defaulted to the value given by <var title="">default</var>. If the
  user aborts, then the method must return null; otherwise, the method
  must return the string that the user responded with.</p>

  <p>The <dfn title="dom-print"><code>print()</code></dfn> method,
  when invoked, should offer the user the opportunity to <span>obtain
  a physical form</span> of the document. The user agent may make the
  method wait for the user to either accept or decline before
  returning; if so, the user agent must <span>pause</span> while the
  method is waiting.  (This does not, of course, preclude the user
  agent from <em>always</em> offering the user with the opportunity to
  convert the document to whatever media the user might want.)</p>



  <h3>Browser state</h3>

  <p>The <dfn title="dom-navigator"><code>navigator</code></dfn>
  attribute of the <code>Window</code> interface must return an
  instance of the <code>ClientInformation</code> interface, which
  represents the identity and state of the user agent (the client),
  and allows Web pages to register themselves as potential protocol
  and content handlers:</p>

  <pre class="idl">interface <dfn>ClientInformation</dfn> {
  readonly attribute boolean <span title="dom-navigator-onLine">onLine</span>;
  void <span title="dom-navigator-registerProtocolHandler">registerProtocolHandler</span>(in DOMString protocol, in DOMString uri, in DOMString title);
  void <span title="dom-navigator-registerContentHandler">registerContentHandler</span>(in DOMString mimeType, in DOMString uri, in DOMString title);
<!-- XXX there are other attributes! -->};</pre>
<!-- also, see window.external.AddSearchProvider() and similar DOM APIs from IE -->

  <h4 id="custom-handlers">Custom protocol and content handlers</h4>

  <p>The <dfn
  title="dom-navigator-registerProtocolHandler"><code>registerProtocolHandler()</code></dfn>
  method allows Web sites to register themselves as possible handlers
  for particular protocols. For example, an online fax service could
  register itself as a handler of the <code>fax:</code> protocol (<a
  href="#refsRFC2806">[RFC2806]</a>), so that if the user clicks on
  such a link, he is given the opportunity to use that Web
  site. Analogously, the <dfn
  title="dom-navigator-registerContentHandler"><code>registerContentHandler()</code></dfn>
  method allows Web sites to register themselves as possible handlers
  for content in a particular MIME type. For example, the same online
  fax service could register itself as a handler for
  <code>image/g3fax</code> files (<a
  href="#refsRFC1494">[RFC1494]</a>), so that if the user has no
  native application capable of handling G3 Facsimile byte streams,
  his Web browser can instead suggest he use that site to view the
  image.</p>

  <p>User agents may, within the constraints described in this
  section, do whatever they like when the methods are called. A UA
  could, for instance, prompt the user and offer the user the
  opportunity to add the site to a shortlist of handlers, or make the
  handlers his default, or cancel the request. UAs could provide such
  a UI through modal UI or through a non-modal transient notification
  interface. UAs could also simply silently collect the information,
  providing it only when relevant to the user.</p>

  <p>There is <a href="#sample-handler-impl">an example of how these
  methods could be presented to the user</a> below.</p>

  <p>The arguments to the methods have the following meanings:</p>

  <dl>

   <dt><var title="">protocol</var> (<code title="dom-navigator-registerProtocolHandler">registerProtocolHandler()</code> only)</dt>

   <dd>

    <p>A scheme, such as <code>ftp</code> or <code>fax</code>. The
    scheme must be treated case-insensitively by user agents for the
    purposes of comparing with the scheme part of URIs that they
    consider against the list of registered handlers.</p>

    <p>The <var title="">protocol</var> value, if it contains a colon (as in
    "<code>ftp:</code>"), will never match anything, since schemes
    don't contain colons.</p>

   </dd>

   <dt><var title="">mimeType</var> (<code title="dom-navigator-registerContentHandler">registerContentHandler()</code> only)</dt>

   <dd>

    <p>A MIME type, such as <code>model/vrml</code> or
    <code>text/richtext</code>. The MIME type must be treated
    case-insensitively by user agents for the purposes of comparing
    with MIME types of documents that they consider against the list
    of registered handlers.</p>

    <p>User agents must compare the given values only to the MIME
    type/subtype parts of content types, not to the complete type
    including parameters. Thus, if <var title="">mimeType</var> values
    passed to this method include characters such as commas or
    whitespace, or include MIME parameters, then the handler being
    registered will never be used.</p>

   </dd>

   <dt><var title="">uri</var></dt>

   <dd>

    <p>The URI of the page that will handle the requests. When the
    user agent uses this URI, it must replace the first occurrence of
    the exact literal string "<code>%s</code>" with an escaped version
    of the URI of the content in question (as defined below), and then
    fetch the resulting URI using the GET method (or equivalent for
    non-HTTP URIs).</p>

    <p>To get the escaped version of the URI, first, the domain part
    of the URI (if any) must be converted to its punycode
    representation, and then, every character in the URI that is not
    in the ranges given in the next paragraph must be replaced by its
    UTF-8 byte representation, each byte being represented by a U+0025
    (%) character and two digits in the range U+0030 (0) to U+0039 (9)
    and U+0041 (A) to U+0046 (F) giving the hexadecimal representation
    of the byte.</p>

    <p>The ranges of characters that must not be escaped are: U+002D
    (-), U+002E (.), U+0030 (0) to U+0039 (9), U+0041 (A) to U+005A
    (Z), U+005F (_), U+0061 (a) to U+007A (z), and U+007E (~).</p>

    <!-- XXX move that to a common algorithms section if any other
    part of the spec needs it -->

    <div class="example">

     <p>If the user had visited a site that made the following call:</p>

     <pre>navigator.registerContentHandler('application/x-soup', 'http://example.com/soup?url=%s', 'SoupWeb&trade;')</pre>

     <p>...and then clicked on a link such as:</p>

     <pre>&lt;a href="http://www.example.net/chickenk&#xEF;wi.soup">Download our Chicken Kiwi soup!&lt;/a></pre>

     <p>...then, assuming this <code>chickenk&#xEF;wi.soup</code> file
     was served with the MIME type <code>application/x-soup</code>,
     the UA might navigate to the following URI:</p>

     <pre>http://example.com/soup?url=http%3A%2F%2Fwww.example.net%2Fchickenk%C3%AFwi.soup</pre>

     <p>This site could then fetch the <code>chickenk&#xEF;wi.soup</code>
     file and do whatever it is that it does with soup (synthesise it
     and ship it to the user, or whatever).</p>

    </div>

   </dd>

   <dt><var title="">title</var></dt>

   <dd>

    <p>A descriptive title of the handler, which the UA might use to
    remind the user what the site in question is.</p>

   </dd>

  </dl>

  <p>User agents should raise <span title="security
  exception">security exceptions</span> if the methods are called with
  <var title="">protocol</var> or <var title="">mimeType</var> values
  that the UA deems to be "privileged". For example, a site attempting
  to register a handler for <code>http</code> URIs or
  <code>text/html</code> content in a Web browser would likely cause
  an exception to be raised.</p>

  <p>User agents must raise a <code>SYNTAX_ERR</code> exception if the
  <var title="">uri</var> argument passed to one of these methods does
  not contain the exact literal string "<code>%s</code>".</p>

  <p>User agents must not raise any other exceptions (other than
  binding-specific exceptions, such as for an incorrect number of
  arguments in an ECMAScript implementation).</p>

  <p>This section does not define how the pages registered by these
  methods are used, beyond the requirements on how to process the <var
  title="">uri</var> value (see above). To some extent, the <span
  title="navigate">processing model for navigating across
  documents</span> defines some cases where these methods are
  relevant, but in general UAs may use this information wherever they
  would otherwise consider handing content to native plugins or helper
  applications.</p>

  <p>UAs must not use registered content handlers to handle content
  that was returned as part of a non-GET transaction (or rather, as
  part of any non-idempotent transaction), as the remote site would
  not be able to fetch the same data.</p>


  <h5>Security and privacy</h5>

  <p>These mechanisms can introduce a number of concerns, in
  particular privacy concerns.</p>

  <p><strong>Hijacking all Web usage.</strong> User agents should not
  allow protocols that are key to its normal operation, such as
  <code>http</code> or <code>https</code>, to be rerouted through
  third-party sites. This would allow a user's activities to be
  trivially tracked, and would allow user information, even in secure
  connections, to be collected.</p>

  <p><strong>Hijacking defaults.</strong> It is strongly recommended
  that user agents do not automatically change any defaults, as this
  could lead the user to send data to remote hosts that the user is
  not expecting. New handlers registering themselves should never
  automatically cause those sites to be used.</p>

  <p><strong>Registration spamming.</strong> User agents should
  consider the possibility that a site will attempt to register a
  large number of handlers, possibly from multiple domains (e.g. by
  redirecting through a series of pages each on a different domain,
  and each registering a handler for <code>video/mpeg</code> &mdash;
  analogous practices abusing other Web browser features have been
  used by pornography Web sites for many years). User agents should
  gracefully handle such hostile attempts, protecting the user.</p>

  <p><strong>Misleading titles.</strong> User agents should not rely
  wholy on the <var title="">title</var> argument to the methods when
  presenting the registered handlers to the user, since sites could
  easily lie. For example, a site <code>hostile.example.net</code>
  could claim that it was registering the "Cuddly Bear Happy Content
  Handler". User agents should therefore use the handler's domain in
  any UI along with any title.</p>

  <p><strong>Hostile handler metadata.</strong> User agents should
  protect against typical attacks against strings embedded in their
  interface, for example ensuring that markup or escape characters in
  such strings are not executed, that null bytes are properly handled,
  that over-long strings do not cause crashes or buffer overruns, and
  so forth.</p>

  <p><strong>Leaking Intranet URIs.</strong> The mechanism described
  in this section can result in secret Intranet URIs being leaked, in
  the following manner:</p>

  <ol>

   <li>The user registers a third-party content handler as the default
   handler for a content type.</li>

   <li>The user then browses his corporate Intranet site and accesses
   a document that uses that content type.</li>

   <li>The user agent contacts the third party and hands the third
   party the URI to the Intranet content.</li>

  </ol>

  <p>No actual confidential file data is leaked in this manner, but
  the URIs themselves could contain confidential information. For
  example, the URI could be
  <code>https://www.corp.example.com/upcoming-aquisitions/samples.egf</code>,
  which might tell the third party that Example Corporation is
  intending to merge with Samples LLC. Implementors might wish to
  consider allowing administrators to disable this feature for certain
  subdomains, content types, or protocols.</p>

  <p><strong>Leaking secure URIs.</strong> User agents should not send
  HTTPS URIs to third-party sites registered as content handlers, in
  the same way that user agents do not send <code>Referer</code>
  headers from secure sites to third-party sites.</p>

  <p><strong>Leaking credentials.</strong> User agents must never send
  username or password information in the URIs that are escaped and
  included sent to the handler sites. User agents may even avoid
  attempting to pass to Web-based handlers the URIs of resources
  that are known to require authentication to access, as such sites
  would be unable to access the resources in question without
  prompting the user for credentials themselves (a practice that would
  require the user to know whether to trust the third-party handler, a
  decision many users are unable to make or even understand).</p>


  <h5 id="sample-handler-impl">Sample user interface</h5>

  <p><em>This section is non-normative.</em></p>

  <p>A simple implementation of this feature for a desktop Web browser
  might work as follows.</p>

  <p>The <code
  title="dom-navigator-registerProtocolHandler">registerProtocolHandler()</code>
  method could display a modal dialog box:</p>

  <pre>||[ Protocol Handler Registration ]|||||||||||||||||||||||||||
|                                                            |
| This Web page:                                             |
|                                                            |
|    Kittens at work                                         |
|    http://kittens.example.org/                             |
|                                                            |
| ...would like permission to handle the protocol "x-meow:"  |
| using the following Web-based application:                 |
|                                                            |
|    Kittens-at-work displayer                               |
|    http://kittens.example.org/?show=%s                     |
|                                                            |
| Do you trust the administrators of the "kittens.example.   |
| org" domain?                                               |
|                                                            |
|              ( Trust kittens.example.org )  (( Cancel ))   |
|____________________________________________________________|</pre>

  <p>...where "Kittens at work" is the title of the page that invoked
  the method, "http://kittens.example.org/" is the URI of that page,
  "x-meow" is the string that was passed to the <code
  title="dom-navigator-registerProtocolHandler">registerProtocolHandler()</code>
  method as its first argument (<var title="">protocol</var>),
  "http://kittens.example.org/?show=%s" was the second argument (<var
  title="">uri</var>), and "Kittens-at-work displayer" was the third
  argument (<var title="">title</var>).</p>

  <p>If the user clicks the Cancel button, then nothing further
  happens. If the user clicks the "Trust" button, then the handler is
  remembered.</p>

  <p>When the user then attempts to fetch a URI that uses the
  "x-meow:" scheme, then it might display a dialog as follows:</p>

  <pre>||[ Unknown Protocol ]||||||||||||||||||||||||||||||||||||||||
|                                                            |
| You have attempted to access:                              |
|                                                            |
|    x-meow:S2l0dGVucyBhcmUgdGhlIGN1dGVzdCE%3D               |
|                                                            |
| How would you like FerretBrowser to handle this resource?  |
|                                                            |
|  (o) Contact the FerretBrowser plugin registry to see if   |
|      there is an official way to handle this resource.     |
|                                                            |
|  ( ) Pass this URI to a local application:                 |
|      [ /no application selected/             ] ( Choose )  |
|                                                            |
|  ( ) Pass this URI to the "Kittens-at-work displayer"      |
|      application at "kittens.example.org".                 |
|                                                            |
|  [ ] Always do this for resources using the "x-meow"       |
|      protocol in future.                                   |
|                                                            |
|                                     ( Ok )  (( Cancel ))   |
|____________________________________________________________|</pre>

  <p>...where the third option is the one that was primed by the site
  registering itself earlier.</p>

  <p>If the user does select that option, then the browser, in
  accordance with the requirements described in the previous two
  sections, will redirect the user to
  "http://kittens.example.org/?show=x-meow%3AS2l0dGVucyBhcmUgdGhlIGN1dGVzdCE%253D".</p>

  <p>The <code
  title="dom-navigator-registerContentHandler">registerContentHandler()</code>
  method would work equivalently, but for unknown MIME types instead
  of unknown protocols.</p>




  <h3 id="offline">Offline Web applications</h3>

  <h4>Introduction</h4>

  <p class="big-issue">...</p>


  <h4 id="appcache">Application caches</h4>

  <p>An <dfn>application cache</dfn> is a collection of resources. An
  application cache is identified by the URI of a resource
  manifest which is used to populate the cache.</p>

  <p>Application caches are versioned, and there can be different
  instances of caches for the same manifest URI, each having a
  different version. A cache is newer than another if it was created
  after the other (in other words, caches in a group have a
  chronological order).</p>

  <p>Each group of application caches for the same manifest URI have a
  common <dfn title="concept-appcache-status">update status</dfn>,
  which is one of the following: <i>idle</i>, <i>checking</i>,
  <i>downloading</i>.</p>

  <p id="appcache-history-1">A <span>browsing context</span> can be
  associated with an application cache. A <span>child browsing
  context</span> is always associated with the same browsing context
  as its <span>parent browsing context</span>, if any. A
  <span>top-level browsing context</span> is associated with the
  application cache appropriate for its <span>active
  document</span>. (A browsing context's associated cache thus can <a
  href="#appcache-history-2">change</a> during <span title="traverse
  the history">session history traversal</span>.)</p>

  <p>A <code>Document</code> initially has no appropriate cache, but
  steps <a href="#parser-appcache">in the parser</a> and in the <span
  title="navigate">navigation</span> sections cause <span
  title="concept-appcache-init-with-attribute">cache selection</span>
  to occur early in the page load process.</p>

  <p>An application cache consists of:</p>

  <ul>

   <li>

    <p>One of more resources (including their out-of-band metadata,
    such as HTTP headers, if any), identified by URIs, each falling
    into one (or more) of the following categories:</p>

    <dl>
 
     <dt><dfn title="concept-appcache-implicit">Implicit entries</dfn>

     <dd>Documents that were added to the cache because a
     <span>top-level browsing context</span> was <span
     title="navigate">navigated</span> to that document and the
     document indicated that this was its cache, using the <code
     title="attr-html-manifest">manifest</code> attribute.

 
     <dt><dfn title="concept-appcache-manifest">The manifest</dfn>

     <dd>The resource corresponding to the URI that was given in an
     implicit entry's <code>html</code> element's <code
     title="attr-html-manifest">manifest</code> attribute. The
     manifest is downloaded and processed during the <span>application
     cache update process</span>. All the <span
     title="concept-appcache-implicit">implicit entries</span> have
     the <span>same scheme/host/port</span> as the manifest.

 
     <dt><dfn title="concept-appcache-explicit">Explicit entries</dfn>

     <dd>Resources that were listed in the cache's <span
     title="concept-appcache-manifest">manifest</span>. Explicit
     entries can also be marked as <dfn
     title="concept-appcache-foreign">foreign</dfn>, which means that they
     have an <code title="attr-html-manifest">manifest</code>
     attribute but that it doesn't point at this cache's <span
     title="concept-appcache-manifest">manifest</span>.

 
     <dt><dfn title="concept-appcache-fallback">Fallback entries</dfn>

     <dd>Resources that were listed in the cache's <span
     title="concept-appcache-manifest">manifest</span> as fallback
     entries.

 
     <dt><dfn title="concept-appcache-oppcache">Opportunistically cached entries</dfn>

     <dd>Resources whose URIs <span
     title="concept-appcache-matches-oppcache">matched</span> an <span
     title="concept-appcache-oppcache-ns">opportunistic caching
     namespace</span> when they were fetched, and were therefore
     cached in the application cache.

 
     <dt><dfn title="concept-appcache-dynamic">Dynamic entries</dfn>

     <dd>Resources that were added to the cache by the <code
     title="dom-appcache-add">add()</code> method.

    </dl>

    <p class="note">A URI in the list can be flagged with multiple
    different types, and thus an entry can end up being categorised as
    multiple entries. For example, an entry can be an explicit entry
    and a dynamic entry at the same time.</p>

   </li>

   <li>Zero or more <dfn
   title="concept-appcache-oppcache-ns">opportunistic caching
   namespaces</dfn>: URIs, used as <span
   title="concept-appcache-matches-oppcache">prefix match
   patterns</span>, each of which is mapped to a <span
   title="concept-appcache-fallback">fallback entry</span>. Each
   namespace URI prefix, when parsed as a URI, has the <span>same
   scheme/host/port</span> as <span
   title="concept-appcache-manifest">the manifest</span>.</li>

   <li>Zero or more URIs that form the <dfn
   title="concept-appcache-onlinewhitelist">online whitelist</dfn>.

  </ul>

  <p>Multiple application caches can contain the same resource,
  e.g. if their manifests all reference that resource. If the user
  agent is to <dfn title="concept-appcache-selection">select an
  application cache</dfn> from a list of caches that contain a
  resource, that the user agent must use the application cache that
  the user most likely wants to see the resource from, taking into
  account the following:</p>

  <ul>

   <li>which application cache was most recently updated,

   <li>which application cache was being used to display the
   resource from which the user decided to look at the new resource,
   and

   <li>which application cache the user prefers.</li>

  </ul>


  <h4 id="manifests">The cache manifest syntax</h4>

  <h5>Writing cache manifests</h5>

  <p>Manifests must be served using the <code
  title="">text/cache-manifest</code> MIME type. All resources served
  using the <code title="">text/cache-manifest</code> MIME type must
  follow the syntax of application cache manifests, as described in
  this section.</p>

  <p>An application cache manifest is a text file, whose text is
  encoded using UTF-8. Data in application cache manifests is
  line-based. Newlines must be represented by U+000A LINE FEED (LF)
  characters, U+000D CARRIAGE RETURN (CR) characters, or U+000D
  CARRIAGE RETURN (CR) U+000A LINE FEED (LF) pairs.</p>

  <p class="note">This is a willful double violation of RFC2046.</p>

  <p>The first line of an application cache manifest must consist of
  the string "CACHE", a single U+0020 SPACE character, the string
  "MANIFEST", and zero or more U+0020 SPACE and U+0009 CHARACTER
  TABULATION (tab) characters. If any other text is found on the first
  line, the user agent will ignore the entire file. The first line may
  optionally be preceded by a U+FEFF BYTE ORDER MARK (BOM)
  character.</p>

  <p>Subsequent lines, if any, must all be one of the following:</p>

  <dl>
   <dt>A blank line
   <dd>
    <p>Blank lines must consist of zero or more U+0020 SPACE and
    U+0009 CHARACTER TABULATION (tab) characters only.</p>

   <dt>A comment
   <dd>
    <p>Comment lines must consist of zero or more U+0020 SPACE and
    U+0009 CHARACTER TABULATION (tab) characters, followed by a single
    U+0023 NUMBER SIGN (#) character, followed by zero or more
    characters other than U+000A LINE FEED (LF) and U+000D CARRIAGE
    RETURN (CR) characters.</p>

    <p class="note">Comments must be on a line on their own. If they
    were to be included on a line with a URI, the "#" would be
    mistaken for part of a fragment identifier.</p>

   <dt>A section header
   <dd>
    <p>Section headers change the current section. There are three
    possible section headers:

    <dl>

     <dt><code>CACHE:</code>
     <dd>Switches to the explicit section.

     <dt><code>FALLBACK:</code>
     <dd>Switches to the fallback section.

     <dt><code>NETWORK:</code>
     <dd>Switches to the online whitelist section.

    </dl>

    <p>Section header lines must consist of zero or more U+0020 SPACE
    and U+0009 CHARACTER TABULATION (tab) characters, followed by one
    of the names above (including the U+003A COLON (:) character)
    followed by zero or more U+0020 SPACE and U+0009 CHARACTER
    TABULATION (tab) characters.</p>

    <p>Ironically, by default, the current section is the explicit
    section.</p>

   <dt>Data for the current section
   <dd>
    <p>The format that data lines must take depends on the current
    section.</p>

    <p>When the current section is the explicit section or the online
    whitelist section, data lines must consist of zero or more U+0020
    SPACE and U+0009 CHARACTER TABULATION (tab) characters, a valid
    URI reference or IRI reference to a resource other than the
    manifest itself, and then zero or more U+0020 SPACE and U+0009
    CHARACTER TABULATION (tab) characters. <a
    href="#refsRFC3986">[RFC3986]</a> <a
    href="#refsRFC3987">[RFC3987]</a></p>

    <p>When the current section is the fallback section, data lines
    must consist of zero or more U+0020 SPACE and U+0009 CHARACTER
    TABULATION (tab) characters, a valid URI reference or IRI
    reference to a resource other than the manifest itself, one or
    more U+0020 SPACE and U+0009 CHARACTER TABULATION (tab)
    characters, another valid URI reference or IRI reference to a
    resource other than the manifest itself, and then zero or more
    U+0020 SPACE and U+0009 CHARACTER TABULATION (tab) characters. <a
    href="#refsRFC3986">[RFC3986]</a> <a
    href="#refsRFC3987">[RFC3987]</a></p>

    <p class="note">The URI or IRI references in data lines can't be
    empty strings, since those would be relative URIs to the manifest
    itself. Such lines would be confused with blank or invalid lines,
    anyway.</p>

  </dl>

  <p>Manifests may contain sections more than once. Sections may be
  empty.</p>

  <p>URIs that are to be fallback pages associated with <span
  title="concept-appcache-oppcache-ns">opportunistic caching
  namespaces</span>, and those namespaces themselves, must be given in
  fallback sections, with the namespace being the first URI of the
  data line, and the corresponding fallback page being the second
  URI. All the other pages to be cached must be listed in explicit
  sections.</p>

  <p><span title="concept-appcache-oppcache-ns">Opportunistic caching
  namespaces</span> must have the <span>same scheme/host/port</span>
  as the manifest itself.</p>

  <p>An opportunistic caching namespace must not be listed more than
  once.</p>

  <p>URIs that the user agent is to put into the <span
  title="concept-appcache-onlinewhitelist">online whitelist</span>
  must all be specified in online whitelist sections. (This is needed
  for any URI that the page is intending to use to communicate back to
  the server.)</p>

  <p>URIs in the online whitelist section must not also be listed in
  explicit section, and must not be listed as fallback entries in the
  fallback section. (URIs in the online whitelist section may match
  opportunistic caching namespaces, however.)</p>

  <p>Relative URIs must be given relative to the manifest's own
  URI.</p>

  <p>URIs in manifests must not have fragment identifiers.</p>


  <h5>Parsing cache manifests</h5>

  <p>When a user agent is to <dfn>parse a manifest</dfn>, it means
  that the user agent must run the following steps:</p>

  <ol>
   
   <li><p>The user agent must decode the bytestream corresponding with
   the manifest to be parsed, treating it as UTF-8. Bytes or sequences
   of bytes that are not valid UTF-8 sequences must be interpreted as
   a U+FFFD REPLACEMENT CHARACTER. All U+0000 NULL characters must be
   replaced by U+FFFD REPLACEMENT CHARACTERs.</p></li>

   <li><p>Let <var title="">explicit URIs</var> be an initially empty
   list of <span title="concept-appcache-explicit">explicit
   entries</span>.</p></li>

   <li><p>Let <var title="">fallback URIs</var> be an initially empty
   mapping of <span title="concept-appcache-oppcache-ns">opportunistic
   caching namespaces</span> to <span
   title="concept-appcache-fallback">fallback entries</span>.</p></li>

   <li><p>Let <var title="">online whitelist URIs</var> be an
   initially empty list of URIs for a <span
   title="concept-appcache-onlinewhitelist">online
   whitelist</span>.</p></li>

   <li><p>Let <var title="">input</var> be the decoded text of the
   manifest's bytestream.</p></li>

   <li><p>Let <var title="">position</var> be a pointer into <var
   title="">input</var>, initially pointing at the first
   character.</p></li>

   <li><p>If <var title="">position</var> is pointing at a U+FEFF BYTE
   ORDER MARK (BOM) character, then advance <var
   title="">position</var> to the next character.</p></li>

   <li><p>If the characters starting from <var title="">position</var>
   are "CACHE", followed by a U+0020 SPACE character, followed by
   "MANIFEST", then advance <var title="">position</var> to the next
   character after those. Otherwise, this isn't a cache manifest;
   abort this algorithm with a failure while checking for the magic
   signature.</p></li>

   <li><p><span>Collect a sequence of characters</span> that are
   U+0020 SPACE or U+0009 CHARACTER TABULATION (tab)
   characters.</p></li>

   <li><p>If <var title="">position</var> is not past the end of <var
   title="">input</var> and the character at <var
   title="">position</var> is neither a U+000A LINE FEED (LF)
   characters nor a U+000D CARRIAGE RETURN (CR) character, then this
   isn't a cache manifest; abort this algorithm with a failure while
   checking for the magic signature.</p></li>

   <li><p>This is a cache manifest. The algorithm cannot fail beyond
   this point (though bogus lines can get ignored).</p></li>

   <li><p>Let <var title="">mode</var> be "explicit".</p></li>

   <li><p><em>Start of line</em>: If <var title="">position</var> is
   past the end of <var title="">input</var>, then jump to the last
   step. Otherwise, <span>collect a sequence of characters</span> that
   are U+000A LINE FEED (LF), U+000D CARRIAGE RETURN (CR), U+0020
   SPACE, or U+0009 CHARACTER TABULATION (tab) characters.</p></li>

   <li><p>Now, <span>collect a sequence of characters</span> that are
   <em>not</em> U+000A LINE FEED (LF) or U+000D CARRIAGE RETURN (CR)
   characters, and let the result be <var
   title="">line</var>.</p></li>

   <li><p>Drop any trailing U+0020 SPACE, or U+0009 CHARACTER
   TABULATION (tab) characters at the end of <var
   title="">line</var>.</p></li>

   <li><p>If <var title="">line</var> is the empty string, then jump
   back to the step labelled "start of line".</p></li>

   <li><p>If the first character in <var title="">line</var> is a
   U+0023 NUMBER SIGN (#) character, then jump back to the step
   labelled "start of line".</p></li>

   <li><p>If <var title="">line</var> equals "CACHE:" (the word
   "CACHE" followed by a U+003A COLON (:) character), then set <var
   title="">mode</var> to "explicit" and jump back to the step
   labelled "start of line".</p></li>

   <li><p>If <var title="">line</var> equals "FALLBACK:" (the word
   "FALLBACK" followed by a U+003A COLON (:) character), then set <var
   title="">mode</var> to "fallback" and jump back to the step
   labelled "start of line".</p></li>

   <li><p>If <var title="">line</var> equals "NETWORK:" (the word
   "NETWORK" followed by a U+003A COLON (:) character), then set <var
   title="">mode</var> to "online whitelist" and jump back to the step
   labelled "start of line".</p></li>

   <li>

    <p>This is either a data line or it is syntactically incorrect.</p>

    <dl class="switch">

     <dt>If <var title="">mode</var> is "explicit"</dt>

     <dd>

      <p>If <var title="">line</var> is not a syntactically valid URI
      reference or IRI reference, then jump back to the step labelled
      "start of line".</p>

      <p>Otherwise, resolve the URI reference or IRI reference to an
      absolute URI or IRI, and drop the fragment identifier, if any.</p>

      <p>Now, if the resource's URI has a different &lt;scheme>
      component than the manifest's URI (compared
      case-insensitively<!-- XXX ASCII -->), then jump back to the
      step labelled "start of line".</p>

      <p>Otherwise, add this URI to the <var title="">explicit
      URIs</var>.</p>

     </dd>

     <dt>If <var title="">mode</var> is "fallback"</dt>

     <dd>

      <p>If <var title="">line</var> does not contain at least one
      U+0020 SPACE or U+0009 CHARACTER TABULATION (tab) character,
      then jump back to the step labelled "start of line".</p>

      <p>Otherwise, let everything before the first U+0020 SPACE or
      U+0009 CHARACTER TABULATION (tab) character in <var
      title="">line</var> be <var title="">part one</var>, and let
      everything after the first U+0020 SPACE or U+0009 CHARACTER
      TABULATION (tab) character in <var title="">line</var> be <var
      title="">part two</var>.</p>

      <p>Strip any leading U+0020 SPACE or U+0009 CHARACTER TABULATION
      (tab) characters in <var title="">part two</var>.</p>

      <p>If <var title="">part one</var> and <var title="">part
      two</var> are not both syntactically valid URI or IRI
      references, then jump back to the step labelled "start of
      line".</p>

      <p>Resolve the URI or IRI references in <var title="">part
      one</var> and <var title="">part two</var> to absolute URIs or
      IRIs.</p>

      <p>If the absolute URI or IRI corresponding to <var
      title="">part one</var> is already in the <var title="">fallback
      URIs</var> mapping as an <span
      title="concept-appcache-oppcache-ns">opportunistic caching
      namespace</span>, then jump back to the step labelled "start of
      line".</p>

      <p>If the absolute URI or IRI corresponding to <var
      title="">part one</var> does not have the <span>same
      scheme/host/port</span> as the manifest's URI, then jump back to
      the step labelled "start of line".</p> <!-- SECURITY -->

      <p>If the absolute URI or IRI corresponding to <var
      title="">part two</var> has a different &lt;scheme> component
      than the manifest's URI (compared case-insensitively<!-- XXX
      ASCII -->), then jump back to the step labelled "start of
      line".</p>

      <p>Otherwise, add the absolute URI or IRI corresponding to <var
      title="">part one</var> to the <var title="">fallback URIs</var>
      mapping as an <span
      title="concept-appcache-oppcache-ns">opportunistic caching
      namespace</span>, mapped to the absolute URI corresponding to
      <var title="">part two</var> as the <span
      title="concept-appcache-fallback">fallback entry</span>.</p>

     </dd>

     <dt>If <var title="">mode</var> is "online whitelist"</dt>

     <dd>

      <p>If <var title="">line</var> is not a syntactically valid URI
      reference or IRI reference, then jump back to the step labelled
      "start of line".</p>

      <p>Otherwise, resolve the URI reference or IRI reference to an
      absolute URI or IRI, and drop the fragment identifier, if any.</p>

      <p>Now, if the resource's URI has a different &lt;scheme>
      component than the manifest's URI, then jump back to the step
      labelled "start of line".</p>

      <p>Otherwise, add this URI to the <var title="">online whitelist
      URIs</var>.</p>

     </dd>

    </dl>

   </li>

   <li><p>Jump back to the step labelled "start of line". (That step
   jumps to the next, and last, step when the end of the file is
   reached.)</p></li>

   <li><p>Return the <var title="">explicit URIs</var> list, the <var
   title="">fallback URIs</var> mapping, and the <var title="">online
   whitelist URIs</var>.</p></li>

  </ol>

  <p>Relative URI references and IRI references resolved to absolute
  URIs or IRIs in the above algorithm must use the manifest's URI as
  the Base URI from the Retrieval URI for the purposes reference
  resolution as defined by RFC 3986. <a
  href="#refsRFC3986">[RFC3986]</a></p>

  <p class="note">If a resource is listed in both the online whitelist
  and in the explicit section, then that resource will be downloaded
  and cached, but when the page tries to use this resource, the user
  agent will ignore the cached copy and attempt to fetch the file from
  the network. Indeed, the cached copy will only be used if it is
  opened from a top-level browsing context.</p>


  <h4>Updating an application cache</h4>

  <p>When the user agent is required (by other parts of this
  specification) to start the <dfn>application cache update
  process</dfn>, the user agent must run the following steps:</p>

  <p class="big-issue">the event stuff needs to be more consistent --
  something about showing every step of the ui or no steps or
  something; and we need to deal with showing ui for browsing contexts
  that open when an update is already in progress, and we may need to
  give applications control over the ui the first time they cache
  themselves (right now the original cache is done without
  notifications to the browsing contexts)</p>

  <ol>

   <li><p>Let <var title="">manifest URI</var> be the URI of the <span
   title="concept-appcache-manifest">manifest</span> of the cache to
   be updated.</p></li>

   <li><p>Let <var title="">cache group</var> be the group of <span
   title="application cache">application caches</span> identified by
   <var title="">manifest URI</var>.</p></li>

   <li><p>Let <var title="">cache</var> be the most recently updated
   <span>application cache</span> identified by <var title="">manifest
   URI</var> (that is, the newest version found in <var title="">cache
   group</var>).</p></li>

   <li><p>If the <span title="concept-appcache-status">status</span>
   of the <var title="">cache group</var> is either <i>checking</i> or
   <i>downloading</i>, then abort these steps, as an update is already
   in progress for them. Otherwise, set the <span title="concept-appcache-status">status</span> of this group of
   caches to <i>checking</i>. This entire step must be performed as
   one atomic operation so as to avoid race conditions.</p></li>

   <li>

    <p>If there is already a resource with the URI of <var
    title="">manifest URI</var> in <var title="">cache</var>, and
    that resource is categorised as a <span
    title="concept-appcache-manifest">manifest</span>, then this is an
    <dfn title="concept-appcache-upgrade">upgrade
    attempt</dfn>. Otherwise, this is a <dfn
    title="concept-appcache-cache">cache attempt</dfn>.</p>

    <p class="note">If this is a <span
    title="concept-appcache-cache">cache attempt</span>, then <var
    title="">cache</var> is forcibly the only application cache in
    <var title="">cache group</var>, and it hasn't ever been populated
    from its manifest (i.e. this update is an attempt to download the
    application for the first time). It also can't have any browsing
    contexts associated with it.</p>

   </li>

   <li>

    <p><span>Fire a simple event</span> called <code
    title="event-checking">checking</code> at the
    <code>ApplicationCache</code> singleton of each <span>top-level
    browsing context</span> that is associated with a cache in <var
    title="">cache group</var>. The default action of this event
    should be the display of some sort of user interface indicating to
    the user that the user agent is checking for the availability of
    updates.</p>

   </li>

   <li>

    <p>Fetch the resource from <var title="">manifest URI</var>, and
    let <var title="">manifest</var> be that resource.</p>

    <p>If the resource is labelled with the MIME type <code
    title="">text/cache-manifest</code>, parse <var
    title="">manifest</var> according to the <span title="parse a
    manifest">rules for parsing manifests</span>, obtaining a list of
    <span title="concept-appcache-explicit">explicit entries</span>,
    <span title="concept-appcache-fallback">fallback entries</span>
    and the <span title="concept-appcache-oppcache-ns">opportunistic
    caching namespaces</span> that map to them, and entries for the
    <span title="concept-appcache-onlinewhitelist">online
    whitelist</span>.</p>

   </li>

   <li>

    <p>If the previous step fails (e.g. the server returns a 4xx or
    5xx response or equivalent, or there is a DNS error, or the
    connection times out, or the parser for manifests fails when
    checking the magic signature), or if the resource is labelled with
    a MIME type other than <code title="">text/cache-manifest</code>,
    then run these substeps:</p>

    <ol>

     <li><p><span>Fire a simple event</span> called <code
     title="event-error">error</code> at the
     <code>ApplicationCache</code> singleton of each <span>top-level
     browsing context</span> that is associated with a cache in <var
     title="">cache group</var>. The default action of this event
     should be the display of some sort of user interface indicating
     to the user that the user agent failed to save the application
     for offline use.</p></li>

     <li><p>If this is a <span title="concept-appcache-cache">cache
     attempt</span>, then discard <var title="">cache</var> and abort
     the update process, optionally alerting the user to the
     failure.</p></li>

     <li><p>Otherwise, jump to the last step in the overall set of
     steps of the update process.</p></li>

    </ol>

   </li>

   <li><p>If this is an <span title="concept-appcache-upgrade">upgrade
   attempt</span> and the newly downloaded <var
   title="">manifest</var> is byte-for-byte identical to the manifest
   found in <var title="">cache</var>, or if the server reported it as
   "304 Not Modified" or equivalent, then <span>fire a simple
   event</span> called <code title="event-noupdate">noupdate</code> at
   the <code>ApplicationCache</code> singleton of each <span>top-level
   browsing context</span> that is associated with a cache in <var
   title="">cache group</var>. The default action of this event should
   be the display of some sort of user interface indicating to the
   user that the application is up to date. Then, jump to the last
   step of the update process.</p></li>

   <li><p>Set the <span title="concept-appcache-status">status</span> of <var title="">cache group</var> to
   <i>downloading</i>.</p></li>

   <li><p><span>Fire a simple event</span> called <code
   title="event-downloading">downloading</code> at the
   <code>ApplicationCache</code> singleton of each <span>top-level
   browsing context</span> that is associated with a cache in <var
   title="">cache group</var>. The default action of this event should
   be the display of some sort of user interface indicating to the
   user that a new version is being downloaded.</p></li>

   <li><p>If this is an <span title="concept-appcache-upgrade">upgrade
   attempt</span>, then let <var title="">new cache</var> be a newly
   created <span>application cache</span> identified by <span
   title="">manifest URI</span>, being a new version in <var
   title="">cache group</var>. Otherwise, let <var title="">new
   cache</var> and <var title="">cache</var> be the same version of
   the application cache.</p></li>

   <li><p>Let <var title="">file list</var> be an empty list of
   URIs with flags.</p></li>

   <li><p>Add all the URIs in the list of <span
   title="concept-appcache-explicit">explicit entries</span> obtained
   by parsing <var title="">manifest</var> to <var title="">file
   list</var>, each flagged with "explicit entry".</p></li>

   <li><p>Add all the URIs in the list of <span
   title="concept-appcache-fallback">fallback entries</span> obtained
   by parsing <var title="">manifest</var> to <var title="">file
   list</var>, each flagged with "fallback entry".</p></li>

   <li><p>If this is an <span title="concept-appcache-upgrade">upgrade
   attempt</span>, then add all the URIs of <span
   title="concept-appcache-oppcache">opportunistically cached
   entries</span> in <var title="">cache</var> that <span
   title="concept-appcache-matches-oppcache">match</span> the <span
   title="concept-appcache-oppcache-ns">opportunistic caching
   namespaces</span> obtained by parsing <var title="">manifest</var>
   to <var title="">file list</var>, each flagged with "opportunistic
   entry".</p></li>

   <li><p>If this is an <span title="concept-appcache-upgrade">upgrade
   attempt</span>, then add all the URIs of <span
   title="concept-appcache-implicit">implicit entries</span> in <var
   title="">cache</var> to <var title="">file list</var>, each flagged
   with "implicit entry".</p></li>

   <li><p>If this is an <span title="concept-appcache-upgrade">upgrade
   attempt</span>, then add all the URIs of <span
   title="concept-appcache-dynamic">dynamic entries</span> in <var
   title="">cache</var> to <var title="">file list</var>, each flagged
   with "dynamic entry".</p></li>

   <li><p>If any URI is in <var title="">file list</var> more than
   once, then merge the entries into one entry for that URI, that
   entry having all the flags that the original entries had.</p></li>

   <li>

    <p>For each URI in <var title="">file list</var>, run the
    following steps:</p>

    <ol>

     <li><p><span>Fire a simple event</span> called <code
     title="event-progress">progress</code> at the
     <code>ApplicationCache</code> singleton of each <span>top-level
     browsing context</span> that is associated with a cache in <var
     title="">cache group</var>. The default action of this event
     should be the display of some sort of user interface indicating
     to the user that a file is being downloaded in preparation for
     updating the application.</p></li> <!-- XXX need to include
     progress information -->

     <li><p>Fetch the resource. If this is an <span
     title="concept-appcache-upgrade">upgrade attempt</span>, then use
     <var title="">cache</var> as an HTTP cache, and honour HTTP
     caching semantics (such as expiration, ETags, and so forth) with
     respect to that cache. User agents may also have other caches in
     place that are also honored.</p></li>

     <li>

      <p>If the previous steps fails (e.g. the server returns a 4xx or
      5xx response or equivalent, or there is a DNS error, or the
      connection times out), then run these substeps:</p>

      <ol>

       <li><p><span>Fire a simple event</span> called <code
       title="event-error">error</code> at the
       <code>ApplicationCache</code> singleton of each <span>top-level
       browsing context</span> that is associated with a cache in <var
       title="">cache group</var>. The default action of this event
       should be the display of some sort of user interface indicating
       to the user that the user agent failed to save the application
       for offline use.</p></li>

       <li><p>If this is a <span title="concept-appcache-cache">cache
       attempt</span>, then discard <var title="">cache</var> and
       abort the update process, optionally alerting the user to the
       failure.</p></li>

       <li><p>Otherwise, jump to the last step in the overall set of
       steps of the update process.</p></li>

      </ol>

     </li>

     <li><p>Otherwise, the fetching succeeded. Store the resource in
     the <var title="">new cache</var>.</p></li>

     <li><p>If the URI being processed was flagged as an "explicit
     entry" in <var title="">file list</var>, then categorise the
     entry as an <span title="concept-appcache-explicit">explicit
     entry</span>.</p></li>

     <li><p>If the URI being processed was flagged as a "fallback
     entry" in <var title="">file list</var>, then categorise the
     entry as a <span title="concept-appcache-fallback">fallback
     entry</span>.</p></li>

     <li><p>If the URI being processed was flagged as a "opportunistic
     entry" in <var title="">file list</var>, then categorise the
     entry as an <span
     title="concept-appcache-oppcache">opportunistically cached
     entry</span>.</p></li>

     <li><p>If the URI being processed was flagged as an "implicit
     entry" in <var title="">file list</var>, then categorise the
     entry as a <span title="concept-appcache-implicit">implicit
     entry</span>.</p></li>

     <li><p>If the URI being processed was flagged as an "dynamic
     entry" in <var title="">file list</var>, then categorise the
     entry as a <span title="concept-appcache-dynamic">dynamic
     entry</span>.</p></li>

    </ol>

   </li>

   <li><p>Store <var title="">manifest</var> in <var title="">new
   cache</var>, if it's not there already, and categorise this entry
   (whether newly added or not) as <span
   title="concept-appcache-manifest">the manifest</span>.</p></li>

   <li><p>Store the list of <span
   title="concept-appcache-oppcache-ns">opportunistic caching
   namespaces</span>, and the URIs of the <span
   title="concept-appcache-fallback">fallback entries</span> that they
   map to, in the new cache.</p></li>

   <li><p>Store the URIs that form the new <span
   title="concept-appcache-onlinewhitelist">online whitelist</span> in
   the new cache.</p></li>

   <li>

    <p>If this is a <span title="concept-appcache-cache">cache
    attempt</span>, then:</p>

    <p>Set the <span title="concept-appcache-status">status</span> of <var title="">cache group</var> to
    <i>idle</i>.</p>

    <p>Associate any <code>Document</code> objects that were <a
    href="#flagAsCandidateForCache">flagged as candidates</a> for this
    manifest URI's caches with <var title="">cache</var>.</p>

    <p><span>Fire a simple event</span> called <code
    title="event-cached">cached</code> at the
    <code>ApplicationCache</code> singleton of each <span>top-level
    browsing context</span> that is associated with a cache in <var
    title="">cache group</var>. The default action of this event
    should be the display of some sort of user interface indicating to
    the user that the application has been cached and that they can
    now use it offline.</p>

   </li>

   <li>

    <p>Otherwise, this is an <span
    title="concept-appcache-upgrade">upgrade attempt</span>:</p>

    <p>Set the <span title="concept-appcache-status">status</span> of
    <var title="">cache group</var> to <i>idle</i>.</p>

    <p><span>Fire a simple event</span> called <code
    title="event-updateready">updateready</code> at the
    <code>ApplicationCache</code> singleton of each <span>top-level
    browsing context</span> that is associated with a cache in <var
    title="">cache group</var>. The default action of this event
    should be the display of some sort of user interface indicating to
    the user that a new version is available and that they can
    activate it by reloading the page.</p>

   </li>

   <li><p>Abort these steps. The following step is jumped to by
   various parts of the algorithm above when they have to cancel the
   update.</p></li>

   <li><p>Let the <span title="concept-appcache-status">status</span>
   of the group of caches to which <var title="">cache</var> belongs
   be <i>idle</i>. If appropriate, remove any user interface
   indicating that an update for this cache is in progress.</p></li>

  </ol>


  <h4>Processing model</h4>

  <p>The processing model of application caches for offline support in
  Web applications is part of the <span
  title="navigate">navigation</span> model, but references the
  algorithms defined in this section.</p>

  <p>A URI <dfn title="concept-appcache-matches-oppcache">matches an
  opportunistic caching namespace</dfn> if there exists an
  <span>application cache</span> whose <span
  title="concept-appcache-manifest">manifest</span>'s URI has the
  <span>same scheme/host/port</span> as the URI in question, and if
  that application cache has an <span
  title="concept-appcache-oppcache-ns">opportunistic caching
  namespace</span> with a &lt;path&gt; component that exactly matches
  the start of the &lt;path&gt; component of the URI being
  examined. If multiple opportunistic caching namespaces match the
  same URI, the one with the longest &lt;path&gt; component is the one
  that matches. A URI looking for an opportunistic caching namespace
  can match more than one application cache at a time, but only
  matches one namespace in each cache.</p>

  <div class="example">

   <p>If a manifest <code
   title="">http://example.com/app1/manifest</code> declares that
   <code title="">http://example.com/resources/images</code> should be
   opportunistically cached, and the user navigates to <code
   title="">http://example.com/resources/images/cat.png</code>, then
   the user agent will decide that the application cache identified by
   <code title="">http://example.com/app1/manifest</code> contains a
   namespace with a match for that URI.</p>

  </div>

  <p>When the <dfn
  title="concept-appcache-init-with-attribute">application cache
  selection algorithm</dfn> algorithm is invoked with a manifest URI,
  the user agent must run the first applicable set of steps from the
  following list:</p>

  <dl class="switch">

   <dt>If the resource is not being loaded as part of navigation of a
   <span>top-level browsing context</span></dt>

   <dd>

    <p>As an optimisation, if the resource was loaded from an
    <span>application cache</span>, and the manifest URI of that cache
    doesn't match the manifest URI with which the algorithm was
    invoked, then the user agent should mark the entry in that
    application cache corresponding to the resource that was just
    loaded as being <span
    title="concept-appcache-foreign">foreign</span>.</p>

    <p>Other than that, nothing special happens with respect to
    application caches.</p>

   </dd>

   <!-- otherwise, we're talking top-level browsing contexts only: -->

   <dt>If the resource being loaded was loaded from an application
   cache and the URI of that application cache's manifest is the
   same as the manifest URI with which the algorithm was invoked</dt>
   <dd>
    <p>Associate the <code>Document</code> with the cache from which
    it was loaded. Invoke the <span>application cache update
    process</span>.</p>
   </dd>


   <dt>If the resource being loaded was loaded from an application
   cache and the URI of that application cache's manifest is
   <em>not</em> the same as the manifest URI with which the algorithm
   was invoked</dt>

   <dd>

    <p>Mark the entry for this resource in the application cache from
    which it was loaded as <span
    title="concept-appcache-foreign">foreign</span>.</p>

    <p>Restart the current navigation from the top of the <span
    title="navigate">navigation algorithm</span>, undoing any changes
    that were made as part of the initial load (changes can be avoided
    by ensuring that the step to <span>update the session history with
    the new page</span> is only ever completed <em>after</em> the
    application cache selection algorithm is run, though this is not
    required).</p>

    <p class="note">The navigation will not result in the same
    resource being loaded, because "foreign" entries are never picked
    during navigation.</p>

    <p>User agents may notify the user of the inconsistency between
    the cache manifest and the resource's own metadata, to aid in
    application development.</p>

   </dd>


   <dt>If the resource being loaded was not loaded from an application
   cache, but it was loaded using HTTP GET or equivalent</dt>
   <dd>

    <ol>

     <li><p>If the manifest URI does not have the <span>same
     scheme/host/port</span> as the resource's own URI, then invoke
     the <span title="concept-appcache-init-no-attribute">application
     cache selection algorithm</span> again, but without a manifest,
     and abort these steps.</p></li>

     <li><p>If there is already an <span>application cache</span>
     identified by this manifest URI, and that <span>application
     cache</span> contains a resource with the URI of the manifest,
     and that resource is categorised as a <span
     title="concept-appcache-manifest">manifest</span>, then: store
     the resource in the matching cache with the most up to date
     version, categorised as an <span
     title="concept-appcache-implicit">implicit entry</span>,
     associate the <code>Document</code> with that cache, invoke the
     <span>application cache update process</span>, and abort these
     steps.</p></li>

     <li id="flagAsCandidateForCache"><p>Flag the resource's
     <code>Document</code> as a candidate for this manifest URI's
     caches.</p></li>

     <li><p>If there is already an <span>application cache</span>
     identified by this manifest URI, then that <span>application
     cache</span> does not yet contain a resource with the URI of the
     manifest, or it does but that resource is not yet categorised as
     a <span title="concept-appcache-manifest">manifest</span>: store
     the resource in that cache, categorised as an <span
     title="concept-appcache-implicit">implicit entry</span>
     (replacing the file's previous contents if it was already in the
     cache, but not removing any other categories it might have), and
     abort these steps.</p></li>

     <li><p>Otherwise, there is no matching <span>application
     cache</span>: create a new application cache identified by this
     manifest URI, store the resource in that cache, categorised as an
     <span title="concept-appcache-implicit">implicit entry</span>,
     and then invoke the <span>application cache update
     process</span>.</p></li>

    </ol>

   </dd>


   <dt>Otherwise</dt>
   <dd>
    <p>Invoke the <span
    title="concept-appcache-init-no-attribute">application cache
    selection algorithm</span> again, but without a manifest.</p>
   </dd>

  </dl>

  <p>When the <dfn
  title="concept-appcache-init-no-attribute">application cache
  selection algorithm</dfn> is invoked <em>without</em> a manifest,
  then: if the resource is being loaded as part of navigation of a
  <span>top-level browsing context</span>, and the resource was
  fetched from a particular <span>application cache</span>, then the
  user agent must associate the <code>Document</code> with that
  application cache and invoke the <span>application cache update
  process</span> for that cache; otherwise, nothing special happens
  with respect to application caches.</p>


  <h5>Changes to the networking model</h5>

  <p>When a browsing context is associated with an <span>application
  cache</span>, any and all resource loads must go through the
  following steps instead of immediately invoking the mechanisms
  appropriate to that resource's scheme:</p>

  <ol>

   <li><p>If the resource is not to be fetched using the HTTP GET
   mechanism or equivalent, then fetch the resource normally and abort
   these steps.</p></li>

   <li><p>If the resource's URI, ignoring its fragment identifier if
   any, is listed in the <span>application cache</span>'s <span
   title="concept-appcache-onlinewhitelist">online whitelist</span>,
   then fetch the resource normally and abort these steps.</p></li>

   <li><p>If the resource's URI is <span
   title="concept-appcache-implicit">an implicit entry</span>, <span
   title="concept-appcache-manifest">the manifest</span>, <span
   title="concept-appcache-explicit">an explicit entry</span>, <span
   title="concept-appcache-fallback">a fallback entry</span>, <span
   title="concept-appcache-oppcache">an opportunistically cached
   entry</span>, or a <span title="concept-appcache-dynamic">dynamic
   entry</span> in the <span>application cache</span>, then fetch the
   resource from the cache and abort these steps.</p></li>

   <li>

    <p>If the resource's URI has the <span>same
    scheme/host/port</span> as the manifest's URI, and the start of
    the resource's URI's &lt;path&gt; component is exactly matched by
    the &lt;path&gt; component of an <span
    title="concept-appcache-oppcache-ns">opportunistic caching
    namespace</span> in the <span>application cache</span>, then:

    <p>Fetch the resource normally. If this results 4xx or 5xx status
    codes or equivalent, or if there were network errors, then instead
    fetch, from the cache, the resource of the <span
    title="concept-appcache-fallback">fallback entry</span>
    corresponding to the namespace with the longest matching
    &lt;path&gt; component. Abort these steps.</p>

   </li>

   <li><p>Fail the resource load.</p></li>

  </ol>

  <p class="note">The above algorithm ensures that resources that are
  not present in the manifest will always fail to load (at least,
  after the cache has been primed the first time), making the testing
  of offline applications simpler.</p>


  <h4>Application cache API</h4>

  <pre class="idl">interface <dfn>ApplicationCache</dfn> {

  // <span title="concept-appcache-status">update status</span>
  const unsigned short <span title="dom-appcache-UNCACHED">UNCACHED</span> = 0;
  const unsigned short <span title="dom-appcache-IDLE">IDLE</span> = 1;
  const unsigned short <span title="dom-appcache-CHECKING">CHECKING</span> = 2;
  const unsigned short <span title="dom-appcache-DOWNLOADING">DOWNLOADING</span> = 3;
  const unsigned short <span title="dom-appcache-UPDATEREADY">UPDATEREADY</span> = 4;
  readonly attribute unsigned short <span title="dom-appcache-status">status</span>;

  // updates
  void <span title="dom-appcache-update">update</span>();
  void <span title="dom-appcache-swapCache">swapCache</span>();

  // dynamic entries
  readonly attribute unsigned long <span title="dom-appcache-length">length</span>;
  DOMString <span title="dom-appcache-item">item</span>(in unsigned long index);
  void <span title="dom-appcache-add">add</span>(in DOMString uri);
  void <span title="dom-appcache-remove">remove</span>(in DOMString uri);

  // events
           attribute <span>EventListener</span> <span title="handler-appcache-onchecking">onchecking</span>;
           attribute <span>EventListener</span> <span title="handler-appcache-onerror">onerror</span>;
           attribute <span>EventListener</span> <span title="handler-appcache-onnoupdate">onnoupdate</span>;
           attribute <span>EventListener</span> <span title="handler-appcache-ondownloading">ondownloading</span>;
           attribute <span>EventListener</span> <span title="handler-appcache-onprogress">onprogress</span>;
           attribute <span>EventListener</span> <span title="handler-appcache-onupdateready">onupdateready</span>;
           attribute <span>EventListener</span> <span title="handler-appcache-oncached">oncached</span>;

};</pre>

  <p>Objects implementing the <code>ApplicationCache</code> interface
  must also implement the <code>EventTarget</code> interface.</p>

  <p>There is a one-to-one mapping from <code>Document</code> objects
  to <code>ApplicationCache</code> objects. The <dfn
  title="dom-applicationCache"><code>applicationCache</code></dfn>
  attribute on <code>Window</code> objects must return the
  <code>ApplicationCache</code> object associated with the
  <span>active document</span> of the <code>Window</code>'s
  <span>browsing context</span>.</p>

  <p>An <code>ApplicationCache</code> object might be associated with
  an <span>application cache</span>. When the <code>Document</code>
  object that the <code>ApplicationCache</code> object maps to is
  associated with an application cache, then that is the application
  cache with which the <code>ApplicationCache</code> object is
  associated. Otherwise, the <code>ApplicationCache</code> object is
  associated with the application cache that the <code>Document</code>
  object's <span>browsing context</span> is associated with, if
  any.</p>

  <p>The <dfn title="dom-appcache-status"><code>status</code></dfn>
  attribute, on getting, must return the current state of the
  <span>application cache</span> <code>ApplicationCache</code> object
  is associated with, if any. This must be the appropriate value from
  the following list:</p>

  <dl>

   <dt><dfn title="dom-appcache-UNCACHED"><code>UNCACHED</code></dfn>
   (numeric value 0)</dt>

   <dd><p>The <code>ApplicationCache</code> object is not associated
   with an <span>application cache</span> at this time.</p></dd>

   <dt><dfn title="dom-appcache-IDLE"><code>IDLE</code></dfn>
   (numeric value 1)</dt>

   <dd><p>The <code>ApplicationCache</code> object is associated with
   an <span>application cache</span> whose group is in the <i>idle</i>
   <span title="concept-appcache-states">update status</span>, and
   that application cache is the newest cache in its group that
   contains a resource categorised as a <span
   title="concept-appcache-manifest">manifest</span>.</p></dd>

   <dt><dfn title="dom-appcache-CHECKING"><code>CHECKING</code></dfn>
   (numeric value 2)</dt>

   <dd><p>The <code>ApplicationCache</code> object is associated with
   an <span>application cache</span> whose group is in the
   <i>checking</i> <span title="concept-appcache-states">update
   status</span>.</p></dd>

   <dt><dfn title="dom-appcache-DOWNLOADING"><code>DOWNLOADING</code></dfn>
   (numeric value 3)</dt>

   <dd><p>The <code>ApplicationCache</code> object is associated with
   an <span>application cache</span> whose group is in the
   <i>downloading</i> <span title="concept-appcache-states">update
   status</span>.</p></dd>

   <dt><dfn title="dom-appcache-UPDATEREADY"><code>UPDATEREADY</code></dfn>
   (numeric value 4)</dt>

   <dd><p>The <code>ApplicationCache</code> object is associated with
   an <span>application cache</span> whose group is in the <i>idle</i>
   <span title="concept-appcache-states">update status</span>, but
   that application cache is <em>not</em> the newest cache in its
   group that contains a resource categorised as a <span
   title="concept-appcache-manifest">manifest</span>.</p></dd>

  </dl>

  <p>The <dfn title="dom-appcache-length"><code>length</code></dfn>
  attribute must return the number of <span
  title="concept-appcache-dynamic">dynamic entries</span> in the
  <span>application cache</span> with which the
  <code>ApplicationCache</code> object is associated, if any, and zero
  if the object is not associated with any application cache.</p>

  <p>The <span title="concept-appcache-dynamic">dynamic entries</span>
  in the <span>application cache</span> are ordered in the same order
  as they were added to the cache by the <code
  title="dom-appcache-add">add()</code> method, with the oldest entry
  being the zeroth entry, and the most recently added entry having the
  index <span><code
  title="dom-appcache-length">length</code>-1</span>.</p>

  <p>The <dfn title="dom-appcache-item"><code>item(<var
  title="">index</var>)</code></dfn> method must return the <span
  title="concept-appcache-dynamic">dynamic entries</span> with index
  <var title="">index</var> from the <span>application cache</span>,
  if one is associated with the <code>ApplicationCache</code>
  object. If the object is not associated with any application cache,
  or if the <var title="">index</var> argument is lower than zero or
  greater than <span><code
  title="dom-appcache-length">length</code>-1</span>, the method must
  instead raise an <code>INDEX_SIZE_ERR</code> exception.</p>

  <p>The <dfn title="dom-appcache-add"><code>add(<var
  title="">uri</var>)</code></dfn> method must run the following
  steps:</p>

  <ol>

   <li><p>If the <code>ApplicationCache</code> object is not
   associated with any application cache, then raise an
   <code>INVALID_STATE_ERR</code> exception and abort these
   steps.</p></li>

   <li><p>If there is already a resource in in the <span>application
   cache</span> with which the <code>ApplicationCache</code> object is
   associated that has the address <var title="">uri</var>, then
   ensure that entry is categorised as a <span
   title="concept-appcache-dynamic">dynamic entry</span> and return
   and abort these steps.</p></li>

   <li><p>If <var title="">uri</var> has a different &lt;scheme>
   component than the manifest's URI, then raise a <span>security
   exception</span>.</p></li>

   <li><p>Return, but do not abort these steps.</p></li>

   <li><p>Fetch the resource referenced by <var
   title="">uri</var>.</p></li>

   <li><p>If this results 4xx or 5xx status codes or equivalent, or if
   there were network errors, then abort these steps.</p></li>

   <li>

    <p>Wait for there to be no running scripts, or at least no running
    scripts that can reach an <code>ApplicationCache</code> object
    associated with the <span>application cache</span> with which this
    <code>ApplicationCache</code> object is associated.</p>

    <p>Add the fetched resource to the <span>application cache</span>
    and categorise it as a <span
    title="concept-appcache-dynamic">dynamic entry</span> before
    letting any such scripts resume.</p>
  
   </li>

  </ol>

  <p class="big-issue">We can make the add() API more usable
  (i.e. make it possible to detect progress and distinguish success
  from errors without polling and timeouts) if we have the method
  return an object that is a target of Progress Events, much like the
  <a
  href="http://dev.w3.org/cvsweb/~checkout~/2006/webapi/XMLHttpRequest-2/Overview.html?content-type=text/html;%20charset=utf-8#xmlhttprequesteventtarget-interface">XMLHttpRequestEventTarget</a>
  interface. This would also make this far more complex to spec and
  implement.</p>

  <p>The <dfn title="dom-appcache-remove"><code>remove(<var
  title="">uri</var>)</code></dfn> method must remove the <span
  title="concept-appcache-dynamic">dynamic entry</span> categorisation
  of any entry with the address <var title="">uri</var> in the
  <span>application cache</span> with which the
  <code>ApplicationCache</code> object is associated. If this removes
  the last categorisation of an entry in that cache, then the entry
  must be removed entirely (such that if it is re-added, it will be
  loaded from the network again). If the <code>ApplicationCache</code>
  object is not associated with any application cache, then the method
  must raise an <code>INVALID_STATE_ERR</code> exception instead.</p>

  <p>If the <dfn
  title="dom-appcache-update"><code>update()</code></dfn> method is
  invoked, the user agent must invoke the <span>application cache
  update process</span>, in the background, for the <span>application
  cache</span> with which the <code>ApplicationCache</code> object is
  associated. If there is no such application cache, then the method
  must raise an <code>INVALID_STATE_ERR</code> exception instead.</p>

  <p>If the <dfn
  title="dom-appcache-swapCache"><code>swapCache()</code></dfn> method
  is invoked, the user agent must run the following steps:

  <ol>

   <li><p>Let <var title="">document</var> be the
   <code>Document</code> with which the <code>ApplicationCache</code>
   object is associated.</p></li>

   <li>

    <p>Check that <var title="">document</var> is associated with an
    <span>application cache</span>. If it is not, then raise an
    <code>INVALID_STATE_ERR</code> exception and abort these
    steps.</p>

    <p class="note">This is not the same thing as the
    <code>ApplicationCache</code> object being itself associated with
    an <span>application cache</span>! In particular, the
    <code>Document</code> with which the <code>ApplicationCache</code>
    object is associated can only itself be associated with an
    application cache if it is in a <span>top-level browsing
    context</span>.</p>

   </li>

   <li><p>Let <var title="">cache</var> be the <span>application
   cache</span> with which the <code>ApplicationCache</code> object is
   associated. (By definition, this is the same as the one that was
   found in the previous step.)</p></li>

   <li><p>Check that there is an application cache in the same group
   as <var title="">cache</var> which has an entry categorised as a
   <span title="concept-appcache-manifest">manifest</span> that has is
   newer than <var title="">cache</var>. If there is not, then raise
   an <code>INVALID_STATE_ERR</code> exception and abort these
   steps.</p></li>

   <li><p>Let <var title="">new cache</var> be the newest
   <span>application cache</span> in the same group as <var
   title="">cache</var> which has an entry categorised as a <span
   title="concept-appcache-manifest">manifest</span>.</p></li>

   <li><p>Unassociate <var title="">document</var> from <var
   title="">cache</var> and instead associate it with <var
   title="">new cache</var>.</p></li>

  </ol>

  <p>The following are the <span>event handler DOM attributes</span>
  that must be supported by objects implementing the
  <code>ApplicationCache</code> interface:</p>

  <dl>

   <dt><dfn title="handler-appcache-onchecking"><code>onchecking</code></dfn></dt>

   <dd><p>Must be invoked whenever an <code
   title="event-checking">checking</code> event is targeted at or
   bubbles through the <code>ApplicationCache</code> object.</p></dd>


   <dt><dfn title="handler-appcache-onerror"><code>onerror</code></dfn></dt>

   <dd><p>Must be invoked whenever an <code
   title="event-error">error</code> event is targeted at or bubbles
   through the <code>ApplicationCache</code> object.</p></dd>


   <dt><dfn title="handler-appcache-onnoupdate"><code>onnoupdate</code></dfn></dt>

   <dd><p>Must be invoked whenever an <code
   title="event-noupdate">noupdate</code> event is targeted at or
   bubbles through the <code>ApplicationCache</code> object.</p></dd>


   <dt><dfn title="handler-appcache-ondownloading"><code>ondownloading</code></dfn></dt>

   <dd><p>Must be invoked whenever an <code
   title="event-downloading">downloading</code> event is targeted at
   or bubbles through the <code>ApplicationCache</code>
   object.</p></dd>


   <dt><dfn title="handler-appcache-onprogress"><code>onprogress</code></dfn></dt>

   <dd><p>Must be invoked whenever an <code
   title="event-progress">progress</code> event is targeted at or
   bubbles through the <code>ApplicationCache</code> object.</p></dd>


   <dt><dfn title="handler-appcache-onupdateready"><code>onupdateready</code></dfn></dt>

   <dd><p>Must be invoked whenever an <code
   title="event-updateready">updateready</code> event is targeted at
   or bubbles through the <code>ApplicationCache</code>
   object.</p></dd>


   <dt><dfn title="handler-appcache-oncached"><code>oncached</code></dfn></dt>

   <dd><p>Must be invoked whenever a <code
   title="event-cached">cached</code> event is targeted at or bubbles
   through the <code>ApplicationCache</code> object.</p></dd>

  </dl>


  <h4>Browser state</h4>

  <p>The <dfn
  title="dom-navigator-onLine"><code>navigator.onLine</code></dfn>
  attribute must return false if the user agent will not contact the
  network when the user follows links or when a script requests a
  remote page (or knows that such an attempt would fail), and must
  return true otherwise.</p>

  <p>When the value that would be returned by the <code
  title="dom-navigator-onLine">navigator.onLine</code> attribute of
  the <code>Window</code> changes from true to false, the user agent
  must <span>fire a simple event</span> called <dfn
  title="event-offline"><code>offline</code></dfn> at <span>the body
  element</span>.</p>

  <p>On the other hand, when the value that would be returned by the
  <code title="dom-navigator-onLine">navigator.onLine</code> attribute
  of the <code>Window</code> changes from false to true, the user
  agent must <span>fire a simple event</span> called <dfn
  title="event-online"><code>online</code></dfn> at <span>the body
  element</span>.</p>

  <!-- XXX ononline onoffline need to be defined -->



  <h3 id="history">Session history and navigation</h3>

  <h4>The session history of browsing contexts</h4>

  <p>The sequence of <code>Document</code>s in a <span>browsing
  context</span> is its <dfn>session history</dfn>.</p>

  <p><code>History</code> objects provide a representation of the
  pages in the session history of <span title="browsing
  context">browsing contexts</span>. Each browsing context has a
  distinct session history.</p>

  <p>Each <code>Document</code> object in a browsing context's session
  history is associated with a unique instance of the
  <code>History</code> object, although they all must model the same
  underlying session history.</p>

  <p>The <dfn title="dom-history"><code>history</code></dfn> attribute
  of the <code>Window</code> interface must return the object
  implementing the <code>History</code> interface for that
  <code>Window</code> object's <span>active document</span>.</p>

  <p><code>History</code> objects represent their <span>browsing
  context</span>'s session history as a flat list of <span
  title="session history entry">session history entries</span>. Each
  <dfn>session history entry</dfn> consists of either a URI or a
  <span>state object</span>, or both, and may in addition have a
  title, a <code>Document</code> object, form data, a scroll position,
  and other information associated with it.</p>

  <p class="note">This does not imply that the user interface need be
  linear. See the <a href="#history-notes">notes below</a>.</p>

  <p>URIs without associated <span title="state object">state
  objects</span> are added to the session history as the user (or
  script) navigates from page to page.</p>

  <p>A <dfn>state object</dfn> is an object representing a user
  interface state.</p>

  <p>Pages can <span title="dom-history-pushState">add</span> <span
  title="state object">state objects</span> between their entry in the
  session history and the next ("forward") entry. These are then <span
  title="event-popstate">returned to the script</span> when the user
  (or script) goes back in the history, thus enabling authors to use
  the "navigation" metaphor even in one-page applications.</p>

  <p>Every <code>Document</code> in the session history is defined to
  have a <dfn>last activated entry</dfn>, which is the <span>state
  object</span> entry associated with that <code>Document</code> which
  was most recently activated. Initially, the <span>last activated
  entry</span> of a <code>Document</code> must be the first entry for
  the <code>Document</code>, representing the fact that no <span>state
  object</span> entry has yet been activated.</p>

  <p>At any point, one of the entries in the session history is the
  <dfn>current entry</dfn>. This is the entry representing the
  <span>active document</span> of the <span>browsing
  context</span>. The <span>current entry</span> is usually an entry
  for the <span title="dom-location-href">location</span> of the
  <code>Document</code>. However, it can also be one of the entries
  for <span title="state object">state objects</span> added to the
  history by that document.</p>

  <p>Entries that consist of <span title="state object">state
  objects</span> share the same <code>Document</code> as the entry for
  the page that was active when they were added.</p>

  <p>Contiguous entries that differ just by fragment identifier also
  share the same <code>Document</code>.</p>

  <p class="note">All entries that share the same
  <code>Document</code> (and that are therefore merely different
  states of one particular document) are contiguous by definition.</p>

  <p>User agents may <dfn>discard</dfn> the DOMs of entries other than
  the <span>current entry</span> that are not referenced from any
  script, reloading the pages afresh when the user or script navigates
  back to such pages. This specification does not specify when user
  agents should discard pages' DOMs and when they should cache
  them. See the section on the <code title="event-load">load</code>
  and <code title="event-unload">unload</code> events for more
  details.</p> <!-- XXX crossref! -->

  <p>Entries that have had their DOM discarded must, for the purposes
  of the algorithms given below, act as if they had not. When the user
  or script navigates back or forwards to a page which has no
  in-memory DOM objects, any other entries that shared the same
  <code>Document</code> object with it must share the new object as
  well.</p>

  <p>When state object entries are added, a URI can be provided. This
  URI is used to replace the state object entry if the
  <code>Document</code> is evicted.</p>

  <p>When a user agent discards the DOM from an entry in the session
  history, it must also discard all the entries that share that
  <code>Document</code> but do not have an associated URI
  (i.e. entries that only have a <span>state object</span>). Entries
  that shared that <code>Document</code> object but had a state object
  and have a different URI must then have their <em>state objects</em>
  removed. Removed entries are not recreated if the user or script
  navigates back to the page. If there are no state object entries for
  that <code>Document</code> object then no entries are removed.</p>


  <h4>The <code>History</code> interface</h4>

  <pre class="idl">interface <dfn>History</dfn> {
  readonly attribute long <span title="dom-history-length">length</span>;
  void <span title="dom-history-go">go</span>(in long delta);
  void <span title="dom-history-go-0">go</span>();
  void <span title="dom-history-back">back</span>();
  void <span title="dom-history-forward">forward</span>();
  void <span title="dom-history-pushState">pushState</span>(in DOMObject data, in DOMString title);
  void <span title="dom-history-pushState">pushState</span>(in DOMObject data, in DOMString title, in DOMString url);
  void <span title="dom-history-clearState">clearState</span>();
};</pre>

  <p>The <dfn title="dom-history-length"><code>length</code></dfn>
  attribute of the <code>History</code> interface must return the
  number of entries in this <span>session history</span>.</p>

  <p>The actual entries are not accessible from script.</p>

  <p>The <dfn
  title="dom-history-go"><code>go(<var title="">delta</var>)</code></dfn>
  method causes the UA to move the number of steps specified by
  <var title="">delta</var> in the session history.</p>

  <p>If the index of the <span>current entry</span> plus
  <var title="">delta</var> is less than zero or greater than or equal to the
  <span title="dom-history-length">number of items in the session
  history</span>, then the user agent must do nothing.</p>

  <p>If the <var title="">delta</var> is zero, then the user agent must act as
  if the <code title="dom-location-reload">location.reload()</code>
  method was called instead.</p>

  <p>Otherwise, the user agent must cause the current <span>browsing
  context</span> to <span>traverse the history</span> to the specified
  entry, as described below. The <dfn>specified entry</dfn> is the one
  whose index equals the index of the <span>current entry</span> plus
  <var title="">delta</var>.</p>

  <p>When a user agent is required to <dfn>traverse the
  history</dfn><!-- (traversal) --> to a specified entry, the user
  agent must act as follows:</p>

  <ol>

   <li><p>If there is no longer a <code>Document</code> object for the
   entry in question, the user agent must <span>navigate</span> the
   browsing context to the location for that entry to preform an
   <span>entry update</span> of that entry, and abort these steps. The
   "<span>navigate</span>" algorithm reinvokes this "traverse"
   algorithm to complete the traversal, at which point there
   <em>is</em> a <code>Document</code> object and so this step gets
   skipped.</p></li>

   <li><p>If appropriate, update the <span>current entry</span> in the
   <span>browsing context</span>'s <code>Document</code> object's
   <code>History</code> object to reflect any state that the user
   agent wishes to persist.</p>
   <p class="example">For example, some user agents might want to
   persist the scroll position, or the values of form controls.</p>
   </li>

   <li><p>If the <span>specified entry</span> has a different
   <code>Document</code> object than the <span>current entry</span>
   then the user agent must run the following substeps:</p>

    <ol>

     <li>The user agent must move any properties that have been added
     to the browsing context's default view's <code>Window</code>
     object to the <span>active document</span>'s
     <code>Document</code>'s <span>list of added
     properties</span>.</li>

     <li>If the browsing context is a <span>top-level browsing
     context</span> (and not an <span>auxiliary browsing
     context</span>), and the <span>origin</span> of the
     <code>Document</code> of the <span>specified entry</span> is not
     the same as the <span>origin</span> of the <code>Document</code>
     of the <span>current entry</span>, then the following
     sub-sub-steps must be run:

      <ol>

       <li>The current <span>browsing context name</span> must be
       stored with all the entries in the history that are associated
       with <code>Document</code> objects with the same
       <span>origin</span> as the <span>active document</span>
       <em>and</em> that are contiguous with the <span>current
       entry</span>.</li>

       <li id="resetBCName">The browsing context's <span>browsing
       context name</span> must be unset.</li>

      </ol>

     </li>

     <li id="appcache-history-2">The user agent must make the
     <span>specified entry</span>'s <code>Document</code> object the
     <span>active document</span> of the <span>browsing
     context</span>. (If it is a <span>top-level browsing
     context</span>, this might <a
     href="#appcache-history-1">change</a> which <span>application
     cache</span> it is associated with.)</li>

     <li>If the <span>specified entry</span> has a <span>browsing
     context name</span> stored with it, then the following
     sub-sub-steps must be run:

      <ol>

       <li>The browsing context's <span>browsing context name</span>
       must be set to the name stored with the specified entry.</li>

       <li>Any <span>browsing context name</span> stored with the
       entries in the history that are associated with
       <code>Document</code> objects with the same <span>origin</span>
       as the new <span>active document</span>, and that are
       contiguous with the specified entry, must be cleared.</li>

      </ol>

     </li>

     <li>The user agent must move any properties that have been added
     to the <span>active document</span>'s <code>Document</code>'s
     <span>list of added properties</span> to browsing context's
     default view's <code>Window</code> object.</li>

    </ol>

   </li>

   <li><p>If there are any entries with state objects between the
   <span>last activated entry</span> for the <code>Document</code> of
   the <span>specified entry</span> and the <span>specified
   entry</span> itself (not inclusive), then the user agent must
   iterate through every entry between that <span>last activated
   entry</span> and the <span>specified entry</span>, starting with
   the entry closest to the <span>current entry</span>, and ending
   with the one closest to the <span>specified entry</span>. For each
   entry, if the entry is a state object, the user agent must
   <span>activate the state object</span>.</p></li>

   <li><p>If the <span>specified entry</span> is a state object or the
   first entry for a <code>Document</code>, the user agent must <span
   title="activate the state object">activate that
   entry</span>.</p></li>

   <li><p>If the <span>specified entry</span> has a URI that differs
   from the <span>current entry</span>'s only by its fragment
   identifier, and the two share the same <code>Document</code>
   object, then <span>fire a simple event</span> with the name
   <code>hashchanged</code> at <span>the <code>body</code>
   element</span>, and, if the new URI has a fragment identifier,
   <span>scroll to the fragment identifier</span>.</p></li>

   <li><p>User agents may also update other aspects of the document
   view when the location changes in this way, for instance the scroll
   position, values of form fields, etc.</p></li>

   <li><p>The <span>current entry</span> is now the <span>specified
   entry</span>.</p></li>

  </ol>

  <p class="big-issue">how does the changing of the global attributes
  affect .watch() when seen from other Windows?</p>

  <p>When the user navigates through a <span>browsing context</span>,
  e.g. using a browser's back and forward buttons, the user agent must
  translate this action into the equivalent invocations of the <code
  title="dom-history-go">history.go(<var title="">delta</var>)</code>
  method on the various affected <code
  title="dom-window">window</code> objects.</p>

  <p>Some of the other members of the <code>History</code> interface
  are defined in terms of the <code title="dom-history-go">go()</code>
  method, as follows:</p>

  <table>
   <tr>
    <th>Member</th>
    <th>Definition</th>
   </tr>
   <tr>
    <td><dfn title="dom-history-go-0"><code>go()</code></dfn></td>
    <td>Must do the same as <code title="dom-history-go">go(0)</code></td>
   </tr>
   <tr>
    <td><dfn title="dom-history-back"><code>back()</code></dfn></td>
    <td>Must do the same as <code title="dom-history-go">go(-1)</code></td>
   </tr>
   <tr>
    <td><dfn title="dom-history-forward"><code>forward()</code></dfn></td>
    <td>Must do the same as <code title="dom-history-go">go(1)</code></td>
   </tr>
  </table>
 
  <p>The <dfn title="dom-history-pushState"><code>pushState(<var
  title="">data</var>, <var title="">title</var>, <var
  title="">url</var>)</code></dfn> method adds a state object to the
  history.</p>

  <p>When this method is invoked, the user agent must first check the
  third argument. If a third argument is specified, then the user
  agent must verify that the third argument is a valid URI or IRI (as
  defined by RFC 3986 and 3987), and if so, that, after resolving it
  to an absolute URI, it is either identical to the document's URI, or
  that it differs from the document's URI only in the &lt;query&gt;,
  &lt;abs_path&gt;, and/or &lt;fragment&gt; parts, as applicable (the
  &lt;query&gt; and &lt;abs_path&gt; parts can only be the same if the
  document's URI uses a hierarchical &lt;scheme&gt;). If the
  verification fails (either because the argument is syntactically
  incorrect, or differs in a way not described as acceptable in the
  previous sentence) then the user agent must raise a <span>security
  exception</span>. <a href="#refsRFC3986">[RFC3986]</a> <a
  href="#refsRFC3987">[RFC3987]</a></p>

  <p>If the third argument passes its verification step, or if the
  third argument was omitted, then the user agent must remove from the
  <span>session history</span> any entries for that
  <code>Document</code> from the entry after the <span>current
  entry</span> up to the last entry in the session history that
  references the same <code>Document</code> object, if any. If the
  <span>current entry</span> is the last entry in the session history,
  or if there are no entries after the <span>current entry</span> that
  reference the same <code>Document</code> object, then no entries are
  removed.</p>

  <p>Then, the user agent must add a state object entry to the session
  history, after the <span>current entry</span>, with the specified
  <var title="">data</var> as the state object, the given <var
  title="">title</var> as the title, and, if the third argument is
  present, the given <var title="">url</var> as the URI of the
  entry.</p>

  <p>Then, the user agent must set this new entry as being the
  <span>last activated entry</span> for the <code>Document</code>.</p>

  <p>Finally, the user agent must update the <span>current
  entry</span> to be the this newly added entry.</p>

  <p class="note">The <var title="">title</var> is purely
  advisory. User agents might use the title in the user interface.</p>

  <p>User agents may limit the number of state objects added to the
  session history per page. If a page hits the UA-defined limit, user
  agents must remove the entry immediately after the first entry for
  that <code>Document</code> object in the session history after
  having added the new entry. (Thus the state history acts as a FIFO
  buffer for eviction, but as a LIFO buffer for navigation.)</p>

  <p>The <dfn
  title="dom-history-clearState"><code>clearState()</code></dfn>
  method removes all the state objects for the <code>Document</code>
  object from the session history.</p>

  <p>When this method is invoked, the user agent must remove from the
  session history all the entries from the first state object entry
  for that <code>Document</code> object up to the last entry that
  references that same <code>Document</code> object, if any.</p>

  <p>Then, if the <span>current entry</span> was removed in the
  previous step, the <span>current entry</span> must be set to the
  last entry for that <code>Document</code> object in the session
  history.</p>


  <h4><dfn title="activate the state object">Activating state object entries</dfn></h4>

  <p>When an entry in the session history is activated (which happens
  during <span title="traverse the history">session traversal</span>,
  as described above), the user agent must run the following
  steps:</p>

  <ol>

   <li><p>First, the user agent must set this new entry as being the
   <span>last activated entry</span> for the <code>Document</code> to
   which the entry belongs.</p></li>

   <li><p>If the entry is a <span>state object</span> entry, let <var
   title="">state</var> be that state object. Otherwise, the entry is
   the first entry for the <code>Document</code>; let <var
   title="">state</var> be null.</p></li>

   <li><p>The user agent must then fire a <dfn
   title="event-popstate"><code>popstate</code></dfn> event in no
   namespace on <span>the body element</span> using the
   <code>PopStateEvent</code> interface, with the <code
   title="dom-PopStateEvent-state">state</code> attribute set to the
   value of <var title="">state</var>. This event bubbles but is not
   cancelable and has no default action.</p></li>

  </ol>

  <!-- XXX onpopstate should be defined somewhere -->

  <pre class="idl">interface <dfn>PopStateEvent</dfn> : Event {
  readonly attribute DOMObject <span title="dom-PopStateEvent-state">state</span>;
  void <span title="dom-PopStateEvent-initPopStateEvent">initPopStateEvent</span>(in DOMString typeArg, in boolean canBubbleArg, in boolean cancelableArg, in DOMObject stateArg);
  void <span title="dom-PopStateEvent-initPopStateEventNS">initPopStateEventNS</span>(in DOMString namespaceURIArg, in DOMString typeArg, in boolean canBubbleArg, in boolean cancelableArg, in DOMObject stateArg);
};</pre>

  <p>The <dfn
  title="dom-PopStateEvent-initPopStateEvent"><code>initPopStateEvent()</code></dfn>
  and <dfn
  title="dom-PopStateEvent-initPopStateEventNS"><code>initPopStateEventNS()</code></dfn>
  methods must initialise the event in a manner analogous to the
  similarly-named methods in the DOM3 Events interfaces. <a
  href="#refsDOM3EVENTS">[DOM3EVENTS]</a></p>

  <p>The <dfn title="dom-PopStateEvent-state"><code>state</code></dfn>
  attribute represents the context information for the event, or null,
  if the state represented is the initial state of the
  <code>Document</code>.</p>



  <h4>The <code>Location</code> interface</h4>

  <p>Each <code>Document</code> object in a browsing context's session
  history is associated with a unique instance of a
  <code>Location</code> object.</p>

  <p>The <dfn
  title="dom-document-location"><code>location</code></dfn> attribute
  of the <code>HTMLDocument</code> interface must return the
  <code>Location</code> object for that <code>Document</code>
  object.</p>

  <p>The <dfn title="dom-location"><code>location</code></dfn>
  attribute of the <code>Window</code> interface must return the
  <code>Location</code> object for that <code>Window</code> object's
  <span>active document</span>.</p>

  <p><code>Location</code> objects provide a representation of the URI
  of their document, and allow the <span>current entry</span> of the
  <span>browsing context</span>'s session history to be changed, by
  adding or replacing entries in the <code
  title="dom-history">history</code> object.</p>

  <pre class="idl">interface <dfn>Location</dfn> {
  readonly attribute DOMString <span title="dom-location-href">href</span>;
  void <span title="dom-location-assign">assign</span>(in DOMString url);
  void <span title="dom-location-replace">replace</span>(in DOMString url);
  void <span title="dom-location-reload">reload</span>();

  // <span>URI decomposition attributes</span> <!-- blame brendan for these "innovative" names -->
           attribute DOMString <span title="dom-location-protocol">protocol</span>;
           attribute DOMString <span title="dom-location-host">host</span>;
           attribute DOMString <span title="dom-location-hostname">hostname</span>;
           attribute DOMString <span title="dom-location-port">port</span>;
           attribute DOMString <span title="dom-location-pathname">pathname</span>;
           attribute DOMString <span title="dom-location-search">search</span>;
           attribute DOMString <span title="dom-location-hash">hash</span>;
};</pre>

  <p>In the ECMAScript DOM binding, objects implementing this
  interface must stringify to the same value as the <code
  title="dom-location-href">href</code> attribute.</p>

  <p id="settingLocation">In the ECMAScript DOM binding, the <code
  title="">location</code> members of the <code>HTMLDocument</code>
  and <code>Window</code> interfaces behave as if they had a setter:
  user agents must treat attempts to set these <code
  title="">location</code> attributes as attempts at setting the <code
  title="dom-location-href">href</code> attribute of the relevant
  <code>Location</code> object instead.</p>

  <p>The <dfn title="dom-location-href"><code>href</code></dfn>
  attribute returns the address of the page represented by the
  associated <code>Document</code> object, as an absolute IRI
  reference.</p>

  <p>On setting, <!--XXX Mozilla does this, but IE doesn't. What
  should we do?: the behaviour depends on the context in which the
  script that set the attribute is running. If the script ran as the
  direct result of the execution of a <code>script</code> element in
  the document represented by the <code>Location</code> object's
  associated <code>Document</code> object, then the user agent must
  act as if the <code title="dom-location-replace">replace()</code>
  method had been called with the new value as its
  argument. Otherwise,--> the user agent must act as if the <code
  title="dom-location-assign">assign()</code> method had been called
  with the new value as its argument.</p><!-- XXX may wish to allow
  replace instead as a UI improvement --> <!-- XXX if we decide to
  make .href setters just be the same as calling assign(), then change
  the magic location setter above simply refer straight to assign() as
  well, so we don't have two levels of indirection -->

  <p>When the <dfn title="dom-location-assign"><code>assign(<var
  title="">url</var>)</code></dfn> method is invoked, the UA must
  <span>navigate</span> the <span>browsing context</span> to the
  specified <var title="">url</var>.</p>

  <p>When the <dfn title="dom-location-replace"><code>replace(<var
  title="">url</var>)</code></dfn> method is invoked, the UA must
  <span>navigate</span> to the specified <var title="">url</var> with
  <span>replacement enabled</span>.</p>

  <p>Relative <var title="">url</var> arguments for <code
  title="dom-location-assign">assign()</code> and <code
  title="dom-location-replace">replace()</code> must be resolved
  relative to the base URI of the script that made the method
  call.</p> <!-- XXX what about if the base URI is data: or
  javascript: or about: or something else without a way to resolve
  base URIs? -->

  <p>The <code>Location</code> interface also has the complement of
  <span>URI decomposition attributes</span>, <dfn
  title="dom-location-protocol"><code>protocol</code></dfn>, <dfn
  title="dom-location-host"><code>host</code></dfn>, <dfn
  title="dom-location-port"><code>port</code></dfn>, <dfn
  title="dom-location-hostname"><code>hostname</code></dfn>, <dfn
  title="dom-location-pathname"><code>pathname</code></dfn>, <dfn
  title="dom-location-search"><code>search</code></dfn>, and <dfn
  title="dom-location-hash"><code>hash</code></dfn>. These must follow
  the rules given for URI decomposition attributes, with the <span
  title="concept-uda-input">input</span> being the address of the page
  represented by the associated <code>Document</code> object, as an
  absolute IRI reference (same as the <code
  title="dom-location-href">href</code> attribute), and the <span
  title="concept-uda-setter">common setter action</span> being the same
  as setting the <code title="dom-location-href">href</code> attribute
  to the new output value.</p>

<!--
  <dfn title="dom-location-reload"><code>reload()</code></dfn>
  reload during resize event:
  redisplay the current page (without reloading it). This
  theoretically would have no effect but in practice can be useful to
  work around rendering bugs.

reload on shared Document updates all of them

user reload must be equivalent to .reload()
-->

  <h5>Security</h5>

  <p>User agents must raise a <span>security exception</span> whenever
  any of the members of a <code>Location</code> object are accessed by
  scripts whose <span>origin</span> is not the same as the
  <code>Location</code> object's associated <code>Document</code>'s
  origin, with the following exceptions:</p>

  <ul>
   <li>The <code title="dom-location-href">href</code> setter
  </ul>

  <p>User agents must not allow scripts to override the <code
  title="dom-location-href">href</code> attribute's setter.</p>


  <h4 id="history-notes">Implementation notes for session history</h4>

  <p><em>This section is non-normative.</em></p>

  <p>The <code>History</code> interface is not meant to place
  restrictions on how implementations represent the session history to
  the user.</p>

  <p>For example, session history could be implemented in a tree-like
  manner, with each page having multiple "forward" pages. This
  specification doesn't define how the linear list of pages in the
  <code title="dom-history">history</code> object are derived from the
  actual session history as seen from the user's perspective.</p>

  <p>Similarly, a page containing two <code>iframe</code>s has a <code
  title="dom-history">history</code> object distinct from the
  <code>iframe</code>s' <code title="dom-history">history</code>
  objects, despite the fact that typical Web browsers present the user
  with just one "Back" button, with a session history that interleaves
  the navigation of the two inner frames and the outer page.</p>

  <p><strong>Security:</strong> It is suggested that to avoid letting
  a page "hijack" the history navigation facilities of a UA by abusing
  <code title="dom-history-pushState">pushState()</code>, the UA
  provide the user with a way to jump back to the previous page
  (rather than just going back to the previous state). For example,
  the back button could have a drop down showing just the pages in the
  session history, and not showing any of the states. Similarly, an
  aural browser could have two "back" commands, one that goes back to
  the previous state, and one that jumps straight back to the previous
  page.</p>

  <p>In addition, a user agent could ignore calls to <code
  title="dom-history-pushState">pushState()</code> that are invoked on
  a timer, or from event handlers that do not represent a clear user
  action, or that are invoked in rapid succession.</p>




  <h3>Navigating across documents</h3>

  <p>Certain actions cause the <span>browsing context</span> to
  <dfn>navigate</dfn>. For example, <span title="following
  hyperlinks">following a hyperlink</span>, <span title="">form
  submission</span>, and the <code
  title="dom-open">window.open()</code> and <code
  title="dom-location-assign">location.assign()</code> methods can all
  cause a browsing context to navigate. A user agent may also provide
  various ways for the user to explicitly cause a browsing context to
  navigate.</p>

  <p>When a browsing context is navigated, the user agent must run the
  following steps:</p>

  <ol>

   <li><p>Cancel any preexisting attempt to navigate the browsing
   context.</p></li>

   <li><p>If the new resource is the same as the current resource, but
   a fragment identifier has been specified, changed, or removed, then
   <span title="navigate-fragid">navigate to that fragment
   identifier</span> and abort these steps.</p></li>

   <li><p>If the new resource is to be handled by displaying some sort
   of inline content, e.g. an error message because the specified
   scheme is not one of the supported protocols, or an inline prompt
   to allow the user to select <span
   title="dom-navigator-registerProtocolHandler">a registered
   handler</span> for the given scheme, then <span
   title="navigate-ua-inline">display the inline content</span> and
   abort these steps.</p></li>

   <li><p>If the new resource is to be handled using a mechanism that
   does not affect the browsing context, then abort these steps and
   proceed with that mechanism instead.</p></li>

   <li>

    <p>If the new resource is to be fetched using HTTP GET or
    equivalent, and if the browsing context being navigated is a
    <span>top-level browsing context</span>, then check if there are
    any <span title="application cache">application caches</span> that
    have a <span title="concept-appcache-manifest">manifest</span>
    with the <span>same scheme/host/port</span> as the URI in
    question, and that have this URI as one of their entries
    (excluding entries marked as <span
    title="concept-appcache-foreign">manifest</span>), and that
    already contain their manifest, categorised as a <span
    title="concept-appcache-manifest">manifest</span>. If so, then the
    user agent must then fetch the resource from the <span
    title="concept-appcache-selection">most appropriate application
    cache</span> of those that match.</p>

    <p>Otherwise, start fetching the specified resource in the
    appropriate manner (e.g. performing an HTTP GET or POST operation,
    or reading the file from disk, or executing script in the case of
    a <span title="javascript protocol"><code
    title="">javascript:</code> URI</span>). If this results in a
    redirect, return to step 2 with the new resource.</p>

    <p class="example">For example, imagine an HTML page with an
    associated application cache displaying an image and a form, where
    the image is also used by several other application caches. If the
    user right-clicks on the image and chooses "View Image", then the
    user agent could decide to show the image from any of those
    caches, but it is likely that the most useful cache for the user
    would be the one that was used for the aforementioned HTML
    page. On the other hand, if the user submits the form, and the
    form does a POST submission, then the user agent will not use an
    application cache at all; the submission will be made to the
    network.</p>

   </li>

   <li><p>Wait for one or more bytes to be available or for the user
   agent to establish that the resource in question is empty. During
   this time, the user agent may allow the user to cancel this
   navigation attempt or start other navigation attempts.</p></li>

   <li>

    <p>If the resource was not fetched from an <span>application
    cache</span>, and was to be fetched using HTTP GET or equivalent,
    and its URI <span
    title="concept-appcache-matches-oppcache">matches the
    opportunistic caching namespace</span> of one or more application
    caches, then:</p>

    <dl class="switch">

     <dt>If the file was successfully downloaded</dt>

     <dd>The user agent must cache the resource in all those
     application caches, categorised as <span
     title="concept-appcache-oppcache">opportunistically cached
     entries</span>.</dd>


     <dt>If the server returned a 4xx or 5xx status code or
     equivalent, or there were network errors</dt>

     <dd>If the browsing context being navigated is a <span>top-level
     browsing context</span>, then the user agent must discard the
     failed load and instead use the <span
     title="concept-appcache-fallback">fallback resource</span>
     specified for the opportunistic caching namespace in question. If
     multiple application caches match, the user agent must use the
     fallback of the <span title="concept-appcache-selection">most
     appropriate application cache</span> of those that match. For the
     purposes of session history (and features that depend on session
     history, e.g. bookmarking) the user agent must use the URI of the
     resource that was requested (the one that matched the
     opportunistic caching namespace), not the fallback
     resource. However, the user agent may indicate to the user that
     the original page load failed, that the page used was a fallback
     resource, and what the URI of the fallback resource actually
     is.</dd>

    </dl>

   </li>

   <li><p>If the document's out-of-band metadata (e.g. HTTP headers),
   not counting any <span title="Content-Type">type information</span>
   (such as the Content-Type HTTP header), requires some sort of
   processing that will not affect the browsing context, then perform
   that processing and abort these steps.</p>

   <div class="note">
    <p>Such processing might be triggered by, amongst other things, the
    following:</p>
    <ul class="brief">
     <li>HTTP status codes (e.g. 204 No Content or 205 Reset Content)</li>
     <li>HTTP Content-Disposition headers</li>
     <li>Network errors</li>
    </ul>
   </div>
   </li>

   <li><p>Let <var title="">type</var> be <span title="Content-Type
   sniffing">the sniffed type of the resource</span>.</p></li>

   <li><p>If the user agent has been configured to process resources
   of the given <var title="">type</var> using some mechanism other
   than rendering the content in a <span>browsing context</span>, then
   skip this step. Otherwise, if the <var title="">type</var> is one
   of the following types, jump to the appropriate entry in the
   following list, and process the resource as described there:</p>

    <dl class="switch">

     <dt>"text/html"</dt>
     <dd>Follow the steps given in the <span
     title="navigate-html">HTML document</span> section, and abort
     these steps.</dd>

     <dt>Any type ending in "+xml"</dt>
     <dt>"application/xml"</dt>
     <dt>"text/xml"</dt>
     <dd>Follow the steps given in the <span title="navigate-xml">XML
     document</span> section. If that section determines that the
     content is <em>not</em> to be displayed as a generic XML
     document, then proceed to the next step in this overall set of
     steps. Otherwise, abort these steps.</dd>

     <dt>"text/plain"</dt>
     <dd>Follow the steps given in the <span
     title="navigate-text">plain text file</span> section, and abort
     these steps.</dd>

     <dt>A supported image type</dt>
     <dd>Follow the steps given in the <span
     title="navigate-image">image</span> section, and abort these
     steps.</dd>

     <dt>A type that will use an external application to render the
     content in the <span>browsing context</span></dt>
     <dd>Follow the steps given in the <span
     title="navigate-plugin">plugin</span> section, and abort these
     steps.</dd>

    </dl>

   </li>

   <li id="navigate-non-Document"><p>If, given <var
   title="">type</var>, the new resource is to be handled by
   displaying some sort of inline content, e.g. a native rendering of
   the content, an error message because the specified type is not
   supported, or an inline prompt to allow the user to select <span
   title="dom-navigator-registerContentHandler">a registered
   handler</span> for the given type, then <span
   title="navigate-ua-inline">display the inline content</span> and
   abort these steps.</p></li>

   <li><p>Otherwise, the document's <var title="">type</var> is such
   that the resource will not affect the browsing context,
   e.g. because the resource is to be handed to an external
   application. Process the resource appropriately.</p>

  </ol>

  <p>Some of the sections below, to which the above algorithm defers
  in certain cases, require the user agent to <dfn>update the session
  history with the new page</dfn>. When a user agent is required to do
  this, it must follows the set of steps given below that is
  appropriate for the situation at hand. From the point of view of any
  script, these steps must occur atomically.</p>

  <ol>

   <li><p class="big-issue">pause for scripts</p></li>

   <li><p class="big-issue">onbeforeunload</p></li>

   <li><p class="big-issue">onunload</p></li>

   <li>

    <dl>

     <dt>If the navigation was initiated for <dfn>entry update</dfn> of
     an entry</dt>

     <dd>

      <ol>

       <li><p>Replace the entry being updated with a new entry
       representing the new resource and its <code>Document</code>
       object and related state. The user agent may propagate state from
       the old entry to the new entry (e.g. scroll position).</p></li>

       <li><p><span>Traverse the history</span> to the new
       entry.</p></li>

      </ol>

     </dd>


     <dt>Otherwise</dt>

     <dd>

      <ol>

       <li><p>Remove all the entries after the <span>current
       entry</span> in the <span>browsing context</span>'s
       <code>Document</code> object's <code>History</code> object.</p>
       <p class="note">This <a href="#history-notes">doesn't necessarily
       have to affect</a><!--XXX change to auto-xref?--> the user
       agent's user interface.</p> </li>

       <li><p>Append a new entry at the end of the <code>History</code>
       object representing the new resource and its
       <code>Document</code> object and related state.</p></li>

       <li><p><span>Traverse the history</span> to the new entry.</p></li>

       <li><p>If the navigation was initiated with <dfn>replacement
       enabled</dfn>, remove the entry immediately before the new
       <span>current entry</span> in the session history.</p></li>

      </ol>

     </dd>

    </dl>

   </li>

  </ol>


  <h4 id="read-html"><dfn title="navigate-html">Page load processing model for HTML files</dfn></h4>

  <p>When an HTML document is to be loaded in a <span>browsing
  context</span>, the user agent must create a <code>Document</code>
  object, mark it as being an <span title="HTML documents">HTML
  document</span>, create an <span>HTML parser</span>, associate it
  with the document, and begin to use the bytes provided for the
  document as the <span>input stream</span> for that parser.</p>

  <p class="note">The <span>input stream</span> converts bytes into
  characters for use in the <span>tokeniser</span><!-- XXX xref
  -->. This process relies, in part, on character encoding information
  found in the real <span title="Content-Type">Content-Type
  metadata</span> of the resource; the "sniffed type" is not used for
  this purpose.</p>

  <!-- next two paragraphs are nearly identical to the navigate-text
  section, keep them in sync -->

  <p>When no more bytes are available, an EOF character is implied,
  which eventually causes a <code title="event-load">load</code> event
  to be fired.</p>

  <p>After creating the <code>Document</code> object, but potentially
  before the page has finished parsing, the user agent must
  <span>update the session history with the new page</span>.</p>

  <p class="note"><span
  title="concept-appcache-init-with-attribute">Application cache
  selection</span> happens <a href="#parser-appcache">in the HTML
  parser</a>.</p>




  <h4 id="read-xml"><dfn title="navigate-xml">Page load processing model for XML files</dfn></h4>

  <p>When faced with displaying an XML file inline, user agents must
  first create a <code>Document</code> object, following the
  requirements of the XML and Namespaces in XML recommendations, RFC
  3023, DOM3 Core, and other relevant specifications. <a
  href="#refsXML">[XML]</a> <a href="#refsXMLNS">[XMLNS]</a> <a
  href="#refsRFC3023">[RFC3023]</a> <a
  href="#refsDOM3CORE">[DOM3CORE]</a></p>

  <p>The actual HTTP headers and other metadata, not the headers as
  mutated or implied by the algorithms given in this specification,
  are the ones that must be used when determining the character
  encoding according to the rules given in the above
  specifications.</p>

  <p>If the root element, as parsed according to the XML
  specifications cited above, is found to be an <code>html</code>
  element with an attribute <code
  title="attr-html-manifest">manifest</code>, then, as soon as
  the element is inserted into the DOM, the user agent must run the
  <span title="concept-appcache-init-with-attribute">application cache
  selection algorithm</span> with the value of that attribute as the
  manifest URI. Otherwise, as soon as the root element is inserted
  into the DOM, the user agent must run the <span
  title="concept-appcache-init-no-attribute">application cache
  selection algorithm</span> with no manifest.</p>

  <p class="note">Because the processing of the <code
  title="attr-html-manifest">manifest</code> attribute happens
  only once the root element is parsed, any URIs referenced by
  processing instructions before the root element (such as <code
  title="">&lt;?xml-styleesheet?></code> and <code
  title="">&lt;?xbl?></code> PIs) will be fetched from the network and
  cannot be cached.</p> <!-- XXX any ideas for avoiding this, that
  aren't a PI themselves? We can't delay the processing, since the
  whole point of the <?xbl?> PI is to have the XBL sheet loaded before
  the root element... -->

  <p>User agents may examine the namespace of the root
  <code>Element</code> node of this <code>Document</code> object to
  perform namespace-based dispatch to alternative processing tools,
  e.g. determining that the content is actually a syndication feed and
  passing it to a feed handler. If such processing is to take place,
  abort the steps in this section, and jump to <a
  href="#navigate-non-Document">step 10</a> in the
  <span>navigate</span> steps above.</p>

  <p>Otherwise, then, with the newly created <code>Document</code>,
  the user agents must <span>update the session history with the new
  page</span>. User agents may do this before the complete document
  has been parsed (thus achieving <i>incremental rendering</i>).</p>

  <p>Error messages from the parse process (e.g. namespace
  well-formedness errors) may be reported inline by mutating the
  <code>Document</code>.</p>


  <h4 id="read-text"><dfn title="navigate-text">Page load processing model for text files</dfn></h4>

  <p>When a plain text document is to be loaded in a <span>browsing
  context</span>, the user agent should create a <code>Document</code>
  object, mark it as being an <span title="HTML documents">HTML
  document</span>, create an <span>HTML parser</span>, associate it
  with the document, act as if the tokeniser had emitted a start tag
  token with the tag name "pre", set the <span>tokenisation</span>
  stage's <span>content model flag</span> to <i>PLAINTEXT</i>, and
  begin to pass the stream of characters in the plain text document to
  that tokeniser.</p>

  <p>The rules for how to convert the bytes of the plain text document
  into actual characters are defined in RFC 2046, RFC 2646, and
  subsequent versions thereof. <a href="#refsRFC2046">[RFC2046]</a> <a
  href="#refsRFC2046">[RFC2646]</a></p>

  <p>Upon creation of the <code>Document</code> object, the user agent
  must run the <span
  title="concept-appcache-init-no-attribute">application cache
  selection algorithm</span> with no manifest.</p>

  <!-- next two paragraphs are nearly identical to the navigate-html
  section and similar to the "navigate-ua-inline" section, and the
  next three are similar to the navigate-image and navigate-plugin
  sections; keep them all in sync -->

  <p>When no more character are available, an EOF character is
  implied, which eventually causes a <code
  title="event-load">load</code> event to be fired.</p>

  <p>After creating the <code>Document</code> object, but potentially
  before the page has finished parsing, the user agent must
  <span>update the session history with the new page</span>.</p>

  <p>User agents may add content to the <code>head</code> element of
  the <code>Document</code>, e.g. linking to stylesheet or an XBL
  binding, providing script, giving the document a <code>title</code>,
  etc.</p>


  <h4 id="read-image"><dfn title="navigate-image">Page load processing model for images</dfn></h4>

  <p>When an image resource is to be loaded in a <span>browsing
  context</span>, the user agent should create a <code>Document</code>
  object, mark it as being an <span title="HTML documents">HTML
  document</span>, append an <code>html</code> element to the
  <code>Document</code>, append a <code>head</code> element and a
  <code>body</code> element to the <code>html</code> element, append
  an <code>img</code> to the <code>body</code> element, and set the
  <code title="attr-img-src">src</code> attribute of the
  <code>img</code> element to the address of the image.</p>

  <!-- next three paragraphs are similar to the navigate-text section,
  keep them in sync -->

  <p>Then, the user agent must act as if it had <span title="stop
  parsing">stopped parsing</span>.</p>

  <p>Upon creation of the <code>Document</code> object, the user agent
  must run the <span
  title="concept-appcache-init-no-attribute">application cache
  selection algorithm</span> with no manifest.</p>

  <p>After creating the <code>Document</code> object, but potentially
  before the page has finished fully loading, the user agent must
  <span>update the session history with the new page</span>.</p>

  <p>User agents may add content to the <code>head</code> element of
  the <code>Document</code>, or attributes to the <code>img</code>
  element, e.g. to link to stylesheet or an XBL binding, to provide a
  script, to give the document a <code>title</code>, etc.</p>


  <h4 id="read-plugin"><dfn title="navigate-plugin">Page load processing model for content that uses plugins</dfn></h4>

  <p>When a resource that requires an external resource to be rendered
  is to be loaded in a <span>browsing context</span>, the user agent
  should create a <code>Document</code> object, mark it as being an
  <span title="HTML documents">HTML document</span>, append an
  <code>html</code> element to the <code>Document</code>, append a
  <code>head</code> element and a <code>body</code> element to the
  <code>html</code> element, append an <code>embed</code> to the
  <code>body</code> element, and set the <code
  title="attr-img-src">src</code> attribute of the <code>img</code>
  element to the address of the image.</p>

  <!-- next three paragraphs are similar to the navigate-text section,
  keep them in sync -->

  <p>Then, the user agent must act as if it had <span title="stop
  parsing">stopped parsing</span>.</p>

  <p>Upon creation of the <code>Document</code> object, the user agent
  must run the <span
  title="concept-appcache-init-no-attribute">application cache
  selection algorithm</span> with no manifest.</p>

  <p>After creating the <code>Document</code> object, but potentially
  before the page has finished fully loading, the user agent must
  <span>update the session history with the new page</span>.</p>

  <p>User agents may add content to the <code>head</code> element of
  the <code>Document</code>, or attributes to the <code>embed</code>
  element, e.g. to link to stylesheet or an XBL binding, or to give
  the document a <code>title</code>.</p>


  <h4 id="read-ua-inline"><dfn title="navigate-ua-inline">Page load processing model for inline content that doesn't have a DOM</dfn></h4>

  <p>When the user agent is to display a user agent page inline in a
  <span>browsing context</span>, the user agent should create a
  <code>Document</code> object, mark it as being an <span title="HTML
  documents">HTML document</span>, and then either associate that
  <code>Document</code> with a custom rendering that is not rendered
  using the normal <code>Document</code> rendering rules, or mutate
  that <code>Document</code> until it represents the content the user
  agent wants to render.</p>

  <!-- next two paragraphs are similar to the navigate-text section,
  keep them in sync -->

  <p>Once the page has been set up, the user agent must act as if it
  had <span title="stop parsing">stopped parsing</span>.</p>

  <p>Upon creation of the <code>Document</code> object, the user agent
  must run the <span
  title="concept-appcache-init-no-attribute">application cache
  selection algorithm</span> with no manifest.</p>

  <p>After creating the <code>Document</code> object, but potentially
  before the page has been completely set up, the user agent must
  <span>update the session history with the new page</span>.</p>



  <h4 id="scroll-to-fragid"><dfn title="navigate-fragid">Navigating to a fragment identifier</dfn></h4>

  <p>When a user agent is supposed to navigate to a fragment
  identifier, then the user agent must <span>update the session
  history with the new page</span>, where "the new page" has the same
  <code>Document</code> as before but with the URI having the newly
  specified fragment identifier.</p>

  <p>Part of that algorithm involves the user agent having to
  <span>scroll to the fragment identifier</span>, which is the
  important part for this step.</p>

  <p>When the user agent is required to <dfn>scroll to the fragment
  identifier</dfn>, it must change the scrolling position of the
  document, or perform some other action, such that <span>the
  indicated part of the document</span> is brought to the user's
  attention. If there is no indicated part, then the user agent must
  not scroll anywhere.</p>

  <p>The <dfn>the indicated part of the document</dfn> is the one that
  the fragment identifier, if any, identifies. The semantics of the
  fragment identifier in terms of mapping it to a specific DOM Node is
  defined by the MIME type specification of the document's MIME Type
  (for example, the processing of fragment identifiers for XML MIME
  types is the responsibility of RFC3023).</p>

  <p>For HTML documents (and the <code>text/html</code> MIME type),
  the following processing model must be followed to determine what
  <span>the indicated part of the document</span> is.</p>

  <ol>

   <li><p>Let <i>fragid</i> be the &lt;fragment&gt; part of the
   URI. <a href="#refsRFC3987">[RFC3987]</a></p></li> <!-- IRI,
   ifragment? XXX -->

   <li><p>If <i>fragid</i> is the empty string, then the the indicated
   part of the document is the top of the document.</p></li>

   <li><p>If there is an element in the DOM that has an ID exactly
   equal to <i>fragid</i>, then the first such element in tree order
   is <span>the indicated part of the document</span>; stop the
   algorithm here.</p></li>

   <li><p>If there is an <code>a</code> element in the DOM that has a
   <code title="attr-a-name">name</code> attribute whose value is
   exactly equal to <i>fragid</i>, then the first such element in tree
   order is <span>the indicated part of the document</span>; stop the
   algorithm here.</p></li>

   <li><p>Otherwise, there is no indicated part of the
   document.</p></li>

  </ol>

  <p>For the purposes of the interaction of HTML with Selectors' <code
  title="">:target</code> pseudo-class, the <i>target element</i> is
  <span>the indicated part of the document</span>, if that is an
  element; otherwise there is no <i>target element</i>. <a
  href="#refsSELECTORS">[SELECTORS]</a></p>




  <h3 id="content-type-sniffing">Determining the type of a new resource in a browsing context</h3>

  <p class="warning">It is imperative that the rules in this section
  be followed exactly. When a user agent uses different heuristics for
  content type detection than the server expects, security problems
  can occur. For example, if a server believes that the client will
  treat a contributed file as an image (and thus treat it as benign),
  but a Web browser believes the content to be HTML (and thus execute
  any scripts contained therein), the end user can be exposed to
  malicious content, making the user vulnerable to cookie theft
  attacks and other cross-site scripting attacks.</p>

  <p>The <dfn title="Content-Type sniffing">sniffed type of a
  resource</dfn> must be found as follows:</p>

  <ol>

   <li><p>Let <var title="">official type</var> be the type given by
   the <span title="Content-Type">Content-Type metadata</span> for the
   resource (in lowercase<!-- XXX ASCII case folding -->, ignoring any
   parameters). If there is no such type, jump to the <em
   title="content-type sniffing: unknown type">unknown type</em> step
   below.</p></li>

   <li><p>If the user agent is configured to strictly obey
   Content-Type headers for this resource, then jump to the last step
   in this set of steps.</p></li>

   <li><p>If the resource was fetched over an HTTP protocolm and there
   is an HTTP Content-Type header and the value of the first such
   header has bytes that exactly match one of the following lines:</p>

    <table>
     <thead>
      <tr>
       <th>Bytes in Hexadecimal
       <th>Textual representation
     <tbody>
      <tr> <!-- Very old Apache default -->
       <td>74 65 78 74 2f 70 6c 61 69 6e
       <td><code title="">text/plain</code>
      <tr> <!-- Old Apache default -->
       <td>74 65 78 74 2f 70 6c 61 69 6e 3b 20 63 68 61 72 73 65 74 3d 49 53 4f 2d 38 38 35 39 2d 31
       <td><code title="">text/plain;&nbsp;charset=ISO-8859-1</code>
      <tr> <!-- Debian's arbitrarily different Apache default -->
       <td>74 65 78 74 2f 70 6c 61 69 6e 3b 20 63 68 61 72 73 65 74 3d 69 73 6f 2d 38 38 35 39 2d 31
       <td><code title="">text/plain;&nbsp;charset=iso-8859-1</code>
      <tr> <!-- Someone else's arbitrarily different Apache default (who?) -->
       <td>74 65 78 74 2f 70 6c 61 69 6e 3b 20 63 68 61 72 73 65 74 3d 55 54 46 2d 38
       <td><code title="">text/plain;&nbsp;charset=UTF-8</code>
    </table>

    <p>...then jump to the <em title="content-type sniffing: text or
    binary">text or binary</em> section below.</p>

    <!-- while IE sniffs all text/plain, this will continue to grow as
    people add new defaults. Hopefully IE will stop the madness in due
    course and stop sniffing anything but the above... -->

   </li>

   <li><p>If <var title="">official type</var> is "unknown/unknown" or
   "application/unknown", jump to the <em title="content-type
   sniffing: unknown type">unknown type</em> step below.</p>
   <!-- In a study looking at many billions of pages whose first five
   characters were "<HTML", "unknown/unknown" was used to label
   documents about once for every 5000 pages labelled "text/html", and
   "application/unknown" was used about once for every 35000 pages
   labelled "text/html". --></li>

   <li><p>If <var title="">official type</var> ends in "+xml", or if
   it is either "text/xml" or "application/xml", then the the sniffed
   type of the resource is <var title="">official type</var>; return
   that and abort these steps.</p></li> <!-- we don't want
   image/svg+xml going through the next step -->

   <li><p>If <var title="">official type</var> is an image type
   supported by the user agent (e.g. "image/png", "image/gif",
   "image/jpeg", etc), then jump to the <em title="content-type
   sniffing: image">images</em> section below.</p></li>

   <li><p>If <var title="">official type</var> is "text/html", then
   jump to the <em title="content-type sniffing: feed or html">feed or
   HTML</em> section below.</p></li>

   <li><p>The sniffed type of the resource is <var title="">official
   type</var>.</p></li>

  </ol>


  <h4><dfn>Content-Type sniffing: text or binary</dfn></h4>

  <ol>

   <li><p>The user agent may wait for 512 or more bytes of the resource
   to be available.</p></li>

   <li><p>Let <var title="">n</var> be the smaller of either 512 or
   the number of bytes already available.</p></li>

   <li>

    <p>If <var title="">n</var> is 4 or more, and the first bytes of
    the file match one of the following byte sets:</p>

    <table>
     <thead>
      <tr>
       <th>Bytes in Hexadecimal
       <th>Description
     <tbody>
      <tr>
       <td>FE FF
       <td>UTF-16BE BOM <!-- followed by a character --> or UTF-32LE BOM
      <tr>
       <td>FF FE
       <td>UTF-16LE BOM <!-- followed by a character -->
      <tr>
       <td>00 00 FE FF
       <td>UTF-32BE BOM
<!-- this one is redundant with the one above
      <tr>
       <td>FF FE 00 00
       <td>UTF-32LE BOM
-->
      <tr>
       <td>EF BB BF
       <td>UTF-8 BOM <!-- followed by a character, or the first byte of a multiple character sequence -->
<!-- nobody uses this
      <tr>
       <td>DD 73 66 73
       <td>UTF-EBCDIC BOM
-->
    </table>

    <p>...then the sniffed type of the resource is "text/plain".</p>

    <p class="big-issue">Should we remove UTF-32 from the above?</p>

   </li>

   <li><p>Otherwise, if any of the first <var title="">n</var> bytes
   of the resource are in one of the following byte ranges:</p>

    <!-- This byte list is based on RFC 2046 Section 4.1.2. Characters
    in the range 0x00-0X1F, with the exception of 0x09 - 0x0D (ASCII
    for TAB, LF, VT, FF, and CR), and character 0x1B (reportedly used
    by some encodings as a shift escape), are invalid. Thus, if we see
    them, we assume it's not text. -->

    <ul class="brief">
     <li> 0x00 - 0x08 </li>
     <li> 0x0E - 0x1A </li>
     <li> 0x1C - 0x1F </li>
    </ul>

   <p>...then the sniffed type of the resource is
   "application/octet-stream".</p>

   <p class="big-issue">maybe we should invoke the "Content-Type
   sniffing: image" section now, falling back on
   "application/octet-stream".</p>

   </li>

   <li><p>Otherwise, the sniffed type of the resource is
   "text/plain".</p></li>

  </ol>


  <h4><dfn>Content-Type sniffing: unknown type</dfn></h4>

  <ol>

   <li><p>The user agent may wait for 512 or more bytes of the
   resource to be available.</p></li>

   <li><p>Let <var title="">stream length</var> be the smaller of
   either 512 or the number of bytes already available.</p></li>

   <li><p>For each row in the table below:</p>

    <dl class="switch">

     <dt>If the row has no "<em>WS</em>" bytes:</dt>

     <dd>

      <ol>

       <li>Let <var title="">pattern length</var> be the length of the
       pattern (number of bytes described by the cell in the second
       column of the row).</li>

       <li>If <var title="">pattern length</var> is smaller than <var
       title="">stream length</var> then skip this row.</li>

       <li>Apply the "and" operator to the first <var title="">pattern
       length</var> bytes of the resource and the given mask (the
       bytes in the cell of first column of that row), and let the
       result be the <var title="">data</var>.</li>

       <li>If the bytes of the <var title="">data</var> matches the
       given pattern bytes exactly, then the sniffed type of the
       resource is the type given in the cell of the third column in
       that row; abort these steps.</li>

      </ol>

     </dd>

     <dt>If the row has a "<em>WS</em>" byte:</dt>

     <dd>

      <ol>

       <li><p>Let <var title="">index<sub>pattern</sub></var> be an
       index into the mask and pattern byte strings of the
       row.</p></li>

       <li><p>Let <var title="">index<sub>stream</sub></var> be an
       index into the byte stream being examined.</p></li>

       <li><p><em>Loop</em>: If <var
       title="">index<sub>stream</sub></var> points beyond the end of
       the byte stream, then this row doesn't match, skip this
       row.</p></li>

       <li>

        <p>Examine the <var title="">index<sub>stream</sub></var>th
        byte of the byte stream as follows:</p>

        <dl class="switch">

         <dt>If the <var title="">index<sub>stream</sub></var>th byte
         of the pattern is a normal hexadecimal byte and not a "<em>WS</em>"
         byte:</dt>

         <dd>

          <p>If the "and" operator, applied to the <var
          title="">index<sub>stream</sub></var>th byte of the stream
          and the <var title="">index<sub>pattern</sub></var>th byte
          of the mask, yield a value different that the <var
          title="">index<sub>pattern</sub></var>th byte of the
          pattern, then skip this row.</p>

          <p>Otherwise, increment <var
          title="">index<sub>pattern</sub></var> to the next byte in
          the mask and pattern and <var
          title="">index<sub>stream</sub></var> to the next byte in
          the byte stream.</p>

         </dd>

         <dt>Otherwies, if the <var
         title="">index<sub>stream</sub></var>th byte of the pattern
         is a "<em>WS</em>" byte:</dt>

         <dd>

          <p>"<em>WS</em>" means "whitespace", and allows insignificant
          whitespace to be skipped when sniffing for a type
          signature.</p>

          <p>If the <var title="">index<sub>stream</sub></var>th byte
          of the stream is one of 0x09 (ASCII TAB), 0x0A (ASCII LF),
          0x0B (ASCII VT), 0x0C (ASCII FF), 0x0D (ASCII CR), or 0x20
          (ASCII space), then increment only the <var
          title="">index<sub>stream</sub></var> to the next byte in
          the byte stream.</p>

          <p>Otherwise, increment only the <var
          title="">index<sub>pattern</sub></var> to the next byte in
          the mask and pattern.</p>

         </dd>

        </dl>

       </li>

       <li><p>If <var title="">index<sub>pattern</sub></var> does not
       point beyond the end of the mask and pattern byte strings, then
       jump back to the <em>loop</em> step in this algorithm.</p></li>

       <li><p>Otherwise, the sniffed type of the resource is the type
       given in the cell of the third column in that row; abort these
       steps.</p></li>

      </ol>

     </dd>

    </dl>

   </li>

   <li><p>As a last-ditch effort, jump to the <span
   title="content-type sniffing: text or binary">text or binary</span>
   section.</p></li>

  </ol>

  <table>
   <thead>
    <tr>
     <th colspan="2">Bytes in Hexadecimal
     <th rowspan="2">Sniffed type
     <th rowspan="2">Comment
    <tr>
     <th>Mask
     <th>Pattern
   <tbody>
    <tr>
     <td>FF FF DF DF DF DF DF DF DF FF DF DF DF DF
     <td>3C 21 44 4F 43 54 59 50 45 20 48 54 4D 4C <!-- "<!DOCTYPE HTML" --> <!-- common in static data -->
     <td>text/html
     <td>The string "<code title="">&lt;!DOCTYPE HTML</code>" in US-ASCII or compatible encodings, case-insensitively.
    <tr>
     <td>FF FF DF DF DF DF
     <td><em>WS</em> 3C 48 54 4D 4C <!-- "<HTML" --> <!-- common in static data -->
     <td>text/html
     <td>The string "<code title="">&lt;HTML</code>" in US-ASCII or compatible encodings, case-insensitively, possibly with leading spaces.
    <tr>
     <td>FF FF DF DF DF DF
     <td><em>WS</em> 3C 48 45 41 44 <!-- "<HEAD" --> <!-- common in static data -->
     <td>text/html
     <td>The string "<code title="">&lt;HEAD</code>" in US-ASCII or compatible encodings, case-insensitively, possibly with leading spaces.
    <tr>
     <td>FF FF DF DF DF DF DF DF
     <td><em>WS</em> 3C 53 43 52 49 50 54 <!-- "<SCRIPT" --> <!-- common in dynamic data -->
     <td>text/html
     <td>The string "<code title="">&lt;SCRIPT</code>" in US-ASCII or compatible encodings, case-insensitively, possibly with leading spaces.
    <tr>
     <td>FF FF FF FF FF
     <td>25 50 44 46 2D <!-- "%PDF-" (from http://lxr.mozilla.org/seamonkey/source/netwerk/streamconv/converters/nsUnknownDecoder.cpp#321) -->
     <td>application/pdf
     <td>The string "<code title="">%PDF-</code>", the PDF signature.
    <tr>
     <td>FF FF FF FF FF FF FF FF FF FF FF
     <td>25 21 50 53 2D 41 64 6F 62 65 2D <!-- "%!PS-Adobe-" (from http://lxr.mozilla.org/seamonkey/source/netwerk/streamconv/converters/nsUnknownDecoder.cpp#321) -->
     <td>application/postscript
     <td>The string "<code title="">%!PS-Adobe-</code>", the PostScript signature.

   <!-- copied from the section below -->
   <tbody>
    <tr>
     <td>FF FF FF FF FF FF
     <td>47 49 46 38 37 61 <!-- GIF87a -->
     <td>image/gif
     <td>The string "<code title="">GIF87a</code>", a GIF signature.
    <tr>
     <td>FF FF FF FF FF FF
     <td>47 49 46 38 39 61 <!-- GIF89a -->
     <td>image/gif
     <td>The string "<code title="">GIF89a</code>", a GIF signature.
    <tr>
     <td>FF FF FF FF FF FF FF FF
     <td>89 50 4E 47 0D 0A 1A 0A <!-- [TAB]PNG[CR][LF][EOF][LF]; 137 80 78 71 13 10 26 10 -->
     <td>image/png
     <td>The PNG signature.
    <tr>
     <td>FF FF FF
     <td>FF D8 FF <!-- SOI marker followed by the first byte of another marker -->
     <td>image/jpeg
     <td>A JPEG SOI marker followed by the first byte of another marker.
    <tr>
     <td>FF FF
     <td>42 4D
     <td>image/bmp
     <td>The string "<code title="">BM</code>", a BMP signature.
  </table>

  <p>User agents may support further types if desired, by implicitly
  adding to the above table. However, user agents should not use any
  other patterns for types already mentioned in the table above, as
  this could then be used for privilege escalation (where, e.g., a
  server uses the above table to determine that content is not HTML
  and thus safe from XSS attacks, but then a user agent detects it as
  HTML anyway and allows script to execute).</p>


  <h4><dfn>Content-Type sniffing: image</dfn></h4>

  <p>If the first bytes of the file match one of the byte sequences in
  the first columns of the following table, then the sniffed type of
  the resource is the type given in the corresponding cell in the
  second column on the same row:</p>

  <table>
   <thead>
    <tr>
     <th>Bytes in Hexadecimal
     <th>Sniffed type
     <th>Comment

   <!-- update the table above if you change this! -->
   <tbody>
    <tr>
     <td>47 49 46 38 37 61 <!-- GIF87a -->
     <td>image/gif
     <td>The string "<code title="">GIF87a</code>", a GIF signature.
    <tr>
     <td>47 49 46 38 39 61 <!-- GIF89a -->
     <td>image/gif
     <td>The string "<code title="">GIF89a</code>", a GIF signature.
    <tr>
     <td>89 50 4E 47 0D 0A 1A 0A <!-- [TAB]PNG[CR][LF][EOF][LF]; 137 80 78 71 13 10 26 10 -->
     <td>image/png
     <td>The PNG signature.
    <tr>
     <td>FF D8 FF <!-- SOI marker followed by the first byte of another marker -->
     <td>image/jpeg
     <td>A JPEG SOI marker followed by the first byte of another marker.
    <tr>
     <td>42 4D
     <td>image/bmp
     <td>The string "<code title="">BM</code>", a BMP signature.
  </table>

  <p>User agents must ignore any rows for image types that they do not
  support.</p>

  <p>Otherwise, the <i>sniffed type</i> of the resource is the same as
  its <var title="">official type</var>.</p>


  <h4><dfn>Content-Type sniffing: feed or HTML</dfn></h4>
  <!-- mostly based on:
   http://blogs.msdn.com/rssteam/articles/PublishersGuide.aspx
   http://lxr.mozilla.org/seamonkey/source/browser/components/feeds/src/nsFeedSniffer.cpp#192
   http://lxr.mozilla.org/seamonkey/source/browser/components/feeds/src/nsFeedSniffer.cpp#127
  -->

  <ol>

   <li><p>The user agent may wait for 512 or more bytes of the
   resource to be available.</p></li>

   <li><p>Let <var title="">s</var> be the stream of bytes, and let
   <span><var title="">s</var>[<var title="">i</var>]</span> represent
   the byte in <var title="">s</var> with position <var
   title="">i</var>, treating <var title="">s</var> as zero-indexed
   (so the first byte is at <span><var
   title="">i</var>=0</span>).</p></li>

   <li><p>If at any point this algorithm requires the user agent to
   determine the value of a byte in <var title="">s</var> which is not
   yet available, or which is past the first 512 bytes of the
   resource, or which is beyond the end of the resource, the user
   agent must stop this algorithm, and assume that the sniffed type of
   the resource is "text/html".</p>

   <p class="note">User agents are allowed, by the first step of this
   algorithm, to wait until the first 512 bytes of the resource are
   available.</p></li>

   <li><p>Initialise <var title="">pos</var> to 0.</p></li>

   <li><p>If <span><var title="">s</var>[0]</span> is 0xEF, <span><var
   title="">s</var>[1]</span> is 0xBB, and <span><var
   title="">s</var>[2]</span> is 0xBF, then set <var
   title="">pos</var> to 3. (This skips over a leading UTF-8 BOM, if
   any.)</p></li>

   <li><p><i>Loop start:</i> Examine <span><var title="">s</var>[<var
   title="">pos</var>]</span>.</p>

   <dl class="switch">

    <!-- skip whitespace (S token as defined in XML 1.0 section 2.3; production [3] -->
    <dt>If it is 0x09 (ASCII tab), 0x20 (ASCII space), 0x0A (ASCII LF), or 0x0D (ASCII CR)</dt>
    <dd>Increase <var title="">pos</var> by 1 and repeat this step.</dd>

    <dt>If it is 0x3C (ASCII "<code title="">&lt;</code>")</dt>
    <dd>Increase <var title="">pos</var> by 1 and go to the next step.</dd>

    <dt>If it is anything else</dt>
    <dd>The sniffed type of the resource is "text/html". Abort these
    steps.</dd>

   </dl>

   </li>

   <li><p>If the bytes with positions <var title="">pos</var> to
   <span><var title="">pos</var>+2</span> in <var title="">s</var> are
   exactly equal to 0x21, 0x2D, 0x2D respectively (ASCII for "<code
   title="">!--</code>"), then:</p>

    <ol>

     <li>Increase <var title="">pos</var> by 3.</li> <!-- skips past the " ! - - " -->

     <li>If the bytes with positions <span><var
     title="">pos</var></span> to <span><var
     title="">pos</var>+2</span> in <var title="">s</var> are exactly
     equal to 0x2D, 0x2D, 0x3E respectively (ASCII for "<code
     title="">--&gt;</code>"), then increase <var title="">pos</var>
     by 3 and jump back to the previous step (the step labelled
     <i>loop start</i>) in the overall algorithm in this section.</li>

     <li>Otherwise, increase <var title="">pos</var> by 1.</li>

     <li>Return to step 2 in these substeps.</li>

    </ol>

   </li>

   <li><p>If <span><var title="">s</var>[<var
   title="">pos</var>]</span> is 0x21 (ASCII "<code
   title="">!</code>"):</p>

    <!-- this skips past a DOCTYPE if there is one. It is brain-dead
    because we don't have to be clever to parse the Atom and RSS x.y
    DOCTYPEs, as they don't do anything clever like have internal
    subsets or quoted ">" characters. If this fails, then that's ok,
    we'll treat it as HTML which is fine since we know it's not a feed
    in that case. -->

    <ol>

     <li>Increase <var title="">pos</var> by 1.</li>

     <li>If <span><var title="">s</var>[<var
     title="">pos</var>]</span> equal 0x3E, then increase <var
     title="">pos</var> by 1 and jump back to the step labelled
     <i>loop start</i> in the overall algorithm in this section.</li>

     <li>Otherwise, return to step 1 in these substeps.</li>

    </ol>

   </li>

   <li><p>If <span><var title="">s</var>[<var
   title="">pos</var>]</span> is 0x3F (ASCII "<code
   title="">?</code>"):</p>

    <ol>

     <li>Increase <var title="">pos</var> by 1.</li>

     <li>If <span><var title="">s</var>[<var
     title="">pos</var>]</span> and <span><var title="">s</var>[<var
     title="">pos</var>+1]</span> equal 0x3F and 0x3E respectively,
     then increase <var title="">pos</var> by 1 and jump back to the
     step labelled <i>loop start</i> in the overall algorithm in this
     section.</li>

     <li>Otherwise, return to step 1 in these substeps.</li>

    </ol>

   </li>

   <li><p>Otherwise, if the bytes in <var title="">s</var> starting at
   <var title="">pos</var> match any of the sequences of bytes in the
   first column of the following table, then the user agent must
   follow the steps given in the corresponding cell in the second
   column of the same row.</p>

    <table>
     <thead>
      <tr>
       <th>Bytes in Hexadecimal
       <th>Requirement
       <th>Comment

     <tbody>
      <tr>
       <td>72 73 73
       <td>The sniffed type of the resource is "application/rss+xml"; abort these steps
       <td>The three ASCII characters "<code title="">rss</code>"
      <tr>
       <td>66 65 65 64
       <td>The sniffed type of the resource is "application/atom+xml"; abort these steps
       <td>The four ASCII characters "<code title="">feed</code>"
      <tr>
       <td>72 64 66 3A 52 44 46
       <td>Continue to the next step in this algorithm
       <td>The ASCII characters "<code title="">rdf:RDF</code>"
    </table>

    <p>If none of the byte sequences above match the bytes in <var
    title="">s</var> starting at <var title="">pos</var>, then the
    sniffed type of the resource is "text/html". Abort these
    steps.</p>

   </li>

   <li><p class="big-issue">If, before the next ">", you find two
   xmlns* attributes with http://www.w3.org/1999/02/22-rdf-syntax-ns#
   and http://purl.org/rss/1.0/ as the namespaces, then the sniffed
   type of the resource is "application/rss+xml", abort these
   steps. (maybe we only need to check for http://purl.org/rss/1.0/
   actually)</p></li>

   <li><p>Otherwise, the sniffed type of the resource is
   "text/html".</p></li>

  </ol>

  <p class="note">For efficiency reaons, implementations may wish to
  implement this algorithm and the algorithm for detecting the
  character encoding of HTML documents in parallel.</p>



  <h4 id="content-type">Content-Type metadata</h4>

  <p>What explicit <dfn title="Content-Type">Content-Type
  metadata</dfn> is associated with the resource (the resource's type
  information) depends on the protocol that was used to fetch the
  resource.</p>

  <p>For HTTP resources, only the first Content-Type HTTP header, if
  any, contributes any type information; the explicit type of the
  resource is then the value of that header, interpreted as described
  by the HTTP specifications. If the Content-Type HTTP header is
  present but the value of the first such header cannot be interpreted
  as described by the HTTP specifications (e.g. because its value
  doesn't contain a U+002F SOLIDUS ('/') character), then the resource
  has no type information (even if there are multiple Content-Type
  HTTP headers and one of the other ones is syntactically correct). <a
  href="#refsHTTP">[HTTP]</a></p>

  <p>For resources fetched from the filesystem, user agents should use
  platform-specific conventions, e.g. operating system extension/type
  mappings.</p>

  <p>Extensions must not be used for determining resource types for
  resources fetched over HTTP.</p>

  <p>For resources fetched over most other protocols, e.g. FTP, there
  is no type information.</p>


  <p>The <dfn>algorithm for extracting an encoding from a
  Content-Type</dfn>, given a string <var title="">s</var>, is as
  follows. It either returns an encoding or nothing.</p>

  <ol>

   <li><p>Skip characters in <var title="">s</var> up to and including
   the first U+003B SEMICOLON (<code title="">;</code>)
   character.</p></li>

   <li><p>Skip any U+0009, U+000A, U+000B, U+000C, U+000D, or U+0020
   characters (i.e. spaces) that immediately follow the
   semicolon.</p></li>

   <li><p>If the next seven characters are not a case-insensitive<!--
   XXX ASCII--> match for 'charset', return nothing.</p></li>

   <li><p>Skip any U+0009, U+000A, U+000B, U+000C, U+000D, or U+0020
   characters that immediately follow the word 'charset' (there might
   not be any).</p></li>

   <li><p>If the next character is not a U+003D EQUALS SIGN ('='),
   return nothing.</p></li>

   <li><p>Skip any U+0009, U+000A, U+000B, U+000C, U+000D, or U+0020
   characters that immediately follow the word equals sign (there
   might not be any).</p></li>

   <li><p>Process the next character as follows:</p>

    <dl class="switch">

     <dt>If it is a U+0022 QUOTATION MARK ('"') and there is a later
     U+0022 QUOTATION MARK ('"') in <var title="">s</var></dt>

     <dd><p>Return string between the two quotation marks.</dd>

     <dt>If it is a U+0027 APOSTROPHE ("'") and there is a later
     U+0027 APOSTROPHE ("'") in  <var title="">s</var></dt>

     <dd><p>Return the string between the two apostrophes.</dd>

     <dt>If it is an unmatched U+0022 QUOTATION MARK ('"')</dt>
     <dt>If it is an unmatched U+0027 APOSTROPHE ("'")</dt>

     <dd><p>Return nothing.</dd>

     <dt>Otherwise</dt>

     <dd><p>Return the string from this character to the first U+0009,
     U+000A, U+000B, U+000C, U+000D, or U+0020 character or the end of
     <var title="">s</var>, whichever comes first.</dd>

    </dl>

   </li>

  </ol>





  <h3 id="storage">Client-side session and persistent storage of name/value pairs</h3>

  <h4>Introduction</h4>

  <p><em>This section is non-normative.</em></p>

  <p>This specification introduces two related mechanisms, similar to
  HTTP session cookies <a href="#refsRFC2965">[RFC2965]</a>, for
  storing structured data on the client side.</p>

  <p>The first is designed for scenarios where the user is carrying
  out a single transaction, but could be carrying out multiple
  transactions in different windows at the same time.</p>

  <p>Cookies don't really handle this case well. For example, a user
  could be buying plane tickets in two different windows, using the
  same site. If the site used cookies to keep track of which ticket
  the user was buying, then as the user clicked from page to page in
  both windows, the ticket currently being purchased would "leak" from
  one window to the other, potentially causing the user to buy two
  tickets for the same flight without really noticing.</p>

  <p>To address this, this specification introduces the <code
  title="dom-sessionStorage">sessionStorage</code> DOM attribute.
  Sites can add data to the session storage, and it will be accessible
  to any page from that <span>origin</span> opened in that window.</p>

  <div class="example">

   <p>For example, a page could have a checkbox that the user ticks to
   indicate that he wants insurance:</p>

   <pre>&lt;label>
 &lt;input type="checkbox" onchange="sessionStorage.insurance = checked">
 I want insurance on this trip.
&lt;/label></pre>

   <p>A later page could then check, from script, whether the user had
   checked the checkbox or not:</p>

   <pre>if (sessionStorage.insurance) { ... }</pre>

   <p>If the user had multiple windows opened on the site, each one
   would have its own individual copy of the session storage object.</p>

  </div>

  <!--

   sessionStorage.flightDeparture = 'OSL';
   sessionStorage.flightArrival = 'NYC';

   for (var i in forms[0].elements)
      sessionStorage["data_" + i.name] = i.value;

   if (!sessionStorage[documents])
     sessionStorage[documents] = {};
   sessionStorage[documents][filename] = <document/>;

  -->

  <p>The second storage mechanism is designed for storage that spans
  multiple windows, and lasts beyond the current session. In
  particular, Web applications may wish to store megabytes of user
  data, such as entire user-authored documents or a user's mailbox, on
  the clientside for performance reasons.</p>

  <p>Again, cookies do not handle this case well, because they are
  transmitted with every request.</p>

  <p>The <code title="dom-localStorage">localStorage</code> DOM
  attribute is used to access a page's local storage area.</p>

  <div class="example">

   <p>The site at example.com can display a count of how many times
   the user has loaded its page by putting the following at the bottom
   of its page:</p>

   <pre>&lt;p>
  You have viewed this page
  &lt;span id="count">an untold number of&lt;/span>
  time(s).
&lt;/p>
&lt;script>
  if (!localStorage.pageLoadCount)
    localStorage.pageLoadCount = 0;
  localStorage.pageLoadCount = parseInt(localStorage.pageLoadCount, 10) + 1;
  document.getElementById('count').textContent = localStorage.pageLoadCount;
&lt;/script></pre>

  </div>

  <p>Each <span>origin</span> has its own separate storage area.</p>

  <p>Storage areas (both session storage and local storage) store
  strings. To store structured data in a storage area, you must first
  convert it to a string.</p>


  <h4>The <code>Storage</code> interface</h4>

  <pre class="idl">
interface <dfn>Storage</dfn> {
  readonly attribute unsigned long <span title="dom-Storage-length">length</span>;
  DOMString <span title="dom-Storage-key">key</span>(in unsigned long index);
  DOMString <span title="dom-Storage-getItem">getItem</span>(in DOMString key);
  void <span title="dom-Storage-setItem">setItem</span>(in DOMString key, in DOMString data);
  void <span title="dom-Storage-removeItem">removeItem</span>(in DOMString key);
};</pre>

  <!-- XXX v2 ideas:
    a getInfo() method that returns an object that tells you:
       - when the key was added
       - when the key was last modified
       - which page was the last to modify the key
    [-Mihai Sucan]

  -->  

  <p>Each <code>Storage</code> object provides access to a list of
  key/value pairs, which are sometimes called items. Keys and values
  are strings. Any string (including the empty string) is a valid
  key.</p>

  <p class="note">To store more structured data, authors may consider
  using the <a href="#sql">SQL interfaces</a> instead.</p>

  <p>Each <code>Storage</code> object is associated with a list of
  key/value pairs when it is created, as defined in the sections on
  the <code title="dom-sessionStorage">sessionStorage</code> and <code
  title="dom-localStorage">localStorage</code> attributes. Multiple
  separate objects implementing the <code>Storage</code> interface can
  all be associated with the same list of key/value pairs
  simultaneously.</p>

  <p>The <dfn title="dom-Storage-length"><code>length</code></dfn>
  attribute must return the number of key/value pairs currently
  present in the list associated with the object.</p>

  <p>The <dfn title="dom-Storage-key"><code>key(<var
  title="">n</var>)</code></dfn> method must return the name of the
  <var title="">n</var>th key in the list. The order of keys is
  user-agent defined, but must be consistent within an object between
  changes to the number of keys. (Thus, <span
  title="dom-Storage-setItem">adding</span> or <span
  title="dom-Storage-removeItem">removing</span> a key may change the
  order of the keys, but merely changing the value of an existing key
  must not.) <!--The order of keys may differ between instances of the
  <code>Storage</code> interface accessing the same list. [removed for
  now for clarity, but if people ask, put it back. this is part of the
  spec.]--> If <var title="">n</var> is less than zero or greater than
  or equal to the number of key/value pairs in the object, then this
  method must raise an <code>INDEX_SIZE_ERR</code> exception.</p>

  <p>The <dfn title="dom-Storage-getItem"><code>getItem(<var
  title="">key</var>)</code></dfn> method must return the current
  value associated with the given <var title="">key</var>. If the
  given <var title="">key</var> does not exist in the list associated
  with the object then this method must return null.</p>

  <p>The <dfn title="dom-Storage-setItem"><code>setItem(<var
  title="">key</var>, <var title="">value</var>)</code></dfn> method
  must first check if a key/value pair with the given <var
  title="">key</var> already exists in the list associated with the
  object.</p>

  <p>If it does not, then a new key/value pair must be added to the
  list, with the given <var title="">key</var> and <var
  title="">value</var>.</p>

  <p>If the given <var title="">key</var> <em>does</em> exist in the
  list, then it must have its value updated to the value given in the
  <var title="">value</var> argument.</p>

  <p>If it couldn't set the new value, the method must raise an
  <code>INVALID_ACCESS_ERR</code> exception. (Setting could fail if,
  e.g., the user has disabled storage for the domain, or if the quota
  has been exceeded.)</p>

  <p>When the <code title="dom-Storage-setItem">setItem()</code>
  method is invoked, events are fired on other
  <code>HTMLDocument</code> objects that can access the newly stored
  data, as defined in the sections on the <code
  title="dom-sessionStorage">sessionStorage</code> and <code
  title="dom-localStorage">localStorage</code> attributes.</p> <!--
  not normative, see the sections below for the normative statement
  -->

  <p>The <dfn title="dom-Storage-removeItem"><code>removeItem(<var
  title="">key</var>)</code></dfn> method must cause the key/value
  pair with the given <var title="">key</var> to be removed from the
  list associated with the object, if it exists. If no item with that
  key exists, the method must do nothing.</p>

  <p>The <code title="dom-Storage-setItem">setItem()</code> and <code
  title="dom-Storage-removeItem">removeItem()</code> methods must be
  atomic with respect to failure. That is, changes to the data storage
  area must either be successful, or the data storage area must not be
  changed at all.</p>

  <p>In the ECMAScript DOM binding, enumerating a <code>Storage</code>
  object must enumerate through the currently stored keys in the list
  the object is associated with. (It must not enumerate the values or
  the actual members of the interface). In the ECMAScript DOM binding,
  <code>Storage</code> objects must support dereferencing such that
  getting a property that is not a member of the object (i.e. is
  neither a member of the <code>Storage</code> interface nor of <code
  title="dom-Object">Object</code>) must invoke the <code
  title="dom-Storage-getItem">getItem()</code> method with the
  property's name as the argument, and setting such a property must
  invoke the <code title="dom-Storage-setItem">setItem()</code> method
  with the property's name as the first argument and the given value
  as the second argument.</p>


  <h4>The <code title="dom-sessionStorage">sessionStorage</code> attribute</h4>

  <p>The <dfn
  title="dom-sessionStorage"><code>sessionStorage</code></dfn>
  attribute represents the set of storage areas specific to the
  current <span>top-level browsing context</span>.</p>

  <p>Each <span>top-level browsing context</span> has a unique set of
  session storage areas, one for each <span>origin</span>.</p>

  <p>User agents should not expire data from a browsing context's
  session storage areas, but may do so when the user requests that
  such data be deleted, or when the UA detects that it has limited
  storage space, or for security reasons. User agents should always
  avoid deleting data while a script that could access that data is
  running. When a top-level browsing context is destroyed (and
  therefore permanently inaccessible to the user) the data stored in
  its session storage areas can be discarded with it, as the API
  described in this specification provides no way for that data to
  ever be subsequently retrieved.</p>

  <p class="note">The lifetime of a browsing context can be unrelated
  to the lifetime of the actual user agent process itself, as the user
  agent may support resuming sessions after a restart.</p>

  <p>When a new <code>HTMLDocument</code> is created, the user agent
  must check to see if the document's <span>top-level browsing
  context</span> has allocated a session storage area for that
  document's <span>origin</span>. If it has not, a new storage area
  for that document's origin must be created.</p>

  <p>The <code>Storage</code> object for the document's associated
  <code>Window</code> object's <code
  title="dom-sessionStorage">sessionStorage</code> attribute must then
  be associated with that <span>origin</span>'s session storage area
  for that <span>top-level browsing context</span>.</p>

  <p>When a new <span>top-level browsing context</span> is created by
  cloning an existing <span>browsing context</span>, the new browsing
  context must start with the same session storage areas as the
  original, but the two sets must from that point on be considered
  separate, not affecting each other in any way.</p>

  <p>When a new <span>top-level browsing context</span> is created by
  a script in an existing <span>browsing context</span>, or by the
  user following a link in an existing browsing context, or in some
  other way related to a specific <code>HTMLDocument</code>, then the
  session storage area of the origin of that <code>HTMLDocument</code>
  must be copied into the new browsing context when it is created.
  From that point on, however, the two session storage areas must be
  considered separate, not affecting each other in any way.</p>

  <p id="sessionStorageEvent">When the <code
  title="dom-Storage-setItem">setItem()</code> method is called on a
  <code>Storage</code> object <var title="">x</var> that is associated
  with a session storage area, then in every <code>HTMLDocument</code>
  object whose <code>Window</code> object's <code
  title="dom-sessionStorage">sessionStorage</code> attribute's
  <code>Storage</code> object is associated with the same storage
  area, other than <var title="">x</var>, a <code
  title="event-storage">storage</code> event must be fired, as <span
  title="event-storage">described below</span>.</p>


  <h4>The <code title="dom-localStorage">localStorage</code> attribute</h4>

  <p>The <dfn
  title="dom-localStorage"><code>localStorage</code></dfn> object
  provides a <code>Storage</code> object for <span>origin</span>.</p>

  <p>User agents must have a set of local storage areas, one for each
  <span>origin</span>.</p>

  <p>User agents should only expire data from the local storage areas
  for security reasons or when requested to do so by the user. User
  agents should always avoid deleting data while a script that could
  access that data is running. Data stored in local storage areas
  should be considered potentially user-critical. It is expected that
  Web applications will use the local storage areas for storing
  user-written documents.</p>

  <p>When the <code title="dom-localStorage">localStorage</code>
  attribute is accessed, the user agent must check to see if it has
  allocated local storage area for the <span>origin</span> of the
  <span>browsing context</span> within which the script is running. If
  it has not, a new storage area for that origin must be created.</p>

  <p>The user agent must then create a <code>Storage</code> object
  associated with that origin's local storage area, and return
  it.</p>

  <p id="localStorageEvent">When the <code
  title="dom-Storage-setItem">setItem()</code> method is called on a
  <code>Storage</code> object <var title="">x</var> that is associated
  with a local storage area, then in every <code>HTMLDocument</code>
  object whose <code>Window</code> object's <code
  title="dom-localStorage">localStorage</code> attribute's
  <code>Storage</code> object is associated with the same storage
  area, other than <var title="">x</var>, a <code
  title="event-storage">storage</code> event must be fired, as <span
  title="event-storage">described below</span>.</p>


  <h4>The <code title="event-storage">storage</code> event</h4>

  <p>The <dfn title="event-storage"><code>storage</code></dfn> event
  is fired in an <code>HTMLDocument</code> when a storage area
  changes, as described in the previous two sections (<a
  href="#sessionStorageEvent">for session storage</a>, <a
  href="#localStorageEvent">for local storage</a>).</p>

  <p>When this happens, the user agent must dispatch an event with the
  name <code>storage</code>, with no namespace, which does not bubble
  but is cancelable, and which uses the <code>StorageEvent</code>, at
  <span>the body element</span> of each <span title="active
  document">active</span> <code>HTMLDocument</code> object
  affected. The event must have its <code
  title="dom-StorageEvent-key">key</code> attribute set to the name of
  the key in question, its <code
  title="dom-StorageEvent-oldValue">oldValue</code> attribute set to
  the old value of the key in question, or null if the key is newly
  added, its <code title="dom-StorageEvent-newValue">newValue</code>
  attribute set to the new value of the key in question, or null if
  the key was removed, its <code
  title="dom-StorageEvent-uri">uri</code> attribute set to the address
  of the page whose <code>Storage</code> object was affected, and its
  <code title="dom-StorageEvent-source">source</code> attribute set to
  the <code>Window</code> object of hte <span>browsing content</span>
  that that documents finds is in.</p>

  <!-- XXX onstorage should be defined -->


  <h5>Event definition</h5>

  <pre class="idl">interface <dfn>StorageEvent</dfn> : Event {
  readonly attribute DOMString <span title="dom-StorageEvent-key">key</span>;
  readonly attribute DOMString <span title="dom-StorageEvent-oldValue">oldValue</span>;
  readonly attribute DOMString <span title="dom-StorageEvent-newValue">newValue</span>;
  readonly attribute DOMString <span title="dom-StorageEvent-uri">uri</span>;
  readonly attribute <span>Window</span> <span title="dom-StorageEvent-source">source</span>;
  void <span title="dom-StorageEvent-initStorageEvent">initStorageEvent</span>(in DOMString typeArg, in boolean canBubbleArg, in boolean cancelableArg, in DOMString keyArg, in DOMString oldValueArg, in DOMString newValueArg, in DOMString uriArg, in Window sourceArg);
  void <span title="dom-StorageEvent-initStorageEventNS">initStorageEventNS</span>(in DOMString namespaceURI, in DOMString typeArg, in boolean canBubbleArg, in boolean cancelableArg, in DOMString keyArg, in DOMString oldValueArg, in DOMString newValueArg, in DOMString uriArg, in Window sourceArg);
};</pre>

  <p>The <dfn
  title="dom-StorageEvent-initStorageEvent"><code>initStorageEvent()</code></dfn>
  and <dfn
  title="dom-StorageEvent-initStorageEventNS"><code>initStorageEventNS()</code></dfn>
  methods must initialise the event in a manner analogous to the
  similarly-named methods in the DOM3 Events interfaces. <a
  href="#refsDOM3EVENTS">[DOM3EVENTS]</a></p>

  <p>The <dfn title="dom-StorageEvent-key"><code>key</code></dfn>
  attribute represents the key being changed.</p>

  <p>The <dfn
  title="dom-StorageEvent-oldValue"><code>oldValue</code></dfn>
  attribute represents the old value of the key being changed.</p>

  <p>The <dfn
  title="dom-StorageEvent-vnewValue"><code>newValue</code></dfn>
  attribute represents the new value of the key being changed.</p>

  <p>The <dfn title="dom-StorageEvent-uri"><code>uri</code></dfn>
  attribute represents the address of the document that changed the
  key.</p>

  <p>The <dfn
  title="dom-StorageEvent-source"><code>source</code></dfn> attribute
  represents the <code>Window</code> that changed the key.</p>



  <h4>Miscellaneous implementation requirements for storage areas</h4>

  <h5>Disk space</h5>

  <p>User agents should limit the total amount of space allowed for a
  storage area based on the domain of the page setting the value.</p>

  <p>User agents should not limit the total amount of space allowed on
  a per-storage-area basis, otherwise a site could just store data in
  any number of subdomains or ports, e.g. storing up to the limit in
  a1.example.com, a2.example.com, a3.example.com, etc, circumventing
  per-domain limits.</p>

  <p>User agents may prompt the user when per-domain space quotas are
  reached, allowing the user to grant a site more space. This enables
  sites to store many user-created documents on the user's computer,
  for instance.</p>

  <p>User agents should allow users to see how much space each domain
  is using.</p>

  <p>If the storage area space limit is reached during a <code
  title="dom-Storage-setItem">setItem()</code> call, the method will
  raise an exception.</p>

  <p>A mostly arbitrary limit of five megabytes per domain is
  recommended. Implementation feedback is welcome and will be used to
  update this suggestion in future.</p>


  <h5>Threads</h5>

  <p>Multiple browsing contexts must be able to access the global
  storage areas simultaneously in a predictable manner. Scripts must
  not be able to detect any concurrent script execution.</p>

  <p>This is required to guarentee that the <code
  title="dom-Storage-length">length</code> attribute of a
  <code>Storage</code> object never changes while a script is
  executing, other than in a way that is predictable by the script
  itself.</p>

  <p>There are various ways of implementing this requirement. One is
  that if a script running in one browsing context accesses a global
  storage area, the UA blocks scripts in other browsing contexts when
  they try to access the local storage area for the same origin until
  the first script has executed to completion. (Similarly, when a
  script in one browsing context accesses its session storage area,
  any scripts that have the same top level browsing context and the
  same origin would block when accessing their session storage area
  until the first script has executed to completion.) Another
  (potentially more efficient but probably more complex)
  implementation strategy is to use optimistic transactional script
  execution. This specification does not require any particular
  implementation strategy, so long as the requirement above is
  met.</p>


  <h4>Security and privacy</h4>

  <h5>User tracking</h5>

  <p>A third-party advertiser (or any entity capable of getting
  content distributed to multiple sites) could use a unique identifier
  stored in its local storage area to track a user across multiple
  sessions, building a profile of the user's interests to allow for
  highly targeted advertising. In conjunction with a site that is
  aware of the user's real identity (for example an e-commerce site
  that requires authenticated credentials), this could allow
  oppressive groups to target individuals with greater accuracy than
  in a world with purely anonymous Web usage.</p>

  <p>There are a number of techniques that can be used to mitigate the
  risk of user tracking:</p>

  <ul>

   <li>

    <p>Blocking third-party storage: user agents may restrict access
    to the <code title="dom-localStorage">localStorage</code> object
    to scripts originating at the domain of the top-level document of
    the <span>browsing context</span>, for instance denying access to
    the API for pages from other domains running in
    <code>iframe</code>s.</p>

   </li>
 
   <li>

    <p>Expiring stored data: user agents may automatically delete
    stored data after a period of time.</p>

    <p>For example, a user agent could treat third-party global
    storage areas as session-only storage, deleting the data once the
    user had closed all the <span>browsing contexts</span> that could
    access it.</p>

    <p>This can restrict the ability of a site to track a user, as the
    site would then only be able to track the user across multiple
    sessions when he authenticates with the site itself (e.g. by
    making a purchase or logging in to a service).</p>

    <p>However, this also puts the user's data at risk.</p>

    <!-- XXX should there be an explicit way for sites to state when
    data should expire? as in
    localStorage.expireData(365); ? -->

   </li>

   <li>

    <p>Treating persistent storage as cookies: user agents may present
    the persistent storage feature to the user in a way that does not
    distinguish it from HTTP session cookies. <a
    href="#refsRFC2965">[RFC2965]</a></p>

    <p>This might encourage users to view persistent storage with
    healthy suspicion.</p>

   </li>

   <li>

    <p>Site-specific white-listing of access to local storage areas:
    user agents may allow sites to access session storage areas in an
    unrestricted manner, but require the user to authorise access to
    local storage areas.</p>

   </li>

   <li>

    <p>Origin-tracking of persistent storage data: user agents may
    record the origins of sites that contained content from
    third-party origins that caused data to be stored.</p>

    <p>If this information is then used to present the view of data
    currently in persistent storage, it would allow the user to make
    informed decisions about which parts of the persistent storage to
    prune. Combined with a blacklist ("delete this data and prevent
    this domain from ever storing data again"), the user can restrict
    the use of persistent storage to sites that he trusts.</p>

   </li>

   <li>

    <p>Shared blacklists: user agents may allow users to share their
    persistent storage domain blacklists.</p>

    <p>This would allow communities to act together to protect their
    privacy.</p>

   </li>

  </ul>

  <p>While these suggestions prevent trivial use of this API for user
  tracking, they do not block it altogether. Within a single domain, a
  site can continue to track the user during a session, and can then
  pass all this information to the third party along with any
  identifying information (names, credit card numbers, addresses)
  obtained by the site. If a third party cooperates with multiple
  sites to obtain such information, a profile can still be
  created.</p>

  <p>However, user tracking is to some extent possible even with no
  cooperation from the user agent whatsoever, for instance by using
  session identifiers in URIs, a technique already commonly used for
  innocuous purposes but easily repurposed for user tracking (even
  retroactively). This information can then be shared with other
  sites, using using visitors' IP addresses and other user-specific
  data (e.g. user-agent headers and configuration settings) to combine
  separate sessions into coherent user profiles.</p>


  <h5>Cookie resurrection</h5>

  <p>If the user interface for persistent storage presents data in the
  persistent storage feature separately from data in HTTP session
  cookies, then users are likely to delete data in one and not the
  other. This would allow sites to use the two features as redundant
  backup for each other, defeating a user's attempts to protect his
  privacy.</p>


  <h5>DNS spoofing attacks</h5>

  <p>Because of the potential for DNS spoofing attacks, one cannot
  guarentee that a host claiming to be in a certain domain really is
  from that domain. To mitigate this, pages can use SSL. Pages using
  SSL can be sure that only pages using SSL that have certificates
  identifying them as being from the same domain can access their
  local storage areas.</p>


  <h5>Cross-directory attacks</h5>

  <p>Different authors sharing one host name, for example users
  hosting content on <code>geocities.com</code>, all share one
  persistent storage object. There is no feature to restrict the
  access by pathname. Authors on shared hosts are therefore
  recommended to avoid using the persistent storage feature, as it
  would be trivial for other authors to read from and write to the
  same storage area.</p>

  <p class="note">Even if a path-restriction feature was made
  available, the usual DOM scripting security model would make it
  trivial to bypass this protection and access the data from any
  path.</p>


  <h5>Implementation risks</h5>

  <p>The two primary risks when implementing this persistent storage
  feature are letting hostile sites read information from other
  domains, and letting hostile sites write information that is then
  read from other domains.</p>

  <p>Letting third-party sites read data that is not supposed to be
  read from their domain causes <em>information leakage</em>, For
  example, a user's shopping wishlist on one domain could be used by
  another domain for targeted advertising; or a user's
  work-in-progress confidential documents stored by a word-processing
  site could be examined by the site of a competing company.</p>

  <p>Letting third-party sites write data to the storage areas of
  other domains can result in <em>information spoofing</em>, which is
  equally dangerous. For example, a hostile site could add items to a
  user's wishlist; or a hostile site could set a user's session
  identifier to a known ID that the hostile site can then use to track
  the user's actions on the victim site.</p>

  <p>Thus, strictly following the model described in this
  specification is important for user security.</p>



  <h3 id="sql">Client-side database storage</h3>

  <!-- Feature requests for future versions (v2):
        * deleting databases
        * determining how much storage room is left
        * handling the database getting corrupted
  -->

  <h4>Introduction</h4>

  <p class="big-issue">...</p>

<!-- include an example that does something like the following to show
you should never embed strings straight into the statement, even when you
have a variable and unknownable number of literals coming:
   var q = "";
   for each (var i in array)
     q += (q == "" ? "" : ", ") + "?";
   executeSql('SELECT rowid FROM t WHERE c IN (' + q + ')', array, ...);
-->

  <h4>Databases</h4>

  <p>Each <i>origin</i> has an associated set of databases. Each
  database has a name and a current version. There is no way to
  enumerate or delete the databases available for a domain from this
  API.</p>

  <p class="note">Each database has one version at a time, a database
  can't exist in multiple versions at once. Versions are intended to
  allow authors to manage schema changes incrementally and
  non-destructively, and without running the risk of old code (e.g. in
  another browser window) trying to write to a database with incorrect
  assumptions.</p>

  <p>The <dfn
  title="dom-opendatabase"><code>openDatabase()</code></dfn> method
  returns a <code>Database</code> object. The method takes four
  arguments: a database name, a database version, a display name, and
  an estimated size, in bytes, of the data that will be stored in the
  database.</p>

  <p>If the database version provided is not the empty string, and the
  database already exists but has a different version, then the method
  must raise an <code>INVALID_STATE_ERR</code> exception.</p>

  <p>Otherwise, if the database provided is the empty string, or if
  the database doesn't yet exist, or if the database exists and the
  version provided to the <code
  title="dom-opendatabase">openDatabase()</code> method is the same as
  the current version associated with the database, then the method
  must return a <code>Database</code> object representing the database
  associated with the <span>origin</span> of the <span>active
  document</span> of the <span>browsing context</span> of the
  <code>Window</code> object on which the method was called that has
  the name that was given. If no such database exists, it must be
  created first.</p>

  <p>All strings including the empty string are valid database
  names. Database names are case-sensitive.</p>

  <p class="note">Implementations can support this even in
  environments that only support a subset of all strings as database
  names by mapping database names (e.g. using a hashing algorithm) to
  the supported set of names.</p>

  <p>User agents are expected to use the display name and the
  estimated database size to optimise the user experience. For
  example, a user agent could use the estimated size to suggest an
  initial quota to the user. This allows a site that is aware that it
  will try to use hundreds of megabytes to declare this upfront,
  instead of the user agent prompting the user for permission to
  increase the quota every five megabytes.</p>

  <pre class="idl">interface <dfn>Database</dfn> {
  void <span title="dom-database-transaction">transaction</span>(in <span>SQLTransactionCallback</span> callback);
  void <span title="dom-database-transaction">transaction</span>(in <span>SQLTransactionCallback</span> callback, in <span>SQLTransactionErrorCallback</span> errorCallback);
  void <span title="dom-database-transaction">transaction</span>(in <span>SQLTransactionCallback</span> callback, in <span>SQLTransactionErrorCallback</span> errorCallback, in <span>VoidCallback</span> successCallback);

  readonly attribute DOMString <span title="dom-database-version">version</span>;
  void <span title="dom-database-changeVersion">changeVersion</span>(in DOMString oldVersion, in DOMString newVersion, in <span>SQLTransactionCallback</span> callback, in <span>SQLTransactionErrorCallback</span> errorCallback, in <span>VoidCallback</span> successCallback);
};

interface <dfn>SQLTransactionCallback</dfn> {
  void <span title="dom-sqltransactioncallback-handleEvent">handleEvent</span>(in <span>SQLTransaction</span> transaction);
};

interface <dfn>SQLTransactionErrorCallback</dfn> {
  void <span title="dom-sqltransactionerrorcallback-handleEvent">handleEvent</span>(in <span>SQLError</span> error);
};</pre>

  <p>The <dfn
  title="dom-database-transaction"><code>transaction()</code></dfn>
  method takes one or two arguments. When called, the method must
  immediately return and then asynchronously run the <span>transaction
  steps</span> with the <i>transaction callback</i> being the first
  argument, the <i>error callback</i> being the second argument, if
  any, the <i>success callback</i> being the third argument, if any,
  and with no <i>preflight operation</i> or <i>postflight
  operation</i>.</p>

  <p>The version that the database was opened with is the <dfn
  title="concept-database-expected-version">expected version</dfn> of
  this <code>Database</code> object. It can be the empty string, in
  which case there is no expected version &mdash; any version is
  fine.</p>

  <p>On getting, the <dfn
  title="dom-database-version"><code>version</code></dfn> attribute
  must return the current version of the database (as opposed to the
  <span title="concept-database-expected-version">expected
  version</span> of the <code>Database</code> object).</p>

  <p>The <dfn
  title="dom-database-changeVersion"><code>changeVersion()</code></dfn>
  method allows scripts to atomically verify the version number and
  change it at the same time as doing a schema update. When the method
  is invoked, it must immediately return, and then asynchronously run
  the <span>transaction steps</span> with the <i>transaction
  callback</i> being the third argument, the <i>error callback</i>
  being the fourth argument, the <i>success callback</i> being the
  fifth argument, the <i>preflight operation</i> being the
  following:</p>

  <ol>

   <li><p>Check that the value of the first argument to the <code
   title="dom-database-changeVersion">changeVersion()</code> method
   exactly matches the database's actual version. If it does not, then
   the <i>preflight operation</i> fails.</li>

  </ol>

  <p>...and the <i>postflight operation</i> being the following:</p>

  <ol>

   <li>Change the database's actual version to the value of the second
   argument to the <code
   title="dom-database-changeVersion">changeVersion()</code>
   method.</li>

   <li>Change the <code>Database</code> object's expected version to
   the value of the second argument to the <code
   title="dom-database-changeVersion">changeVersion()</code>
   method.</li>

  </ol>


  <h4>Executing SQL statements</h4>

  <p>The <code title="dom-database-transaction">transaction()</code>
  and <code title="dom-database-changeVersion">changeVersion()</code>
  methods invoke callbacks with <code>SQLTransaction</code>
  objects.</p>

  <pre class="idl">typedef sequence&lt;Object> <dfn>ObjectArray</dfn>;

interface <dfn>SQLTransaction</dfn> {
  void <span title="dom-sqltransaction-executeSql">executeSql</span>(in DOMString sqlStatement);
  void <span title="dom-sqltransaction-executeSql">executeSql</span>(in DOMString sqlStatement, in <span>ObjectArray</span> arguments);
  void <span title="dom-sqltransaction-executeSql">executeSql</span>(in DOMString sqlStatement, in <span>ObjectArray</span> arguments, in <span>SQLStatementCallback</span> callback);
  void <span title="dom-sqltransaction-executeSql">executeSql</span>(in DOMString sqlStatement, in <span>ObjectArray</span> arguments, in <span>SQLStatementCallback</span> callback, in <span>SQLStatementErrorCallback</span> errorCallback);
};

interface <dfn>SQLStatementCallback</dfn> {
  void <span title="dom-sqlstatementcallback-handleEvent">handleEvent</span>(in <span>SQLTransaction</span> transaction, in <span>SQLResultSet</span> resultSet);
};

interface <dfn>SQLStatementErrorCallback</dfn> {
  boolean <span title="dom-sqlstatementerrorcallback-handleEvent">handleEvent</span>(in <span>SQLTransaction</span> transaction, in <span>SQLError</span> error);<span class="issue">Or should these arguments be the other way around? Either way we're inconsistent with _something_. What should we be consistent with?</span>
};</pre>

  <p>When the <dfn
  title="dom-database-executeSql"><code>executeSql(<var
  title="">sqlStatement</var>, <var title="">arguments</var>, <var
  title="">callback</var>, <var
  title="">errorCallback</var>)</code></dfn> method is invoked, the
  user agent must run the following algorithm. (This algorithm is
  relatively simple and doesn't actually execute any SQL &mdash; the
  bulk of the work is actually done as part of the <span>transaction
  steps</span>.)</p>

  <ol>

   <li><p>If the method was not invoked during the execution of a
   <code>SQLTransactionCallback</code>,
   <code>SQLStatementCallback</code>, or
   <code>SQLStatementErrorCallback</code> then raise an
   <code>INVALID_STATE_ERR</code> exception. (Calls from inside a
   <code>SQLTransactionErrorCallback</code> thus raise an
   exception. The <code>SQLTransactionErrorCallback</code> handler is
   only called once a transaction has failed, and no SQL statements
   can be added to a failed transaction.)</p></li>

   <li><p>Parse the first argument to the method (<var
   title="">sqlStatement</var>) as an SQL statement, with the
   exception that <code title="">?</code> characters can be used in
   place of literals in the statement. <a
   href="#refsSQL">[SQL]</a></p>

   <li>

    <p>Replace each <code title="">?</code> placeholder with the value
    of the argument in the <var title="">arguments</var> array with
    the same position. (So the first <code title="">?</code>
    placeholder gets replaced by the first value in the <var
    title="">arguments</var> array, and generally the <var
    title="">n</var>th <code title="">?</code> placeholder gets
    replaced by the <var title="">n</var>th value in the <var
    title="">arguments</var> array.)</p>

    <p>If the second argument is ommitted or null, then treat the <var
    title="">arguments</var> array as empty.</p>

    <p>The result is <i>the statement</i>.</p>

   </li>

   <li><p>If the syntax of <var title="">sqlStatement</var> is not
   valid (except for the use of <code title="">?</code> characters in
   the place of literals), or the statement uses features that are not
   supported (e.g. due to security reasons), or the number of items in
   the <var title="">arguments</var> array is not equal to the number
   of <code title="">?</code> placeholders in the statement, or the
   statement cannot be parsed for some other reason, then mark <i>the
   statement</i> as bogus.</p></li>

   <li><p>If the <code>Database</code> object that the
   <code>SQLTransaction</code> object was created from has an <span
   title="concept-database-expected-version">expected version</span>
   that is neither the empty string nor the actual version of the
   database, then mark <i>the statement</i> as bogus. (<span
   title="dom-sqlerror-code-2">Error code 2</span>.)</p></li>

   <li><p>Queue up <i>the statement</i> in the transaction, along with
   the third argument (if any) as the statement's result set callback
   and the fourth argument (if any) as the error callback.</p></li>

  </ol>

  <p>The user agent must act as if the database was hosted in an
  otherwise completely empty environment with no resources. For
  example, attempts to read from or write to the filesystem will
  fail.</p>

  <p>User agents should limit the total amount of space allowed for
  each origin, but may prompt the user and extend the limit if a
  database is reaching its quota. User agents should allow users to
  see how much space each database is using.</p>

  <p>A mostly arbitrary limit of five megabytes per origin is
  recommended. Implementation feedback is welcome and will be used to
  update this suggestion in future.</p>

  <p>SQL inherently supports multiple concurrent connections. Authors
  should make appropriate use of the transaction features to handle
  the case of multiple scripts interacting with the same database
  simultaneously (as could happen if the same page was opened in two
  different <span title="browsing context">browsing
  contexts</span>).</p>

  <p>User agents must consider statements that use the <code
  title="">BEGIN</code>, <code title="">COMMIT</code>, and <code
  title="">ROLLBACK</code> SQL features as being unsupported (and thus
  will mark them as bogus), so as to not let these statements
  interfere with the explicit transactions managed by the database API
  itself.</p>

  <p class="note">A future version of this specification will probably
  define the exact SQL subset required in more detail.</p>


  <h4>Database query results</h4>

  <p>The <code title="dom-transaction-executeSql">executeSql()</code>
  method invokes its callback with a <code>SQLResultSet</code> object
  as an argument.</p>

  <pre class="idl">interface <dfn>SQLResultSet</dfn> {
  readonly attribute int <span title="dom-SQLResultSet-insertId">insertId</span>;
  readonly attribute int <span title="dom-SQLResultSet-rowsAffected">rowsAffected</span>;
  readonly attribute <span>SQLResultSetRowList</span> <span title="dom-SQLResultSet-rows">rows</span>;
};</pre>

  <p>The <dfn
  title="dom-SQLResultSet-insertId"><code>insertId</code></dfn>
  attribute must return the row ID of the row that the
  <code>SQLResultSet</code> object's SQL statement inserted into the
  database, if the statement inserted a row. If the statement inserted
  multiple rows, the ID of the last row must be the one returned. If
  the statement did not insert a row, then the attribute must instead
  raise an <code>INVALID_ACCESS_ERR</code> exception.</p>

  <p>The <dfn
  title="dom-SQLResultSet-rowsAffected"><code>rowsAffected</code></dfn>
  attribute must return the number of rows that were affected by the
  SQL statement. If the statement did not affected any rows, then the
  attribute must return zero. For "SELECT" statements, this returns
  zero (querying the database doesn't affect any rows).</p>

  <p>The <dfn title="dom-SQLResultSet-rows"><code>rows</code></dfn>
  attribute must return a <code>SQLResultSetRowList</code>
  representing the rows returned, in the order returned by the
  database. If no rows were returned, then the object will be
  empty.</p>

  <pre class="idl">interface <dfn>SQLResultSetRowList</dfn> {
  readonly attribute unsigned long <span title="dom-SQLResultSetRowList-length">length</span>;
  <span>DOMObject</span> <span title="dom-SQLResultSetRowList-item">item</span>(in unsigned long index);
};</pre>

  <p><code>SQLResultSetRowList</code> objects have a <dfn
  title="dom-SQLResultSetRowList-length"><code>length</code></dfn>
  attribute that must return the number of rows it represents (the
  number of rows returned by the database).</p>

  <p>The <dfn title="dom-SQLResultSetRowList-item"><code>item(<var
  title="">index</var>)</code></dfn> attribute must return the row
  with the given index <var title="">index</var>. If there is no such
  row, then the method must raise an <code>INDEX_SIZE_ERR</code>
  exception.</p>

  <p>Each row must be represented by a native ordered dictionary data
  type. In the ECMAScript binding, this must be <code>Object</code>.
  Each row object must have one property (or dictionary entry) per
  column, with those properties enumerating in the order that these
  columns were returned by the database. Each property must have the
  name of the column and the value of the cell, as they were returned
  by the database.</p>


  <h4>Errors</h4>

  <p>Errors in the database API are reported using callbacks that have
  a <code>SQLError</code> object as one of their arguments.</p>

  <pre class="idl">interface <dfn>SQLError</dfn> {
  readonly attribute unsigned int <span title="dom-SQLError-code">code</span>;
  readonly attribute DOMString <span title="dom-SQLError-message">message</span>;
};</pre>

  <p>The <dfn
  title="dom-SQLError-code"><code>code</code></dfn> DOM
  attribute must return the most appropriate code from the following
  table:</p>

  <table>
   <thead>
    <tr>
     <th>Code
     <th>Situation
   <tbody>

    <tr>
     <td><dfn title="dom-sqlerror-code-0">0</dfn>
     <td>The transaction failed for reasons unrelated to the database
     itself and not covered by any other error code.

    <tr>
     <td><dfn title="dom-sqlerror-code-1">1</dfn>
     <td>The statement failed for database reasons not covered by any
     other error code.

    <tr>
     <td><dfn title="dom-sqlerror-code-2">2</dfn>
     <td>The statement failed because the <span
     title="concept-database-expected-version">expected version</span>
     of the database didn't match the actual database version.

    <tr>
     <td><dfn title="dom-sqlerror-code-3">3</dfn>
     <td>The statement failed because the data returned from the
     database was too large. The SQL "LIMIT" modifier might be useful
     to reduce the size of the result set.

    <tr>
     <td><dfn title="dom-sqlerror-code-4">4</dfn>
     <td>The statement failed because there was not enough remaining
     storage space, or the storage quota was reached and the user
     declined to give more space to the database.

    <tr>
     <td><dfn title="dom-sqlerror-code-5">5</dfn>
     <td>The statement failed because the transaction's first
     statement was a read-only statement, and a subsequent statement
     in the same transaction tried to modify the database, but the
     transaction failed to obtain a write lock before another
     transaction obtained a write lock and changed a part of the
     database that the former transaction was dependending upon.

    <tr>
     <td><dfn title="dom-sqlerror-code-6">6</dfn>
     <td>An <code title="">INSERT</code>, <code
     title="">UPDATE</code>, or <code title="">REPLACE</code>
     statement failed due to a constraint failure. For example,
     because a row was being inserted and the value given for the
     primary key column duplicated the value of an existing row.

  </table>

  <p class="big-issue">We should define a more thorough list of
  codes. Implementation feedback is requested to determine what codes
  are needed.</p>

  <p>The <dfn title="dom-SQLError-message"><code>message</code></dfn>
  DOM attribute must return an error message describing the error
  encountered. The message should be localised to the user's
  language.</p>



  <h4>Processing model</h4>

  <p>The <dfn>transaction steps</dfn> are as follows. These steps must
  be run asynchronously. These steps are invoked with a <i>transaction
  callback</i>, optionally an <i>error callback</i>, optionally a
  <i>success callback</i>, optionally a <i>preflight operation</i>,
  and optionally a <i>postflight operation</i>.</p>

  <ol>

   <li><p>Open a new SQL transaction to the database, and create a
   <code>SQLTransaction</code> object that represents that
   transaction.</p></li>

   <li><p>If an error occured in the opening of the transaction, jump
   to the last step.</p></li>

   <li><p>If a <i>preflight operation</i> was defined for this
   instance of the transaction steps, run that. If it fails, then jump
   to the last step. (This is basically a hook for the <code
   title="dom-database-changeVersion">changeVersion()</code>
   method.)</p></li>

   <li><p><!-- XXX queue --> Invoke the <i>transaction callback</i>
   with the aforementioned <code>SQLTransaction</code> object as its
   only argument.</p></li>

   <li><p>If the callback couldn't be called (e.g. it was null), or if
   the callback was invoked and raised an exception, jump to the last
   step.</p></li>
<!--
   <li><p>If the callback could be called and returned false, let
   <i>callback-canceled</i> be true. Otherwise, let it be
   false.</p></li>
-->
   <li><p>While there are any statements queued up in the transaction,
   perform the following steps for each queued up statement in the
   transaction, oldest first. Each statement has a statement, a result
   set callback, and optionally an error callback.</p>

    <ol>

     <li><p>If the statement is marked as bogus, jump to the "in case
     of error" steps below.</p></li>

     <li><p>Execute the statement in the context of the transaction.
     <a href="#refsSQL">[SQL]</a></p>

     <li><p>If the statement failed, jump to the "in case of error"
     steps below.</p></li>

     <li><p>Create a <code>SQLResultSet</code> object that represents
     the result of the statement.</p></li>

     <li><p><!-- XXX queue --> Invoke the statement's result set
     callback with the <code>SQLTransaction</code> object as its first
     argument and the new <code>SQLResultSet</code> object as its
     second argument.</p></li>

     <li><p>If the callback was invoked and raised an exception, jump
     to the last step in the overall steps.</p></li>

     <li><p>Move on to the next statement, if any, or onto the next
     overall step otherwise.</p></li>

    </ol>

    <p>In case of error (or more specifically, if the above substeps
    say to jump to the "in case of error" steps), run the following
    substeps:</p>

    <ol>

     <li><p>If the statement had an associated error callback, then
     invoke that error callback with the <code>SQLTransaction</code>
     object and a newly constructed <code>SQLError</code> object that
     represents the error that caused these substeps to be run as the
     two arguments, respectively.</p></li>

     <li><p>If the error callback returns false, then move on to the
     next statement, if any, or onto the next overall step
     otherwise.</p></li>

     <li><p>Otherwise, the error callback did not return false, or
     there was no error callback. Jump to the last step in the overall
     steps.</p></li>

    </ol>

   </li>

   <li><p>If a <i>postflight operation</i> was defined for this
   instance of the transaction steps, run that. If it fails, then jump
   to the last step. <!--The operation, if any, might depend
   <i>callback-canceled</i>.--> (This is basically a hook for the
   <code title="dom-database-changeVersion">changeVersion()</code>
   method.)</p></li>

   <li><p>Commit the transaction.</p></li>

   <li><p>If an error occured in the committing of the transaction,
   jump to the last step.</p></li>

   <li><p>Invoke the <i>success callback</i>.</p></li>

   <li><p>End these steps. The next step is only used when something
   goes wrong.</p></li>

   <li><p>Call the <i>error callback</i> with a newly constructed
   <code>SQLError</code> object that represents the last error to have
   occured in this transaction. Rollback the transaction. Any
   still-pending statements in the transaction are discarded.</p></li>

  </ol>



  <h4>Privacy</h4>

  <p>In contrast with the <code
  title="dom-localStorage">localStorage</code> feature, which
  intentionally allows data to be accessed across multiple domains,
  protocols, and ports (albeit in a controlled fashion), this database
  feature is limited to scripts running with the same
  <span>origin</span> as the database. Thus, it is expected that the
  privacy implications be equivalent to those already present in
  allowing scripts to communicate with their originating host.</p>

  <p>User agents are encouraged to treat data stored in databases in
  the same way as cookies for the purposes of user interfaces, to
  reduce the risk of using this feature for cookie resurrection.</p>


  <h4>Security</h4>

  <h5>User agents</h5>

  <p>User agent implementors are strongly encouraged to audit all
  their supported SQL statements for security implications. For
  example, <code title="">LOAD DATA INFILE</code> is likely to pose
  security risks and there is little reason to support it.</p>

  <p>In general, it is recommended that user agents not support
  features that control how databases are stored on disk. For example,
  there is little reason to allow Web authors to control the character
  encoding used in the disk representation of the data, as all data in
  ECMAScript is implicitly UTF-16.</p>


  <h5>SQL injection</h5>

  <p>Authors are strongly recommended to make use of the <code
  title="">?</code> placeholder feature of the <code
  title="dom-database-executeSql">executeSql()</code> method, and to
  never construct SQL statements on the fly.</p>




  <h3 id="links">Links</h3>


  <h4>Hyperlink elements</h4>

  <p>The <code>a</code>, <code>area</code>, and <code>link</code>
  elements can, in certain situations described in the definitions of
  those elements, represent <dfn
  title="hyperlink">hyperlinks</dfn>.</p>

  <p>The <dfn title="attr-hyperlink-href"><code>href</code></dfn>
  attribute on a hyperlink element must have a value that is a URI (or
  IRI). This URI is the <em>destination resource</em> of the
  hyperlink.</p>

  <div class="note">

   <p>The <code title="attr-hyperlink-href">href</code> attribute on
   <code>a</code> and <code>area</code> elements is not required; when
   those elements do not have <code
   title="attr-hyperlink-href">href</code> attributes they do not
   represent hyperlinks.</p>

   <p>The <code title="attr-link-href">href</code> attribute on the
   <code>link</code> element <em>is</em> required, but whether a
   <code>link</code> element represents a hyperlink or not depends on
   the value of the <code title="attr-link-rel">rel</code> attribute
   of that element.</p>

  </div>

  <p>The <dfn title="attr-hyperlink-target"><code>target</code></dfn>
  attribute, if present, must be a <span>valid browsing context
  name</span>. User agents use this name when <span>following
  hyperlinks</span>.</p>

  <p>The <dfn id="ping"
  title="attr-hyperlink-ping"><code>ping</code></dfn> attribute, if
  present, gives the URIs of the resources that are interested in
  being notified if the user follows the hyperlink. The value must be
  a space separated list of one or more URIs (or IRIs). The value is
  used by the user agent when <span>following hyperlinks</span>.</p>

  <p>For <code>a</code> and <code>area</code> elements that represent
  hyperlinks, the relationship between the document containing the
  hyperlink and the destination resource indicated by the hyperlink is
  given by the value of the element's <dfn
  title="attr-hyperlink-rel"><code>rel</code></dfn> attribute, which
  must be a <span>set of space-separated tokens</span>. The <a
  href="#linkTypes">allowed values and their meanings</a> are defined
  below. The <code title="attr-hyperlink-rel">rel</code> attribute has
  no default value. If the attribute is omitted or if none of the
  values in the attribute are recognised by the UA, then the document
  has no particular relationship with the destination resource other
  than there being a hyperlink between the two.</p>

  <p>The <dfn title="attr-hyperlink-media"><code>media</code></dfn>
  attribute describes for which media the target document was
  designed. It is purely advisory. The value must be a valid media
  query. <a href="#refsMQ">[MQ]</a> The default, if the <code
  title="attr-hyperlink-media">media</code> attribute is omitted, is
  <code>all</code>.</p>

  <p>The <dfn
  title="attr-hyperlink-hreflang"><code>hreflang</code></dfn>
  attribute on hyperlink elements, if present, gives the language of
  the linked resource. It is purely advisory. The value must be a
  valid RFC 3066 language code. <a href="#refsRFC3066">[RFC3066]</a>
  User agents must not consider this attribute authoritative &mdash;
  upon fetching the resource, user agents must only use language
  information associated with the resource to determine its language,
  not metadata included in the link to the resource.</p>

  <p>The <dfn title="attr-hyperlink-type"><code>type</code></dfn>
  attribute, if present, gives the MIME type of the linked
  resource. It is purely advisory. The value must be a valid MIME
  type, optionally with parameters. <a
  href="#refsRFC2046">[RFC2046]</a> User agents must not consider the
  <code title="attr-hyperlink-type">type</code> attribute
  authoritative &mdash; upon fetching the resource, user agents must
  not use metadata included in the link to the resource to determine
  its type.</p>



  <h4><dfn>Following hyperlinks</dfn></h4>

  <p>When a user <em>follows a hyperlink</em>, the user agent must
  <span>navigate</span> a <span>browsing context</span> to the URI of
  the hyperlink.

  <p>The URI of the hyperlink is URI given by resolving the the <code
  title="attr-hyperlink-href">href</code> attribute of that hyperlink
  relative to the hyperlink's element. In the case of server-side
  image maps, the URI of the hyperlink must further have its
  <var>hyperlink suffix</var> appended to it.</p>

  <p>If the user indicated a specific browsing context when following
  the hyperlink, or if the user agent is configured to follow
  hyperlinks by navigating a particular browsing context, then that
  must be the browsing context that is navigated.</p>

  <p>Otherwise, if the hyperlink element is an <code>a</code> or
  <code>area</code> element that has a <code
  title="attr-hyperlink-target">target</code> attribute, then the
  browsing context that is navigated must be chosen by applying
  <span>the rules for chosing a browsing context given a browsing
  context name</span>, using the value of the <code
  title="attr-hyperlink-target">target</code> attribute as the
  browsing context name. If these rules result in the creation of a
  new <span>browsing context</span>, it must be navigated with
  <span>replacement enabled</span>.</p>

  <p>Otherwise, if the hyperlink element is a <span
  title="rel-sidebar-hyperlink">sidebar hyperlink</span> and the user
  agent implements a feature that can be considered a secondary
  browsing context, such a secondary browsing context may be selected
  as the browsing context to be navigated.</p>

  <p>Otherwise, if the hyperlink element is an <code>a</code> or
  <code>area</code> element with no <code
  title="attr-hyperlink-target">target</code> attribute, but one of
  the child nodes of <span>the <code>head</code> element</span> is a
  <code>base</code> element with a <code
  title="attr-base-target">target</code> attribute, then the browsing
  context that is navigated must be chosen by applying <span>the rules
  for chosing a browsing context given a browsing context name</span>,
  using the value of the <code title="attr-base-target">target</code>
  attribute of the first such <code>base</code> element as the
  browsing context name. If these rules result in the creation of a
  new <span>browsing context</span>, it must be navigated with
  <span>replacement enabled</span>.</p>

  <p>Otherwise, the browsing context that must be navigated is the
  same browsing context as the one which the hyperlink element itself
  is in.</p>



  <h5>Hyperlink auditing</h5>

  <p>If an <code>a</code> or <code>area</code> hyperlink element has a
  <code title="attr-hyperlink-ping">ping</code> attribute and the user
  follows the hyperlink, the user agent must take the <code
  title="attr-hyperlink-ping">ping</code> attribute's value, <span
  title="split the string on spaces">split that string on
  spaces</span>, treat each resulting token as a URI (resolving
  relative URIs according to element's base URI) and then should send
  a request (as described below) to each of the resulting URIs. This
  may be done in parallel with the primary request, and is independent
  of the result of that request.</p>

  <p>User agents should allow the user to adjust this behaviour, for
  example in conjunction with a setting that disables the sending of
  HTTP <code title="">Referer</code> headers. Based on the user's
  preferences, UAs may either <span>ignore</span> the <code
  title="attr-hyperlink-ping">ping</code> attribute altogether, or
  selectively ignore URIs in the list (e.g. ignoring any third-party
  URIs).</p>

  <p>For URIs that are HTTP URIs, the requests must be performed using
  the POST method (with an empty entity body in the request). All
  relevant cookie and HTTP authentication headers must be included in
  the request. Which other headers are required depends on the URIs
  involved.</p>

  <dl class="switch">

   <dt>If both the URI of the document containing the hyperlink being
   audited and the ping URI have the same <span>origin</span><!-- XXX
   xref, and check that _URIs_ can have origins --></dt>

   <dd>The request must include a <code title="">Ping-From</code> HTTP
   header with, as its value, the location of the document containing
   the hyperlink, and a <code title="">Ping-To</code> HTTP header
   with, as its value, the address of the target of the hyperlink. The
   request must not include a <code title="">Referer</code> HTTP
   header.</dd>

   <dt>Otherwise, if the origins are different, but the document
   containing the hyperlink being audited was not retrieved over an
   encrypted connection</dt>

   <dd>The request must include a <code title="">Referer</code> HTTP
   header [sic] with, as its value, the location of the document
   containing the hyperlink, a <code title="">Ping-From</code> HTTP
   header with the same value, and a <code title="">Ping-To</code>
   HTTP header with, as its value, the address of the target of the
   hyperlink.</dd>

   <dt>Otherwise, the origins are different and the document
   containing the hyperlink being audited was retrieved over an
   encrypted connection</dt>

   <dd>The request must a <code title="">Ping-To</code> HTTP header
   with, as its value, the address of the target of the hyperlink. The
   request must neither include a <code title="">Referer</code> HTTP
   header nor include a <code title="">Ping-From</code> HTTP
   header.</dd>

  </dl>

  <p class="note">To save bandwidth, implementors might also wish to
  consider omitting optional headers such as <code>Accept</code> from
  these requests.</p>

  <p>User agents must ignore any entity bodies returned in the
  responses, but must, unless otherwise specified by the user, honor
  the HTTP headers (including, in particular, redirects and HTTP
  cookie headers). <a href="#refsRFC2965">[RFC2965]</a></p>

  <p>When the <code title="attr-hyperlink-ping">ping</code> attribute is
  present, user agents should clearly indicate to the user that
  following the hyperlink will also cause secondary requests to be
  sent in the background, possibly including listing the actual target
  URIs.</p>

  <div class="note">

   <p>The <code title="attr-hyperlink-ping">ping</code> attribute is redundant
   with pre-existing technologies like HTTP redirects and JavaScript
   in allowing Web pages to track which off-site links are most
   popular or allowing advertisers to track click-through rates.</p>

   <p>However, the <code title="attr-hyperlink-ping">ping</code> attribute
   provides these advantages to the user over those alternatives:</p>

   <ul>

    <li>It allows the user to see the final target URI
    unobscured.</li>

    <li>It allows the UA to inform the user about the out-of-band
    notifications.</li>

    <li>It allows the paranoid user to disable the notifications
    without losing the underlying link functionality.</li>

    <li>It allows the UA to optimise the use of available network
    bandwidth so that the target page loads faster.</li>

   </ul>
  
   <p>Thus, while it is possible to track users without this feature,
   authors are encouraged to use the <code
   title="attr-hyperlink-ping">ping</code> attribute so that the user agent
   can improve <!-- XXX optimise? --> the user experience.</p> <!--
   XXX need a better way to end that sentence. It's what I mean, but
   it sounds kooky. -->

  </div>



  <h4 id="linkTypes">Link types</h4>

  <p>The following table summarises the link types that are defined by
  this specification. This table is non-normative; the actual
  definitions for the link types are given in the next few
  sections.</p>

  <p>In this section, the term <em>referenced document</em> refers to
  the resource identified by the element representing the link, and
  the term <em>current document</em> refers to the resource within
  which the element representing the link finds itself.</p>

  <p>To determine which link types apply to a <code>link</code>,
  <code>a</code>, or <code>area</code> element, the element's <code
  title="">rel</code> attribute must be <span title="split a string on
  spaces">split on spaces</span>. The resulting tokens are the link
  types that apply to that element.</p>

  <p>Unless otherwise specified, a keyword must not be specified more
  than once per <code title="attr-rel-hyperlink">rel</code>
  attribute.</p>

  <table>
   <thead>
    <tr>
     <th rowspan="2">Link type</th>
     <th colspan="2">Effect on...</th>
     <th rowspan="2">Brief description</th>
    </tr>
    <tr>
     <th><code>link</code></th>
     <th><code>a</code> and <code>area</code></th>
    </tr>
   </thead>
   <tbody>

    <tr>
     <td><code title="rel-alternate">alternate</code></td> <!-- second most used <link rel> value -->
     <td><span title="hyperlink link">Hyperlink</span></td>
     <td><span>Hyperlink</span></td>
     <td>Gives alternate representations of the current document.</td>
    </tr>

    <tr>
     <td><code title="rel-archives">archives</code></td>
     <td><span title="hyperlink link">Hyperlink</span></td>
     <td><span>Hyperlink</span></td>
     <td>Provides a link to a collection of records, documents, or other materials of historical interest.</td>
    </tr>

    <tr>
     <td><code title="rel-author">author</code></td>
     <td><span title="hyperlink link">Hyperlink</span></td>
     <td><span>Hyperlink</span></td>
     <td>Gives a link to the current document's author.</td>
    </tr>

    <tr>
     <td><code title="rel-bookmark">bookmark</code></td> <!-- fourth most used <a rel> value -->
     <td><em>not allowed</em></td>
     <td><span>Hyperlink</span></td>
     <td>Gives the permalink for the nearest ancestor section.</td>
    </tr>

    <tr>
     <td><code title="rel-contact">contact</code></td> <!-- 8th most used <a rel> value -->
     <td><span title="hyperlink link">Hyperlink</span></td>
     <td><span>Hyperlink</span></td>
     <td>Gives a link to contact information for the current document.</td>
    </tr>

    <tr>
     <td><code title="rel-external">external</code></td> <!-- fifth and sixth most used <a rel> value (sixth is "external nofollow") -->
     <td><em>not allowed</em></td>
     <td><span>Hyperlink</span></td>
     <td>Indicates that the referenced document is not part of the same site as the current document.</td>
    </tr>

    <tr>
     <td><code title="rel-feed">feed</code></td>
     <td><span title="hyperlink link">Hyperlink</span></td>
     <td><span>Hyperlink</span></td>
     <td>Gives the address of a syndication feed for the current document.</td>
    </tr>

    <tr>
     <td><code title="rel-first">first</code></td>
     <td><span title="hyperlink link">Hyperlink</span></td>
     <td><span>Hyperlink</span></td>
     <td>Indicates that the current document is a part of a series, and that the first document in the series is the referenced document.</td>
    </tr>

    <tr>
     <td><code title="rel-help">help</code></td>
     <td><span title="hyperlink link">Hyperlink</span></td>
     <td><span>Hyperlink</span></td>
     <td>Provides a link to context-sensitive help.</td>
    </tr>

    <tr>
     <td><code title="rel-icon">icon</code></td> <!-- link rel="shortcut icon" and its ilk are the fourth, sixth, and ninth most used values -->
     <td><span title="external resource link">External Resource</span></td>
     <td><em>not allowed</em></td>
     <td>Imports an icon to represent the current document.</td>
    </tr>

    <tr>
     <td><code title="rel-index">index</code></td> <!-- used more than "top" and "contents" on <link> (though on <a>, "contents" wins) -->
     <td><span title="hyperlink link">Hyperlink</span></td>
     <td><span>Hyperlink</span></td>
     <td>Gives a link to the document that provides a table of contents or index listing the current document.</td>
    </tr>

    <tr>
     <td><code title="rel-last">last</code></td>
     <td><span title="hyperlink link">Hyperlink</span></td>
     <td><span>Hyperlink</span></td>
     <td>Indicates that the current document is a part of a series, and that the last document in the series is the referenced document.</td>
    </tr>

    <tr>
     <td><code title="rel-license">license</code></td> <!-- seventh most used <a rel> value -->
     <td><span title="hyperlink link">Hyperlink</span></td>
     <td><span>Hyperlink</span></td>
     <td>Indicates that the current document is covered by the copyright license described by the referenced document.</td>
    </tr>

    <tr>
     <td><code title="rel-next">next</code></td>
     <td><span title="hyperlink link">Hyperlink</span></td>
     <td><span>Hyperlink</span></td>
     <td>Indicates that the current document is a part of a series, and that the next document in the series is the referenced document.</td>
    </tr>

    <tr>
     <td><code title="rel-nofollow">nofollow</code></td> <!-- most used <a rel> value (and sixth most used is "external nofollow") -->
     <td><em>not allowed</em></td>
     <td><span>Hyperlink</span></td>
     <td>Indicates that the current document's original author or publisher does not endorse the referenced document.</td>
    </tr>

    <tr>
     <td><code title="rel-noreferrer">noreferrer</code></td>
     <td><em>not allowed</em></td>
     <td><span>Hyperlink</span></td>
     <td>Requires that the user agent not send an HTTP <code title="">Referer</code> header if the user follows the hyperlink.</td>
    </tr>

    <tr>
     <td><code title="rel-pingback">pingback</code></td>
     <td><span title="external resource link">External Resource</span></td>
     <td><em>not allowed</em></td>
     <td>Gives the address of the pingback server that handles pingbacks to the current document.</td>
    </tr>

    <tr>
     <td><code title="rel-prefetch">prefetch</code></td>
     <td><span title="external resource link">External Resource</span></td>
     <td><em>not allowed</em></td>
     <td>Specifies that the target resource should be pre-emptively cached.</td>
    </tr>

    <tr>
     <td><code title="rel-prev">prev</code></td> <!-- prev is used more than previous -->
     <td><span title="hyperlink link">Hyperlink</span></td>
     <td><span>Hyperlink</span></td>
     <td>Indicates that the current document is a part of a series, and that the previous document in the series is the referenced document.</td>
    </tr>

    <tr>
     <td><code title="rel-search">search</code></td> <!-- used quite a bit -->
     <td><span title="hyperlink link">Hyperlink</span></td>
     <td><span>Hyperlink</span></td>
     <td>Gives a link to a resource that can be used to search through the current document and its related pages.</td>
    </tr>

    <tr>
     <td><code title="rel-stylesheet">stylesheet</code></td> <!-- most commonly used <link rel> value, variants came in 7th, 8th, 12th, 17th... -->
     <td><span title="external resource link">External Resource</span></td>
     <td><em>not allowed</em></td>
     <td>Imports a stylesheet.</td>
    </tr>

    <tr>
     <td><code title="rel-sidebar">sidebar</code></td> <!-- used quite a bit -->
     <td><span title="hyperlink link">Hyperlink</span></td>
     <td><span>Hyperlink</span></td>
     <td>Specifies that the referenced document, if retrieved, is intended to be shown in the browser's sidebar (if it has one).</td>
    </tr>

    <tr>
     <td><code title="rel-tag">tag</code></td> <!-- second and third most used <a rel> value (third is technically "category tag"). -->
     <td><span title="hyperlink link">Hyperlink</span></td>
     <td><span>Hyperlink</span></td>
     <td>Gives a tag (identified by the given address) that applies to the current document.</td>
    </tr>

    <tr>
     <td><code title="rel-up">up</code></td>
     <td><span title="hyperlink link">Hyperlink</span></td>
     <td><span>Hyperlink</span></td>
     <td>Provides a link to a document giving the context for the current document.</td>
    </tr>

   </tbody>
  </table>

  <p>Some of the types described below list synonyms for these
  values. These are to be handled as specified by user agents, but
  must not be used in documents.</p>


  <!--XXX

  issues for rel="", etc:
   rel="alternate stylesheet"
   rel="script"
   rel="related" // see also
   which relationship combinations are allowed
   what multiple values might mean (multiple <a rel="top"> in the same document)
   http://www.euronet.nl/~tekelenb/WWW/LINK/
   http://shift.freezope.org/konq_rellinks/development_html
   http://hixie.ch/specs/html/link/001
   http://hixie.ch/specs/html/link/002
   http://www.hixie.ch/specs/html/metadata
   what UAs are supposed to do with this
   do something about http://microformats.org/wiki/rel-enclosure

mpt says:
> "As with <a> elements, when <link> elements that use these relationships    
> are present, UAs should render them. As with <a> elements, when <link>
> elements that use these relationships do not exist, UAs should not
> render them. UAs should not make <link> rendering any easier to hide
> than <a> rendering."
  
for microformats (e.g. to refer to an hcard from an hcalendar):         
rel=xref
<a> and <area> only
The href attribute's value must start with a '#' character.
Indicates an in-page cross-reference. For the purposes of data mining tools, the subtree rooted
at the first element with the given ID must be treated as if it was cloned and replaced the <a> element.

    -->


  <h5>Link type "<dfn title="rel-alternate"><code>alternate</code></dfn>"</h5>

  <p>The <code title="rel-alternate">alternate</code> keyword may be
  used with <code>link</code>, <code>a</code>, and <code>area</code>
  elements. For <code>link</code> elements, if the <code
  title="attr-link-rel">rel</code> attribute does not also contain the
  keyword <code title="rel-stylesheet">stylesheet</code>, it creates a
  <span title="hyperlink link">hyperlink</span>; but if it
  <em>does</em> also contains the keyword <code
  title="rel-stylesheet">stylesheet</code>, the <code
  title="rel-alternate">alternate</code> keyword instead modifies the
  meaning of the <code title="rel-stylesheet">stylesheet</code>
  keyword in the way described for that keyword, and the rest of this
  subsection doesn't apply.</p>

  <p>The <code title="rel-alternate">alternate</code> keyword
  indicates that the referenced document is an alternate
  representation of the current document.</p>

  <p>The nature of the referenced document is given by the <code
  title="attr-hyperlink-media">media</code>, <code
  title="attr-hyperlink-hreflang">hreflang</code>, and <code
  title="attr-hyperlink-type">type</code> attributes.</p>

  <p>If the <code title="rel-alternate">alternate</code> keyword is
  used with the <code title="attr-hyperlink-media">media</code>
  attribute, it indicates that the referenced document is intended for use
  with the media specified.</p>

  <p>If the <code title="rel-alternate">alternate</code> keyword is
  used with the <code title="attr-hyperlink-hreflang">hreflang</code>
  attribute, and that attribute's value differs from the <span>root
  element</span>'s <span>language</span>, it indicates that the
  referenced document is a translation.</p>

  <p>If the <code title="rel-alternate">alternate</code> keyword is
  used with the <code title="attr-hyperlink-type">type</code>
  attribute, it indicates that the referenced document is a
  reformulation of the current document in the specified format.</p>

  <p>The <code title="attr-hyperlink-media">media</code>, <code
  title="attr-hyperlink-hreflang">hreflang</code>, and <code
  title="attr-hyperlink-type">type</code> attributes can be combined
  when specified with the <code title="rel-alternate">alternate</code>
  keyword.</p>

  <div class="example">

   <p>For example, the following link is a French translation that
   uses the PDF format:</p>

   <pre>&lt;link rel=alternate type=application/pdf hreflang=fr href=manual-fr></pre>

  </div>

  <p>If the <code title="rel-alternate">alternate</code> keyword is
  used with the <code title="attr-hyperlink-type">type</code>
  attribute set to the value <code title="">application/rss+xml</code>
  or the value <code title="">application/atom+xml</code>, then the
  user agent must treat the link as it would if it had the <code
  title="rel-feed">feed</code> keyword specified as well.</p>

  <p>The <code title="rel-alternate">alternate</code> link
  relationship is transitive &mdash; that is, if a document links to
  two other documents with the link type "<code
  title="rel-alternate">alternate</code>", then, in addition to
  implying that those documents are alternative representations of the
  first document, it is also implying that those two documents are
  alternative representations of each other.</p>


  <h5>Link type "<dfn title="rel-archives"><code>archives</code></dfn>"</h5>

  <p>The <code title="rel-archives">archives</code> keyword may be
  used with <code>link</code>, <code>a</code>, and <code>area</code>
  elements. For <code>link</code> elements, it creates a <span
  title="hyperlink link">hyperlink</span>.</p>

  <p>The <code title="rel-archives">archives</code> keyword indicates
  that the referenced document describes a collection of records,
  documents, or other materials of historical interest.</p>

  <p class="example">A blog's index page could link to an index of the
  blog's past posts with <code title="">rel="archives"</code>.</p>

  <p><strong>Synonyms</strong>: For historical reasons, user agents
  must also treat the keyword "<code title="">archive</code>" like the
  <code title="rel-archives">archives</code> keyword.</p>


  <h5>Link type "<dfn title="rel-author"><code>author</code></dfn>"</h5>

  <p>The <code title="rel-author">author</code> keyword may be
  used with <code>link</code>, <code>a</code>, and <code>area</code>
  elements. For <code>link</code> elements, it creates a <span
  title="hyperlink link">hyperlink</span>.</p>

  <p>For <code>a</code> and <code>area</code> elements, the <code
  title="rel-author">author</code> keyword indicates that the
  referenced document provides further information about the author of
  the section that the element defining the hyperlink <a
  href="#applyToSection">applies</a> to.</p>

  <p>For <code>link</code> elements, the <code
  title="rel-author">author</code> keyword indicates that the
  referenced document provides further information about the author
  for the page as a whole.</p>

  <p class="note">The "referenced document" can be, and often is, a
  <code title="">mailto:</code> URI giving the e-mail address of the
  author. <a href="#refsMAILTO">[MAILTO]</a></p>

  <p><strong>Synonyms</strong>: For historical reasons, user agents
  must also treat <code>link</code>, <code>a</code>, and
  <code>area</code> elements that have a <code title="">rev</code>
  attribute with the value "<code>made</code>" as having the <code
  title="rel-author">author</code> keyword specified as a link
  relationship.</p>


  <h5>Link type "<dfn title="rel-bookmark"><code>bookmark</code></dfn>"</h5>

  <p>The <code title="rel-bookmark">bookmark</code> keyword may be
  used with <code>a</code> and <code>area</code> elements.</p>

  <p>The <code title="rel-bookmark">bookmark</code> keyword gives a
  permalink for the nearest ancestor <code>article</code> element of
  the linking element in question, or of <a
  href="#associatedSection">the section the linking element is most
  closely associated with</a>, if there are no ancestor
  <code>article</code> elements.</p>

  <div class="example">
   <p>The following snippet has three permalinks. A user agent could
   determine which permalink applies to which part of the spec by
   looking at where the permalinks are given.</p>
   <pre> ...
 &lt;body>
  &lt;h1>Example of permalinks&lt;/h1>
  &lt;div id="a">
   &lt;h2>First example&lt;/h2>
   &lt;p>&lt;a href="a.html" rel="bookmark">This&lt;/a> permalink applies to
   only the content from the first H2 to the second H2. The DIV isn't
   exactly that section, but it roughly corresponds to it.&lt;/p>
  &lt;/div>
  &lt;h2>Second example&lt;/h2>
  &lt;article id="b">
   &lt;p>&lt;a href="b.html" rel="bookmark">This&lt;/a> permalink applies to
   the outer ARTICLE element (which could be, e.g., a blog post).&lt;/p>
   &lt;article id="c">
    &lt;p>&lt;a href="c.html" rel="bookmark">This&lt;/a> permalink applies to
    the inner ARTICLE element (which could be, e.g., a blog comment).&lt;/p>
   &lt;/article>
  &lt;/article>
 &lt;/body>
 ...</pre>
  </div>


  <h5>Link type "<dfn title="rel-contact"><code>contact</code></dfn>"</h5>

  <p>The <code title="rel-contact">contact</code> keyword may be used
  with <code>link</code>, <code>a</code>, and <code>area</code>
  elements. For <code>link</code> elements, it creates a <span
  title="hyperlink link">hyperlink</span>.</p>

  <p>For <code>a</code> and <code>area</code> elements, the <code
  title="rel-contact">contact</code> keyword indicates that the
  referenced document provides further contact information for the
  section that the element defining the hyperlink <a
  href="#applyToSection">applies</a> to.</p>

  <p>User agents must treat any hyperlink in an <code>address</code>
  element as having the <code title="rel-contact">contact</code> link
  type specified.</p>

  <p>For <code>link</code> elements, the <code
  title="rel-contact">contact</code> keyword indicates that the
  referenced document provides further contact information for the
  page as a whole.</p>


  <h5>Link type "<dfn title="rel-external"><code>external</code></dfn>"</h5>

  <p>The <code title="rel-external">external</code> keyword may be
  used with <code>a</code> and <code>area</code> elements.</p>

  <p>The <code title="rel-external">external</code> keyword indicates
  that the link is leading to a document that is not part of the site
  that the current document forms a part of.</p>


  <h5>Link type "<dfn title="rel-feed"><code>feed</code></dfn>"</h5>

  <p>The <code title="rel-feed">feed</code> keyword may be used with
  <code>link</code>, <code>a</code>, and <code>area</code>
  elements. For <code>link</code> elements, it creates a <span
  title="hyperlink link">hyperlink</span>.</p>

  <p>The <code title="rel-feed">feed</code> keyword indicates that the
  referenced document is a syndication feed. If the <code
  title="rel-alternate">alternate</code> link type is also specified,
  then the feed is specifically the feed for the current document;
  otherwise, the feed is just a syndication feed, not necessarily
  associated with a particular Web page.</p>

  <p>The first <code>link</code>, <code>a</code>, or <code>area</code>
  element in the document (in tree order) that creates a hyperlink
  with the link type <code title="rel-feed">feed</code> must be
  treated as the default syndication feed for the purposes of feed
  autodiscovery.</p>

  <p class="note">The <code title="rel-feed">feed</code> keyword is
  implied by the <code title="rel-alternate">alternate</code> link
  type in certain cases (q.v.).</p>

  <div class="example">
   <p>The following two <code>link</code> elements are equivalent:
   both give the syndication feed for the current page:</p>
   <pre>&lt;link rel="alternate" type="application/atom+xml" href="data.xml"></pre>
   <pre>&lt;link rel="feed alternate" href="data.xml"></pre>
   <p>The following extract offers various different syndication
   feeds:</p>
   <pre> &lt;p>You can access the planets database using Atom feeds:&lt;/p>
 &lt;ul>
  &lt;li>&lt;a href="recently-visited-planets.xml" rel="feed">Recently Visited Planets&lt;/a>&lt;/li>
  &lt;li>&lt;a href="known-bad-planets.xml" rel="feed">Known Bad Planets&lt;/a>&lt;/li>
  &lt;li>&lt;a href="unexplored-planets.xml" rel="feed">Unexplored Planets&lt;/a>&lt;/li>
 &lt;/ul></pre>
  </div>


  <h5>Link type "<dfn title="rel-help"><code>help</code></dfn>"</h5>

  <p>The <code title="rel-help">help</code> keyword may be used with
  <code>link</code>, <code>a</code>, and <code>area</code>
  elements. For <code>link</code> elements, it creates a <span
  title="hyperlink link">hyperlink</span>.</p>

  <p>For <code>a</code> and <code>area</code> elements, the <code
  title="rel-help">help</code> keyword indicates that the referenced
  document provides further help information for the parent of the
  element defining the hyperlink, and its children.</p>

  <div class="example">

   <p>In the following example, the form control has associated
   context-sensitive help. The user agent could use this information,
   for example, displaying the referenced document if the user presses
   the "Help" or "F1" key.</p>

   <pre> &lt;p>&lt;label> Topic: &lt;input name=topic> &lt;a href="help/topic.html" rel="help">(Help)&lt;/a>&lt;/label>&lt;/p></pre>

  </div>

  <p>For <code>link</code> elements, the <code
  title="rel-help">help</code> keyword indicates that the referenced
  document provides help for the page as a whole.</p>


  <h5>Link type "<dfn title="rel-icon"><code>icon</code></dfn>"</h5>

  <p>The <code title="rel-icon">icon</code> keyword may be used with
  <code>link</code> elements, for which it creates an <span
  title="external resource link">external resource link</span>.</p>

  <p>The specified resource is an icon representing the page or site,
  and should be used by the user agent when representing the page in
  the user interface.</p>

  <p>Icons could be auditory icons, visual icons, or other kinds of
  icons. If multiple icons are provided, the user agent must select
  the most appropriate icon according to the <code
  title="attr-link-media">media</code> attribute.</p>

  <p>There is no default type for resources given by the <code
  title="rel-icon">icon</code> keyword.</p> <!-- XXX we don't define
  the content-type sniffing for this keyword -->


  <h5>Link type "<dfn title="rel-license"><code>license</code></dfn>"</h5>

  <p>The <code title="rel-license">license</code> keyword may be used
  with <code>link</code>, <code>a</code>, and <code>area</code>
  elements. For <code>link</code> elements, it creates a <span
  title="hyperlink link">hyperlink</span>.</p>

  <p>The <code title="rel-license">license</code> keyword indicates
  that the referenced document provides the copyright license terms
  under which the current document is provided.</p>

  <p><strong>Synonyms</strong>: For historical reasons, user agents
  must also treat the keyword "<code title="">copyright</code>" like
  the <code title="rel-license">license</code> keyword.</p>


  <h5>Link type "<dfn title="rel-nofollow"><code>nofollow</code></dfn>"</h5>

  <p>The <code title="rel-nofollow">nofollow</code> keyword may be
  used with <code>a</code> and <code>area</code> elements.</p>

  <p>The <code title="rel-nofollow">nofollow</code> keyword indicates
  that the link is not endorsed by the original author or publisher of
  the page.</p>


  <h5>Link type "<dfn title="rel-noreferrer"><code>noreferrer</code></dfn>"</h5>

  <p>The <code title="rel-noreferrer">noreferrer</code> keyword may be
  used with <code>a</code> and <code>area</code> elements.</p>

  <p>If a user agent follows a link defined by an <code>a</code> or
  <code>area</code> element that has the <code
  title="rel-noreferrer">noreferrer</code> keyword, the user agent must
  not include a <code title="">Referer</code> HTTP header (or
  equivalent for other protocols) in the request.</p>


  <h5>Link type "<dfn title="rel-pingback"><code>pingback</code></dfn>"</h5>

  <p>The <code title="rel-pingback">pingback</code> keyword may be
  used with <code>link</code> elements, for which it creates an <span
  title="external resource link">external resource link</span>.</p>

  <p>For the semantics of the <code
  title="rel-pingback">pingback</code> keyword, see the Pingback 1.0
  specification. <a href="#refsPINGBACK">[PINGBACK]</a></p>


  <h5>Link type "<dfn title="rel-prefetch"><code>prefetch</code></dfn>"</h5>

  <p>The <code title="rel-prefetch">prefetch</code> keyword may be
  used with <code>link</code> elements, for which it creates an <span
  title="external resource link">external resource link</span>.</p>

  <p>The <code title="rel-prefetch">prefetch</code> keyword indicates
  that preemptively fetching and caching the specified resource is
  likely to be beneficial, as it is highly likely that the user will
  require this resource.</p>

  <p>There is no default type for resources given by the <code
  title="rel-prefetch">prefetch</code> keyword.</p>


  <h5>Link type "<dfn title="rel-search"><code>search</code></dfn>"</h5>

  <p>The <code title="rel-search">search</code> keyword may be used
  with <code>link</code>, <code>a</code>, and <code>area</code>
  elements. For <code>link</code> elements, it creates a <span
  title="hyperlink link">hyperlink</span>.</p>

  <p>The <code title="rel-search">search</code> keyword indicates that
  the referenced document provides an interface specifically for
  searching the document and its related resources.</p>

  <p class="note">OpenSearch description documents can be used with
  <code>link</code> elements and the <code
  title="rel-search">search</code> link type to enable user agents to
  autodiscover search interfaces. <a
  href="#refsOPENSEARCH">[OPENSEARCH]</a></p> <!-- XXX
  http://www.opensearch.org/Specifications/OpenSearch/1.1#Autodiscovery_in_HTML.2FXHTML
  -->


  <h5>Link type "<dfn title="rel-stylesheet"><code>stylesheet</code></dfn>"</h5>

  <p>The <code title="rel-stylesheet">stylesheet</code> keyword may be
  used with <code>link</code> elements, for which it creates an <span
  title="external resource link">external resource link</span> that
  contributes to the <span>styling processing model</span>.</p>

  <p>The specified resource is a resource that describes how to
  present the document. Exactly how the resource is to be processed
  depends on the actual type of the resource.</p>

  <p>If the <code title="rel-alternate">alternate</code> keyword is
  also specified on the <code>link</code> element, then the link is an
  alternative stylesheet.</p>

  <p>The default type for resources given by the <code
  title="rel-stylesheet">stylesheet</code> keyword is <code
  title="">text/css</code>.</p>

  <p><strong>Quirk:</strong> If the document has been set to
  <span>quirks mode</span> and the <span
  title="Content-Type">Content-Type metadata</span> of the external
  resource is not a supported style sheet type, the user agent must
  instead assume it to be <code title="">text/css</code>.</p>


  <h5>Link type "<dfn title="rel-sidebar"><code>sidebar</code></dfn>"</h5>

  <p>The <code title="rel-sidebar">sidebar</code> keyword may be used
  with <code>link</code>, <code>a</code>, and <code>area</code>
  elements. For <code>link</code> elements, it creates a <span
  title="hyperlink link">hyperlink</span>.</p>

  <p>The <code title="rel-sidebar">sidebar</code> keyword indicates
  that the referenced document, if retrieved, is intended to be shown
  in a <span>secondary browsing context</span> (if possible), instead
  of in the current <span>browsing context</span>.</p>

  <p>A <span title="hyperlink">hyperlink element</span> with with the
  <code title="rel-sidebar">sidebar</code> keyword specified is a <dfn
  title="rel-sidebar-hyperlink">sidebar hyperlink</dfn>.</p>


  <h5>Link type "<dfn title="rel-tag"><code>tag</code></dfn>"</h5>

  <p>The <code title="rel-tag">tag</code> keyword may be used
  with <code>link</code>, <code>a</code>, and <code>area</code>
  elements. For <code>link</code> elements, it creates a <span
  title="hyperlink link">hyperlink</span>.</p>

  <p>The <code title="rel-tag">tag</code> keyword indicates that the
  <em>tag</em> that the referenced document represents applies to the
  current document.</p>


  <h5>Hierarchical link types</h5>

  <p>Some documents form part of a hierarchical structure of
  documents.</p>

  <p>A hierarchical structure of documents is one where each document
  can have various subdocuments. The document of which a document is a
  subdocument is said to be the document's <em>parent</em>. A document
  with no parent forms the top of the hierarchy.</p>

  <p>A document may be part of multiple hierarchies.</p>


  <h6>Link type "<dfn title="rel-index"><code>index</code></dfn>"</h6>

  <p>The <code title="rel-index">index</code> keyword may be used with
  <code>link</code>, <code>a</code>, and <code>area</code>
  elements. For <code>link</code> elements, it creates a <span
  title="hyperlink link">hyperlink</span>.</p>

  <p>The <code title="rel-index">index</code> keyword indicates that
  the document is part of a hierarchical structure, and that the link
  is leading to the document that is the top of the hierarchy. It
  conveys more information when used with the <code
  title="rel-up">up</code> keyword (q.v.).</p>

  <p><strong>Synonyms</strong>: For historical reasons, user agents
  must also treat the keywords "<code title="">top</code>", "<code
  title="">contents</code>", and "<code title="">toc</code>" like the
  <code title="rel-index">index</code> keyword.</p>


  <h6>Link type "<dfn title="rel-up"><code>up</code></dfn>"</h6>

  <p>The <code title="rel-up">up</code> keyword may be used with
  <code>link</code>, <code>a</code>, and <code>area</code>
  elements. For <code>link</code> elements, it creates a <span
  title="hyperlink link">hyperlink</span>.</p>

  <p>The <code title="rel-up">up</code> keyword indicates that the
  document is part of a hierarchical structure, and that the link is
  leading to the document that is the parent of the current
  document.</p>

  <p>The <code title="rel-up">up</code> keyword may be repeated within
  a <code title="attr-hyperlink-rel">rel</code> attribute to indicate
  the hierarchical distance from the current document to the
  referenced document. Each occurance of the keyword represents one
  further level. If the <code title="rel-index">index</code> keyword
  is also present, then the number of <code title="rel-up">up</code>
  keywords is the depth of the current page relative to the top of the
  hierarchy.</p>

  <p>If the page is part of multiple hierarchies, then they should be
  described in different <span
  title="paragraph">paragraphs</span>. User agents must scope any
  interpretation of the <code title="rel-up">up</code> and <code
  title="rel-index">index</code> keywords together indicating the
  depth of the hierarchy to the <span>paragraph</span> in which the
  link finds itself, if any, or to the document otherwise.</p>

  <p>When two links have both the <code title="rel-up">up</code> and
  <code title="rel-index">index</code> keywords specified together in
  the same scope and contradict each other by having a different
  number of <code title="rel-up">up</code> keywords, the link with the
  greater number of <code title="rel-up">up</code> keywords must be
  taken as giving the depth of the document.</p>

  <div class="example">

   <p>This can be used to mark up a navigation style sometimes known
   as breadcrumbs. In the following example, the current page can be
   reached via two paths.</p>

   <pre>&lt;nav>
 &lt;p>
  &lt;a href="/" rel="index up up up">Main&lt;/a> &gt;
  &lt;a href="/products/" rel="up up">Products&lt;/a> &gt;
  &lt;a href="/products/dishwashers/" rel="up">Dishwashers&lt;/a> &gt;
  &lt;a>Second hand&lt;/a>
 &lt;/p>
 &lt;p>
  &lt;a href="/" rel="index up up">Main&lt;/a> &gt;
  &lt;a href="/second-hand/" rel="up">Second hand&lt;/a> &gt;
  &lt;a>Dishwashers&lt;/a>
 &lt;/p>
&lt;/nav></pre>

  </div>

  <p class="note">The <code title="dom-a-relList">relList</code> DOM
  attribute (e.g. on the <code>a</code> element) does not currently
  represent multiple <code title="rel-up">up</code> keywords (the
  interface hides duplicates).</p>


  <h5>Sequential link types</h5>

  <p>Some documents form part of a sequence of documents.</p>

  <p>A sequence of documents is one where each document can have a
  <em>previous sibling</em> and a <em>next sibling</em>. A document
  with no previous sibling is the start of its sequence, a document
  with no next sibling is the end of its sequence.</p>

  <p>A document may be part of multiple sequences.</p>


  <h6>Link type "<dfn title="rel-first"><code>first</code></dfn>"</h6>

  <p>The <code title="rel-first">first</code> keyword may be used with
  <code>link</code>, <code>a</code>, and <code>area</code>
  elements. For <code>link</code> elements, it creates a <span
  title="hyperlink link">hyperlink</span>.</p>

  <p>The <code title="rel-first">first</code> keyword indicates that
  the document is part of a sequence, and that the link is leading to
  the document that is the first logical document in the sequence.</p>

  <p><strong>Synonyms</strong>: For historical reasons, user agents
  must also treat the keywords "<code title="">begin</code>" and
  "<code title="">start</code>" like the <code
  title="rel-first">first</code> keyword.</p>


  <h6>Link type "<dfn title="rel-last"><code>last</code></dfn>"</h6>

  <p>The <code title="rel-last">last</code> keyword may be used with
  <code>link</code>, <code>a</code>, and <code>area</code>
  elements. For <code>link</code> elements, it creates a <span
  title="hyperlink link">hyperlink</span>.</p>

  <p>The <code title="rel-last">last</code> keyword indicates that the
  document is part of a sequence, and that the link is leading to the
  document that is the last logical document in the sequence.</p>

  <p><strong>Synonyms</strong>: For historical reasons, user agents
  must also treat the keyword "<code title="">end</code>" like the
  <code title="rel-last">last</code> keyword.</p>


  <h6>Link type "<dfn title="rel-next"><code>next</code></dfn>"</h6>

  <p>The <code title="rel-next">next</code> keyword may be used with
  <code>link</code>, <code>a</code>, and <code>area</code>
  elements. For <code>link</code> elements, it creates a <span
  title="hyperlink link">hyperlink</span>.</p>

  <p>The <code title="rel-next">next</code> keyword indicates that the
  document is part of a sequence, and that the link is leading to the
  document that is the next logical document in the sequence.</p>


  <h6>Link type "<dfn title="rel-prev"><code>prev</code></dfn>"</h6>

  <p>The <code title="rel-prev">prev</code> keyword may be used with
  <code>link</code>, <code>a</code>, and <code>area</code>
  elements. For <code>link</code> elements, it creates a <span
  title="hyperlink link">hyperlink</span>.</p>

  <p>The <code title="rel-prev">prev</code> keyword indicates that the
  document is part of a sequence, and that the link is leading to the
  document that is the previous logical document in the sequence.</p>

  <p><strong>Synonyms</strong>: For historical reasons, user agents
  must also treat the keyword "<code title="">previous</code>" like
  the <code title="rel-prev">prev</code> keyword.</p>


  <h5>Other link types</h5>

  <p>Other than the types defined above, only types defined as
  extensions in the <a
  href="http://wiki.whatwg.org/wiki/RelExtensions">WHATWG Wiki
  RelExtensions page</a> may be used with the <code
  title="">rel</code> attribute on <code>link</code>, <code>a</code>,
  and <code>area</code> elements. <a
  href="#refsWHATWGWIKI">[WHATWGWIKI]</a></p>

  <p>Anyone is free to edit the WHATWG Wiki RelExtensions page at any
  time to add a type. Extension types must be specified with the
  following information:</p>

  <dl>

   <dt>Keyword</dt>

   <dd><p>The actual value being defined. The value should not be
   confusingly similar to any other defined value (e.g. differing only
   in case).</p></dd>


   <dt>Effect on... <code>link</code></dt>

   <dd>

    <p>One of the following:</p>

    <dl>

     <dt>not allowed</dt>

     <dd>The keyword is not allowed to be specified on
     <code>link</code> elements.</dd>

     <dt>Hyperlink</dt>

     <dd>The keyword may be specified on a <code>link</code> element;
     it creates a <span title="hyperlink link">hyperlink
     link</span>.</dd>

     <dt>External Resource</dt>

     <dd>The keyword may be specified on a <code>link</code> element;
     it creates a <span title="external resource link">external
     resource link</span>.</dd>

    </dl>

   </dd>


   <dt>Effect on... <code>a</code> and <code>area</code></dt>

   <dd>

    <p>One of the following:</p>

    <dl>

     <dt>not allowed</dt>

     <dd>The keyword is not allowed to be specified on <code>a</code>
     and <code>area</code> elements.</dd>

     <dt>Hyperlink</dt>

     <dd>The keyword may be specified on <code>a</code> and
     <code>area</code> elements.</dd>

    </dl>

   </dd>


   <dt>Brief description</dt>

   <dd><p>A short description of what the keyword's meaning is.</p></dd>


   <dt>Link to more details</dt>

   <dd><p>A link to a more detailed description of the keyword's
   semantics and requirements. It could be another page on the Wiki,
   or a link to an external page.</p></dd>


   <dt>Synonyms</dt>

   <dd><p>A list of other keyword values that have exactly the same
   processing requirements. Authors must not use the values defined to
   be synonyms, they are only intended to allow user agents to support
   legacy content.</p></dd>


   <dt>Status</dt>

   <dd>

    <p>One of the following:</p>

    <dl>

     <dt>Proposal</dt>

     <dd>The keyword has not received wide peer review and
     approval. It is included for completeness because pages use the
     keyword. Pages should not use the keyword.</dd>

     <dt>Accepted</dt>

     <dd>The keyword has received wide peer review and approval. It
     has a specification that unambiguously defines how to handle
     pages that use the keyword, including when they use them in
     incorrect ways. Pages may use the keyword.</dd>

     <dt>Rejected</dt>

     <dd>The keyword has received wide peer review and it has been
     found to have significant problems. Pages must not use the
     keyword. When a keyword has this status, the "Effect
     on... <code>link</code>" and "Effect on... <code>a</code> and
     <code>area</code>" information should be set to "not
     allowed".</dd>

    </dl>

    <p>If a keyword is added with the "proposal" status and found to
    be redundant with existing values, it should be removed and listed
    as a synonym for the existing value. If a keyword is added with
    the "proposal" status and found to be harmful, then it should be
    changed to "rejected" status, and its "Effect on..." information
    should be changed accordingly.</p>

   </dd>

  </dl>

  <p>Conformance checkers must use the information given on the WHATWG
  Wiki RelExtensions page to establish if a value not explicitly
  defined in this specification is allowed or not. When an author uses
  a new type not defined by either this specification or the Wiki
  page, conformance checkers should offer to add the value to the
  Wiki, with the details described above, with the "proposal"
  status.</p>

  <p>This specification does not define how new values will get
  approved. It is expected that the Wiki will have a community that
  addresses this.</p>


  <h3>Interfaces for URI manipulation</h3>

  <p>An interface that has a complement of <dfn>URI decomposition
  attributes</dfn> will have seven attributes with the following
  definitions:</p>

<pre class="idl">
           attribute DOMString <span title="dom-uda-protocol">protocol</span>;
           attribute DOMString <span title="dom-uda-host">host</span>;
           attribute DOMString <span title="dom-uda-hostname">hostname</span>;
           attribute DOMString <span title="dom-uda-port">port</span>;
           attribute DOMString <span title="dom-uda-pathname">pathname</span>;
           attribute DOMString <span title="dom-uda-search">search</span>;
           attribute DOMString <span title="dom-uda-hash">hash</span>;
</pre>

  <p>The attributes defined to be URI decomposition attributes must
  act as described for the attributes with the same corresponding
  names in this section.</p>

  <p>In addition, an interface with a complement of URI decomposition
  attributes will define an <dfn
  title="concept-uda-input">input</dfn>, which is a URI that the
  attributes act on, and a <dfn title="concept-uda-setter">common
  setter action</dfn>, which is a set of steps invoked when any of the
  attributes' setters are invoked.</p>

  <p>The seven URI decomposition attributes have similar
  requirements.</p>

  <p>On getting, if the <span title="concept-uda-input">input</span>
  fulfills the condition given in the "getter condition" column
  corresponding to the attribute in the table below, the user agent
  must return the part of the <span
  title="concept-uda-input">input</span> URI given in the "component"
  column, with any prefixes specified in the "prefix" column
  appropriately added to the start of the string and any suffixes
  specified in the "suffix" column appropriately added to the end of
  the string. Otherwise, the attribute must return the empty
  string.</p>

  <p>On setting, the new value must first be mutated as described by
  the "setter preprocessor" column, then mutated by %-escaping any
  characters in the new value that are not valid in the relevant
  component as given by the "component" column. Then, if the resulting
  new value fulfills the condition given in the "setter condition"
  column, the user agent must make a new string <var
  title="">output</var> by replacing the component of the URI given by
  the "component" column in the <span
  title="concept-uda-input">input</span> URI with the new value;
  otherwise, the user agent must let <var title="">output</var> be
  equal to the <span title="concept-uda-input">input</span>. Finally,
  the user agent must invoke the <span
  title="concept-uda-setter">common setter action</span> with the
  value of <var title="">output</var>.</p>

  <p>When replacing a component in the URI, if the component is part
  of an optional group in the URI syntax consisting of a character
  followed by the component, the component (including its prefix
  character) must be included even if the new value is the empty
  string.</p>

  <p class="note">The previous paragraph applies in particular to the
  "<code title="">:</code>" before a &lt;port> component, the "<code
  title="">?</code>" before a &lt;query> component, and the "<code
  title="">#</code>" before a &lt;fragment> component.</p>

  <p>The rules for parsing and constructing URIs are described in RFC
  3986 and RFC 3987. <a href="#refsRFC3986">[RFC3986]</a> <a
  href="#refsRFC3987">[RFC3987]</a></p>

  <table>
   <thead>      
    <tr>
     <th>Attribute
     <th>Component
     <th>Getter Condition
     <th>Prefix
     <th>Suffix
     <th>Setter Preprocessor
     <th>Setter Condition
   <tbody>
    <tr>
     <td><dfn title="dom-uda-protocol"><code>protocol</code></dfn>
     <td>&lt;scheme&gt;
     <td>&mdash;
     <td>&mdash;
     <td>U+003A COLON ("<code title="">:</code>")
     <td>Remove all trailing U+003A COLON ("<code title="">:</code>") characters
     <td>The new value is not the empty string
    <tr>
     <td><dfn title="dom-uda-host"><code>host</code></dfn>
     <td><span>&lt;hostport&gt;</span>
     <td><span title="concept-uda-input">input</span> is hierarchical and uses a server-based naming authority
     <td>&mdash;
     <td>&mdash;
     <td>&mdash;
     <td>&mdash;
    <tr>
     <td><dfn title="dom-uda-hostname"><code>hostname</code></dfn>
     <td>&lt;host&gt;/&lt;ihost&gt;
     <td><span title="concept-uda-input">input</span> is hierarchical and uses a server-based naming authority
     <td>&mdash;
     <td>&mdash;
     <td>Remove all leading U+002F SOLIDUS ("<code title="">/</code>") characters
     <td>&mdash;
    <tr>
     <td><dfn title="dom-uda-port"><code>port</code></dfn>
     <td>&lt;port&gt;
     <td><span title="concept-uda-input">input</span> is hierarchical and uses a server-based naming authority
     <td>&mdash;
     <td>&mdash;
     <td>Remove any characters in the new value that are not in the range U+0030 DIGIT ZERO .. U+0039 DIGIT NINE.
         If the resulting string is empty, set it to a single U+0030 DIGIT ZERO character ('0').
     <td>&mdash;
    <tr>
     <td><dfn title="dom-uda-pathname"><code>pathname</code></dfn>
     <td>&lt;abs_path&gt;
     <td><span title="concept-uda-input">input</span> is hierarchical
     <td>&mdash;
     <td>&mdash;
     <td>If it has no leading U+002F SOLIDUS ("<code title="">/</code>") character, prepend a U+002F SOLIDUS ("<code title="">/</code>") character to the new value
     <td>&mdash;
    <tr>
     <td><dfn title="dom-uda-search"><code>search</code></dfn>
     <td>&lt;query&gt;
     <td><span title="concept-uda-input">input</span> is hierarchical
     <td>U+003F QUESTION MARK ("<code title="">?</code>")
     <td>&mdash;
     <td>Remove one leading U+003F QUESTION MARK ("<code title="">?</code>") character, if any
     <td>&mdash;
    <tr>
     <td><dfn title="dom-uda-hash"><code>hash</code></dfn>
     <td>&lt;fragment&gt;
     <td>Fragment identifier is longer than zero characters
     <td>U+0023 NUMBER SIGN ("<code title="">#</code>")
     <td>&mdash;
     <td>Remove one leading U+0023 NUMBER SIGN ("<code title="">#</code>") character, if any
     <td>&mdash;
  </table>

  <p>The <dfn>&lt;hostport&gt;</dfn> component is defined as being the
  &lt;host&gt;/&lt;ihost&gt; component, followed by a colon and the
  &lt;port&gt; component, but with the colon and &lt;port&gt;
  component omitted if the given port matches the default port for the
  protocol given by the &lt;scheme&gt; component.</p>

<!--
  http://www.hixie.ch/tests/adhoc/dom/level0/location/components/
  http://lxr.mozilla.org/seamonkey/source/dom/src/base/nsLocation.cpp
  http://wp.netscape.com/eng/mozilla/3.0/handbook/javascript/ref_h-l.htm#84722
-->



  <h2 id="editing"><dfn>Editing</dfn></h2>

  <p>This section describes various features that allow authors to
  enable users to edit documents and parts of documents
  interactively.</p>

  <h3 id="editing-intro">Introduction</h3>

  <p><em>This section is non-normative.</em></p>

  <p class="big-issue">Would be nice to explain how these features
  work together.</p>


  <h3 id="contenteditable">The <code
  title="attr-contenteditable">contenteditable</code> attribute</h3>

  <p>The <dfn
  title="attr-contenteditable"><code>contenteditable</code></dfn>
  attribute is a common attribute. User agents must support this
  attribute on all <span>HTML elements</span>.</p>

  <p>The <code title="attr-contenteditable">contenteditable</code>
  attribute is an <span>enumerated attribute</span> whose keywords are
  the empty string, <code title="">true</code>, and <code
  title="">false</code>. The empty string and the <code
  title="">true</code> keyword map to the <em>true</em> state. The
  <code title="">false</code> keyword maps to the <em>false</em>
  state. In addition, there is a third state, the <em>inherit</em>
  state, which is the <em>missing value default</em> (and the
  <em>invalid value default</em>).</p>

  <p>If an <span title="HTML elements">HTML element</span> has a <code
  title="attr-contenteditable">contenteditable</code> attribute set to
  the true state, or it has its <code
  title="attr-contenteditable">contenteditable</code> attribute set to
  the inherit state and if its nearest ancestor <span title="HTML
  elements">HTML element</span> with the <code
  title="attr-contenteditable">contenteditable</code> attribute set to
  a state other than the inherit state has its attribute set to the
  true state, or if it and its ancestors all have their <code
  title="attr-contenteditable">contenteditable</code> attribute set to
  the inherit state but the <code>Document</code> has <code
  title="dom-document-designMode">designMode</code> enabled, then the
  UA must treat the element as <dfn>editable</dfn> (as described
  below).</p>

  <p>Otherwise, either the <span title="HTML elements">HTML
  element</span> has a <code
  title="attr-contenteditable">contenteditable</code> attribute set to
  the false state, or its <code
  title="attr-contenteditable">contenteditable</code> attribute is set
  to the inherit state and its nearest ancestor <span title="HTML
  elements">HTML element</span> with the <code
  title="attr-contenteditable">contenteditable</code> attribute set to
  a state other than the inherit state has its attribute set to the
  false state, or all its ancestors have their <code
  title="attr-contenteditable">contenteditable</code> attribute set to
  the inherit state and the <code>Document</code> itself has <code
  title="dom-document-designMode">designMode</code> disabled; either
  way, the element is not editable.</p>

  <p>The <dfn
  title="dom-contentEditable"><code>contentEditable</code></dfn> DOM
  attribute, on getting, must return the string "<code
  title="">true</code>" if the content attribute is set to the true
  state, <code title="">false</code>" if the content attribute is set
  to the false state, and "<code title="">inherit</code>"
  otherwise. On setting, if the new value is case-insensitively<!--
  XXX ascii --> equal to the string "<code title="">inherit</code>"
  then the content attribute must be removed, if the new value is
  case-insensitively<!-- XXX ascii --> equal to the string "<code
  title="">true</code>" then the content attribute must be set to the
  string "<code title="">true</code>", if the new value is
  case-insensitively<!-- XXX ascii --> equal to the string "<code
  title="">false</code>" then the content attribute must be set to the
  string "<code title="">false</code>", and otherwise the attribute
  setter must raise a <code>SYNTAX_ERR</code> exception.</p>

  <p>The <dfn
  title="dom-isContentEditable"><code>isContentEditable</code></dfn>
  DOM attribute, on getting, must return true if the element is
  <span>editable</span>, and false otherwise.</p>

  <p>If an element is <span>editable</span> and its parent element is
  not, or if an element is <span>editable</span> and it has no parent
  element, then the element is an <dfn>editing host</dfn>. Editable
  elements can be nested. User agents must make editing hosts
  focusable (which typicially means they enter the <span
  title="tabindex">tab order</span>). An editing host can contain
  non-editable sections, these are handled as described below. An
  editing host can contain non-editable sections that contain further
  editing hosts.</p>

  <p>When an editing host has focus, it must have a <dfn>caret
  position</dfn> that specifies where the current editing position
  is. It may also have a <span title="the
  selection">selection</span>.</p> <!-- XXX xref to later section -->

  <p class="note">How the caret and selection are represented depends
  entirely on the UA.</p>

  <!-- XXX rendering requirement: The current caret should affect the
  line-height (i.e. it acts at least like an empty inline element) -->

  <!-- XXX document.designMode attribute -->


  <h4>User editing actions</h4>

  <p>There are several actions that the user agent should allow the
  user to perform while the user is interacting with an editing
  host. How exactly each action is triggered is not defined for every
  action, but when it is not defined, suggested key bindings are
  provided to guide implementors.</p>

  <dl>

   <dt>Move the caret</dt>

   <dd><p>User agents must allow users to move the caret to any
   position within an editing host, even into nested editable
   elements. This could be triggered as the default action of <code
   title="event-keydown">keydown</code> events with various key
   identifiers and as the default action of <code
   title="event-mousedown">mousedown</code> events.</p></dd>


   <dt>Change the selection</dt>

   <dd><p>User agents must allow users to change <span>the
   selection</span> within an editing host, even into nested editable
   elements. User agents may prevent selections from being made in
   ways that cross from editable elements into non-editable elements
   (e.g. by making each non-editable descendant atomically selectable,
   but not allowing text selection within them). This could be
   triggered as the default action of <code
   title="event-keydown">keydown</code> events with various key
   identifiers and as the default action of <code
   title="event-mousedown">mousedown</code> events.</p></dd>


   <dt id="contenteditable-insertText">Insert text</dt>

   <dd><p>This action must be triggered as the default action of a
   <code title="event-textInput">textInput</code> event, and may be
   triggered by other commands as well. It must cause the user agent
   to insert the specified text (given by the event object's <code
   title="">data</code> attribute in the case of the <code
   title="event-textInput">textInput</code> event) at the caret.</p>

   <p>If the caret is positioned somewhere where <span>phrasing
   content</span> is not allowed (e.g. inside an empty <code>ol</code>
   element), then the user agent must not insert the text directly at
   the caret position. In such cases the behaviour is UA-dependent,
   but user agents must not, in response to a request to insert text,
   generate a DOM that is less conformant than the DOM prior to the
   request.</p>

   <p>User agents should allow users to insert new paragraphs into
   elements that contains only content other than paragraphs.</p>

   <div class="example">
    <p>For example, given the markup:</p>
    <pre>&lt;section&gt;
 &lt;dl&gt;
  &lt;dt&gt; Ben &lt;/dt&gt;
  &lt;dd&gt; Goat &lt;/dd&gt;
 &lt;/dl&gt;
&lt;/section&gt;</pre>
    <p>...the user agent should allow the user to insert
    <code>p</code> elements before and after the <code>dl</code>
    element, as children of the <code>section</code> element.</p>
   </div>

   </dd>


   <dt id="contenteditable-breakBlock">Break block</dt>

   <dd><p>UAs should offer a way for the user to request that the
   current paragraph be broken at the caret, e.g. as the default
   action of a <code title="event-keydown">keydown</code> event whose
   identifier is the "Enter" key and that has no modifiers set.</p>

   <p>The exact behaviour is UA-dependent, but user agents must not,
   in response to a request to break a paragraph, generate a DOM that
   is less conformant than the DOM prior to the request.</p></dd>


   <dt id="contenteditable-br">Insert a line separator</dt>

   <dd><p>UAs should offer a way for the user to request an explicit
   line break at the caret position without breaking the paragraph,
   e.g. as the default action of a <code
   title="event-keydown">keydown</code> event whose identifier is the
   "Enter" key and that has a shift modifier set. Line separators are
   typically found within a poem verse or an address. To insert a line
   break, the user agent must insert a <code>br</code> element.</p>

   <p>If the caret is positioned somewhere where <span>phrasing
   content</span> is not allowed (e.g. in an empty <code>ol</code>
   element), then the user agent must not insert the <code>br</code>
   element directly at the caret position. In such cases the behaviour
   is UA-dependent, but user agents must not, in response to a request
   to insert a line separator, generate a DOM that is less conformant
   than the DOM prior to the request.</p></dd>


   <dt id="contenteditable-delete">Delete</dt>

   <dd><p>UAs should offer a way for the user to delete text and
   elements, including non-editable descendants, e.g. as the default
   action of <code title="event-keydown">keydown</code> events whose
   identifiers are "U+0008" or "U+007F".</p>

   <p>Five edge cases in particular need to be considered carefully
   when implementing this feature: backspacing at the start of an
   element, backspacing when the caret is immediately after an
   element, forward-deleting at the end of an element,
   forward-deleting when the caret is immediately before an element,
   and deleting a <span title="the selection">selection</span> whose
   start and end points do not share a common parent node.</p>

   <p>In any case, the exact behaviour is UA-dependent, but user
   agents must not, in response to a request to delete text or an
   element, generate a DOM that is less conformant than the DOM prior
   to the request.</p></dd>


   <dt id="contenteditable-wrapSemantic">Insert, and wrap text in,
   semantic elements</dt>

   <dd><p>UAs should offer the user the ability to mark text and
   paragraphs with semantics that HTML can express.</p>

   <p>UAs should similarly offer a way for the user to insert empty
   semantic elements to subsequently fill by entering text
   manually.</p>

   <p>UAs should also offer a way to remove those semantics from
   marked up text, and to remove empty semantic element that have been
   inserted.</p>

   <p>In response to a request from a user to mark text up in italics,
   user agents should use the <code>i</code> element to represent the
   semantic. The <code>em</code> element should only be used if the
   user agent is sure that the user means to indicate stress
   emphasis.</p>

   <p>In response to a request from a user to mark text up in bold,
   user agents should use the <code>b</code> element to represent the
   semantic. The <code>strong</code> element should only be used if
   the user agent is sure that the user means to indicate
   importance.</p>

   <p>The exact behaviour is UA-dependent, but user agents must not,
   in response to a request to wrap semantics around some text or to
   insert or remove a semantic element, generate a DOM that is less
   conformant than the DOM prior to the request.</p></dd>


   <dt>Select and move non-editable elements nested inside editing hosts</dt>

   <dd><p>UAs should offer a way for the user to move images and other
   non-editable parts around the content within an editing host. This
   may be done using the <span>drag and drop</span> mechanism. User
   agents must not, in response to a request to move non-editable
   elements nested inside editing hosts, generate a DOM that is less
   conformant than the DOM prior to the request.</p></dd>


   <dt>Edit form controls nested inside editing hosts</dt>

   <dd><p>When an <span>editable</span> form control is edited, the
   changes must be reflected in both its current value <em>and</em>
   its default value. For <code>input</code> elements this means
   updating the <code
   title="dom-input-defaultValue">defaultValue</code> DOM attribute as
   well as the <code title="dom-input-value">value</code> DOM
   attribute; for <code>select</code> elements it means updating the
   <code>option</code> elements' <code
   title="dom-option-defaultSelected">defaultSelected</code> DOM
   attribute as well as the <code
   title="dom-option-selected">selected</code> DOM attribute; for
   <code>textarea</code> elements this means updating the <code
   title="dom-textarea-defaultValue">defaultValue</code> DOM attribute
   as well as the <code title="dom-textarea-value">value</code> DOM
   attribute. (Updating the <code title="">default*</code> DOM
   attributes causes content attributes to be updated as well.)</p></dd>

   <!-- XXX something about not supporting resizing? -->

  </dl>

  <!-- XXX each action performed should be added to the undo history -->

  <p>User agents may perform several commands per user request; for
  example if the user selects a block of text and hits
  <kbd><kbd>Enter</kbd></kbd>, the UA might interpret that as a
  request to delete the content of <span>the selection</span> followed
  by a request to break the paragraph at that position.</p>


  <h4>Making entire documents editable</h4>

  <p>Documents have a <dfn id="designMode"
  title="dom-document-designMode"><code>designMode</code></dfn>, which
  can be either enabled or disabled.</p>

  <p>The <code title="dom-document-designMode">designMode</code> DOM
  attribute on the <code>Document</code> object takes takes two
  values, "<code title="">on</code>" and "<code
  title="">off</code>". When it is set, the new value must be
  case-insensitively <!-- XXX ASCII case-folding --> compared to these
  two values. If it matches the "<code title="">on</code>" value, then
  <code title="dom-document-designMode">designMode</code> must be
  enabled, and if it matches the "<code title="">off</code>" value,
  then <code title="dom-document-designMode">designMode</code> must be
  disabled. Other values must be ignored.</p>

  <p>When <code title="dom-document-designMode">designMode</code> is
  enabled, the DOM attribute must return the value "<code
  title="">on</code>", and when it is disabled, it must return the
  value "<code title="">off</code>".</p>

  <p>The last state set must persist until the document is destroyed
  or the state is changed. Initially, documents must have their <code
  title="dom-document-designMode">designMode</code> disabled.</p>

  <p>Enabling <code title="dom-document-designMode">designMode</code>
  causes scripts in general to be disabled and the document to become
  editable.</p>

  <p>When the <code>Document</code> has <code
  title="dom-document-designMode">designMode</code> enabled, the
  <span>event handler attributes</span> of the document and any
  elements owned by the document must do nothing, and event listeners
  registered on the document and any elements owned by the document
  that are associated with script from the document must similarly do
  nothing.</p>



  <h3 id="dnd"><dfn>Drag and drop</dfn></h3>

<!--XXX

http://msdn.microsoft.com/workshop/author/datatransfer/overview.asp
http://msdn.microsoft.com/workshop/author/dhtml/reference/objects/clipboarddata.asp

> To implement this with simple interface I've proposed, events should be
> handled either by existing elements (like list items that compare their size
> and position of dragged element to decide whether element should be dropped
> before or after) or handled by container that would probably need to calculate
> positions of it's children and create new element to show drop target. Smooth
> Mac-like drag'n'drop can be implemented by animating drop target's
> padding/margin. So that's quite a bit of code that's going to be reinvented
> each time someone implements reordering.

<hyatt> :droptarget
<hyatt> or something
<hyatt> we don't support a pseudo-class for the drop target but that's a great idea
<Hixie_> yeah, thinking about that too
<Hixie_> :drop-target, :drop-target(above), :drop-target(below) and having ondragover be able to say "not on me, but next to me maybe"

http://msdn.microsoft.com/workshop/author/dhtml/reference/events/ondragstart.asp
http://msdn.microsoft.com/workshop/author/dhtml/reference/events/ondrag.asp
http://msdn.microsoft.com/workshop/author/dhtml/reference/events/ondragend.asp
http://msdn.microsoft.com/workshop/author/dhtml/reference/objects/obj_datatransfer.asp
http://developer.apple.com/documentation/AppleApplications/Conceptual/SafariJSProgTopics/Tasks/DragAndDrop.html
-->

  <p>This section defines an event-based drag-and-drop mechanism.</p>

  <p>This specification does not define exactly what a
  <em>drag-and-drop operation</em> actually is.</p>

  <p>On a visual medium with a pointing device, a drag operation could
  be the default action of a <code
  title="event-mousedown">mousedown</code> event that is followed by a
  series of <code title="event-mousemove">mousemove</code> events, and
  the drop could be triggered by the mouse being released.</p>

  <p>On media without a pointing device, the user would probably have
  to explicitly indicate his intention to perform a drag-and-drop
  operation, stating what he wishes to drag and what he wishes to
  drop, respectively.</p>

  <p>However it is implemented, drag-and-drop operations must have a
  starting point (e.g. where the mouse was clicked, or the start of
  <span>the selection</span> or element that was selected for the
  drag), may have any number of intermediate steps (elements that the
  mouse moves over during a drag, or elements that the user picks as
  possible drop points as he cycles through possibilities), and must
  either have an end point (the element above which the mouse button
  was released, or the element that was finally selected), or be
  canceled. The end point must be the last element selected as a
  possible drop point before the drop occurs (so if the operation is
  not canceled, there must be at least one element in the middle
  step).</p>


  <h4>Introduction</h4>

  <p><em>This section is non-normative.</em></p>

  <p class="big-issue">It's also currently non-existent.</p>


  <h4>The <code>DragEvent</code> and <code>DataTransfer</code> interfaces</h4>

  <p>The drag-and-drop processing model involves several events. They
  all use the <code>DragEvent</code> interface.</p>

  <pre class="idl">interface <dfn>DragEvent</dfn> : UIEvent {
  readonly attribute <span>DataTransfer</span> <span title="dom-DragEvent-dataTransfer">dataTransfer</span>;
  void <span title="dom-DragEvent-initDragEvent">initDragEvent</span>(in DOMString typeArg, in boolean canBubbleArg, in boolean cancelableArg, in AbstractView viewArg, in long detailArg, in <span>DataTransfer</span> dataTransferArg);
  void <span title="dom-DragEvent-initDragEventNS">initDragEventNS</span>(in DOMString namespaceURIArg, in DOMString typeArg, in boolean canBubbleArg, in boolean cancelableArg, in AbstractView viewArg, in long detailArg, in <span>DataTransfer</span> dataTransferArg);
};</pre>

  <p class="issue">We should have modifier key information in here too
  (shift/ctrl, etc), like with mouse events and like with the context
  menu event.</p>

  <p>The <dfn
  title="dom-DragEvent-initDragEvent"><code>initDragEvent()</code></dfn>
  and <dfn
  title="dom-DragEvent-initDragEventNS"><code>initDragEventNS()</code></dfn>
  methods must initialise the event in a manner analogous to the
  similarly-named methods in the DOM3 Events interfaces. <a
  href="#refsDOM3EVENTS">[DOM3EVENTS]</a></p>

  <p>The <dfn
  title="dom-DragEvent-dataTransfer"><code>dataTransfer</code></dfn>
  attribute of the <code>DragEvent</code> interface represents the
  context information for the event.</p>

  <pre class="idl">interface <dfn>DataTransfer</dfn> {
           attribute DOMString <span title="dom-DataTransfer-dropEffect">dropEffect</span>;
           attribute DOMString <span title="dom-DataTransfer-effectAllowed">effectAllowed</span>;
  readonly attribute DOMStringList <span title="dom-DataTransfer-types">types</span>;
  void <span title="dom-DataTransfer-clearData">clearData</span>(in DOMString format);
  void <span title="dom-DataTransfer-setData">setData</span>(in DOMString format, in DOMString data);
  DOMString <span title="dom-DataTransfer-getData">getData</span>(in DOMString format);
  void <span title="dom-DataTransfer-setDragImage">setDragImage</span>(in Element image, in long x, in long y);
  void <span title="dom-DataTransfer-addElement">addElement</span>(in Element element);
};
</pre>

  <p><code>DataTransfer</code> objects can conceptually contain
  various kinds of data.</p>

  <p>When a <code>DataTransfer</code> object is created, it must be
  initialised as follows:</p>

  <ul>

   <li>The <code>DataTransfer</code> object must initially contain no
   data, no elements, and have no associated image.</li>

   <li>The <code>DataTransfer</code> object's <code
   title="dom-DataTransfer-effectAllowed">effectAllowed</code>
   attribute must be set to "<code
   title="">uninitialized</code>".</li>

   <li>The <code title="dom-DataTransfer-dropEffect">dropEffect</code>
   attribute must be set to "<code title="">none</code>".</li>

  </ul>

  <p>The <dfn
  title="dom-DataTransfer-dropEffect"><code>dropEffect</code></dfn>
  attribute controls the drag-and-drop feedback that the user is given
  during a drag-and-drop operation.</p>

  <p>The attribute must ignore any attempts to set it to a value other
  than <code title="">none</code>, <code title="">copy</code>, <code
  title="">link</code>, and <code title="">move</code>. On getting,
  the attribute must return the last of those four values that it was
  set to.</p>

  <p>The <dfn
  title="dom-DataTransfer-effectAllowed"><code>effectAllowed</code></dfn>
  attribute is used in the drag-and-drop processing model to
  initialise the <code
  title="dom-DataTransfer-dropEffect">dropEffect</code> attribute
  during the <code title="event-dragenter">dragenter</code> and <code
  title="event-dragover">dragover</code> events.</p>

  <p>The attribute must ignore any attempts to set it to a value other
  than <code title="">none</code>, <code title="">copy</code>, <code
  title="">copyLink</code>, <code title="">copyMove</code>, <code
  title="">link</code>, <code title="">linkMove</code>, <code
  title="">move</code>, <code title="">all</code>, and <code
  title="">uninitialized</code>. On getting, the attribute must return
  the last of those values that it was set to.</p>

  <p><code>DataTransfer</code> objects can hold pieces of data, each
  associated with a unique format. Formats are generally given by MIME
  types, with some values special-cased for legacy reasons.</p>

  <p>The <dfn title="dom-DataTransfer-clearData"><code>clearData(<var
  title="">format</var>)</code></dfn> method must clear the
  <code>DataTransfer</code> object of any data associated with the
  given <var title="">format</var>. If <var title="">format</var> is
  the value "<code title="">Text</code>", then it must be treated as
  "<code title="">text/plain</code>". If the <var
  title="">format</var> is "<code title="">URL</code>", then it must
  be treated as "<code title="">text/uri-list</code>".</p>

  <p>The <dfn title="dom-DataTransfer-setData"><code>setData(<var
  title="">format</var>, <var title="">data</var>)</code></dfn> method
  must add <var title="">data</var> to the data stored in the
  <code>DataTransfer</code> object, labelled as being of the type <var
  title="">format</var>. This must replace any previous data that had
  been set for that format. If <var title="">format</var> is the value
  "<code title="">Text</code>", then it must be treated as "<code
  title="">text/plain</code>". If the <var title="">format</var> is
  "<code title="">URL</code>", then it must be treated as "<code
  title="">text/uri-list</code>".</p>

  <p>The <dfn title="dom-DataTransfer-getData"><code>getData(<var
  title="">format</var>)</code></dfn> method must return the data that
  is associated with the type <var title="">format</var>, if any, and
  must return the empty string otherwise. If <var
  title="">format</var> is the value "<code title="">Text</code>",
  then it must be treated as "<code title="">text/plain</code>". If
  the <var title="">format</var> is "<code title="">URL</code>", then
  the data associated with the "<code title="">text/uri-list</code>"
  format must be parsed as appropriate for <code
  title="">text/uri-list</code> data, and the first URI from the list
  must be returned. If there is no data with that format, or if there
  is but it has no URIs, then the method must return the empty
  string. <a href="#refsRFC2483">[RFC2483]</a></p>

  <p>The <dfn title="dom-DataTransfer-types"><code>types</code></dfn>
  attribute must return a live <code>DOMStringList</code> that
  contains the list of formats that are stored in the
  <code>DataTransfer</code> object.</p>

  <p>The <dfn
  title="dom-DataTransfer-setDragImage"><code>setDragImage(<var
  title="">element</var>, <var title="">x</var>, <var
  title="">y</var>)</code></dfn> method sets which element to use <a
  href="#base-dnd-feedback">to generate the drag feedback</a>. The
  <var title="">element</var> argument can be any
  <code>Element</code>; if it is an <code>img</code> element, then the
  user agent should use the element's image (at its intrinsic size) to
  generate the feedback, otherwise the user agent should base the
  feedback on the given element (but the exact mechanism for doing so
  is not specified).</p>

  <p>The <dfn
  title="dom-DataTransfer-addElement"><code>addElement(<var
  title="">element</var>)</code></dfn> method is an alternative way of
  specifying how the user agent is to <a
  href="#base-dnd-feedback">render the drag feedback</a>. It adds an
  element to the <code>DataTransfer</code> object.</p>


  <h4>Events fired during a drag-and-drop action</h4>

  <p>The following events are involved in the drag-and-drop
  model. Whenever the processing model described below causes one of
  these events to be fired, the event fired must use the
  <code>DragEvent</code> interface defined above, must have the
  bubbling and cancelable behaviours given in the table below, and
  must have the context information set up as described after the
  table, with the <code title="dom-UIEvent-view">view</code> attribute
  set to the view with which the user interacted to trigger the
  drag-and-drop event, and the <code
  title="dom-UIEvent-detail">detail</code> attribute set to zero.</p>

  <table>

   <thead>
    <tr>
     <th> Event Name </th>
     <th> Target </th>
     <th> Bubbles? </th>
     <th> Cancelable? </th>
     <th> <code title="dom-DataTransfer-addElement">dataTransfer</code> </th>
     <th> <code title="dom-DataTransfer-effectAllowed">effectAllowed</code> </th>
     <th> <code title="dom-DataTransfer-dropEffect">dropEffect</code> </th>
     <th> Default Action </th>
    </tr>
   </thead>

   <tbody>

    <tr>
     <td><dfn title="event-dragstart"><code>dragstart</code></dfn></td>
     <td><span>Source node</span></td>
     <td>&#x2713; Bubbles</td>
     <td>&#x2713; Cancelable</td>
     <td>Contains <span>source node</span> unless a selection is being dragged, in which case it is empty</td>
     <td><code title="">uninitialized</code></td>
     <td><code title="">none</code></td>
     <td>Initiate the drag-and-drop operation</td>
    </tr>

    <tr>
     <td><dfn title="event-drag"><code>drag</code></dfn></td>
     <td><span>Source node</span></td>
     <td>&#x2713; Bubbles</td>
     <td>&#x2713; Cancelable</td>
     <td>Empty</td>
     <td><a href="#effectAllowed-initialisation">Same as last event</a></td>
     <td><code title="">none</code></td>
     <td>Continue the drag-and-drop operation</td>
    </tr>

    <tr>
     <td><dfn title="event-dragenter"><code>dragenter</code></dfn></td>
     <td><span>Immediate user selection</span> or <span>the body element</span></td>
     <td>&#x2713; Bubbles</td>
     <td>&#x2713; Cancelable</td>
     <td>Empty</td>
     <td><a href="#effectAllowed-initialisation">Same as last event</a></td>
     <td><a href="#dropEffect-initialisation">Based on <code>effectAllowed</code> value</a></td>
     <td>Reject <span>immediate user selection</span> as potential <span title="current target element">target element</span></td>
    </tr>

    <tr>
     <td><dfn title="event-dragleave"><code>dragleave</code></dfn></td>
     <td><span title="current target element">Previous target element</span></td>
     <td>&#x2713; Bubbles</td>
     <td>&mdash;</td>
     <td>Empty</td>
     <td><a href="#effectAllowed-initialisation">Same as last event</a></td>
     <td><code title="">none</code></td>
     <td>None</td>
    </tr>

    <tr>
     <td><dfn title="event-dragover"><code>dragover</code></dfn></td>
     <td><span>Current target element</span></td>
     <td>&#x2713; Bubbles</td>
     <td>&#x2713; Cancelable</td>
     <td>Empty</td>
     <td><a href="#effectAllowed-initialisation">Same as last event</a></td>
     <td><a href="#dropEffect-initialisation">Based on <code>effectAllowed</code> value</a></td>
     <td>Reset the <span>current drag operation</span> to "none"</td>
    </tr>

    <tr>
     <td><dfn title="event-drop"><code>drop</code></dfn></td>
     <td><span>Current target element</span></td>
     <td>&#x2713; Bubbles</td>
     <td>&#x2713; Cancelable</td>
     <td><code>getData()</code> returns data set in <code title="dom-dragstart">dragstart</code> event</td>
     <td><a href="#effectAllowed-initialisation">Same as last event</a></td>
     <td><span>Current drag operation</span></td>
     <td>Varies</td>
    </tr>

    <tr>
     <td><dfn title="event-dragend"><code>dragend</code></dfn></td>
     <td><span>Source node</span></td>
     <td>&#x2713; Bubbles</td>
     <td>&mdash;</td>
     <td>Empty</td>
     <td><a href="#effectAllowed-initialisation">Same as last event</a></td>
     <td><span>Current drag operation</span></td>
     <td>Varies</td>
    </tr>

   </tbody>

  </table>

  <p>The <code title="dom-DragEvent-dataTransfer">dataTransfer</code>
  object's contents are empty except for <code
  title="event-dragstart">dragstart</code> events and <code
  title="event-drop">drop</code> events, for which the contents are
  set as described in the processing model, below.</p>

  <p id="effectAllowed-initialisation">The <code
  title="dom-DataTransfer-effectAllowed">effectAllowed</code>
  attribute must be set to "<code title="">uninitialized</code>" for
  <code title="event-dragstart">dragstart</code> events, and to
  whatever value the field had after the last drag-and-drop event was
  fired for all other events (only counting events fired by the user
  agent for the purposes of the drag-and-drop model described
  below).</p>

  <p id="dropEffect-initialisation">The <code
  title="dom-DataTransfer-dropEffect">dropEffect</code> attribute must
  be set to "<code title="">none</code>" for <code
  title="event-dragstart">dragstart</code>, <code
  title="event-drag">drag</code>, and <code
  title="event-dragleave">dragleave</code> events (except when stated
  otherwise in the algorithms given in the sections below), to the
  value corresponding to the <span>current drag operation</span> for
  <code title="event-drop">drop</code> and <code
  title="event-dragend">dragend</code> events, and to a value based on
  the <code
  title="dom-DataTransfer-effectAllowed">effectAllowed</code>
  attribute's value and to the drag-and-drop source, as given by the
  following table, for the remaining events (<code
  title="event-dragenter">dragenter</code> and <code
  title="event-dragover">dragover</code>):</p>

  <table>
   <thead>
    <tr>
     <th><code title="dom-DataTransfer-effectAllowed">effectAllowed</code></th>
     <th><code title="dom-DataTransfer-dropEffect">dropEffect</code></th>
    </tr>
   </thead>
   <tr>
    <td><code title="">none</code></td>
    <td><code title="">none</code></td>
   </tr>
   <tr>
    <td><code title="">copy</code>, <code title="">copyLink</code>, <code title="">copyMove</code>, <code title="">all</code></td>
    <td><code title="">copy</code></td>
   </tr>
   <tr>
    <td><code title="">link</code>, <code title="">linkMove</code></td>
    <td><code title="">link</code></td>
   </tr>
   <tr>
    <td><code title="">move</code></td>
    <td><code title="">move</code></td>
   </tr>
   <tr>
    <td><code title="">uninitialized</code> when what is being dragged is a selection from a text field</td>
    <td><code title="">move</code></td>
   </tr>
   <tr>
    <td><code title="">uninitialized</code> when what is being dragged is a selection</td>
    <td><code title="">copy</code></td>
   </tr>
   <tr>
    <td><code title="">uninitialized</code> when what is being dragged is an <code>a</code> element with an <code>href</code> attribute</td>
    <td><code title="">link</code></td>
   </tr>
   <tr>
    <td>Any other case</td>
    <td><code title="">copy</code></td>
   </tr>
  </table>


  <h4>Drag-and-drop processing model</h4>

  <p>When the user attempts to begin a drag operation, the user agent
  must first determine what is being dragged. If the drag operation
  was invoked on a selection, then it is the selection that is being
  dragged. Otherwise, it is the first element, going up the ancestor
  chain, starting at the node that the user tried to drag, that has
  the DOM attribute <code title="dom-draggable">draggable</code> set
  to true. If there is no such element, then nothing is being dragged,
  the drag-and-drop operation is never started, and the user agent
  must not continue with this algorithm.</p>

  <p class="note"><code>img</code> elements and <code>a</code>
  elements with an <code title="attr-hyperlink-href">href</code>
  attribute have their <code title="dom-draggable">draggable</code>
  attribute set to true by default.</p>

  <p>If the user agent determines that something can be dragged, a
  <code title="event-dragstart">dragstart</code> event must then be
  fired.</p>

  <p>If it is a selection that is being dragged, then this event must
  be fired on the node that the user started the drag on (typically
  the text node that the user originally clicked). If the user did not
  specify a particular node, for example if the user just told the
  user agent to begin a drag of "the selection", then the event must
  be fired on the deepest node that is a common ancestor of all parts
  of the selection.</p>

  <p class="big-issue">We should look into how browsers do other types
  (e.g. Firefox apparently also adds text/html for internal drag and
  drop of a selection).</p>

  <p>If it is not a selection that is being dragged, then the event
  must be fired on the element that is being dragged.</p>

  <p>The node on which the event is fired is the <dfn>source
  node</dfn>. Multiple events are fired on this node during the course
  of the drag-and-drop operation.</p>

  <p>If it is a selection that is being dragged, the <code
  title="dom-DragEvent-dataTransfer">dataTransfer</code> member of the event
  must be created with no nodes. Otherwise, it must be created
  containing just the <span>source node</span>. Script can use the
  <code title="dom-DataTransfer-addElement">addElement()</code> method
  to add further elements to the list of what is being dragged.</p>

  <p>If it is a selection that is being dragged, the <code
  title="dom-DragEvent-dataTransfer">dataTransfer</code> member of the
  event must have the text of the selection added to it as the data
  associated with the <code title="">text/plain</code>
  format. Otherwise, if it is an <code>img</code> element being
  dragged, then the value of the element's <code
  title="dom-img-src">src</code> DOM attribute must be added,
  associated with the <code title="">text/uri-list</code>
  format. Otherwise, if it is an <code>a</code> element being dragged,
  then the value of the element's <code title="dom-a-href">href</code>
  DOM attribute must be added, associated with the <code
  title="">text/uri-list</code> format. Otherwise, no data is added to
  the object by the user agent.</p>

  <p>If the event is canceled, then the drag-and-drop operation must
  not occur; the user agent must not continue with this algorithm.</p>

  <p>If it is not canceled, then the drag-and-drop operation must be
  initiated.</p>

  <p class="note">Since events with no event handlers registered are,
  almost by definition, never canceled, drag-and-drop is always
  available to the user if the author does not specifically prevent
  it.</p>

  <p id="base-dnd-feedback">The drag-and-drop feedback must be
  generated from the first of the following sources that is
  available:</p>

  <ol>

   <li>The element specified in the last call to the <code
   title="dom-DataTransfer-setDragImage">setDragImage()</code> method
   of the <code title="dom-DragEvent-dataTransfer">dataTransfer</code>
   object of the <code title="event-dragstart">dragstart</code> event,
   if the method was called. In visual media, if this is used, the
   <var title="">x</var> and <var title="">y</var> arguments that were
   passed to that method should be used as hints for where to put the
   cursor relative to the resulting image. The values are expressed as
   distances in CSS pixels from the left side and from the top side of
   the image respectively. <a href="#refsCSS21">[CSS21]</a></li> <!--
   CSS3 UNITS would be better -->

   <li>The elements that were added to the <code
   title="dom-DragEvent-dataTransfer">dataTransfer</code> object, both
   before the event was fired, and during the handling of the event
   using the <code
   title="dom-DataTransfer-addElement">addElement()</code>
   method, if any such elements were indeed added.</li>

   <li>The selection that the user is dragging.</li>

  </ol><!-- XXX xref also link to the section that explains how to
  render drag-and-drop, :drag, :drop, etc. Safari has a pseudo-class
  that it uses to render an element off-screen to use as the drag
  feedback. -->

  <p>The user agent must take a note of <span
  title="dom-DataTransfer-setData">the data that was placed</span> in
  the <code title="dom-DragEvent-dataTransfer">dataTransfer</code>
  object. This data will be made available again when the <code
  title="event-drop">drop</code> event is fired.</p>

  <p>From this point until the end of the drag-and-drop operation,
  device input events (e.g. mouse and keyboard events) must be
  suppressed. In addition, the user agent must track all DOM changes
  made during the drag-and-drop operation, and add them to its <a
  href="#undo">undo history</a> as one atomic operation once the
  drag-and-drop operation has ended.</p>

  <p>During the drag operation, the element directly indicated by the
  user as the drop target is called the <dfn>immediate user
  selection</dfn>. (Only elements can be selected by the user; other
  nodes must not be made available as drop targets.)

  However, the <span>immediate user selection</span> is not
  necessarily the <dfn>current target element</dfn>, which is the
  element currently selected for the drop part of the drag-and-drop
  operation.

  The <span>immediate user selection</span> changes as the user
  selects different elements (either by pointing at them with a
  pointing device, or by selecting them in some other way). The
  <span>current target element</span> changes when the <span>immediate
  user selection</span> changes, based on the results of event
  handlers in the document, as described below.</p>

  <p>Both the <span>current target element</span> and the
  <span>immediate user selection</span> can be null, which means no
  target element is selected. They can also both be elements in other
  (DOM-based) documents, or other (non-Web) programs altogether. (For
  example, a user could drag text to a word-processor.) The
  <span>current target element</span> is initially null.</p>

  <p>In addition, there is also a <dfn>current drag operation</dfn>,
  which can take on the values "none", "copy", "link", and "move".
  Initially it has the value "none". It is updated by the user agent
  as described in the steps below.</p>

  <p>User agents must, every 350ms (&#xB1;200ms), perform the
  following steps in sequence. (If the user agent is still performing
  the previous iteration of the sequence when the next iteration
  becomes due, the user agent must not execute the overdue iteration,
  effectively "skipping missed frames" of the drag-and-drop
  operation.)</p>

  <ol>

   <li>

    <p>First, the user agent must fire a <code
    title="event-drag">drag</code> event at the <span>source
    node</span>. If this event is canceled, the user agent must set
    the <span>current drag operation</span> to none (no drag
    operation).</p>

   </li>

   <li>

    <p>Next, if the <code title="event-drag">drag</code> event was not
    canceled and the user has not ended the drag-and-drop operation,
    the user agent must check the state of the drag-and-drop
    operation, as follows:</p>

    <ol>

     <li>

      <p>First, if the user is indicating a different <span>immediate
      user selection</span> than during the last iteration (or if this
      is the first iteration), and if this <span>immediate user
      selection</span> is not the same as the <span>current target
      element</span>, then the <span>current target element</span> must
      be updated, as follows:</p>

      <ol>

       <li>

        <p>If the new <span>immediate user selection</span> is null, or
        is in a non-DOM document or application, then set the
        <span>current target element</span> to the same value.</p>

       <li>

        <p>Otherwise, the user agent must fire a <code
        title="event-dragenter">dragenter</code> event at the
        <span>immediate user selection</span>.</p>

       </li>

       <li>

        <p>If the event is canceled, then the <span>current target
        element</span> must be set to the <span>immediate user
        selection</span>.</p>

       </li>

       <li>

        <p>Otherwise, if the <span>current target element</span> is
        not <span>the body element</span>, the user agent must fire a
        <code title="event-dragenter">dragenter</code> event at
        <span>the body element</span>, and the <span>current target
        element</span> must be set to <span>the body element</span>,
        regardless of whether that event was canceled or not. (If
        <span>the body element</span> is null, then the <span>current
        target element</span> would be set to null too in this case,
        it wouldn't be set to the <code>Document</code> object.)</p>

       </li>

      </ol>

     </li>

     <li>

      <p>If the previous step caused the <span>current target
      element</span> to change, and if the previous target element was
      not null or a part of a non-DOM document, the user agent must fire
      a <code title="event-dragleave">dragleave</code> event at the
      previous target element.</p>

     </li>

     <li>

      <p>If the <span>current target element</span> is a DOM element,
      the user agent must fire a <code
      title="event-dragover">dragover</code> event at this <span>current
      target element</span>.</p>

      <p>If the <code title="event-dragover">dragover</code> event is
      canceled, the <span>current drag operation</span> must be reset
      to "none".</p>

      <p>Otherwise, the <span>current drag operation</span> must be
      set based on the values the <code
      title="dom-DataTransfer-effectAllowed">effectAllowed</code> and
      <code title="dom-DataTransfer-dropEffect">dropEffect</code>
      attributes of the <code
      title="dom-DragEvent-dataTransfer">dataTransfer</code> object
      had after the event was handled, as per the following table:</p>

      <table>
       <thead>
        <tr>
         <th><code title="dom-DataTransfer-effectAllowed">effectAllowed</code></th>
         <th><code title="dom-DataTransfer-dropEffect">dropEffect</code></th>
         <th>Drag operation</th>
        </tr>
       </thead>
       <tr>
        <td><code title="">uninitialized</code>, <code title="">copy</code>, <code title="">copyLink</code>, <code title="">copyMove</code>, or <code title="">all</code></td>
        <td><code title="">copy</code></td>
        <td>"copy"</td>
       </tr>
       <tr>
        <td><code title="">uninitialized</code>, <code title="">link</code>, <code title="">copyLink</code>, <code title="">linkMove</code>, or <code title="">all</code></td>
        <td><code title="">link</code></td>
        <td>"link"</td>
       </tr>
       <tr>
        <td><code title="">uninitialized</code>, <code title="">move</code>, <code title="">copyMove</code>, <code title="">linkMove</code>, or <code title="">all</code></td>
        <td><code title="">move</code></td>
        <td>"move"</td>
       </tr>
       <tr>
        <td colspan="2">Any other case</td>
        <td>"none"</td>
       </tr>
      </table>

      <p>Then, regardless of whether the <code
      title="event-dragover">dragover</code> event was canceled or
      not, the drag feedback (e.g. the mouse cursor) must be updated
      to match the <span>current drag operation</span>, as
      follows:</p>

      <table>
       <thead>
        <tr>
         <th>Drag operation</th>
         <th>Feedback</th>
        </tr>
       </thead>
       <tr>
        <td>"copy"</td>
        <td>Data will be copied if dropped here.</td>
       </tr>
       <tr>
        <td>"link"</td>
        <td>Data will be linked if dropped here.</td>
       </tr>
       <tr>
        <td>"move"</td>
        <td>Data will be moved if dropped here.</td>
       </tr>
       <tr>
        <td>"none"</td>
        <td>No operation allowed, dropping here will cancel the drag-and-drop operation.</td>
       </tr>
      </table>

     </li>

     <li>

      <p>Otherwise, if the <span>current target element</span> is not a
      DOM element, the user agent must use platform-specific mechanisms
      to determine what drag operation is being performed (none, copy,
      link, or move). This sets the <em>current drag operation</em>.</p>

     </li>

    </ol>

   </li>

   <li>

    <p>Otherwise, if the user ended the drag-and-drop operation (e.g.
    by releasing the mouse button in a mouse-driven drag-and-drop
    interface), or if the <code title="event-drag">drag</code> event
    was canceled, then this will be the last iteration. The user agent
    must execute the following steps, then stop looping.</p>

    <ol>

     <li>

      <p>If the <span>current drag operation</span> is none (no drag
      operation), or, if the user ended the drag-and-drop operation by
      canceling it (e.g. by hitting the <kbd>Escape</kbd> key), or if
      the <span>current target element</span> is null, then the drag
      operation failed. If the <span>current target element</span> is
      a DOM element, the user agent must fire a <code
      title="event-dragleave">dragleave</code> event at it; otherwise,
      if it is not null, it must use platform-specific conventions for
      drag cancellation.</p>

     </li>

     <li>

      <p>Otherwise, the drag operation was as success. If the
      <span>current target element</span> is a DOM element, the user
      agent must fire a <code title="event-drop">drop</code> event at
      it; otherwise, it must use platform-specific conventions for
      indicating a drop.</p>

      <p>When the target is a DOM element, the <code
      title="dom-DataTransfer-dropEffect">dropEffect</code> attribute
      of the event's <code
      title="dom-DragEvent-dataTransfer">dataTransfer</code> object
      must be given the value representing the <span>current drag
      operation</span> (<code title="">copy</code>, <code
      title="">link</code>, or <code title="">move</code>), and the
      object must be set up so that the <code
      title="dom-DataTransfer-getData">getData()</code> method will
      return the data that was added during the <code
      title="event-dragstart">dragstart</code> event.</p>

      <p>If the event is canceled, the <span>current drag
      operation</span> must be set to the value of the <code
      title="dom-DataTransfer-dropEffect">dropEffect</code> attribute
      of the event's <code
      title="dom-DragEvent-dataTransfer">dataTransfer</code> object as
      it stood after the event was handled.</p>

      <p>Otherwise, the event is not canceled, and the user agent must
      perform the event's default action, which depends on the exact
      target as follows:</p>

      <dl class="switch">

       <dt>If the <span>current target element</span> is a text field
       (e.g. <code>textarea</code>, or an <code>input</code> element
       with <code title="">type="text"</code><!--XXX xref-->)</dt>

       <dd>The user agent must insert the data associated with the
       <code>text/plain</code> format, if any, into the text field in
       a manner consistent with platform-specific conventions
       (e.g. inserting it at the current mouse cursor position, or
       inserting it at the end of the field).</dd>

       <dt>Otherwise</dt>

       <dd>Reset the <span>current drag operation</span> to
       "none".</dd>

      </dl>

     </li>

     <li>

      <p>Finally, the user agent must fire a <code
      title="event-dragend">dragend</code> event at the <span>source
      node</span>, with the <code
      title="dom-DataTransfer-dropEffect">dropEffect</code> attribute
      of the event's <code
      title="dom-DragEvent-dataTransfer">dataTransfer</code> object
      being set to the value corresponding to the <span>current drag
      operation</span>.</p>

      <p class="note">The <span>current drag operation</span> can
      change during the processing of the <code
      title="event-drop">drop</code> event, if one was fired.</p>

      <p>The event is not cancelable. After the event has been
      handled, the user agent must act as follows:</p>

      <dl class="switch">

       <dt>If the <span>current target element</span> is a text field
       (e.g. <code>textarea</code>, or an <code>input</code> element
       with <code title="">type="text"</code><!--XXX xref-->), and a
       <code title="event-drop">drop</code> event was fired in the
       previous step, and the <span>current drag operation</span> is
       "move", and the source of the drag-and-drop operation is a
       selection in the DOM</dt>

       <dd>The user agent should delete the range representing the
       dragged selection from the DOM.</dd>

       <dt>If the <span>current target element</span> is a text field
       (e.g. <code>textarea</code>, or an <code>input</code> element
       with <code title="">type="text"</code><!--XXX xref-->), and a
       <code title="event-drop">drop</code> event was fired in the
       previous step, and the <span>current drag operation</span> is
       "move", and the source of the drag-and-drop operation is a
       selection in a text field</dt>

       <dd>The user agent should delete the dragged selection from the
       relevant text field.</dd>

       <dt>Otherwise</dt>

       <dd>The event has no default action.</dd>

      </dl>

     </li>

    </ol>

   </li>

  </ol>


  <h5>When the drag-and-drop operation starts or ends in another
  document</h5>

  <p>The model described above is independent of which
  <code>Document</code> object the nodes involved are from; the events
  must be fired as described above and the rest of the processing
  model must be followed as described above, irrespective of how many
  documents are involved in the operation.</p>

  <!-- should we mention that you shouldn't include the view from the
  source in the events to the target, or is that obvious enough from
  the requirements in the event section above? -->


  <h5>When the drag-and-drop operation starts or ends in another
  application</h5>

  <p>If the drag is initiated in another application, the <span>source
  node</span> is not a DOM node, and the user agent must use
  platform-specific conventions instead when the requirements above
  involve the source node. User agents in this situation must act as
  if the dragged data had been added to the <code>DataTransfer</code>
  object when the drag started, even though no <code
  title="event-dragstart">dragstart</code> event was actually fired;
  user agents must similarly use platform-specific conventions when
  deciding on what drag feedback to use.</p>

  <p>If a drag is started in a document but ends in another
  application, then the user agent must instead replace the parts of
  the processing model relating to handling the <em>target</em>
  according to platform-specific conventions.</p>

  <p>In any case, scripts running in the context of the document must
  not be able to distinguish the case of a drag-and-drop operation
  being started or ended in another application from the case of a
  drag-and-drop operation being started or ended in another document
  from another domain.</p>



  <h4>The <dfn title="attr-draggable"><code>draggable</code></dfn> attribute</h4>

  <p>All elements may have the <code
  title="attr-draggable">draggable</code> content attribute set. The
  <code title="attr-draggable">draggable</code> attribute is an
  <span>enumerated attribute</span>. It has three states. The first
  state is <em>true</em> and it has the keyword <code
  title="">true</code>. The second state is <em>false</em> and it has
  the keyword <code title="">false</code>. The third state is
  <em>auto</em>; it has no keywords but it is the <em>missing value
  default</em>.</p>

  <p>The <dfn title="dom-draggable"><code>draggable</code></dfn> DOM
  attribute, whose value depends on the content attribute's in the way
  described below, controls whether or not the element is
  draggable. Generally, only text selections are draggable, but
  elements whose <code title="dom-draggable">draggable</code> DOM
  attribute is true become draggable as well.</p>

  <p>If an element's <code title="attr-draggable">draggable</code>
  content attribute has the state <em>true</em>, the <code
  title="dom-draggable">draggable</code> DOM attribute must return
  true.</p>

  <p>Otherwise, if the element's <code
  title="attr-draggable">draggable</code> content attribute has the
  state <em>false</em>, the <code
  title="dom-draggable">draggable</code> DOM attribute must return
  false.</p>

  <p>Otherwise, the element's <code
  title="attr-draggable">draggable</code> content attribute has the
  state <em>auto</em>. If the element is an <code>img</code> element,
  or, if the element is an <code>a</code> element with an <code
  title="attr-hyperlink-href">href</code> content attribute, the <code
  title="dom-draggable">draggable</code> DOM attribute must return
  true.</p>

  <p>Otherwise, the <code title="dom-draggable">draggable</code> DOM
  must return false.</p>

  <p>If the <code title="dom-draggable">draggable</code> DOM attribute
  is set to the value false, the <code
  title="attr-draggable">draggable</code> content attribute must be
  set to the literal value <code title="">false</code>. If the <code
  title="dom-draggable">draggable</code> DOM attribute is set to the
  value true, the <code title="attr-draggable">draggable</code>
  content attribute must be set to the literal value <code
  title="">true</code>.</p>



  <h4>Copy and paste</h4>

  <p>Copy-and-paste is a form of drag-and-drop: the "copy" part is
  equivalent to dragging content to another application (the
  "clipboard"), and the "paste" part is equivalent to dragging content
  <em>from</em> another application.</p>

  <p>Select-and-paste (a model used by mouse operations in the X
  Window System) is equivalent to a drag-and-drop operation where the
  source is the selection.</p>


  <h5>Copy to clipboard</h5>

  <p>When the user invokes a copy operation, the user agent must act
  as if the user had invoked a drag on the current selection. If the
  drag-and-drop operation initiates, then the user agent must act as
  if the user had indicated (as the <span>immediate user
  selection</span>) a hypothetical application representing the
  clipbroad. Then, the user agent must act as if the user had ended
  the drag-and-drop operation without canceling it. If the
  drag-and-drop operation didn't get canceled, the user agent should
  then follow the relevant platform-specific conventions for copy
  operations (e.g. updating the clipboard).</p>


  <h5>Cut to clipboard</h5>

  <p>When the user invokes a cut operation, the user agent must act as
  if the user had invoked a copy operation (see the previous section),
  followed, if the copy was completed successfully, by <a
  href="#contenteditable-delete">a selection delete operation</a>.</p>


  <h5>Paste from clipboard</h5>

  <p>When the user invokes a clipboard paste operation, the user agent
  must act as if the user had invoked a drag on a hypothetical
  application representing the clipboard, setting the data associated
  with the drag as the content on the clipboard (in whatever formats
  are available).</p>

  <p>Then, the user agent must act as if the user had indicated (as
  the <span>immediate user selection</span>) the element with the
  keyboard focus, and then ended the drag-and-drop operation without
  canceling it.</p>


  <h5>Paste from selection</h5>

  <p>When the user invokes a selection paste operation, the user agent
  must act as if the user had invoked a drag on the current selection,
  then indicated (as the <span>immediate user selection</span>) the
  element with the keyboard focus, and then ended the drag-and-drop
  operation without canceling it.</p>



  <h4>Security risks in the drag-and-drop model</h4>

  <p>User agents must not make the data added to the
  <code>DataTransfer</code> object during the <code
  title="event-dragstart">dragstart</code> event available to scripts
  until the <code title="event-drop">drop</code> event, because
  otherwise, if a user were to drag sensitive information from one
  document to a second document, crossing a hostile third document in
  the process, the hostile document could intercept the data.</p>

  <p>For the same reason, user agents must only consider a drop to be
  successful if the user specifically ended the drag operation &mdash;
  if any scripts end the drag operation, it must be considered
  unsuccessful (canceled) and the <code title="event-drop">drop</code>
  event must not be fired.</p>

  <p>User agents should take care to not start drag-and-drop
  operations in response to script actions. For example, in a
  mouse-and-window environment, if a script moves a window while the
  user has his mouse button depressed, the UA would not consider that
  to start a drag. This is important because otherwise UAs could cause
  data to be dragged from sensitive sources and dropped into hostile
  documents without the user's consent.</p>





  <h3 id="undo"><dfn>Undo history</dfn></h3>

  <p class="big-issue">There has got to be a better way of doing this, surely.</p>

  <p>The user agent must associate an <dfn>undo transaction
  history</dfn> with each <code>HTMLDocument</code> object.</p>

  <p>The <span>undo transaction history</span> is a list of
  entries. The entries are of two type: <span>DOM changes</span> and
  <span title="undo object">undo objects</span>.</p>

  <p>Each <dfn>DOM changes</dfn> entry in the <span>undo transaction
  history</span> consists of batches of one or more of the
  following:</p>

  <ul>

   <li>Changes to the <span>content attributes</span> of an
   <code>Element</code> node.</li>

   <li>Changes to the <span>DOM attributes</span> of a
   <code>Node</code>.</li> <!-- XXX uh, these change on their own, so
   clearly this isn't going to fly. Which DOM attributes, exactly? -->

   <li>Changes to the DOM hierarchy of nodes that are descendants of
   the <code>HTMLDocument</code> object (<code>parentNode</code>,
   <code>childNodes</code>).</li>

  </ul>

  <p><dfn>Undo object</dfn> entries consist of objects representing
  state that scripts running in the document are managing. For
  example, a Web mail application could use an <span>undo
  object</span> to keep track of the fact that a user has moved an
  e-mail to a particular folder, so that the user can undo the
  action and have the e-mail return to its former location.</p>

  <p>Broadly speaking, <span>DOM changes</span> entries are handled by
  the UA in response to user edits of form controls and <span>editing
  hosts</span> on the page, and <span>undo object</span> entries are
  handled by script in response to higher-level user actions (such as
  interactions with server-side state, or in the implementation of a
  drawing tool).</p>


  <h4>The <code>UndoManager</code> interface</h4>

  <div class="big-issue">

   <p>This API sucks. Seriously. It's a terrible API. Really bad. I
   hate it. Here are the requirements:</p>

   <ul>

    <li>Has to cope with cases where the server has undo state already
    when the page is loaded, that can be stuffed into the undo buffer
    onload.</li>

    <li>Has to support undo/redo.</li>

    <li>Has to cope with the "undo" action being "contact the server
    and tell it to undo", rather than it being the opposite of the
    "redo" action.</li>

    <li>Has to cope with some undo states expiring from the undo
    history (e.g. server can only remember one undelete action) but
    other states not expiring (e.g. client can undo arbitrary amounts
    of local edits).</li>

   </ul>

  </div>

  <p>To manage <span>undo object</span> entries in the <span>undo
  transaction history</span>, the <code>UndoManager</code>
  interface can be used:</p>

  <pre class="idl">interface <dfn>UndoManager</dfn> {
  unsigned long <span title="dom-UndoManager-add">add</span>(in DOMObject data, in DOMStrong title);
  void <span title="dom-UndoManager-remove">remove</span>(in unsigned long index);
  void <span title="dom-UndoManager-clearUndo">clearUndo</span>();
  void <span title="dom-UndoManager-clearRedo">clearRedo</span>();
  DOMObject <span title="dom-UndoManager-item">item</span>(in unsigned long index);
  readonly attribute unsigned long <span title="dom-UndoManager-length">length</span>;
  readonly attribute unsigned long <span title="dom-UndoManager-position">position</span>;
};</pre>

  <p>The <dfn title="dom-undoManager"><code>undoManager</code></dfn>
  attribute of the <code>Window</code> interface must return the
  object implementing the <code>UndoManager</code> interface for that
  <code>Window</code> object's associated
  <code>HTMLDocument</code> object.</p>

  <p>In the ECMAScript DOM binding, objects implementing this interface
  must also support being dereferenced using the square bracket
  notation, such that dereferencing with an integer index is
  equivalent to invoking the <code
  title="dom-UndoManager-item">item()</code> method with that index
  (e.g. <code title="">undoManager[1]</code> returns the same as <code
  title="">undoManager.item(1)</code>).</p>

  <p><code>UndoManager</code> objects represent their document's
  <span>undo transaction history</span>. Only <span>undo object</span>
  entries are visible with this API, but this does not mean that
  <span>DOM changes</span> entries are absent from the <span>undo
  transaction history</span>.</p>

  <p>The <dfn title="dom-UndoManager-length"><code>length</code></dfn>
  attribute must return the number of <span>undo object</span> entries
  in the <span>undo transaction history</span>.</p>

  <p>The <dfn title="dom-UndoManager-item"><code>item(<var
  title="">n</var>)</code></dfn> method must return the <var
  title="">n</var>th <span>undo object</span> entry in the <span>undo
  transaction history</span>.</p>

  <p>The <span>undo transaction history</span> has a <dfn title="undo
  position">current position</dfn>. This is the position between two
  entries in the <span>undo transaction history</span>'s list where
  the previous entry represents what needs to happen if the user
  invokes the "undo" command (the "undo" side, lower numbers), and the
  next entry represents what needs to happen if the user invokes the
  "redo" command (the "redo" side, higher numbers).</p>

  <p>The <dfn
  title="dom-UndoManager-position"><code>position</code></dfn>
  attribute must return the index of the <span>undo object</span>
  entry nearest to the <span>undo position</span>, on the "redo"
  side. If there are no <span>undo object</span> entries on the "redo"
  side, then the attribute must return the same as the <code
  title="dom-UndoManager-length">length</code> attribute. If there are
  no <span>undo object</span> entries on the "undo" side of the
  <span>undo position</span>, the <code
  title="dom-UndoManager-position">position</code> attribute returns
  zero.</p>

  <p class="note">Since the <span>undo transaction history</span>
  contains both <span>undo object</span> entries and <span>DOM
  changes</span> entries, but the <code
  title="dom-UndoManager-position">position</code> attribute only
  returns indices relative to <span>undo object</span> entries, it is
  possible for several "undo" or "redo" actions to be performed
  without the value of the <code
  title="dom-UndoManager-position">position</code> attribute
  changing.</p>

  <p>The <dfn title="dom-UndoManager-add"><code>add(<var title="">data</var>,
  <var title="">title</var>)</code></dfn> method's behaviour depends on the
  current state. Normally, it must insert the <var title="">data</var> object
  passed as an argument into the <span>undo transaction history</span>
  immediately before the <span>undo position</span>, optionally
  remembering the given <var title="">title</var> to use in the UI. If the
  method is called <span title="do-undo">during an undo
  operation</span>, however, the object must instead be added
  immediately <em>after</em> the <span>undo position</span>.</p>

  <p>If the method is called and there is neither <span
  title="do-undo">an undo operation in progress</span> nor <span
  title="do-redo">a redo operation in progress</span> then any entries
  in the <span>undo transaction history</span> after the <span>undo
  position</span> must be removed (as if <code
  title="dom-UndoManager-clearRedo">clearRedo()</code> had been
  called).</p>

  <p class="big-issue">We could fire events when someone adds
  something to the undo history -- one event per undo object entry
  before the position (or after, during redo addition), allowing the
  script to decide if that entry should remain or not. Or
  something. Would make it potentially easier to expire server-held
  state when the server limitations come into play.</p>

  <!-- XXX note on expiring undo in case server can only do one level undo -->

  <p>The <dfn title="dom-UndoManager-remove"><code>remove(<var
  title="">index</var>)</code></dfn> method must remove the <span>undo
  object</span> entry with the specified <var title="">index</var>. If
  the index is less than zero or greater than or equal to <code
  title="dom-UndoManager-length">length</code> then the method must
  raise an <code>INDEX_SIZE_ERR</code> exception. <span>DOM
  changes</span> entries are unaffected by this method.</p>

  <p>The <dfn
  title="dom-UndoManager-clearUndo"><code>clearUndo()</code></dfn>
  method must remove all entries in the <span>undo transaction
  history</span> before the <span>undo position</span>, be they
  <span>DOM changes</span> entries or <span>undo object</span>
  entries.</p>

  <p>The <dfn
  title="dom-UndoManager-clearRedo"><code>clearRedo()</code></dfn>
  method must remove all entries in the <span>undo transaction
  history</span> after the <span>undo position</span>, be they
  <span>DOM changes</span> entries or <span>undo object</span>
  entries.</p>

  <p class="big-issue">Another idea is to have a way for scripts to
  say "startBatchingDOMChangesForUndo()" and after that the changes to
  the DOM go in as if the user had done them.</p>


  <h4><dfn title="do-undo">Undo: moving back in the undo transaction history</dfn></h4>

  <p>When the user invokes an undo operation, or when the <code
  title="dom-document-execCommand">execCommand()</code> method is
  called with the <code title="command-undo">undo</code> command, the
  user agent must perform an undo operation.</p>

  <p>If the <span>undo position</span> is at the start of the
  <span>undo transaction history</span>, then the user agent must do
  nothing.</p>

  <p>If the entry immediately before the <span>undo position</span> is
  a <span>DOM changes</span> entry, then the user agent must remove
  that <span>DOM changes</span> entry, reverse the DOM changes that
  were listed in that entry, and, if the changes were reversed with no
  problems, add a new <span>DOM changes</span> entry (consisting of
  the opposite of those DOM changes) to the <span>undo transaction
  history</span> on the other side of the <span>undo
  position</span>.</p>

  <p>If the DOM changes cannot be undone (e.g. because the DOM state
  is no longer consistent with the changes represented in the entry),
  then the user agent must simply remove the <span>DOM changes</span>
  entry, without doing anything else.</p>

  <p>If the entry immediately before the <span>undo position</span> is
  an <span>undo object</span> entry, then the user agent must first
  remove that <span>undo object</span> entry from the <span>undo
  transaction history</span>, and then must fire an <code
  title="event-undo">undo</code> event on the <code>Document</code>
  object, using the <span>undo object</span> entry's associated undo
  object as the event's data.</p>

  <p>Any calls to <code title="dom-undoManager-add">add()</code> while
  the event is being handled will be used to populate the redo
  history, and will then be used if the user invokes the "redo"
  command to undo his undo.</p>


  <h4><dfn title="do-redo">Redo: moving forward in the undo transaction history</dfn></h4>

  <p>When the user invokes a redo operation, or when the <code
  title="dom-document-execCommand">execCommand()</code> method is
  called with the <code title="command-redo">redo</code> command, the
  user agent must perform a redo operation.</p>

  <p>This is mostly the opposite of an <span title="do-undo">undo
  operation</span>, but the full definition is included here for
  completeness.</p>

  <p>If the <span>undo position</span> is at the end of the <span>undo
  transaction history</span>, then the user agent must do nothing.</p>

  <p>If the entry immediately after the <span>undo position</span> is
  a <span>DOM changes</span> entry, then the user agent must remove
  that <span>DOM changes</span> entry, reverse the DOM changes that
  were listed in that entry, and, if the changes were reversed with no
  problems, add a new <span>DOM changes</span> entry (consisting of
  the opposite of those DOM changes) to the <span>undo transaction
  history</span> on the other side of the <span>undo
  position</span>.</p>

  <p>If the DOM changes cannot be redone (e.g. because the DOM state
  is no longer consistent with the changes represented in the entry),
  then the user agent must simply remove the <span>DOM changes</span>
  entry, without doing anything else.</p>

  <p>If the entry immediately after the <span>undo position</span> is
  an <span>undo object</span> entry, then the user agent must first
  remove that <span>undo object</span> entry from the <span>undo
  transaction history</span>, and then must fire a <code
  title="event-undo">redo</code> event on the <code>Document</code>
  object, using the <span>undo object</span> entry's associated undo
  object as the event's data.</p>

  <h4>The <code>UndoManagerEvent</code> interface and the <code title="event-undo">undo</code> and <code title="event-redo">redo</code> events</h4>

  <pre class="idl">interface <dfn>UndoManagerEvent</dfn> : Event {
  readonly attribute DOMObject <span title="dom-UndoManagerEvent-data">data</span>;
  void <span title="dom-UndoManagerEvent-initUndoManagerEvent">initUndoManagerEvent</span>(in DOMString typeArg, in boolean canBubbleArg, in boolean cancelableArg, in DOMObject dataArg);
  void <span title="dom-UndoManagerEvent-initUndoManagerEventNS">initUndoManagerEventNS</span>(in DOMString namespaceURIArg, in DOMString typeArg, in boolean canBubbleArg, in boolean cancelableArg, in DOMObject dataArg);
};</pre>

  <p>The <dfn
  title="dom-UndoManagerEvent-initUndoManagerEvent"><code>initUndoManagerEvent()</code></dfn>
  and <dfn><code
  title="dom-UndoManagerEvent-initUndoManagerEventNS">initUndoManagerEventNS()</code></dfn>
  methods must initialise the event in a manner analogous to the
  similarly-named methods in the DOM3 Events interfaces. <a
  href="#refsDOM3EVENTS">[DOM3EVENTS]</a></p>

  <p>The <dfn title="dom-UndoManagerEvent-data"><code>data</code></dfn>
  attribute represents the <span>undo object</span> for the event.</p>

  <p>The <dfn title="event-undo"><code>undo</code></dfn> and <dfn
  title="event-redo"><code>redo</code></dfn> events do not bubble,
  cannot be canceled, and have no default action. When the user agent
  fires one of these events it must use the
  <code>UndoManagerEvent</code> interface, with the <code
  title="dom-UndoManagerEvent-data">data</code> field containing the
  relevant <span>undo object</span>.</p>


  <h4>Implementation notes</h4>

  <p>How user agents present the above conceptual model to the user is
  not defined. The undo interface could be a filtered view of the
  <span>undo transaction history</span>, it could manipulate the
  <span>undo transaction history</span> in ways not described above,
  and so forth. For example, it is possible to design a UA that
  appears to have separate <span title="undo transaction history">undo
  transaction histories</span> for each form control; similarly, it is
  possible to design systems where the user has access to more undo
  information than is present in the offical (as described above)
  <span>undo transaction history</span> (such as providing a
  tree-based approach to document state). Such UI models should be
  based upon the single <span>undo transaction history</span>
  described in this section, however, such that to a script there is
  no detectable difference.</p>





  <h3 id="selection">The text selection APIs</h3>

  <p>Every <span>browsing context</span> has <dfn title="the
  selection">a selection</dfn>. The selection can be empty, and the
  selection can have more than one range (a disjointed selection). The
  user should be able to change the selection. User agents are not
  required to let the user select more than one range, and may
  collapse multiple ranges in the selection to a single range when the
  user interacts with the selection. (But, of course, the user agent
  may let the user create selections with multiple ranges.)</p>

  <p>This one selection must be shared by all the content of the
  browsing context (though not by nested <span title="browsing
  context">browsing contexts</span>), including any editing hosts in
  the document. (Editing hosts that are not inside a document cannot
  have a selection.)</p>

  <p>If the selection is empty (collapsed, so that it has only one
  segment and that segment's start and end points are the same) then
  the selection's position should equal the caret position. When the
  selection is not empty, this specification does not define the caret
  position; user agents should follow platform conventions in deciding
  whether the caret is at the start of the selection, the end of the
  selection, or somewhere else.</p>

  <p>On some platforms (such as those using Wordstar editing
  conventions), the caret position is totally independent of the start
  and end of the selection, even when the selection is empty. On such
  platforms, user agents may ignore the requirement that the cursor
  position be linked to the position of the selection altogether.</p>

  <p>Mostly for historical reasons, in addition to the <span>browsing
  context</span>'s <span title="the selection">selection</span>, each
  <code>textarea</code> and <code>input</code> element has an
  independent selection. These are the <dfn title="text field
  selection">text field selections</dfn>.</p>

  <p>User agents may selectively ignore attempts to use the API to
  adjust the selection made after the user has modified the
  selection. For example, if the user has just selected part of a
  word, the user agent could ignore attempts to use the API call to
  immediately unselect the selection altogether, but could allow
  attempts to change the selection to select the entire word.</p>

  <p>User agents may also allow the user to create selections that are
  not exposed to the API.</p>

  <p>The <code>datagrid</code> and <code>select</code> elements also
  have selections, indicating which items have been picked by the
  user. These are not discussed in this section.</p>

  <p class="note">This specification does not specify how selections
  are presented to the user. The Selectors specification, in
  conjunction with CSS, can be used to style text selections using the
  <code>::selection</code> pseudo-element. <a
  href="#refsSELECTORS">[SELECTORS]</a> <a
  href="#refsCSS21">[CSS21]</a></p>



  <h4 id="documentSelection">APIs for the browsing context selection</h4>

  <p>The <dfn
  title="dom-getSelection"><code>getSelection()</code></dfn> method on
  the <code>Window</code> interface must return the
  <code>Selection</code> object representing <span>the
  selection</span> of that <code>Window</code> object's
  <span>browsing context</span>.

  <p>For historical reasons, the <dfn
  title="dom-document-getSelection"><code>getSelection()</code></dfn>
  method on the <code>HTMLDocument</code> interface must return the
  same <code>Selection</code> object.</p>
                                   
  <pre class="idl">interface <dfn>Selection</dfn> {
  readonly attribute Node <span title="dom-selection-anchorNode">anchorNode</span>;
  readonly attribute long <span title="dom-selection-anchorOffset">anchorOffset</span>;
  readonly attribute Node <span title="dom-selection-focusNode">focusNode</span>;
  readonly attribute long <span title="dom-selection-focusOffset">focusOffset</span>;
  readonly attribute boolean <span title="dom-selection-isCollapsed">isCollapsed</span>;
  void <span title="dom-selection-collapse">collapse</span>(in Node parentNode, in long offset);
  void <span title="dom-selection-collapseToStart">collapseToStart</span>();
  void <span title="dom-selection-collapseToEnd">collapseToEnd</span>();
  void <span title="dom-selection-selectAllChildren">selectAllChildren</span>(in Node parentNode);
  void <span title="dom-selection-deleteFromDocument">deleteFromDocument</span>();
  readonly attribute long <span title="dom-selection-rangeCount">rangeCount</span>;
  Range <span title="dom-selection-getRangeAt">getRangeAt</span>(in long index);
  void <span title="dom-selection-addRange">addRange</span>(in Range range);
  void <span title="dom-selection-removeRange">removeRange</span>(in Range range);
  void <span title="dom-selection-removeAllRanges">removeAllRanges</span>();
  DOMString <span title="dom-selection-toString">toString</span>();
};</pre>
<!--
  See also:
    http://lxr.mozilla.org/mozilla/source/content/base/public/nsISelection.idl
  This spec doesn't have everything from there yet, in particular
  selectionLanguageChange() and containsNode() are missing. They are missing
  because I couldn't work out how to define them in terms of Ranges.

  I also haven't included extend():

    void <span title="dom-selection-extend">extend</span>(in Node parentNode, in long offset);
    // raise if no range
    // raise WRONG_DOCUMENT_ERR if parentNode not in document
    // do something

  ...mostly because I can't work out how to describe what it does quickly.
-->

  <p>The <code>Selection</code> interface is represents a list of
  <code>Range</code> objects. The first item in the list has index 0,
  and the last item has index <var title="">count</var>-1, where
  <var title="">count</var> is the number of ranges in the list. <a
  href="#refsDOM2RANGE">[DOM2RANGE]</a></p>

  <p>All of the members of the <code>Selection</code> interface are
  defined in terms of operations on the <code>Range</code> objects
  represented by this object. These operations can raise exceptions,
  as defined for the <code>Range</code> interface; this can therefore
  result in the members of the <code>Selection</code> interface
  raising exceptions as well, in addition to any explicitly called out
  below.</p> <!-- XXX example -->

  <p>The <dfn
  title="dom-selection-anchorNode"><code>anchorNode</code></dfn>
  attribute must return the value returned by the <code
  title="">startContainer</code> attribute of the last
  <code>Range</code> object in the list, or null if the list is
  empty.</p>

  <p>The <dfn
  title="dom-selection-anchorOffset"><code>anchorOffset</code></dfn>
  attribute must return the value returned by the <code
  title="">startOffset</code> attribute of the last <code>Range</code>
  object in the list, or 0 if the list is empty.</p>

  <p>The <dfn
  title="dom-selection-focusNode"><code>focusNode</code></dfn>
  attribute must return the value returned by the <code
  title="">endContainer</code> attribute of the last
  <code>Range</code> object in the list, or null if the list is
  empty.</p>

  <p>The <dfn
  title="dom-selection-focusOffset"><code>focusOffset</code></dfn>
  attribute must return the value returned by the <code
  title="">endOffset</code> attribute of the last <code>Range</code>
  object in the list, or 0 if the list is empty.</p>

  <p>The <dfn
  title="dom-selection-isCollapsed"><code>isCollapsed</code></dfn>
  attribute must return true if there are zero ranges, or if there is
  exactly one range and its <code title="">collapsed</code> attribute
  is itself true. Otherwise it must return false.</p>

  <p>The <dfn
  title="dom-selection-collapse"><code>collapse(<var title="">parentNode</var>,
  <var title="">offset</var>)</code></dfn> method must raise a
  <code>WRONG_DOCUMENT_ERR</code> DOM exception if
  <var title="">parentNode</var>'s <code title="">ownerDocument</code> is not
  the <code>HTMLDocument</code> object with which the
  <code>Selection</code> object is associated. Otherwise it is, and
  the method must remove all the ranges in the <code>Selection</code>
  list, then create a new <code>Range</code> object, add it to the
  list, and invoke its <code title="">setStart()</code> and <code
  title="">setEnd()</code> methods with the <var title="">parentNode</var> and
  <var title="">offset</var> values as their arguments.</p>

  <p>The <dfn
  title="dom-selection-collapseToStart"><code>collapseToStart()</code></dfn>
  method must raise an <code>INVALID_STATE_ERR</code> DOM exception if
  there are no ranges in the list. Otherwise, it must invoke the <code
  title="dom-selection-collapse">collapse()</code> method with the
  <code title="">startContainer</code> and <code
  title="">startOffset</code> values of the first <code>Range</code>
  object in the list as the arguments.</p>

  <p>The <dfn
  title="dom-selection-collapseToEnd"><code>collapseToEnd()</code></dfn>
  method must raise an <code>INVALID_STATE_ERR</code> DOM exception if
  there are no ranges in the list. Otherwise, it must invoke the <code
  title="dom-selection-collapse">collapse()</code> method with the
  <code title="">endContainer</code> and <code
  title="">endOffset</code> values of the last <code>Range</code>
  object in the list as the arguments.</p>

  <p>The <dfn
  title="dom-selection-selectAllChildren"><code>selectAllChildren(<var title="">parentNode</var>)</code></dfn>
  method must invoke the <code
  title="dom-selection-collapse">collapse()</code> method with the
  <var title="">parentNode</var> value as the first argument and 0 as the
  second argument, and must then invoke the <code
  title="">selectNodeContents()</code> method on the first (and only)
  range in the list with the <var title="">parentNode</var> value as the
  argument.</p>

  <p>The <dfn
  title="dom-selection-deleteFromDocument"><code>deleteFromDocument()</code></dfn>
  method must invoke the <code title="">deleteContents()</code> method
  on each range in the list, if any, from first to last.</p>

  <p>The <dfn
  title="dom-selection-rangeCount"><code>rangeCount</code></dfn>
  attribute must return the number of ranges in the list.</p>

  <p>The <dfn
  title="dom-selection-getRangeAt"><code>getRangeAt(<var title="">index</var>)</code></dfn>
  method must return the <var title="">index</var>th range in the list. If
  <var title="">index</var> is less than zero or greater or equal to the value
  returned by the <code
  title="dom-selection-rangeCount">rangeCount</code> attribute, then
  the method must raise an <code>INDEX_SIZE_ERR</code> DOM
  exception.</p>

  <p>The <dfn
  title="dom-selection-addRange"><code>addRange(<var title="">range</var>)</code></dfn>
  method must add the given <var title="">range</var> Range object to the list
  of selections, at the end (so the newly added range is the new last
  range). Duplicates are not prevented; a range may be added more than
  once in which case it appears in the list more than once, which (for
  example) will cause <code
  title="dom-selection-toString">toString()</code> to return the
  range's text twice.</p> <!-- XXX how does this interact with
  deleteFromDocument() which acts on all ranges? -->

  <p>The <dfn
  title="dom-selection-removeRange"><code>removeRange(<var title="">range</var>)</code></dfn>
  method must remove the first occurrence of <var title="">range</var> in the
  list of ranges, if it appears at all.</p>

  <p>The <dfn
  title="dom-selection-removeAllRanges"><code>removeAllRanges()</code></dfn>
  method must remove all the ranges from the list of ranges, such that
  the <code title="dom-selection-rangeCount">rangeCount</code>
  attribute returns 0 after the <code
  title="dom-selection-removeAllRanges">removeAllRanges()</code>
  method is invoked (and until a new range is added to the list,
  either through this interface or via user interaction).</p>

  <p>The <dfn
  title="dom-selection-toString"><code>toString()</code></dfn> method
  must return a concatenation of the results of invoking the <code
  title="">toString()</code> method of the <code>Range</code> object
  on each of the ranges of the selection, in the order they appear in
  the list (first to last).</p>

  <p>In language bindings where this is supported, objects
  implementing the <code>Selection</code> interface must stringify to
  the value returned by the object's <code
  title="dom-selection-toString">toString()</code> method.</p>

  <div class="example">
   <p>In the following document fragment, the emphasised parts
   indicate the selection.</p>
   <pre>&lt;p>The cute girl likes <em>the </em>&lt;cite><em>Oxford English</em> Dictionary&lt;/cite>.&lt;/p></pre>
   <p>If a script invoked <code
   title="">window.getSelection().toString()</code>, the return value
   would be "<code>the Oxford English</code>".</p>
  </div>

  <p class="note">The <code>Selection</code> interface has no relation
  to the <code>DataGridSelection</code> interface.</p>


  <h4 id="textFieldSelection">APIs for the text field selections</h4>

  <p class="big-issue">When we define HTMLTextAreaElement and
  HTMLInputElement we will have to add the IDL given below to both of
  their IDLs.</p>

  <p>The <code>input</code> and <code>textarea</code> elements define
  four members in their DOM interfaces for handling their text
  selection:</p>

  <pre class="idl">  void <span title="dom-textarea/input-select">select</span>();
           attribute unsigned long <span title="dom-textarea/input-selectionStart">selectionStart</span>;
           attribute unsigned long <span title="dom-textarea/input-selectionEnd">selectionEnd</span>;
  void <span title="dom-textarea/input-setSelectionRange">setSelectionRange</span>(in unsigned long start, in unsigned long end);</pre>
<!-- XXX also add textLength? it seems to be widely used -->

  <p>These methods and attributes expose and control the selection of
  <code>input</code> and <code>textarea</code> text fields.</p>

  <p>The <dfn
  title="dom-textarea/input-select"><code>select()</code></dfn> method
  must cause the contents of the text field to be fully selected.</p>

  <p>The <dfn
  title="dom-textarea/input-selectionStart"><code>selectionStart</code></dfn>
  attribute must, on getting, return the offset (in logical order) to
  the character that immediately follows the start of the
  selection. If there is no selection, then it must return the offset
  (in logical order) to the character that immediately follows the
  text entry cursor.</p>

  <p>On setting, it must act as if the <code
  title="dom-textarea/input-setSelectionRange">setSelectionRange()</code>
  method had been called, with the new value as the first argument,
  and the current value of the <code
  title="dom-textarea/input-selectionEnd">selectionEnd</code>
  attribute as the second argument, unless the current value of the
  <code title="dom-textarea/input-selectionEnd">selectionEnd</code> is
  less than the new value, in which case the second argument must also
  be the new value.</p>

  <p>The <dfn
  title="dom-textarea/input-selectionEnd"><code>selectionEnd</code></dfn>
  attribute must, on getting, return the offset (in logical order) to
  the character that immediately follows the end of the selection. If
  there is no selection, then it must return the offset (in logical
  order) to the character that immediately follows the text entry
  cursor.</p>

  <p>On setting, it must act as if the <code
  title="dom-textarea/input-setSelectionRange">setSelectionRange()</code>
  method had been called, with the current value of the <code
  title="dom-textarea/input-selectionStart">selectionStart</code>
  attribute as the first argument, and new value as the second
  argument.</p>

  <p>The <dfn
  title="dom-textarea/input-setSelectionRange"><code>setSelectionRange(<var
  title="">start</var>, <var title="">end</var>)</code></dfn> method
  must set the selection of the text field to the sequence of
  characters starting with the character at the <var
  title="">start</var>th position (in logical order) and ending with
  the character at the <span>(<var title="">end</var>-1)</span>th
  position. Arguments greater than the length of the value in the text
  field must be treated as pointing at the end of the text field. If
  <var title="">end</var> is less than or equal to <var
  title="">start</var> then the start of the selection and the end of
  the selection must both be placed immediately before the character
  with offset <var title="">end</var>. In UAs where there is no
  concept of an empty selection, this must set the cursor to be just
  before the character with offset <var title="">end</var>.</p>

  <div class="example">

   <p>To obtain the currently selected text, the following JavaScript
   suffices:</p>

   <pre>var selectionText = control.value.substring(control.selectionStart, control.selectionEnd);</pre>

   <p>...where <var title="">control</var> is the <code>input</code>
   or <code>textarea</code> element.</p>

  </div>

  <p>Characters with no visible rendering, such as U+200D ZERO WIDTH
  JOINER, still count as characters. Thus, for instance, the selection
  can include just an invisible character, and the text insertion
  cursor can be placed to one side or another of such a character.</p>

  <p>When these methods and attributes are used with
  <code>input</code> elements that are not displaying simple text
  fields, they must raise an <code>INVALID_STATE_ERR</code>
  exception.</p>



  <h3>Command APIs</h3>

  <p>The <dfn id="execCommand"
  title="dom-document-execCommand"><code>execCommand(<var
  title="">commandId</var>, <var title="">doShowUI</var>, <var
  title="">value</var>)</code></dfn> method on the
  <code>HTMLDocument</code> interface allows scripts to perform
  actions on the <span title="the selection">current selection</span>
  or at the current caret position. Generally, these commands would be
  used to implement editor UI, for example having a "delete" button on
  a toolbar.</p>

  <p>There are three variants to this method, with one, two, and three
  arguments respectively.  The <var title="">doShowUI</var> and <var
  title="">value</var> parameters, even if specified, are ignored
  unless otherwise stated.</p>

  <p class="note">In this specification, in fact, the <var
  title="">doShowUI</var> parameter is always ignored, regardless of
  its value. It is included for historical reasons only.</p>

  <p>When <code title="dom-document-execCommand">execCommand()</code>
  is invoked, the user agent must follow the following steps:</p>

  <ol>

   <li>If the given <var title="">commandId</var> maps to an entry
   below that is marked as "<dfn>editing hosts only</dfn>", and the
   document is not <span>ready for editing host commands</span>, do
   nothing; abort these steps.</li>

   <li>Otherwise, execute the "Action" listed below for the given <var
   title="">commandId</var>.</li>

  </ol>

  <p>A document is <dfn>ready for editing host commands</dfn> if it
  has a selection that is entirely within an <span>editing
  host</span>, or if it has no selection but its caret is inside an
  <span>editing host</span>.</p>

  <p>The <dfn
  title="dom-document-queryCommandEnabled"><code>queryCommandEnabled(<var
  title="">commandId</var>)</code></dfn> method, when invoked, must
  return true if the condition listed below under "Enabled When" for
  the given <var title="">commandId</var> is true, and false
  otherwise.</p>

  <p>The <dfn
  title="dom-document-queryCommandIndeterm"><code>queryCommandIndeterm(<var
  title="">commandId</var>)</code></dfn> method, when invoked, must
  return true if the condition listed below under "Indeterminate When"
  for the given <var title="">commandId</var> is true, and false
  otherwise.</p>

  <p>The <dfn
  title="dom-document-queryCommandState"><code>queryCommandState(<var
  title="">commandId</var>)</code></dfn> method, when invoked, must
  return the value expressed below under "State" for the given <var
  title="">commandId</var>.</p>

  <p>The <dfn
  title="dom-document-queryCommandSupported"><code>queryCommandSupported(<var
  title="">commandId</var>)</code></dfn> method, when invoked, must
  return true if the given <var title="">commandId</var> is in the
  list below, and false otherwise.</p>

  <p>The <dfn
  title="dom-document-queryCommandValue"><code>queryCommandValue(<var
  title="">commandId</var>)</code></dfn> method, when invoked, must
  return the value expressed below under "Value" for the given <var
  title="">commandId</var>.</p>

  <p>The commands are:</p>

  <dl>

   <dt>If the <var title="">commandId</var> is <dfn title="command-undo"><code>undo</code></dfn></dt>

   <dd><strong>Action:</strong> The user agent must <span
   title="do-undo">move back one step</span> in its <span>undo
   transaction history</span>, restoring the associated state. If the
   <span>undo position</span> is at the start of the <span>undo
   transaction history</span>, the user agent must do nothing. See the
   <span>undo history</span>.</dd>
   <dd><strong>Enabled When:</strong> The <span>undo position</span>
   is not at the start of the <span>undo transaction
   history</span>.</dd>
   <dd><strong>Indeterminate When:</strong> Never.</dd>
   <dd><strong>State:</strong> Always false.</dd>
   <dd><strong>Value:</strong> Always the string "<code title="">false</code>".</dd>

   <dt>If the <var title="">commandId</var> is <dfn title="command-redo"><code>redo</code></dfn></dt>

   <dd><strong>Action:</strong> The user agent must <span
   title="do-redo">move forward one step</span> in its <span>undo
   transaction history</span>, restoring the associated state. If the
   <span>undo position</span> is at the end of the <span>undo
   transaction history</span>, the user agent must do nothing. See the
   <span>undo history</span>.</dd>
   <dd><strong>Enabled When:</strong> The <span>undo position</span>
   is not at the end of the <span>undo transaction
   history</span>.</dd>
   <dd><strong>Indeterminate When:</strong> Never.</dd>
   <dd><strong>State:</strong> Always false.</dd>
   <dd><strong>Value:</strong> Always the string "<code title="">false</code>".</dd>

   <dt>If the <var title="">commandId</var> is <dfn title="command-selectAll"><code>selectAll</code></dfn></dt>

   <dd><strong>Action:</strong> The user agent must change the
   selection so that all the content in the currently focused
   <span>editing host</span> is selected. If no <span>editing
   host</span> is focused, then the content of the entire document
   must be selected.</dd>
   <dd><strong>Enabled When:</strong> Always.</dd>
   <dd><strong>Indeterminate When:</strong> Never.</dd>
   <dd><strong>State:</strong> Always false.</dd>
   <dd><strong>Value:</strong> Always the string "<code title="">false</code>".</dd>

   <dt>If the <var title="">commandId</var> is <dfn title="command-unselect"><code>unselect</code></dfn></dt>

   <dd><strong>Action:</strong> The user agent must change the
   selection so that nothing is selected.</dd>
   <dd><strong>Enabled When:</strong> Always.</dd>
   <dd><strong>Indeterminate When:</strong> Never.</dd>
   <dd><strong>State:</strong> Always false.</dd>
   <dd><strong>Value:</strong> Always the string "<code title="">false</code>".</dd>

   <dt>If the <var title="">commandId</var> is <dfn title="command-superscript"><code>superscript</code></dfn></dt>

   <dd><span>Editing hosts only.</span></dd>
   <dd><strong>Action:</strong> The user agent must act as if the user
   had requested that the selection <a
   href="#contenteditable-wrapSemantic">be wrapped in the
   semantics</a> of the <code>sup</code> element (or unwrapped, or, if
   there is no selection, have that semantic inserted or removed
   &mdash; the exact behaviour is UA-defined).</dd>
   <dd><strong>Enabled When:</strong> The document is <span>ready for
   editing host commands</span>.</dd>
   <dd><strong>Indeterminate When:</strong> Never.</dd>
   <dd><strong>State:</strong> True if the selection, or the caret, if
   there is no selection, is, or is contained within, a
   <code>sup</code> element. False otherwise.</dd>
   <dd><strong>Value:</strong> The string "<code title="">true</code>"
   if the expression given for the "State" above is true, the string
   "<code title="">false</code>" otherwise.</dd>

   <dt>If the <var title="">commandId</var> is <dfn title="command-subscript"><code>subscript</code></dfn></dt>

   <dd><span>Editing hosts only.</span></dd>
   <dd><strong>Action:</strong> The user agent must act as if the user
   had requested that the selection <a
   href="#contenteditable-wrapSemantic">be wrapped in the
   semantics</a> of the <em title=""><code>sub</code></em> element
   (or, again, unwrapped, or have that semantic inserted or removed,
   as defined by the UA).</dd>
   <dd><strong>Enabled When:</strong> The document is <span>ready for
   editing host commands</span>.</dd>
   <dd><strong>Indeterminate When:</strong> Never.</dd>
   <dd><strong>State:</strong> True if the selection, or the caret, if
   there is no selection, is, or is contained within, a
   <code>sub</code> element. False otherwise.</dd>
   <dd><strong>Value:</strong> The string "<code title="">true</code>"
   if the expression given for the "State" above is true, the string
   "<code title="">false</code>" otherwise.</dd>

   <dt>If the <var title="">commandId</var> is <dfn title="command-bold"><code>bold</code></dfn></dt>

   <dd><span>Editing hosts only.</span></dd>
   <dd><strong>Action:</strong> The user agent must act as if the user
   had requested that the selection <a
   href="#contenteditable-wrapSemantic">be wrapped in the
   semantics</a> of the <em title=""><code>b</code></em> element
   (or, again, unwrapped, or have that semantic inserted or removed,
   as defined by the UA).</dd>
   <dd><strong>Enabled When:</strong> The document is <span>ready for
   editing host commands</span>.</dd>
   <dd><strong>Indeterminate When:</strong> Never.</dd>
   <dd><strong>State:</strong> True if the selection, or the caret, if
   there is no selection, is, or is contained within, a
   <code>b</code> element. False otherwise.</dd>
   <dd><strong>Value:</strong> The string "<code title="">true</code>"
   if the expression given for the "State" above is true, the string
   "<code title="">false</code>" otherwise.</dd>

   <dt>If the <var title="">commandId</var> is <dfn title="command-italic"><code>italic</code></dfn></dt>

   <dd><span>Editing hosts only.</span></dd>
   <dd><strong>Action:</strong> The user agent must act as if the user
   had requested that the selection <a
   href="#contenteditable-wrapSemantic">be wrapped in the
   semantics</a> of the <em title=""><code>i</code></em> element
   (or, again, unwrapped, or have that semantic inserted or removed,
   as defined by the UA).</dd>
   <dd><strong>Enabled When:</strong> The document is <span>ready for
   editing host commands</span>.</dd>
   <dd><strong>Indeterminate When:</strong> Never.</dd>
   <dd><strong>State:</strong> True if the selection, or the caret, if
   there is no selection, is, or is contained within, a
   <code>i</code> element. False otherwise.</dd>
   <dd><strong>Value:</strong> The string "<code title="">true</code>"
   if the expression given for the "State" above is true, the string
   "<code title="">false</code>" otherwise.</dd>

   <dt>If the <var title="">commandId</var> is <dfn title="command-formatBlock"><code>formatBlock</code></dfn></dt>

   <dd><span>Editing hosts only.</span></dd>
   <dd>

    <p><strong>Action:</strong> This command changes the semantics of
    the blocks containing the selection.</p>

    <p>If there is no selection, then, where in the description below
    refers to the selection, the user agent must act as if the
    selection was an empty range at the caret position.</p>

    <p>If the <var title="">value</var> parameter is not specified or
    has a value other than one of the following literal strings:</p>

    <ul class="brief">
     <li><code title="">&lt;address&gt;</code></li>
     <li><code title="">&lt;aside&gt;</code></li>
     <li><code title="">&lt;h1&gt;</code></li>
     <li><code title="">&lt;h2&gt;</code></li>
     <li><code title="">&lt;h3&gt;</code></li>
     <li><code title="">&lt;h4&gt;</code></li>
     <li><code title="">&lt;h5&gt;</code></li>
     <li><code title="">&lt;h6&gt;</code></li>
     <li><code title="">&lt;nav&gt;</code></li>
     <li><code title="">&lt;p&gt;</code></li>
     <li><code title="">&lt;pre&gt;</code></li>
     <!-- XXX this list is incomplete -->
    </ul>

    <p>...then the user agent must do nothing.</p>

    <p>Otherwise, the user agent must, for every position in the
    selection, take the furthest <span>flow content</span> ancestor
    element of that position that contains only <span>phrasing
    content</span>, and, if that element is a descendant of the
    editing host, rename it (as if the <code
    title="">Element.renameNode()</code> method had been used)
    according to the <var title="">value</var>, by stripping the
    leading <code>&lt;</code> character and the trailing
    <code>&gt;</code> character and using the rest as the new tag
    name, using the HTML namespace.</p>

   </dd>
   <dd><strong>Enabled When:</strong> The document is <span>ready for
   editing host commands</span>.</dd>
   <dd><strong>Indeterminate When:</strong> Never.</dd>
   <dd><strong>State:</strong> Always false.</dd>
   <dd><strong>Value:</strong> Always the string "<code title="">false</code>".</dd>

   <dt>If the <var title="">commandId</var> is <dfn title="command-delete"><code>delete</code></dfn></dt>

   <dd><span>Editing hosts only.</span></dd>
   <dd><strong>Action:</strong> The user agent must act as if the user
   had performed <a href="#contenteditable-delete">a backspace
   operation</a>.</dd>
   <dd><strong>Enabled When:</strong> The document is <span>ready for
   editing host commands</span>.</dd>
   <dd><strong>Indeterminate When:</strong> Never.</dd>
   <dd><strong>State:</strong> Always false.</dd>
   <dd><strong>Value:</strong> Always the string "<code title="">false</code>".</dd>

   <dt>If the <var title="">commandId</var> is <dfn title="command-forwardDelete"><code>forwardDelete</code></dfn></dt>

   <dd><span>Editing hosts only.</span></dd>
   <dd><strong>Action:</strong> The user agent must act as if the user
   had performed <a href="#contenteditable-delete">a forward delete
   operation</a>.</dd>
   <dd><strong>Enabled When:</strong> The document is <span>ready for
   editing host commands</span>.</dd>
   <dd><strong>Indeterminate When:</strong> Never.</dd>
   <dd><strong>State:</strong> Always false.</dd>
   <dd><strong>Value:</strong> Always the string "<code title="">false</code>".</dd>

   <dt>If the <var title="">commandId</var> is <dfn title="command-insertLineBreak"><code>insertLineBreak</code></dfn></dt>

   <dd><span>Editing hosts only.</span></dd>
   <dd><strong>Action:</strong> The user agent must act as if the user
   had <a href="#contenteditable-br">requested a line
   separator</a>.</dd>
   <dd><strong>Enabled When:</strong> The document is <span>ready for
   editing host commands</span>.</dd>
   <dd><strong>Indeterminate When:</strong> Never.</dd>
   <dd><strong>State:</strong> Always false.</dd>
   <dd><strong>Value:</strong> Always the string "<code title="">false</code>".</dd>

   <dt>If the <var title="">commandId</var> is <dfn title="command-insertParagraph"><code>insertParagraph</code></dfn></dt>

   <dd><span>Editing hosts only.</span></dd>
   <dd><strong>Action:</strong> The user agent must act as if the user
   had performed a <a href="#contenteditable-breakBlock">break
   block</a> editing action.</dd>
   <dd><strong>Enabled When:</strong> The document is <span>ready for
   editing host commands</span>.</dd>
   <dd><strong>Indeterminate When:</strong> Never.</dd>
   <dd><strong>State:</strong> Always false.</dd>
   <dd><strong>Value:</strong> Always the string "<code title="">false</code>".</dd>

   <dt>If the <var title="">commandId</var> is <dfn title="command-insertText"><code>insertText</code></dfn></dt>

   <dd><span>Editing hosts only.</span></dd>
   <dd><strong>Action:</strong> The user agent must act as if the user
   had <a href="#contenteditable-insertText">inserted text</a>
   corresponding to the <var title="">value</var> parameter.</dd>
   <dd><strong>Enabled When:</strong> The document is <span>ready for
   editing host commands</span>.</dd>
   <dd><strong>Indeterminate When:</strong> Never.</dd>
   <dd><strong>State:</strong> Always false.</dd>
   <dd><strong>Value:</strong> Always the string "<code title="">false</code>".</dd>

   <dt>If the <var title="">commandId</var> is <code><var title="">vendorID</var>-<var title="">customCommandID</var></code></dt>

   <dd><strong>Action:</strong> User agents may implement
   vendor-specific extensions to this API. Vendor-specific extensions
   to the list of commands should use the syntax <code><var
   title="">vendorID</var>-<var title="">customCommandID</var></code>
   so as to prevent clashes between extensions from different vendors
   and future additions to this specification.</dd>
   <dd><strong>Enabled When:</strong> UA-defined.</dd>
   <dd><strong>Indeterminate When:</strong> UA-defined.</dd>
   <dd><strong>State:</strong> UA-defined.</dd>
   <dd><strong>Value:</strong> UA-defined.</dd>

   <dt>If the <var title="">commandId</var> is something else</dt>

   <dd><strong>Action:</strong> User agents must do nothing.</dd>
   <dd><strong>Enabled When:</strong> Never.</dd>
   <dd><strong>Indeterminate When:</strong> Never.</dd>
   <dd><strong>State:</strong> Always false.</dd>
   <dd><strong>Value:</strong> Always the string "<code title="">false</code>".</dd>

  </dl>






  <h2 id="comms">Communication</h2>


  <h3>Event definitions</h3>

  <p>Messages in <span>cross-document messaging</span> and, by
  default, in <span>server-sent DOM events</span>, use the <dfn
  title="event-message"><code>message</code></dfn> event.</p>

  <p>The following interface is defined for this event:</p>

  <pre class="idl">interface <dfn>MessageEvent</dfn> : Event {
  readonly attribute DOMString <span title="dom-MessageEvent-data">data</span>;
  readonly attribute DOMString <span title="dom-MessageEvent-origin">origin</span>;
  readonly attribute <span>Window</span> <span title="dom-MessageEvent-source">source</span>;
  void <span title="dom-MessageEvent-initMessageEvent">initMessageEvent</span>(in DOMString typeArg, in boolean canBubbleArg, in boolean cancelableArg, in DOMString dataArg, in DOMString originArg, in Window sourceArg);
  void <span title="dom-MessageEvent-initMessageEventNS">initMessageEventNS</span>(in DOMString namespaceURI, in DOMString typeArg, in boolean canBubbleArg, in boolean cancelableArg, in DOMString dataArg, in DOMString originArg, in Window sourceArg);
};</pre>

  <p>The <dfn
  title="dom-MessageEvent-initMessageEvent"><code>initMessageEvent()</code></dfn>
  and <dfn
  title="dom-MessageEvent-initMessageEventNS"><code>initMessageEventNS()</code></dfn>
  methods must initialise the event in a manner analogous to the
  similarly-named methods in the DOM3 Events interfaces. <a
  href="#refsDOM3EVENTS">[DOM3EVENTS]</a></p>

  <p>The <dfn
  title="dom-MessageEvent-data"><code>data</code></dfn>
  attribute represents the message being sent.</p>

  <p>The <dfn
  title="dom-MessageEvent-domain"><code>origin</code></dfn> attribute
  represents, in <span>cross-document messaging</span>, the
  <span>origin</span> of the document that sent the message (typically
  the scheme, hostname, and port of the document, but not its path or
  fragment identifier).</p>

  <p>The <dfn
  title="dom-MessageEvent-source"><code>source</code></dfn> attribute
  represents, in <span>cross-document messaging</span>, the
  <code>Window</code> from which the message came.</p>


  <h3 id="server-sent-events"><dfn>Server-sent DOM events</dfn></h3>
  <!-- event-source -->

  <p>This section describes a mechanism for allowing servers to
  dispatch DOM events into documents that expect it. The
  <code>event-source</code> element provides a simple interface to
  this mechanism.</p>



  <h4>The <dfn><code>RemoteEventTarget</code></dfn> interface</h4>

  <p>Any object that implements the <code>EventTarget</code> interface
  must also implement the <code>RemoteEventTarget</code>
  interface.</p>

  <pre class="idl">interface <dfn>RemoteEventTarget</dfn> {
  void <span title="dom-RemoteEventTarget-addEventSource">addEventSource</span>(in DOMString src);
  void <span title="dom-RemoteEventTarget-removeEventSource">removeEventSource</span>(in DOMString src);
};</pre>

  <p>When the <dfn
  title="dom-RemoteEventTarget-addEventSource"><code>addEventSource(<var
  title="">src</var>)</code></dfn> method is invoked, the user agent
  must add the URI specified in <var title="">src</var> to the <span
  title="concept-event-source-list">list of event sources</span> for
  that object. The same URI can be registered multiple times.</p>

  <p>When the <dfn
  title="dom-RemoteEventTarget-removeEventSource"><code>removeEventSource(<var
  title="">src</var>)</code></dfn> method is invoked, the user agent
  must remove the URI specified in <var title="">src</var> from the
  <span title="concept-event-source-list">list of event sources</span>
  for that object.  If the same URI has been registered multiple
  times, removing it must only remove one instance of that URI for
  each invocation of the <code
  title="removeEventSource">removeEventSource()</code> method.</p>

  <p>Relative URIs must be resolved relative to <span
  class="big-issue">...</span>.</p>


  <h4>Connecting to an event stream</h4>

  <p>Each object implementing the <code>EventTarget</code> and
  <code>RemoteEventTarget</code> interfaces has a <dfn
  title="concept-event-source-list">list of event sources</dfn> that
  are registered for that object.</p>

  <p>When a new URI is added to this list, the user agent should, as
  soon as all currently executing scripts (if any) have finished
  executing, and if the specified URI isn't removed from the list
  before they do so, fetch the resource identified by that URI.</p>

  <p>When an event source is removed from the list of event sources
  for an object, if that resource is still being fetched, then the
  relevant connection must be closed.</p>

  <p>Since connections established to remote servers for such
  resources are expected to be long-lived, UAs should ensure that
  appropriate buffering is used. In particular, while line buffering
  may be safe if lines are defined to end with a single U+000A LINE
  FEED character, block buffering or line buffering with different
  expected line endings can cause delays in event dispatch.</p>

  <p>Each event source in the list must have associated with it the
  following:</p>

  <ul>

   <li>The <dfn
   title="concept-event-stream-reconnection-time">reconnection
   time</dfn>, in milliseconds. This must initially be a
   user-agent-defined value, probably in the region of a few
   seconds.</li>

   <li>The <dfn title="concept-event-stream-last-event-id">last event
   ID string</dfn>. This must initially be the empty string.</li>

  </ul>

  <p>In general, the semantics of the transport protocol specified by
  the URIs for the event sources must be followed, including HTTP
  caching rules.</p>

  <p>For HTTP connections, the <code title="">Accept</code> header may
  be included; if included, it must only contain formats of event
  framing that are supported by the user agent (one of which must be
  <code>text/event-stream</code>, as described below).</p>

  <p>Other formats of event framing may also be supported in addition
  to <code>text/event-stream</code>, but this specification does not
  define how they are to be parsed or processed.</p>

  <p class="note">Such formats could include systems like SMS-push;
  for example servers could use <code title="">Accept</code> headers
  and HTTP redirects to an SMS-push mechanism as a kind of protocol
  negotiation to reduce network load in GSM environments.</p>

  <p>User agents should use the <code>Cache-Control: no-cache</code>
  header in requests to bypass any caches for requests of event
  sources.</p>

  <p>If the event source's last event ID string is not the empty
  string, then a <code title="">Last-Event-ID</code> HTTP header must
  be included with the request, whose value is the value of the event
  source's last event ID string.</p>

  <p>For connections to domains other than <span>the document's
  domain</span>, the semantics of the Access-Control HTTP header must
  be followed. <a href="#refsACCESSCONTROL">[ACCESSCONTROL]</a> <!--
  XXX define this better once that spec is more stable -->

  <p>HTTP 200 OK responses with a <span>Content-Type</span> header
  specifying the type <code>text/event-stream</code> that are either
  from <span>the document's domain</span> or explicitly allowed by the
  Access-Control HTTP headers must be processed line by line <a
  href="#event-stream-interpretation">as described below</a>.</p>

  <p>For the purposes of such successfully opened event streams only,
  user agents should ignore HTTP cache headers, and instead assume
  that the resource indicates that it does not wish to be cached.</p>

  <p>If such a resource completes loading (i.e. the entire HTTP
  response body is received or the connection itself closes), the user
  agent should request the event source resource again after a delay
  equal to the reconnection time of the event source.</p>

  <p>HTTP 200 OK responses that have a <span>Content-Type</span> other
  than <code>text/event-stream</code> (or some other supported type),
  and HTTP responses whose Access-Control headers indicate that the
  resource are not to be used, must be ignored and must prevent the
  user agent from refetching the resource for that event source.</p>

  <p>HTTP 201 Created, 202 Accepted, 203 Non-Authoritative
  Information, and 206 Partial Content responses must be treated like
  HTTP 200 OK responses for the purposes of reopening event source
  resources. They are, however, likely to indicate an error has
  occurred somewhere and may cause the user agent to emit a
  warning.</p>

  <p>HTTP 204 No Content, and 205 Reset Content responses must be
  treated as if they were 200 OK responses with the right MIME type
  but no content, and should therefore cause the user agent to refetch
  the resource after a delay equal to the reconnection time of the
  event source.</p>

  <p>HTTP 300 Multiple Choices responses should be handled
  automatically if possible (treating the responses as if they were
  302 Found responses pointing to the appropriate resource), and
  otherwise must be treated as HTTP 404 responses.</p>

  <p>HTTP 301 Moved Permanently responses must cause the user agent to
  reconnect using the new server specified URI instead of the
  previously specified URI for all subsequent requests for this event
  source. (It doesn't affect other event sources with the same URI
  unless they also receive 301 responses, and it doesn't affect future
  sessions, e.g. if the page is reloaded.)</p>

  <p>HTTP 302 Found, 303 See Other, and 307 Temporary Redirect
  responses must cause the user agent to connect to the new
  server-specified URI, but if the user agent needs to again request
  the resource at a later point, it must return to the previously
  specified URI for this event source.</p>

  <p>HTTP 304 Not Modified responses should be handled like HTTP 200
  OK responses, with the content coming from the user agent cache. A
  new request should then be made after a delay equal to the
  reconnection time of the event source.</p>

  <p>HTTP 305 Use Proxy, HTTP 401 Unauthorized, and 407 Proxy
  Authentication Required should be treated transparently as for any
  other subresource.</p>

  <p>Any other HTTP response code not listed here should cause the
  user agent to stop trying to process this event source.</p> <!--
  including: HTTP 400 Bad Request, 403 Forbidden, 404 Not Found, 405
  Method Not Allowed, 406 Not Acceptable, 408 Request Timeout, 409
  Conflict, 410 Gone, 411 Length Required, 412 Precondition Failed,
  413 Request Entity Too Large, 414 Request-URI Too Long, 415
  Unsupported Media Type, 416 Requested Range Not Satisfiable, 417
  Expectation Failed, 500 Internal Server Error, 501 Not Implemented,
  502 Bad Gateway, 503 Service Unavailable, 504 Gateway Timeout, and
  505 HTTP Version Not Supported responses -->

  <p>DNS errors must be considered fatal, and cause the user agent to
  not open any connection for that event source.</p>

  <p>For non-HTTP protocols, UAs should act in equivalent ways.</p>


  <h4>Parsing an event stream</h4>

  <p>This event stream format's MIME type is
  <code>text/event-stream</code>.</p>

  <p>The event stream format is (in pseudo-BNF):</p>

  <pre>&lt;stream&gt;          ::= &lt;bom&gt;? &lt;event&gt;*
&lt;event&gt;           ::= [ &lt;comment&gt; | &lt;field&gt; ]* &lt;newline&gt;
&lt;comment&gt;         ::= &lt;colon&gt; &lt;any-char&gt;* &lt;newline&gt;
&lt;field&gt;           ::= &lt;name-char&gt;+ [ &lt;colon&gt; &lt;space&gt;? &lt;any-char&gt;* ]? &lt;newline&gt;

# characters:
&lt;bom&gt;             ::= a single U+FEFF BYTE ORDER MARK character
&lt;space&gt;           ::= a single U+0020 SPACE character (' ')
&lt;newline&gt;         ::= a U+000D CARRIAGE RETURN character
                      followed by a U+000A LINE FEED character
                      | a single U+000D CARRIAGE RETURN character
                      | a single U+000A LINE FEED character
                      | the end of the file
&lt;colon&gt;           ::= a single U+003A COLON character (':')
&lt;name-char&gt;       ::= a single Unicode character other than
                      U+003A COLON, U+000D CARRIAGE RETURN and U+000A LINE FEED
&lt;any-char&gt;        ::= a single Unicode character other than
                      U+000D CARRIAGE RETURN and U+000A LINE FEED
</pre>

  <p>Event streams in this format must always be encoded as
  UTF-8.</p>

  <p>Lines must be separated by either a U+000D CARRIAGE RETURN U+000A
  LINE FEED (CRLF) character pair, a single U+000A LINE FEED (LF)
  character, or a single U+000D CARRIAGE RETURN (CR) character.</p>



  <h4 id="event-stream-interpretation">Interpreting an event stream</h4>

  <p>Bytes or sequences of bytes that are not valid UTF-8 sequences
  must be interpreted as the U+FFFD REPLACEMENT CHARACTER.</p>

  <p>One leading U+FEFF BYTE ORDER MARK character must be ignored if
  any are present.</p>

  <p>The stream must then be parsed by reading everything line by
  line, with a U+000D CARRIAGE RETURN U+000A LINE FEED (CRLF)
  character pair, a single U+000A LINE FEED (LF) character, a single
  U+000D CARRIAGE RETURN (CR) character, and the end of the file being
  the four ways in which a line can end.</p>

  <p>When a stream is parsed, a <var title="">data</var> buffer and an
  <var title="">event name</var> buffer must be associated with
  it. They must be initialized to the empty string</p>

  <p>Lines must be processed, in the order they are received, as
  follows:</p>

  <dl class="switch">

   <dt>If the line is empty (a blank line)</dt>

   <dd><p><a href="#dispatchMessage">Dispatch the event</a>, as
   defined below.</p></dd>


   <dt>If the line starts with a U+003A COLON character (':')</dt>

   <dd><p>Ignore the line.</p></dd>


   <dt>If the line contains a U+003A COLON character (':') character</dt>

   <dd>

    <p>Collect the characters on the line before the first U+003A
    COLON character (':'), and let <var title="">field</var> be that
    string.</p>

    <p>Collect the characters on the line after the first U+003A COLON
    character (':'), and let <var title="">value</var> be that
    string. If <var title="">value</var> starts with a single U+0020
    SPACE character, remove it from <var title="">value</var>.</p>

    <p><a href="#processField">Process the field</a> using the steps
    described below, using <var title="">field</var> as the field name
    and <var title="">value</var> as the field value.</p>

   </dd>


   <dt>Otherwise, the string is not empty but does not contain a U+003A COLON character (':') character</dt>

   <dd>

    <p><a href="#processField">Process the field</a> using the steps
    described below, using the the whole line as the field name, and
    the empty string as the field value.</p>

   </dd>

  </dl>

  <p>Once the end of the file is reached, the user agent must <a
  href="#dispatchMessage">dispatch the event</a> one final time, as
  defined below.</p>


  <p id="processField">The steps to <dfn title="">process the
  field</dfn> given a field name and a field value depend on the field
  name, as given in the following list. Field names must be compared
  literally, with no case folding performed.</p>

  <dl class="switch">

   <dt>If the field name is "event"</dt>

   <dd><p>Set the <var title="">event name</var> buffer the field
   value. <a href="#refsXMLNS">[XMLNS]</a></p></dd>


   <dt>If the field name is "data"</dt>

   <dd><p>If the <var title="">data</var> buffer is not the empty
   string, then append a single U+000A LINE FEED character to the <var
   title="">data</var> buffer. Append the field value to the <var
   title="">data</var> buffer.</p></dd>


   <dt>If the field name is "id"</dt>

   <dd><p>Set the event stream's <span
   title="concept-event-stream-last-event-id">last event ID</span> to
   the field value.</p></dd>


   <dt>If the field name is "retry"</dt>

   <dd><p>If the field value consists of only characters in the range
   U+0030 DIGIT ZERO ('0') U+0039 DIGIT NINE ('9'), then interpret the
   field value as an integer in base ten, and set the event stream's
   <span title="concept-event-stream-reconnection-time">reconnection
   time</span> to that integer. Otherwise, ignore the field.</p></dd>


   <dt>Otherwise</dt>

   <dd><p>The field is ignored.</p></dd>

  </dl>


  <p id="dispatchEvent">When the user agent is required to <dfn
  title="">dispatch the event</dfn>, then the user agent must act as follows:

  <ol>

   <li><p>If the <var title="">data</var> buffer is an empty string,
   set the <var title="">data</var> buffer and the <var title="">event
   name</var> buffer to the empty string and abort these
   steps.</p></li>

   <li><p>If the <var title="">event name</var> buffer is not the
   empty string but is also not a valid <a
   href="http://www.w3.org/TR/REC-xml-names/#NT-NCName">NCName</a>,
   set the <var title="">data</var> buffer and the <var title="">event
   name</var> buffer to the empty string and abort these
   steps.</p></li>
   
   <li><p>Otherwise, create an event that uses the
   <code>MessageEvent</code> interface, with the event name <code
   title="event-message">message</code>, which does not bubble, is
   cancelable, and has no default action. The <code
   title="dom-MessageEvent-data">data</code> attribute must be set to
   the value of the <var title="">data</var> buffer, the <code
   title="dom-MessageEvent-origin">origin</code> attribute must be set
   to the <span>origin</span> of the event stream, and the <code
   title="dom-MessageEvent-source">source</code> attribute must be set
   to null.</p></li>
   
   <li><p>If the <var title="">event name</var> buffer has a value
   other than the empty string, change the type of the newly created
   event to equal the value of the <var title="">event name</var>
   buffer.</p></li>

   <li><p>Set the <var title="">data</var> buffer and the <var
   title="">event name</var> buffer to the empty string.</p></li>

   <li><p>Dispatch the newly created event at the
   <code>RemoteEventTarget</code> object to which the event stream is
   registered.</p></li>

  </ol>


  <div class="example">

   <p>The following event stream, once followed by a blank line:</p>
   <pre>data: YHOO
data: -2
data: 10</pre>

   <p>...would cause an event <code
   title="event-message">message</code> with the interface
   <code>MessageEvent</code> to be dispatched on the
   <code>event-source</code> element, whose <code
   title="dom-MessageEvent-data">data</code> attribute would contain
   the string <code>YHOO\n-2\n10</code> (where <code>\n</code>
   represents a newline).</p>

   <p>This could be used as follows:
   <pre>&lt;event-source src="http://stocks.example.com/ticker.php"
              onmessage="var data = event.data.split('\n'); updateStocks(data[0], data[1], data[2]);"&gt;</pre>
   <p>...where <code title="">updateStocks()</code> is a function defined as:</p>
   <pre>function updateStocks(symbol, delta, value) { ... }</pre>
   <p>...or some such.</p>

  </div>

  <div class="example">

   <p>The following stream contains four blocks. The first block has
   just a comment, and will fire nothing. The second block has two
   fields with names "data" and "id" respectively; an event will be
   fired for this block, with the data "first event", and will then
   set the last event ID to "1" so that if the connection died between
   this block and the next, the server would be sent a <code
   title="">Last-Event-ID</code> header with the value "1". The third
   block fires an event with data "second event", and also has an "id"
   field, this time with no value, which resets the last event ID to
   the empty string (meaning no <code title="">Last-Event-ID</code>
   header will now be sent in the event of a reconnection being
   attempted). Finally the last block just fires an event with the
   data "third event". Note that the last block doesn't have to end
   with a blank line, the end of the stream is enough to trigger the
   dispatch of the last event.</p>

   <pre>: test stream

data: first event
id: 1

data: second event
id

data: third event</pre>
  </div>

  <div class="example">

   <p>The following stream fires just one event:</p>

   <pre>data

data
data

data:</pre>

   <p>The first and last blocks do nothing, since they do not contain
   any actual data (the <var title="">data</var> buffer remains at the
   empty string, and so nothing gets dispatched). The middle block
   fires an event with the data set to a single newline character.</p>
  </div>

  <div class="example">

   <p>The following stream fires two identical events:</p>

   <pre>data:test

data:&nbsp;test</pre>

   <p>This is because the space after the colon is ignored if
   present.</p>

  </div>


  <h4>Notes</h4>

  <p>Legacy proxy servers are known to, in certain cases, drop HTTP
  connections after a short timeout. To protect against such proxy
  servers, authors can include a comment line (one starting with a ':'
  character) every 15 seconds or so.</p>

  <p>Authors wishing to relate event source connections to each other
  or to specific documents previously served might find that relying
  on IP addresses doesn't work, as individual clients can have
  multiple IP addresses (due to having multiple proxy servers) and
  individual IP addresses can have multiple clients (due to sharing a
  proxy server). It is better to include a unique identifier in the
  document when it is served and then pass that identifier as part of
  the URI in the <code title="attr-event-source-src">src</code>
  attribute of the <code>event-source</code> element.</p>

  <p>Implementations that support HTTP's per-server connection
  limitation might run into trouble when opening multiple pages from a
  site if each page has an <code>event-source</code> to the same
  domain. Authors can avoid this using the relatively complex
  mechanism of using unique domain names per connection, or by
  allowing the user to enable or disable the <code>event-source</code>
  functionality on a per-page basis.</p>



  <h3 id="network">Network connections</h3>

  <p>To enable Web applications to communicate with each other in
  local area networks, and to maintain bidirectional communications
  with their originating server, this specification introduces the
  <code>Connection</code> interface.</p>

  <p>The <code>Window</code> interface provides three constructors
  for creating <code>Connection</code> objects: <code
  title="dom-TCPConnection">TCPConnection()</code>, for creating a
  direct (possibly encrypted) link to another node on the Internet
  using TCP/IP; <code
  title="dom-LocalBroadcastConnection">LocalBroadcastConnection()</code>,
  for creating a connection to any listening peer on a local network
  (which could be a local TCP/IP subnet using UDP, a Bluetooth PAN, or
  another kind of network infrastructure); and <code
  title="dom-PeerToPeerConnection">PeerToPeerConnection()</code>, for
  a direct peer-to-peer connection (which could again be over TCP/IP,
  Bluetooth, IrDA, or some other type of network).</p>

  <p class="note">This interface does not allow for raw access to the
  underlying network. For example, this interface could not be used to
  implement an IRC client without proxying messages through a custom
  server.</p>


  <h4 id="network-intro">Introduction</h4>

  <p><em>This section is non-normative.</em></p>

  <p class="big-issue">An introduction to the client-side and
  server-side of using the direct connection APIs.</p>

  <p class="big-issue">An example of a party-line implementation of a
  broadcast service, and direct peer-to-peer chat for direct local
  connections.</p>

<!--
    <div class="example">
     <p>The following script creates a connection to a local party
     line:</p>
     <pre>var a = new LocalBroadcastConnection();
  a.onread = function(e) { alert(e.source + ' wrote ' + e.data); }
  a.send('hello');</pre>
    </div>
-->

  <!--XXX
   Explain why we don't use HTTP instead of our own protocol: wouldn't
   work for peer-to-peer, too much work to implement server if you
   have to implement a compliant HTTP server as well, etc
  -->


  <h4>The <code>Connection</code> interface</h4>
 
  <pre class="idl">interface <dfn>Connection</dfn> {
  readonly attribute DOMString <span title="dom-Connection-network">network</span>;
  readonly attribute DOMString <span title="dom-Connection-peer">peer</span>;
  readonly attribute int <span title="dom-Connection-readyState">readyState</span>;
           attribute EventListener <span title="dom-Connection-onopen">onopen</span>;
           attribute EventListener <span title="dom-Connection-onread">onread</span>;
           attribute EventListener <span title="dom-Connection-onclose">onclose</span>;
  void <span title="dom-Connection-send">send</span>(in DOMString data);
  void <span title="dom-Connection-disconnect">disconnect</span>();
};</pre>

  <p><code>Connection</code> objects must also implement the
  <code>EventTarget</code> interface. <a
  href="#refsDOM3EVENTS">[DOM3EVENTS]</a>

  <p>When a <code>Connection</code> object is created, the UA must try
  to establish a connection, as described in the sections below
  describing each connection type.</p>

  <p>The <dfn
  title="dom-Connection-network"><code>network</code></dfn> attribute
  represents the name of the network connection (the value depends on
  the kind of connection being established). The <dfn
  title="dom-Connection-peer"><code>peer</code></dfn> attribute
  identifies the remote host for direct (non-broadcast)
  connections.</p>

  <p>The <code title="dom-Connection-network">network</code> attribute
  must be set as soon as the <code>Connection</code> object is
  created, and keeps the same value for the lifetime of the object.
  The <code title="dom-Connection-peer">peer</code> attribute must
  initially be set to the empty string and must be updated once, when
  the connection is established, after which point it must keep the
  same value for the lifetime of the object.</p>

  <p>The <dfn
  title="dom-Connection-readyState"><code>readyState</code></dfn>
  attribute represents the state of the connection. When the object is
  created it must be set to 0. It can have the following values:</p>

  <dl>

   <dt>0 Connecting</dt>
   <dd>The connection has not yet been established.</dd>

   <dt>1 Connected</dt>
   <dd>The connection is established and communication is possible.</dd>

   <dt>2 Closed</dt>
   <dd>The connection has been closed.</dd>

  </dl>

  <p id="openConnection">Once a connection is established, the <code
  title="dom-Connection-readyState">readyState</code> attribute's
  value must be changed to 1, and the <code
  title="event-connection-open">open</code> event must be fired on the
  <code>Connection</code> object.</p>

  <p>When data is received, the <code
  title="event-connection-read">read</code> event will be fired on the
  <code>Connection</code> object.</p> <!-- conf crit for this
  statement is in the various protocol-specific sections below. -->

  <p id="closeConnection">When the connection is closed, the <code
  title="dom-Connection-readyState">readyState</code> attribute's
  value must be changed to 2, and the <code
  title="event-connection-close">close</code> event must be fired on
  the <code>Connection</code> object.</p>

  <p>The <dfn title="dom-Connection-onopen"><code>onopen</code></dfn>,
  <dfn title="dom-Connection-onread"><code>onread</code></dfn>, and
  <dfn title="dom-Connection-onclose"><code>onclose</code></dfn>
  attributes must, when set, register their new value as an event
  listener for their respective events (namely <code
  title="event-connection-open">open</code>, <code
  title="event-connection-read">read</code>, and <code
  title="event-connection-close">close</code>), and unregister their
  previous value if any.</p>

  <p>The <dfn title="dom-Connection-send"><code>send()</code></dfn>
  method transmits data using the connection. If the connection is not
  yet established, it must raise an <code>INVALID_STATE_ERR</code>
  exception. If the connection <em>is</em> established, then the
  behaviour depends on the connection type, as described below.</p>

  <p>The <dfn
  title="dom-Connection-disconnect"><code>disconnect()</code></dfn>
  method must close the connection, if it is open. If the connection
  is already closed, it must do nothing. Closing the connection causes
  a <code title="event-connection-close">close</code> event to be
  fired and the <code
  title="dom-Connection-readyState">readyState</code> attribute's
  value to change, as <a href="#closeConnection">described
  above</a>.</p>


  <h4>Connection Events</h4>

  <p>All the events described in this section are events in no
  namespace, which do not bubble, are not cancelable, and have no
  default action.</p>

  <p>The <dfn title="event-connection-open"><code>open</code></dfn>
  event is fired when the connection is established. UAs must use the
  normal <code>Event</code> interface when firing this event.</p>

  <p>The <dfn title="event-connection-close"><code>close</code></dfn>
  event is fired when the connection is closed (whether by the author,
  calling the <code
  title="dom-Connection-disconnect">disconnect()</code> method, or by
  the server, or by a network error). UAs must use the normal
  <code>Event</code> interface when firing this event as well.</p>

  <p class="note">No information regarding why the connection was
  closed is passed to the application in this version of this
  specification.</p>

  <p>The <dfn title="event-connection-read"><code>read</code></dfn>
  event is fired when when data is received for a connection. UAs must
  use the <code>ConnectionReadEvent</code> interface for this
  event.</p>

  <pre class="idl">interface <dfn>ConnectionReadEvent</dfn> : Event {
  readonly attribute DOMString <span title="dom-ConnectionReadEvent-data">data</span>;
  readonly attribute DOMString <span title="dom-ConnectionReadEvent-source">source</span>;
  void <span title="dom-ConnectionReadEvent-initConnectionReadEvent">initConnectionReadEvent</span>(in DOMString typeArg, in boolean canBubbleArg, in boolean cancelableArg, in DOMString dataArg);
  void <span title="dom-ConnectionReadEvent-initConnectionReadEventNS">initConnectionReadEventNS</span>(in DOMString namespaceURI, in DOMString typeArg, in boolean canBubbleArg, in boolean cancelableArg, in DOMString dataArg);
};
</pre>

  <p>The <dfn
  title="dom-ConnectionReadEvent-initConnectionReadEvent"><code>initConnectionReadEvent()</code></dfn>
  and <dfn
  title="dom-ConnectionReadEvent-initConnectionReadEventNS"><code>initConnectionReadEventNS()</code></dfn>
  methods must initialise the event in a manner analogous to the
  similarly-named methods in the DOM3 Events interfaces. <a
  href="#refsDOM3EVENTS">[DOM3EVENTS]</a></p>

  <p>The <dfn
  title="dom-ConnectionReadEvent-data"><code>data</code></dfn>
  attribute represents the data that was transmitted from the
  peer.</p>

  <p>The <dfn
  title="dom-ConnectionReadEvent-source"><code>source</code></dfn>
  attribute represents the name of the peer. This is primarily useful
  on broadcast connections; on direct connections it is equal to the
  <code title="dom-Connection-peer">peer</code> attribute on the
  <code>Connection</code> object.</p>

  <!-- XXX check that the following three sections define "the data
  that was transmitted" and "the name of the peer" in terms that mean
  they fit into the above definitions ("for the purposes of the
  ConnectionReadEvent"), and check they say that they MUST be set
  correctly. -->

  <!-- XXX should we have a Connection attribute on the event? -->

  <p>Events that would be fired during script execution (e.g. between
  the connection object being created &mdash; and thus the connection
  being established &mdash; and the current script completing; or,
  during the execution of a <code
  title="event-connection-read">read</code> event handler) must be
  buffered, and those events queued up and each one individually fired
  after the script has completed.</p> <!-- XXX make this more generic -->

  <h4>TCP connections</h4>

  <p>The <dfn title="dom-TCPConnection"><code>TCPConnection(<var
  title="">subdomain</var>, <var title="">port</var>, <var
  title="">secure</var>)</code></dfn> constructor on the
  <code>Window</code> interface returns a new object implementing
  the <code>Connection</code> interface, set up for a direct
  connection to a specified host on the page's domain.</p>

  <p>When this constructor is invoked, the following steps must be
  followed.</p>

  <p>First, if the domain part of the script's <span>origin</span> is
  not a host name (e.g. it is an IP address) then the UA must raise a
  <span>security exception</span>. <span class="issue">We currently
  don't allow connections to be set up back to an originating IP
  address, but we could, if the subdomain is the empty
  string.</span></p>

  <p>Then, if the <var title="">subdomain</var> argument is null or
  the empty string, the target host is the domain part of the script's
  <span>origin</span>. Otherwise, the <var title="">subdomain</var>
  argument is prepended to the domain part of the script's origin with
  a dot separating the two strings, and that is the target host.</p>

  <p>If either:</p>
  <ul>
   <li>the target host is not a valid host name, or</li>
   <li>the <var title="">port</var> argument is neither equal to 80,
   nor equal to 443, nor greater than or equal to 1024 and less than
   or equal to 65535,</li>
  </ul>
  <p>...then the UA must raise a <span>security exception</span>.</p>
  <!-- XXX we should have our own port for this too, e.g. 980 -->

  <p>Otherwise, the user agent must verify that the <span>the string
  representing the script's domain in IDNA format</span> can be
  obtained without errors. If it cannot, then the user agent must
  raise a <span>security exception</span>.</p>

  <p>The user agent may also raise a <span>security exception</span>
  at this time if, for some reason, permission to create a direct TCP
  connection to the relevant host is denied. Reasons could include the
  UA being instructed by the user to not allow direct connections, or
  the UA establishing (for instance using UPnP) that the network
  topology will cause connections on the specified port to be directed
  at the wrong host.</p>

  <p>If no exceptions are raised by the previous steps, then a new
  <code>Connection</code> object must be created, its <code
  title="dom-Connection-peer">peer</code> attribute must be set to a
  string consisting of the name of the target host, a colon (U+003A
  COLON), and the port number as decimal digits, and its <code
  title="dom-Connection-network">network</code> attribute must be set
  to the same value as the <code
  title="dom-Connection-peer">peer</code> attribute.</p>

  <p>This object must then be returned.</p>

  <p>The user agent must then begin trying to establish a connection
  with the target host and specified port. (This typically would begin
  in the backgound, while the script continues to execute.)</p>

  <p>If the <var title="">secure</var> boolean argument is set to
  true, then the user agent must establish a secure connection with
  the target host and specified port using TLS or another protocol,
  negotiated with the server. <a href="#refsRFC2246">[RFC2246]</a> If
  this fails the user agent must act as if it had <a
  href="#closeConnection">closed the connection</a>.</p>

  <p>Once a secure connection is established, or if the <var
  title="">secure</var> boolean argument is not set to true, then the
  user agent must continue to connect to the server using the protocol
  described in the section entitled <span>clients connecting over
  TCP</span>. All data on connections made using TLS must be sent as
  "application data".</p>

  <p>Once the connection is established, the UA must act as described
  in the section entitled <span>sending and receiving data over
  TCP</span>.</p>

  <p>User agents should allow multiple TCP connections to be
  established per host. In particular, user agents should not apply
  per-host HTTP connection limits to connections established with the
  <code title="dom-TCPConnection">TCPConnection</code>
  constructor.</p>


  <h4>Broadcast connections</h4>

  <p>The <dfn
  title="dom-LocalBroadcastConnection"><code>LocalBroadcastConnection()</code></dfn>
  constructor on the <code>Window</code> interface returns a new
  object implementing the <code>Connection</code> interface, set up to
  broadcast on the local network.</p>

  <p>When this constructor is invoked, a new <code>Connection</code>
  object must be created.</p>

  <p>The <code title="dom-Connection-network">network</code> attribute
  of the object must be set to <span>the string representing the
  script's domain in IDNA format</span>. If this string cannot be
  obtained, then the user agent must raise a <span>security
  exception</span> exception when the constructor is called.</p>

  <p>The <code title="dom-Connection-peer">peer</code> attribute must
  be set to the empty string.</p>

  <p>The object must then be returned, unless, for some reason,
  permission to broadcast on the local network is to be denied. In the
  latter case, a <span>security exception</span> must be raised
  instead. User agents may deny such permission for any reason, for
  example a user preference.</p>

  <p>If the object is returned (i.e. if no exception is raised), the
  user agent must the begin broadcasting and listening on the local
  network, in the background, as described below. The user agent may
  define "the local network" in any way it considers appropriate and
  safe; for instance the user agent may ask the user which network
  (e.g. Bluetooth, IrDA, Ethernet, etc) the user would like to
  broadcast on before beginning broadcasting.</p>

  <p>UAs may broadcast and listen on multiple networks at once. For
  example, the UA could broadcast on both Bluetooth and Wifi at the
  same time.</p> <!-- XXX bridging? how do we handle one UA not seeing
  the same hosts as another UA? -->

  <p>As soon as the object is returned, the connection <a
  href="#openConnection">has been established</a>, which implies that
  the <code title="event-connection-open">open</code> event must be
  fired. Broadcast connections are never closed.</p>


  <h5>Broadcasting over TCP/IP</h5>

  <p class="big-issue">Should we drop this altogether? Letting people
  fill the local network with garbage seems unwise.</p>

  <p class="big-issue">We need to register a UDP port for this. For
  now this spec refers to port 18080/udp.</p>

  <p class="note">Since this feature requires that the user agent
  listen to a particular port, some platforms might prevent more than
  one user agent per IP address from using this feature at any one
  time.</p>

  <p>On TCP/IP networks, broadcast connections transmit data using UDP
  over port 18080.</p>

  <p>When the <code title="dom-Connection-send">send(<var
  title="">data</var>)</code> method is invoked on a
  <code>Connection</code> object that was created by the <code
  title="dom-LocalBroadcastConnection">LocalBroadcastConnection()</code>
  constructor, the user agent must follow these steps:</p>

  <ol>

   <li>Create a string consisting of the value of the <code
   title="dom-Connection-network">network</code> attribute of the
   <code>Connection</code> object, a U+0020 SPACE character, a U+0002
   START OF TEXT character, and the <var title="">data</var>
   argument.</li>

   <li>Encode the string as UTF-8.</li>

   <li>If the resulting byte stream is longer than 65487 bytes, raise
   an <code>INDEX_SIZE_ERR</code> DOM exception and stop.</li>

   <li>Create a UDP packet whose data is the byte stream, with the
   source and destination ports being 18080, and with appropriate
   length and checksum fields. Transmit this packet to IPv4 address
   255.255.255.255 or IPv6 address ff02::1, as appropriate. <span
   class="note">IPv6 applications will also have to enable reception
   from this address.</span></li>

  </ol>

  <p>When a broadcast connection is opened on a TCP/IP network, the
  user agent should listen for UDP packets on port 18080.</p>

  <p>When the user agent receives a packet on port 18080, the user
  agent must attempt to decode that packet's data as UTF-8. If the
  data is not fully correct UTF-8 (i.e. if there are decoding errors)
  then the packet must be ignored. Otherwise, the user agent must
  check to see if the decoded string contains a U+0020 SPACE
  character. If it does not, then the packet must again be ignored (it
  might be a peer discovery packet from a <code
  title="dom-PeerToPeerConnection">PeerToPeerConnection()</code>
  constructor). If it does then the user agent must split the
  string at the first space character. All the characters before the
  space are then known as <var title="">d</var>, and all the
  characters after the space are known as <var title="">s</var>. If
  <var title="">s</var> is not at least one character long, or if the
  first character of <var title="">s</var> is not a U+0002 START OF
  TEXT character, then the packet must be ignored. (This allows for
  future extension of this protocol.)</p>

  <p>Otherwise, for each <code>Connection</code> object that was
  created by the <code
  title="dom-LocalBroadcastConnection">LocalBroadcastConnection()</code>
  constructor and whose <code
  title="dom-Connection-network">network</code> attribute exactly
  matches <var title="">d</var>, a <code
  title="event-connection-read">read</code> event must be fired on the
  <code>Connection</code> object. The string <var title="">s</var>,
  with the first character removed, must be used as the <code
  title="dom-ConnectionReadEvent-data">data</code>, and the source IP
  address of the packet as the <code
  title="dom-ConnectionReadEvent-source">source</code>.</p>

  <p class="big-issue">Making the source IP available means that if
  two or more machines in a private network can be made to go to a
  hostile page simultaneously, the hostile page can determine the IP
  addresses used locally (i.e. on the other side of any NAT
  router). Is there some way we can keep link-local IP addresses
  secret while still allowing for applications to distinguish between
  multiple participants?</p>


  <h5 id="bluetooth-broadcast">Broadcasting over Bluetooth</h5>

  <p class="big-issue">Does anyone know enough about Bluetooth to
  write this section?</p>


  <h5 id="irda-broadcast">Broadcasting over IrDA</h5>

  <p class="big-issue">Does anyone know enough about IrDA to write
  this section?</p>


  <h4>Peer-to-peer connections</h4>

  <p>The <dfn
  title="dom-PeerToPeerConnection"><code>PeerToPeerConnection()</code></dfn>
  constructor on the <code>Window</code> interface returns a new
  object implementing the <code>Connection</code> interface, set up
  for a direct connection to a user-specified host.</p>

  <p>When this constructor is invoked, a new <code>Connection</code>
  object must be created.</p>

  <p>The <code title="dom-Connection-network">network</code> attribute
  of the object must be set to <span>the string representing the
  script's domain in IDNA format</span>. If this string cannot be
  obtained, then the user agent must raise a <span>security
  exception</span> exception when the constructor is called.</p>

  <p>The <code title="dom-Connection-peer">peer</code> attribute must
  be set to the empty string.</p>

  <p>The object must then be returned, unless, for some reason,
  permission to establish peer-to-peer connections is generally
  disallowed, for example due to administrator settings. In the latter
  case, a <span>security exception</span> must be raised instead.</p>

  <p>The user agent must then, typically while the script resumes
  execution, find a remote host to establish a connection to. To do
  this it must start broadcasting and listening for peer discovery
  messages and listening for incoming connection requests on all the
  supported networks. How this is performed depends on the type of
  network and is described below.</p>

  <p>The UA should inform the user of the clients that are detected,
  and allow the user to select one to connect to. UAs may also allow
  users to explicit specify hosts that were not detected, e.g. by
  having the user enter an IP address.</p>

  <p>If an incoming connection is detected before the user specifies a
  target host, the user agent should ask the user to confirm that this
  is the host they wish to connect to. If it is, the connection should
  be accepted and the UA will act as the <em>server</em> in this
  connection. (Which UA acts as the server and which acts as the
  client is not discernible at the DOM API level.)</p>

  <p>If no incoming connection is detected and if the user specifies a
  particular target host, a connection should be established to that
  host, with the UA acting as the <em>client</em> in the
  connection.</p>

  <p>No more than one connection must be established per
  <code>Connection</code> object, so once a connection has been
  established, the user agent must stop listening for further
  connections (unless, or until such time as, another
  <code>Connection</code> object is being created).</p>

  <p>If at any point the user cancels the connection process or the
  remote host refuses the connection, then the user agent must act as
  if it had <a href="#closeConnection">closed the connection</a>, and
  stop trying to connect.</p>


  <h5>Peer-to-peer connections over TCP/IP</h5>

  <p class="big-issue">Should we replace this section with something
  that uses Rendez-vous/zeroconf or equivalent?</p>

  <p class="big-issue">We need to register ports for this. For now
  this spec refers to port 18080/udp and 18080/tcp.</p>

  <p class="note">Since this feature requires that the user agent
  listen to a particular port, some platforms might prevent more than
  one user agent per IP address from using this feature at any one
  time.</p>

  <p>When using TCP/IP, broadcasting peer discovery messages must be
  done by creating UDP packets every few seconds containing as their
  data the value of the connection's <code
  title="dom-Connection-network">network</code> attribute, encoded as
  UTF-8, with the source and destination ports being set to 18080 and
  appropriate length and checksum fields, and sending these packets to
  address (in IPv4) 255.255.255.255 or (in IPv6) ff02::1, as
  appropriate.</p>

  <p>Listening for peer discovery messages must be done by examining
  incoming UDP packets on port 18080. <span class="note">IPv6
  applications will also have to enable reception from the ff02::1
  address.</span> If their payload is exactly byte-for-byte equal to a
  UTF-8 encoded version of the value of the connection's <code
  title="dom-Connection-network">network</code> attribute, then the
  source address of that packet represents the address of a host that
  is ready to accept a peer-to-peer connection, and it should
  therefore be offered to the user.</p>

  <p>Incoming connection requests must be listened for on TCP port
  18080. If an incoming connection is received, the UA must act as a
  <em>server</em>, as described in the section entitled <span>servers
  accepting connections over TCP</span>.</p>

  <p>If no incoming connection requests are accepted and the user
  instead specifies a target host to connect to, the UA acts as a
  <em>client</em>: the user agent must attempt to connect to the
  user-specified host on port 18080, as described in the section
  entitled <span>clients connecting over TCP</span>.</p>

  <p>Once the connection is established, the UA must act as described
  in the section entitled <span>sending and receiving data over
  TCP</span>.</p>

  <p class="note">This specification does not include a way to
  establish <em>secure</em> (encrypted) peer-to-peer connections at
  this time. <span class="big-issue">If you can see a good way to do
  this, let me know.</span></p>

  <h5 id="bluetooth-peer">Peer-to-peer connections over Bluetooth</h5>

  <p class="big-issue">Does anyone know enough about Bluetooth to
  write this section?</p>


  <h5 id="irda-peer">Peer-to-peer connections over IrDA</h5>

  <p class="big-issue">Does anyone know enough about IrDA to write
  this section?</p>



<!--XXX
    <p>Prompts the user to select a connection to make, which could
    look like this:</p>

<pre>|:: New Connection :::::::::::::::::::::::::::::::::::::::::|
|                                                           |
|  Select the peer to connect to:                           |
|                                                           |
|    JohnSmith_Series60   via Bluetooth      (( Connect ))  |
|    Patrick's Phone      via Bluetooth       ( Connect )   |
|    John Smith           via UDP             ( Connect )   |
|                                                           |
|                                               ( Cancel )  |
|___________________________________________________________|
</pre>

    <p>While the prompt is displayed, the UA should broadcast on all
    supported networks, as described <span title="announcing peer
    connections">below</span>.</p>

    <p>Returns null if the prompt was canceled. Otherwise, returns a
    <code>Connection</code> object with its <code>network</code>
    attribute set to <var title="">topic</var> and its <code>peer</code>
    attribute set to a string uniquely identifying the selected peer,
    and opens a connection to that peer. (See: <span>peer connection
    formats</span>.)</p>


   |:: New Connection :::::::::::::::::::::::::::::::::::::::::|
   |                                                           |
   |  Would you like to open a connection called "Chess" for   |
   |  this Web site?:                                          |
   |                                                           |
   |    example.org                                            |
   |                                                           |
   |  Select connection to use: [ Bluetooth      | v ]         |
   |                                                           |
   |                        (( Open connection ))  ( Cancel )  |
   |___________________________________________________________|

  c = new LocalBroadcastConnection("Chess");
  c.onread = function(s, f) { alert("got message " + s + " from " + f); }
  c.send("hello, anybody there?");


   |:: New Connection :::::::::::::::::::::::::::::::::::::::::|
   |                                                           |
   |  Select the peer to connect to:                           |
   |                                                           |
   |    JohnSmith_Series60   via Bluetooth      (( Connect ))  |
   |    Patrick's Phone      via Bluetooth       ( Connect )   |
   |    John Smith           via UDP             ( Connect )   |
   |                                                           |
   |                                               ( Cancel )  |
   |___________________________________________________________|

  c = new LocalPeerConnection("Chess");
  // c.peer contains peer's name
  c.onread = function(s) { alert("got message " + s); } // second argument is c.peer
  c.send("hello");

  c = new TCPConnection("chess.example.com", 8089, false);
  // c.peer contains 'chess.example.com:8089'
  c.onread = function(s) { alert("got message " + s); } // second argument is c.peer
  c.send("hello");

> > Again, what else should we support? Should this have an HTML Element
> > backing it for more declarative authoring? What error handling do we need?
> > Should it automatically use bluetooth, TCP/IP broadcast, infrared, or
> > should it be under the control of the author or user?
-->


  <h4>The common protocol for TCP-based connections</h4>

  <p>The same protocol is used for <code
  title="dom-TCPConnection">TCPConnection</code> and <code
  title="dom-PeerToPeerConnection">PeerToPeerConnection</code>
  connection types. This section describes how such connections are
  established from the client and server sides, and then describes how
  data is sent and received over such connections (which is the same
  for both clients and servers).</p>


  <h5><dfn>Clients connecting over TCP</dfn></h5>

  <p>This section defines the client-side requirements of the protocol
  used by the <code title="dom-TCPConnection">TCPConnection</code> and
  <code title="dom-PeerToPeerConnection">PeerToPeerConnection</code>
  connection types.</p>

  <p>If a TCP connection to the specified target host and port cannot
  be established, for example because the target host is a domain name
  that cannot be resolved to an IP address, or because packets cannot
  be routed to the host, the user agent should retry creating the
  connection. If the user agent gives up trying to connect, the user
  agent must act as if it had <a href="#closeConnection">closed the
  connection</a>.</p>

  <p class="note">No information regarding the state of the connection
  is passed to the application while the connection is being
  established in this version of this specification.</p>

  <p>Once a TCP/IP connection to the remote host is established, the
  user agent must transmit the following sequence of bytes,
  represented here in hexadecimal form:</p>

  <pre>0x48 0x65 0x6C 0x6C 0x6F 0x0A</pre>

  <p class="note">This represents the string "Hello" followed by a
  newline, encoded in UTF-8.</p>

  <p>The user agent must then read all the bytes sent from the remote
  host, up to the first 0x0A byte (inclusive). That string of bytes is
  then compared byte-for-byte to the following string of bytes:</p>

  <pre>0x57 0x65 0x6C 0x63 0x6F 0x6E 0x65 0x0A</pre>

  <p class="note">This says "Welcome".</p>

  <p>If the server sent back a string in any way different to this,
  then the user agent must <a href="#closeConnection">close the
  connection</a> and give up trying to connect.</p>

  <p>Otherwise, the user agent must then take <span>the string
  representing the script's domain in IDNA format</span>, encode it as
  UTF-8, and send that to the remote host, followed by a 0x0A byte (a
  U+000A LINE FEED in UTF-8).</p>

  <p>The user agent must then read all the bytes sent from the remote
  host, up to the first 0x0A byte (inclusive). That string of bytes
  must then be compared byte-for-byte to the string that was just sent
  to the server (the one with the IDNA domain name and ending with a
  newline character). If the server sent back a string in any way
  different to this, then the user agent must <a
  href="#closeConnection">close the connection</a> and give up trying
  to connect.</p>

  <p>Otherwise, the connection <a href="#openConnection">has been
  established</a> (and events and so forth get fired, as described
  above).</p>

  <p>If at any point during this process the connection is closed
  prematurely, then the user agent must <a
  href="#closeConnection">close the connection</a> and give up trying
  to connect.</p> <!-- XXX we should support automatic reconnect -->


  <h5><dfn>Servers accepting connections over TCP</dfn></h5>

  <p>This section defines the server side of the protocol described in
  the previous section. For authors, it should be used as a guide for
  how to implement servers that can communicate with Web pages over
  TCP. For UAs these are the requirements for the server part of <code
  title="dom-PeerToPeerConnection">PeerToPeerConnection</code>s.</p>

  <p>Once a TCP/IP connection from a remote host is established, the
  user agent must transmit the following sequence of bytes,
  represented here in hexadecimal form:</p>

  <pre>0x57 0x65 0x6C 0x63 0x6F 0x6E 0x65 0x0A</pre>

  <p class="note">This says "Welcome" and a newline in UTF-8.</p>

  <p>The user agent must then read all the bytes sent from the remote
  host, up to the first 0x0A byte (inclusive). That string of bytes is
  then compared byte-for-byte to the following string of bytes:</p>

  <pre>0x48 0x65 0x6C 0x6C 0x6F 0x0A</pre>

  <p class="note">"Hello" and a newline.</p>

  <p>If the remote host sent back a string in any way different to
  this, then the user agent must <a href="#closeConnection">close the
  connection</a> and give up trying to connect.</p>

  <p>Otherwise, the user agent must then take <span>the string
  representing the script's domain in IDNA format</span>, encode it as
  UTF-8, and send that to the remote host, followed by a 0x0A byte (a
  U+000A LINE FEED in UTF-8).</p>

  <p>The user agent must then read all the bytes sent from the remote
  host, up to the first 0x0A byte (inclusive). That string of bytes
  must then be compared byte-for-byte to the string that was just sent
  to that host (the one with the IDNA domain name and ending with a
  newline character). If the remote host sent back a string in any way
  different to this, then the user agent must <a
  href="#closeConnection">close the connection</a> and give up trying
  to connect.</p>

  <p>Otherwise, the connection <a href="#openConnection">has been
  established</a> (and events and so forth get fired, as described
  above).</p>

  <p class="note">For author-written servers (as opposed to the server
  side of a peer-to-peer connection), the script's domain would be
  replaced by the hostname of the server. Alternatively, such servers
  might instead wait for the client to send its domain string, and
  then simply echo it back. This would allow connections from pages on
  any domain, instead of just pages originating from the same
  host. The client compares the two strings to ensure they are the
  same before allowing the connection to be used by author script.</p>

  <p>If at any point during this process the connection is closed
  prematurely, then the user agent must <a
  href="#closeConnection">close the connection</a> and give up trying
  to connect.</p> <!-- XXX we should support automatic reconnect -->


  <h5><dfn>Sending and receiving data over TCP</dfn></h5>

  <p>When the <code title="dom-Connection-send">send(<var
  title="">data</var>)</code> method is invoked on the connection's
  corresponding <code>Connection</code> object, the user agent must
  take the <var title="">data</var> argument, replace any U+0000 NULL
  and U+0017 END OF TRANSMISSION BLOCK characters in it with U+FFFD
  REPLACEMENT CHARACTER characters, then transmit a U+0002 START OF
  TEXT character, this new <var title="">data</var> string and a
  single U+0017 END OF TRANSMISSION BLOCK character (in that order) to
  the remote host, all encoded as UTF-8.</p>

  <p>When the user agent receives bytes on the connection, the user
  agent must buffer received bytes until it receives a 0x17 byte (a
  U+0017 END OF TRANSMISSION BLOCK character). If the first buffered
  byte is not a 0x02 byte (a U+0002 START OF TEXT character encoded as
  UTF-8) then all the data up to the 0x17 byte, inclusive, must be
  dropped. (This allows for future extension of this protocol.)
  Otherwise, all the data from (but not including) the 0x02 byte and
  up to (but not including) the 0x17 byte must be taken, interpreted
  as a UTF-8 string, and a <code
  title="event-connection-read">read</code> event must be fired on the
  <code>Connection</code> object with that string as the <code
  title="dom-ConnectionReadEvent-data">data</code>. If that string
  cannot be decoded as UTF-8 without errors, the packet should be
  ignored.</p>

  <p class="note">This protocol does not yet allow binary data
  (e.g. an image or <span>media data</span>) to be efficiently transmitted. A
  future version of this protocol might allow this by using the prefix
  character U+001F INFORMATION SEPARATOR ONE, followed by binary data
  which uses a particular byte (e.g. 0xFF) to encode byte 0x17 somehow
  (since otherwise 0x17 would be treated as transmission end by
  down-level UAs).</p>

  <!--
    Specifically, replace all occurrences of 0xFF with 0xFF 0xFF and
    all occurrences of 0x17 with 0xFF 0x00, or similar.
   -->

  <h4 id="network-security">Security</h4>

  <p class="big-issue">Need to write this section.</p>

  <p class="big-issue">If you have an unencrypted page that is
  (through a man-in-the-middle attack) changed, it can access a secure
  service that is using IP authentication and then send that data back
  to the attacker. Ergo we should probably stop unencrypted pages from
  accessing encrypted services, on the principle that the actual level
  of security is zero. Then again, if we do that, we prevent insecure
  sites from using SSL as a tunneling mechanism.</p>

  <p class="big-issue">Should consider dropping the subdomain-only
  restriction. It doesn't seem to add anything, and prevents
  cross-domain chatter.</p>

  <h4 id="network-other-specs">Relationship to other standards</h4>

  <p class="big-issue">Should have a section talking about the fact
  that we blithely ignoring IANA's port assignments here.</p>

  <p class="big-issue">Should explain why we are not reusing HTTP for
  this. (HTTP is too heavy-weight for such a simple need; requiring
  authors to implement an HTTP server just to have a party line is too
  much of a barrier to entry; cannot rely on prebuilt components;
  having a simple protocol makes it much easier to do RAD; HTTP
  doesn't fit the needs and doesn't have the security model
  needed; etc)</p>



  <h3 id="crossDocumentMessages"><dfn>Cross-document messaging</dfn></h3>

  <p>Web browsers, for security and privacy reasons, prevent documents
  in different domains from affecting each other; that is, cross-site
  scripting is disallowed.</p>

  <p>While this is an important security feature, it prevents pages
  from different domains from communicating even when those pages are
  not hostile. This section introduces a messaging system that allows
  documents to communicate with each other regardless of their source
  domain, in a way designed to not enable cross-site scripting
  attacks.</p>

  <h4>Processing model</h4>

  <p>When a script invokes the <dfn
  title="dom-window-postMessage"><code>postMessage(<var
  title="">message</var>, <var
  title="">origin</var>)</code></dfn> method on a <code>Window</code>
  object, the user agent must follow these steps:

  <ol>

   <li><p>Let <var title="">target</var> be the <code>Document</code>
   object that is the <span>active document</span> of the
   <code>Window</code> object on which the method was
   invoked.</p></li>

   <li>

    <p>If the <var title="">origin</var> argument is present and not
    null, run these substeps:</p>

    <ol>

     <li><p>If the value of the <var title="">origin</var> argument is
     not a valid URI or IRI, then throw a <code>SYNTAX_ERR</code>
     exception and abort the overall set of steps. <a
     href="#refsRFC3490">[RFC3986]</a> <a
     href="#refsRFC3490">[RFC3987]</a></p></li>

     <li><p>If the <span>origin</span> of the <var
     title="">target</var> document is not a scheme/host/port tuple,
     then abort the overall set of steps silently.</p></li>

     <li><p>Otherwise, let <var title="">origin</var> be the URI or
     IRI parsed from the <var title="">origin</var> argument. <a
     href="#refsRFC3490">[RFC3986]</a> <a
     href="#refsRFC3490">[RFC3987]</a></p></li>

     <li><p>If <var title="">origin</var> uses a URI scheme that does
     not have a server-based naming authority, then abort the overall
     set of steps silently. <a
     href="#refsRFC3490">[RFC3986]</a></p></li>

     <li><p>Let <var title="">desired scheme</var> be the &lt;scheme>
     component of <var title="">origin</var>.</p></li>

     <li><p>Let <var title="">desired host</var> be the &lt;host> or
     &lt;ihost> part of <var title="">origin</var>, with the ToAscii
     algorithm applied. <a href="#refsRFC3490">[RFC3490]</a></p></li>

     <li><p>Let <var title="">desired port</var> be the &lt;port>
     component of <var title="">origin</var>, or, if there isn't one,
     the default port for <var title="">desired scheme</var>.</p></li>

     <li><p>If <var title="">desired scheme</var> is not the same as
     the scheme component of the <span>origin</span> of the <var
     title="">target</var> document, then abort the overall set of steps
     silently.</p></li>

     <li><p>If <var title="">desired host</var> is not the same as the
     host component of the <span>origin</span> of the <var
     title="">target</var> document, after having the ToAscii
     algorithm applied, then abort the overall set of steps
     silently. <a href="#refsRFC3490">[RFC3490]</a></p></li>

     <li><p>If <var title="">desired port</var> is not the same as the
     port component of the <span>origin</span> of the <var
     title="">target</var> document, then abort the overall set of
     steps silently.</p></li>

    </ol>

   </li>

   <li>

    <p>Create an event that uses the <code>MessageEvent</code>
    interface, with the event name <code
    title="event-message">message</code>, which does not bubble, is
    cancelable, and has no default action. The <code
    title="dom-MessageEvent-data">data</code> attribute must be set to
    the value passed as the <var title="">message</var> argument to
    the <code title="dom-window-postMessage">postMessage()</code>
    method, the <code title="dom-MessageEvent-origin">origin</code>
    attribute must be set to the <span>origin</span> of the document
    that the script that invoked the methods is associated with, and
    the <code title="dom-MessageEvent-source">source</code> attribute
    must be set to the <code>Window</code> object of the default view
    of the browsing context with which that document is
    associated.</p>

    <p class="issue">Define 'origin' more exactly -- IDN vs no IDN,
    effect of window.document.domain on its value, etc</p>

   </li>

   <li><p>Dispatch the event created in the previous step at the <var
   title="">target</var> document.</p></li>

  </ol>

  <p>The <code title="dom-window-postMessage">postMessage()</code>
  method must only return once the event dispatch has been completely
  processed by the target document (i.e. all three of the capture,
  target, and bubble phases have been done, and event listeners have
  been executed as appropriate).</p>

  <p class="warning">Authors should check the <code
  title="dom-MessageEvent-origin">origin</code> attribute to ensure
  that messages are only accepted from domains that they expect to
  receive messages from. Otherwise, bugs in the author's message
  handling code could be exploited by hostile sites.</p>

  <p class="warning">Authors should include the <var
  title="">origin</var> argument in messages that contain any
  confidential information, to make sure that the message is only
  delivered to the recipient to which it was intended.</p>

  <div class="example">

   <p>For example, if document A contains an <code>object</code>
   element that contains document B, and script in document A calls
   <code title="dom-window-postMessage">postMessage()</code> on
   document B, then a message event will be fired on that element,
   marked as originating from document A.  The script in document A
   might look like:</p>

   <pre>var o = document.getElementsByTagName('object')[0];
o.contentWindow.postMessage('Hello world');</pre>

   <p>To register an event handler for incoming events, the script
   would use <code title="">addEventListener()</code> (or similar
   mechanisms).  For example, the script in document B might look
   like:</p>

   <pre>document.addEventListener('message', receiver, false);
function receiver(e) {
  if (e.origin == 'http://example.com') {
    if (e.data == 'Hello world') {
      e.source.postMessage('Hello', e.origin);
    } else {
      alert(e.data);
    }
  }
}</pre>

   <p>This script first checks the domain is the expected domain, and
   then looks at the message, which it either displays to the user, or
   responds to by sending a message back to the document which sent
   the message in the first place.</p>

  </div>

  <p class="warning">The integrity of this API is based on the
  inability for scripts of one origin to post arbitrary events (using
  <code title="">dispatchEvent()</code> or otherwise) to objects in
  other origins.</p>

  <p class="note">Implementors are urged to take extra care in the
  implementation of this feature. It allows authors to transmit
  information from one domain to another domain, which is normally
  disallowed for security reasons. It also requires that UAs be
  careful to allow access to certain properties but not others.</p>




  <h2 id="repetition">Repetition templates</h2>

  <p class="big-issue">See <a href="http://www.whatwg.org/specs/web-forms/current-work/#repeatingFormControls">WF2</a> for now</p>




  <h2 id="syntax">The HTML syntax</h2>

  <h3>Writing HTML documents</h3>

  <p><em>This section only applies to documents, authoring tools, and
  markup generators. In particular, it does not apply to conformance
  checkers; conformance checkers must use the requirements given in
  the next section ("parsing HTML documents").</em></p>

  <p>Documents must consist of the following parts, in the given
  order:</p>

  <ol>

   <li>Optionally, a single U+FEFF BYTE ORDER MARK (BOM) character.</li>

   <li>Any number of <span title="syntax-comments">comments</span> and
   <span title="space character">space characters</span>.</li>

   <li>A <span title="syntax-doctype">DOCTYPE</span>.

   <li>Any number of <span title="syntax-comments">comments</span> and
   <span title="space character">space characters</span>.</li>

   <li>The root element, in the form of an <code>html</code> <span
   title="syntax-elements">element</span>.</li>

   <li>Any number of <span title="syntax-comments">comments</span> and
   <span title="space character">space characters</span>.</li>

  </ol>

  <p>The various types of content mentioned above are described in the
  next few sections.</p>

  <p>In addition, there are some restrictions on how <span>character
  encoding declarations</span> are to be serialised, as discussed in
  the section on that topic.</p>

  <div class="note">

   <p>Space characters before the root <code>html</code> element, and
   space characters at the start of the <code>html</code> element and
   before the <code>head</code> element, will be dropped when the
   document is parsed; space characters <em>after</em> the root
   <code>html</code> element will be parsed as if they were at the end
   of the <code>body</code> element. Thus, space characters around the
   root element do not round-trip.</p>

   <p>It is suggested that newlines be inserted after the DOCTYPE,
   after any comments that are before the root element, after the
   <code>html</code> element's start tag (if it is not <span
   title="syntax-tag-omission">omitted</span>), and after any comments
   that are inside the <code>html</code> element but before the
   <code>head</code> element.</p>

  </div>


  <h4>The DOCTYPE</h4>

  <p>A <dfn title="syntax-doctype">DOCTYPE</dfn> is a mostly useless,
  but required, header.</p>

  <p class="note">DOCTYPEs are required for legacy reasons. When
  omitted, browsers tend to use a different rendering mode that is
  incompatible with some specifications. Including the DOCTYPE in a
  document ensures that the browser makes a best-effort attempt at
  following the relevant specifications.</p>

  <p>A DOCTYPE must consist of the following characters, in this
  order:</p>

  <ol class="brief">
   <li>A U+003C LESS-THAN SIGN (<code>&lt;</code>) character.</li>
   <li>A U+0021 EXCLAMATION MARK (<code>!</code>) character.</li>
   <li>A U+0044 LATIN CAPITAL LETTER D or U+0064 LATIN SMALL LETTER D character.</li>
   <li>A U+004F LATIN CAPITAL LETTER O or U+006F LATIN SMALL LETTER O character.</li>
   <li>A U+0043 LATIN CAPITAL LETTER C or U+0063 LATIN SMALL LETTER C character.</li>
   <li>A U+0054 LATIN CAPITAL LETTER T or U+0074 LATIN SMALL LETTER T character.</li>
   <li>A U+0059 LATIN CAPITAL LETTER Y or U+0079 LATIN SMALL LETTER Y character.</li>
   <li>A U+0050 LATIN CAPITAL LETTER P or U+0070 LATIN SMALL LETTER P character.</li>
   <li>A U+0045 LATIN CAPITAL LETTER E or U+0065 LATIN SMALL LETTER E character.</li>
   <li>One or more <span title="space character">space characters</span>.</li>
   <li>A U+0048 LATIN CAPITAL LETTER H or U+0068 LATIN SMALL LETTER H character.</li>
   <li>A U+0054 LATIN CAPITAL LETTER T or U+0074 LATIN SMALL LETTER T character.</li>
   <li>A U+004D LATIN CAPITAL LETTER M or U+006D LATIN SMALL LETTER M character.</li>
   <li>A U+004C LATIN CAPITAL LETTER L or U+006C LATIN SMALL LETTER L character.</li>
   <li>Zero or more <span title="space character">space characters</span>.</li>
   <li>A U+003E GREATER-THAN SIGN (<code>&gt;</code>) character.</li>
  </ol>

  <p class="note">In other words, <code>&lt;!DOCTYPE HTML></code>,
  case-insensitively.</p>


  <h4>Elements</h4>

  <p>There are four different kinds of <dfn
  title="syntax-elements">elements</dfn>: void elements, CDATA
  elements, RCDATA elements, and normal elements.</p>

  <dl>

   <dt><dfn>Void elements</dfn></dt>

   <dd><code>base</code>, <code>link</code>, <code>meta</code>,
   <code>hr</code>, <code>br</code>, <code>img</code>,
   <code>embed</code>, <code>param</code>, <code>area</code>,
   <code>col</code>, <code>input</code><!-- XXX add: ,
   <code>command</code>, <code>event-source</code> --></dd>

   <dt>CDATA elements</dt>

   <dd><code>style</code>, <code>script</code></dd> <!-- iframe and
   noscript don't count as CDATA for syntax purposes -->

   <dt>RCDATA elements</dt>

   <dd><code>title</code>, <code>textarea</code></dd>

   <dt>Normal elements</dt>

   <dd>All other allowed <span>HTML elements</span> are normal
   elements.</dd>

  </dl>

  <p><dfn title="syntax-tags">Tags</dfn> are used to delimit the start
  and end of elements in the markup. CDATA, RCDATA, and normal
  elements have a <span title="syntax-start-tags">start tag</span> to
  indicate where they begin, and an <span title="syntax-end-tags">end
  tag</span> to indicate where they end. The start and end tags of
  certain normal elements can be <span
  title="syntax-tag-omission">omitted</span>, as described
  later. Those that cannot be omitted must not be omitted. Void
  elements only have a start tag; end tags must not be specified for
  void elements.</p>

  <p>The contents of the element must be placed between just after the
  start tag (which <span title="syntax-tag-omission">might be implied,
  in certain cases</span>) and just before the end tag (which again,
  <span title="syntax-tag-omission">might be implied in certain
  cases</span>). The exact allowed contents of each individual element
  depends on the content model of that element, as described earlier
  in this specification. Elements must not contain content that their
  content model disallows. In addition to the restrictions placed on
  the contents by those content models, however, the four types of
  elements have additional <em>syntactic</em> requirements.</p>

  <p>Void elements can't have any contents (since there's no end
  tag, no content can be put between the start tag and the end
  tag.)</p>

  <p>CDATA elements can have <span title="syntax-text">text</span>,
  though it has <a href="#cdata-rcdata-restrictions">restrictions</a>
  described below.</p>

  <p>RCDATA elements can have <span title="syntax-text">text</span>
  and <span title="syntax-entities">character entity
  references</span>, but the text must not contain an <span
  title="syntax-ambiguous-ampersand">ambiguous ampersand</span>.
  There are also <a href="#cdata-rcdata-restrictions">further
  restrictions</a> described below.</p>

  <p>Normal elements can have <span title="syntax-text">text</span>,
  <span title="syntax-entities">character entity references</span>,
  other <span title="syntax-elements">elements</span>, and <span
  title="syntax-comments">comments</span>, but the text must not
  contain the character U+003C LESS-THAN SIGN (<code>&lt;</code>) or
  an <span title="syntax-ambiguous-ampersand">ambiguous
  ampersand</span>. Some normal elements also have <a
  href="#element-restrictions">yet more restrictions</a> on what
  content they are allowed to hold, beyond the restrictions imposed by
  the content model and those described in this paragraph. Those
  restrictions are described below.</p>

  <p>Tags contain a <dfn title="syntax-tag-name">tag name</dfn>,
  giving the element's name. HTML elements all have names that only
  use characters in the range U+0061 LATIN SMALL LETTER A .. U+007A
  LATIN SMALL LETTER Z, or, in uppercase, U+0041 LATIN CAPITAL LETTER
  A .. U+005A LATIN CAPITAL LETTER Z, and U+002D HYPHEN-MINUS
  (<code>-</code>). In the HTML syntax, tag names may be written with
  any mix of lower- and uppercase letters that, when converted to
  all-lowercase, matches the element's tag name; tag names are
  case-insensitive.</p>


  <h5>Start tags</h5>

  <p><dfn title="syntax-start-tags">Start tags</dfn> must have the
  following format:</p>

  <ol>

   <li>The first character of a start tag must be a U+003C LESS-THAN
   SIGN (<code>&lt;</code>).</li>

   <li>The next few characters of a start tag must be the element's
   <span title="syntax-tag-name">tag name</span>.</li>

   <li>If there are to be any attributes in the next step, there must
   first be one or more <span title="space character">space
   characters</span>.</li>

   <li>Then, the start tag may have a number of attributes, the <span
   title="syntax-attributes">syntax for which</span> is described
   below. Attributes may be separated from each other by one or more
   <span title="space character">space characters</span>.</li>

   <li>After the attributes, there may be one or more <span
   title="space character">space characters</span>. (Some attributes
   are required to be followed by a space. See the <span
   title="syntax-attributes">attributes section</span> below.)</li>

   <li>Then, if the element is one of the void elements, then there
   may be a single U+002F SOLIDUS (<code>/</code>) character. This
   character has no effect except to appease the markup gods. As this
   character is therefore just a symbol of faith, atheists should omit
   it.</li>

   <li>Finally, start tags must be closed by a U+003E GREATER-THAN
   SIGN (<code>&gt;</code>) character.</li>

  </ol>


  <h5>End tags</h5>

  <p><dfn title="syntax-end-tags">End tags</dfn> must have the
  following format:</p>

  <ol>

   <li>The first character of an end tag must be a U+003C LESS-THAN
   SIGN (<code>&lt;</code>).</li>

   <li>The second character of an end tag must be a U+002F SOLIDUS
   (<code>/</code>).</li>

   <li>The next few characters of an end tag must be the element's
   <span title="syntax-tag-name">tag name</span>.</li>

   <li>After the tag name, there may be one or more <span title="space
   character">space characters</span>.</li>

   <li>Finally, end tags must be closed by a U+003E GREATER-THAN
   SIGN (<code>&gt;</code>) character.</li>

  </ol>


  <h5>Attributes</h5>

  <p><dfn title="syntax-attributes">Attributes</dfn> for an element
  are expressed inside the element's start tag.</p>

  <p>Attributes have a name and a value. <dfn
  title="syntax-attribute-name">Attribute names</dfn> must consist of
  one or more characters other than the <span title="space
  character">space characters</span>, U+0000 NULL, U+0022 QUOTATION
  MARK (&#x22;), U+0027 APOSTROPHE (&#x27;), U+003E GREATER-THAN SIGN
  (&gt;), U+002F SOLIDUS (/), and U+003D EQUALS SIGN (=) characters,
  the control characters, and any characters that are not defined by
  Unicode. In the HTML syntax, attribute names may be written with any
  mix of lower- and uppercase letters that, when converted to
  all-lowercase<!-- ASCII case-insensitive -->, matches the
  attribute's name; attribute names are case-insensitive.</p>

  <p><dfn title="syntax-attribute-value">Attribute values</dfn> are a
  mixture of <span title="syntax-text">text</span> and <span
  title="syntax-entities">character entity references</span>, except
  with the additional restriction that the text cannot contain an
  <span title="syntax-ambiguous-ampersand">ambiguous
  ampersand</span>.</p>

  <p>Attributes can be specified in four different ways:</p>

  <dl>

   <dt>Empty attribute syntax</dt>

   <dd>

    <p>Just the <span title="syntax-attribute-name">attribute
    name</span>.</p>

    <div class="example">

     <p>In the following example, the <code
     title="attr-input-disabled">disabled</code> attribute is given
     with the empty attribute syntax:</p>

     <pre>&lt;input <em>disabled</em>&gt;</pre>

    </div>

    <p>If an attribute using the empty attribute syntax is to be
    followed by another attribute, then there must be a <span>space
    character</span> separating the two.</p>

   </dd>

   <dt>Unquoted attribute value syntax</dt>

   <dd>

    <p>The <span title="syntax-attribute-name">attribute name</span>,
    followed by zero or more <span title="space character">space
    characters</span>, followed by a single U+003D EQUALS SIGN
    character, followed by zero or more <span title="space
    character">space characters</span>, followed by the <span
    title="syntax-attribute-value">attribute value</span>, which, in
    addition to the requirements given above for attribute values,
    must not contain any literal <span title="space character">space
    characters</span>, a U+0022 QUOTATION MARK (<code>&#x22;</code>)
    characters, U+0027 APOSTROPHE (<code>&#x27;</code>) characters,
    U+003D EQUALS SIGN (<code>=</code>) characters, or U+003E
    GREATER-THAN SIGN (<code>&gt;</code>) characters.</p>

    <div class="example">

     <p>In the following example, the <code
     title="attr-input-value">value</code> attribute is given
     with the unquoted attribute value syntax:</p>

     <pre>&lt;input <em>value=yes</em>&gt;</pre>

    </div>

    <p>If an attribute using the unquoted attribute syntax is to be
    followed by another attribute or by one of the optional U+002F
    SOLIDUS (<code>/</code>) characters allowed in step 6 of the <span
    title="syntax-start-tag">start tag</span> syntax above, then there
    must be a <span>space character</span> separating the two.</p>

   </dd>

   <dt>Single-quoted attribute value syntax</dt>

   <dd>

    <p>The <span title="syntax-attribute-name">attribute name</span>,
    followed by zero or more <span title="space character">space
    characters</span>, followed by a single U+003D EQUALS SIGN
    character, followed by zero or more <span title="space
    character">space characters</span>, followed by a single U+0027
    APOSTROPHE (<code>'</code>) character, followed by the <span
    title="syntax-attribute-value">attribute value</span>, which, in
    addition to the requirements given above for attribute values,
    must not contain any literal U+0027 APOSTROPHE (<code>'</code>)
    characters, and finally followed by a second single U+0027
    APOSTROPHE (<code>'</code>) character.</p>

    <div class="example">

     <p>In the following example, the <code
     title="attr-input-type">type</code> attribute is given with the
     single-quoted attribute value syntax:</p>

     <pre>&lt;input <em>type='checkbox'</em>&gt;</pre>

    </div>

    <p>If an attribute using the single-quoted attribute syntax is to
    be followed by another attribute, then there must be a <span>space
    character</span> separating the two.</p>

   </dd>

   <dt>Double-quoted attribute value syntax</dt>

   <dd>

    <p>The <span title="syntax-attribute-name">attribute name</span>,
    followed by zero or more <span title="space character">space
    characters</span>, followed by a single U+003D EQUALS SIGN
    character, followed by zero or more <span title="space
    character">space characters</span>, followed by a single U+0022
    QUOTATION MARK (<code>"</code>) character, followed by the <span
    title="syntax-attribute-value">attribute value</span>, which, in
    addition to the requirements given above for attribute values,
    must not contain any literal U+0022 QUOTATION MARK
    (<code>"</code>) characters, and finally followed by a second
    single U+0022 QUOTATION MARK (<code>"</code>) character.</p>

    <div class="example">

     <p>In the following example, the <code
     title="attr-input-name">name</code> attribute is given with the
     double-quoted attribute value syntax:</p>

     <pre>&lt;input <em>name="be evil"</em>&gt;</pre>

    </div>

    <p>If an attribute using the double-quoted attribute syntax is to
    be followed by another attribute, then there must be a <span>space
    character</span> separating the two.</p>

   </dd>

  </dl>


  <h5>Optional tags</h5>

  <p>Certain tags can be <dfn
  title="syntax-tag-omission">omitted</dfn>.</p>

  <!-- <html> -->
  <p>An <code>html</code> element's <span
  title="syntax-start-tag">start tag</span> may be omitted if the
  first thing inside the <code>html</code> element is not a
  <span>space character</span> or a <span
  title="syntax-comments">comment</span>.</p>

  <!-- </html> -->
  <p>An <code>html</code> element's <span title="syntax-end-tag">end
  tag</span> may be omitted if the <code>html</code> element is not
  immediately followed a <span
  title="syntax-comments">comment</span>.</p>

  <!-- <head> -->
  <p>A <code>head</code> element's <span
  title="syntax-start-tag">start tag</span> may be omitted if the
  first thing inside the <code>head</code> element is an element.</p>

  <!-- </head> -->
  <p>A <code>head</code> element's <span title="syntax-end-tag">end
  tag</span> may be omitted if the <code>head</code> element is not
  immediately followed by a <span>space character</span> or a <span
  title="syntax-comments">comment</span>.</p>

  <!-- <body> -->
  <p>A <code>body</code> element's <span
  title="syntax-start-tag">start tag</span> may be omitted if the
  first thing inside the <code>body</code> element is not a
  <span>space character</span> or a <span
  title="syntax-comments">comment</span>, except if the first thing
  inside the <code>body</code> element is a <code>script</code> or
  <code>style</code> element<!-- and the node immediately preceding
  the <code>body</code> element is a <code>head</code> element whose
  end tag has been omitted (XXX this last bit is commented out for now
  because we have the dubious rule in the parser that makes <style>
  and <script> elements between </head> and <body> end up in the
  <head> instead of the <body>)-->.</p>

  <!-- </body> -->
  <p>A <code>body</code> element's <span title="syntax-end-tag">end
  tag</span> may be omitted if the <code>body</code> element is not
  immediately followed by a <span
  title="syntax-comments">comment</span>.

  <!-- </li> -->
  <p>A <code>li</code> element's <span title="syntax-end-tag">end
  tag</span> may be omitted if the <code>li</code> element is
  immediately followed by another <code>li</code> element or if there
  is no more content in the parent element.</p>

  <!-- </dt> -->
  <p>A <code>dt</code> element's <span title="syntax-end-tag">end
  tag</span> may be omitted if the <code>dt</code> element is
  immediately followed by another <code>dt</code> element or a
  <code>dd</code> element.</p>

  <!-- </dd> -->
  <p>A <code>dd</code> element's <span title="syntax-end-tag">end
  tag</span> may be omitted if the <code>dd</code> element is
  immediately followed by another <code>dd</code> element or a
  <code>dt</code> element, or if there is no more content in the
  parent element.</p>

  <!-- </p> -->
  <p>A <code>p</code> element's <span title="syntax-end-tag">end
  tag</span> may be omitted if the <code>p</code> element is
  immediately followed by an <code>address</code>,
  <code>blockquote</code>, <code>dl</code>, <code>fieldset</code>,
  <code>form</code>, <code>h1</code>, <code>h2</code>,
  <code>h3</code>, <code>h4</code>, <code>h5</code>, <code>h6</code>,
  <code>hr</code>, <code>menu</code>, <code>ol</code>, <code>p</code>,
  <code>pre</code>, <code>table</code>, or <code>ul</code> element, or
  if there is no more content in the parent element.</p>

  <!-- </optgroup> -->
  <p>An <code>optgroup</code> element's <span
  title="syntax-end-tag">end tag</span> may be omitted if the
  <code>optgroup</code> element is immediately followed by another
  <code>optgroup</code> element, or if there is no more content in the
  parent element.</p>

  <!-- </option> -->
  <p>An <code>option</code> element's <span title="syntax-end-tag">end
  tag</span> may be omitted if the <code>option</code> element is
  immediately followed by another <code>option</code> element, or if
  there is no more content in the parent element.</p>

  <!-- <colgroup> -->
  <p>A <code>colgroup</code> element's <span
  title="syntax-start-tag">start tag</span> may be omitted if the
  first thing inside the <code>colgroup</code> element is a
  <code>col</code> element, and if the element is not immediately
  preceded by another <code>colgroup</code> element whose <span
  title="syntax-end-tag">end tag</span> has been omitted.</p>

  <!-- </colgroup> -->
  <p>A <code>colgroup</code> element's <span
  title="syntax-end-tag">end tag</span> may be omitted if the
  <code>colgroup</code> element is not immediately followed by a
  <span>space character</span> or a <span
  title="syntax-comments">comment</span>.</p>

  <!-- </thead> -->
  <p>A <code>thead</code> element's <span title="syntax-end-tag">end
  tag</span> may be omitted if the <code>thead</code> element is
  immediately followed by a <code>tbody</code> or <code>tfoot</code>
  element.</p>

  <!-- <tbody> -->
  <p>A <code>tbody</code> element's <span
  title="syntax-start-tag">start tag</span> may be omitted if the
  first thing inside the <code>tbody</code> element is a
  <code>tr</code> element, and if the element is not immediately
  preceded by a <code>tbody</code>, <code>thead</code>, or
  <code>tfoot</code> element whose <span title="syntax-end-tag">end
  tag</span> has been omitted.</p>

  <!-- </tbody> -->
  <p>A <code>tbody</code> element's <span title="syntax-end-tag">end
  tag</span> may be omitted if the <code>tbody</code> element is
  immediately followed by a <code>tbody</code> or <code>tfoot</code>
  element, or if there is no more content in the parent element.</p>

  <!-- </tfoot> -->
  <p>A <code>tfoot</code> element's <span title="syntax-end-tag">end
  tag</span> may be omitted if the <code>tfoot</code> element is
  immediately followed by a <code>tbody</code> element, or if there is
  no more content in the parent element.</p>

  <!-- </tr> -->
  <p>A <code>tr</code> element's <span title="syntax-end-tag">end
  tag</span> may be omitted if the <code>tr</code> element is
  immediately followed by another <code>tr</code> element, or if there
  is no more content in the parent element.</p>

  <!-- </td> -->
  <p>A <code>td</code> element's <span title="syntax-end-tag">end
  tag</span> may be omitted if the <code>td</code> element is
  immediately followed by a <code>td</code> or <code>th</code>
  element, or if there is no more content in the parent element.</p>

  <!-- </th> -->
  <p>A <code>th</code> element's <span title="syntax-end-tag">end
  tag</span> may be omitted if the <code>th</code> element is
  immediately followed by a <code>td</code> or <code>th</code>
  element, or if there is no more content in the parent element.</p>

  <p><strong>However</strong>, a <span title="syntax-start-tag">start
  tag</span> must never be omitted if it has any attributes.</p>


  <h5 id="element-restrictions">Restrictions on content models</h5>

  <p>For historical reasons, certain elements have extra restrictions
  beyond even the restrictions given by their content model.</p>

  <p>An <code>optgroup</code> element must not contain
  <code>optgroup</code> elements, even though these elements are
  technically allowed to be nested according to the content models
  described in this specification. (If an <code>optgroup</code>
  element is put inside another in the markup, it will in fact imply
  an <code>optgroup</code> end tag before it.)</p>

  <p>A <code>table</code> element must not contain <code>tr</code>
  elements, even though these elements are technically allowed inside
  <code>table</code> elements according to the content models
  described in this specification. (If a <code>tr</code> element is
  put inside a <code>table</code> in the markup, it will in fact imply
  a <code>tbody</code> start tag before it.)</p>

  <p>A single U+000A LINE FEED (LF) character may be placed
  immediately after the <span title="syntax-start-tag">start
  tag</span> of <code>pre</code> and <code>textarea</code>
  elements. This does not affect the processing of the element. The
  otherwise optional U+000A LINE FEED (LF) character <em>must</em> be
  included if the element's contents start with that character
  (because otherwise the leading newline in the contents would be
  treated like the optional newline, and ignored).</p>

  <div class="example">
   <p>The following two <code>pre</code> blocks are equivalent:</p>
   <pre>&lt;pre>Hello&lt;/pre></pre>
   <pre>&lt;pre><br>Hello&lt;/pre></pre>
  </div>


  <h5 id="cdata-rcdata-restrictions">Restrictions on the contents of CDATA and RCDATA elements</h5>

  <p>The text in CDATA and RCDATA elements must not contain any
  occurences of the string "<code title="">&lt;/</code>" (U+003C
  LESS-THAN SIGN, U+002F SOLIDUS) followed by characters that
  case-insensitively<!--ASCII--> match the tag name of the element
  followed by one of U+0009 CHARACTER TABULATION, U+000A LINE FEED
  (LF), U+000B LINE TABULATION, U+000C FORM FEED (FF), U+0020 SPACE,
  U+003E GREATER-THAN SIGN (>), or U+002F SOLIDUS (/), unless that
  string is part of an <span title="syntax-escape">escaping text
  span</span>.</p>

  <p>An <dfn title="syntax-escape">escaping text span</dfn> is a span
  of <span title="syntax-text">text</span> that starts with an <span
  title="syntax-escape-start">escaping text span start</span> that is
  not itself in an <span title="syntax-escape">escaping text
  span</span>, and ends at the next <span
  title="syntax-escape-end">escaping text span end</span>.</p>

  <p>An <dfn title="syntax-escape-start">escaping text span
  start</dfn> is a part of <span title="syntax-text">text</span> that
  consists of the four character sequence "<code
  title="">&lt;!--</code>" (U+003C LESS-THAN SIGN, U+0021 EXCLAMATION
  MARK, U+002D HYPHEN-MINUS, U+002D HYPHEN-MINUS).</p>

  <p>An <dfn title="syntax-escape-end">escaping text span end</dfn> is
  a part of <span title="syntax-text">text</span> that consists of the
  three character sequence "<code title="">--&gt;</code>" (U+002D
  HYPHEN-MINUS, U+002D HYPHEN-MINUS, U+003E GREATER-THAN SIGN) whose
  U+003E GREATER-THAN SIGN (&gt;).</p>

  <p>An <span title="syntax-escape-start">escaping text span
  start</span> may share its U+002D HYPHEN-MINUS characters with its
  corresponding <span title="syntax-escape-end">escaping text span
  end</span>.</p>

  <p>The text in CDATA and RCDATA elements must not have an <span
  title="syntax-escape-start">escaping text span start</span> that is
  not followed by an <span title="syntax-escape-end">escaping text
  span end</span>.</p>


  <h4>Text</h4>

  <p><dfn title="syntax-text">Text</dfn> is allowed inside elements,
  attributes, and comments. Text must consist of valid Unicode
  characters. Text must not contain U+0000 characters. Text must not
  contain control characters other than <span title="space
  character">space characters</span>. Extra constraints are placed on
  what is and what is not allowed in text based on where the text is
  to be put, as described in the other sections.</p>


  <h5>Newlines</h5>

  <p><dfn title="syntax-newlines">Newlines</dfn> in HTML may be
  represented either as U+000D CARRIAGE RETURN (CR) characters, U+000A
  LINE FEED (LF) characters, or pairs of U+000D CARRIAGE RETURN (CR),
  U+000A LINE FEED (LF) characters in that order.</p>


  <h4>Character entity references</h4>

  <p>In certain cases described in other sections, <span
  title="syntax-text">text</span> may be mixed with <dfn
  title="syntax-entities">character entity references</dfn>. These can
  be used to escape characters that couldn't otherwise legally be
  included in <span title="syntax-text">text</span>.</p>

  <p>Character entity references must start with a U+0026 AMPERSAND
  (<code>&amp;</code>). Following this, there are three possible kinds
  of character entity references:</p>

  <dl>

   <dt>Named entities</dt>

   <dd>The ampersand must be followed by one of the names given in the
   <span>entities</span> section, using the same case. The name must
   be one that is terminated by a U+003B SEMICOLON (<code
   title="">;</code>) character.</dd>


   <dt>Decimal numeric entities</dt>

   <dd>The ampersand must be followed by a U+0023 NUMBER SIGN
   (<code>#</code>) character, followed by one or more digits in the
   range U+0030 DIGIT ZERO .. U+0039 DIGIT NINE, representing a
   base-ten integer that itself is a valid Unicode code point that is
   not U+0000, U+000D, in the range U+0080 .. U+009F, or in the range
   0xD800 .. 0xDFFF (surrogates). The digits must then be followed by
   a U+003B SEMICOLON character (<code title="">;</code>).</dd>


   <dt>Hexadecimal numeric entities</dt>

   <dd>The ampersand must be followed by a U+0023 NUMBER SIGN
   (<code>#</code>) character, which must be followed by either a
   U+0078 LATIN SMALL LETTER X or a U+0058 LATIN CAPITAL LETTER X
   character, which must then be followed by one or more digits in the
   range U+0030 DIGIT ZERO .. U+0039 DIGIT NINE, U+0061 LATIN SMALL
   LETTER A .. U+0066 LATIN SMALL LETTER F, and U+0041 LATIN CAPITAL
   LETTER A .. U+0046 LATIN CAPITAL LETTER F, representing a
   base-sixteen integer that itself is a valid Unicode code point that
   is not U+0000, U+000D, in the range U+0080 .. U+009F, or in the
   range 0xD800 .. 0xDFFF (surrogates). The digits must then be
   followed by a U+003B SEMICOLON character (<code
   title="">;</code>).</dd>

  </dl>

  <p>An <dfn title="syntax-ambiguous-ampersand">ambiguous
  ampersand</dfn> is a U+0026 AMPERSAND (<code>&amp;</code>) character
  that is followed by some <span title="syntax-text">text</span> other
  than a <span>space character</span>, a U+003C LESS-THAN SIGN
  character ('&lt;'), or another U+0026 AMPERSAND (<code>&amp;</code>)
  character.</p>


  <h4>Comments</h4>

  <p><dfn title="syntax-comments">Comments</dfn> must start with the
  four character sequence U+003C LESS-THAN SIGN, U+0021 EXCLAMATION
  MARK, U+002D HYPHEN-MINUS, U+002D HYPHEN-MINUS (<code
  title="">&lt;!--</code>). Following this sequence, the comment may
  have <span title="syntax-text">text</span>, with the additional
  restriction that the text must not start with a single U+003E
  GREATER-THAN SIGN ('&gt;') character, nor start with a U+002D
  HYPHEN-MINUS (<code title="">-</code>) character followed by a
  U+003E GREATER-THAN SIGN ('&gt;') character, nor contain two
  consecutive U+002D HYPHEN-MINUS (<code title="">-</code>)
  characters, nor end with a U+002D HYPHEN-MINUS (<code
  title="">-</code>) character. Finally, the comment must be ended by
  the three character sequence U+002D HYPHEN-MINUS, U+002D
  HYPHEN-MINUS, U+003E GREATER-THAN SIGN (<code
  title="">--&gt;</code>).</p>



  <h3 id="parsing">Parsing HTML documents</h3>

  <p><em>This section only applies to user agents, data mining tools,
  and conformance checkers.</em></p>
 
  <p>The rules for parsing <span>XML documents</span> (and thus
  <span>XHTML</span> documents) into DOM trees are covered by the XML
  and Namespaces in XML specifications, and are out of scope of this
  specification. <a href="#refsXML">[XML]</a> <a
  href="#refsXMLNS">[XMLNS]</a> <!-- XXX refs --></p>

  <p>For <span>HTML documents</span>, user agents must use the parsing
  rules described in this section to generate the DOM trees. Together,
  these rules define what is referred to as the <dfn>HTML
  parser</dfn>.</p><!-- XXX should probably remove that "must" since
  it'll be redundant with something in the navigating processing model
  eventually -->

  <div class="note">

   <p>While the HTML form of HTML5 bears a close resemblance to SGML
   and XML, it is a separate language with its own parsing rules.</p>

   <p>Some earlier versions of HTML (in particular from HTML2 to
   HTML4) were based on SGML and used SGML parsing rules. However, few
   (if any) web browsers ever implemented true SGML parsing for HTML
   documents; the only user agents to strictly handle HTML as an SGML
   application have historically been validators. The resulting
   confusion &mdash; with validators claiming documents to have one
   representation while widely deployed Web browsers interoperably
   implemented a different representation &mdash; has wasted decades
   of productivity. This version of HTML thus returns to a non-SGML
   basis.</p>

   <p>Authors interested in using SGML tools in their authoring
   pipeline are encouraged to use XML tools and the XML serialisation
   of HTML5.</p>

  </div>

  <p>This specification defines the parsing rules for HTML documents,
  whether they are syntactically valid or not. Certain points in the
  parsing algorithm are said to be <dfn title="parse error">parse
  errors</dfn>. The error handling for parse errors is well-defined:
  user agents must either act as described below when encountering
  such problems, or must abort processing at the first error that they
  encounter for which they do not wish to apply the rules described
  below.</p>

  <p>Conformance checkers must report at least one parse error
  condition to the user if one or more parse error conditions exist in
  the document and must not report parse error conditions if none
  exist in the document. Conformance checkers may report more than one
  parse error condition if more than one parse error conditions exist
  in the document. Conformance checkers are not required to recover
  from parse errors.</p>

  <p class="note">Parse errors are only errors with the
  <em>syntax</em> of HTML. In addition to checking for parse errors,
  conformance checkers will also verify that the document obeys all
  the other conformance requirements described in this
  specification.</p>


  <h4>Overview of the parsing model</h4>

  <p>The input to the HTML parsing process consists of a stream of
  Unicode characters, which is passed through a
  <span>tokenisation</span> stage (lexical analysis) followed by a
  <span>tree construction</span> stage (semantic analysis). The output
  is a <code>Document</code> object.</p>

  <p class="note">Implementations that <a href="#non-scripted">do not
  support scripting</a> do not have to actually create a DOM
  <code>Document</code> object, but the DOM tree in such cases is
  still used as the model for the rest of the specification.</p>

  <p>In the common case, the data handled by the tokenisation stage
  comes from the network, but <span title="dynamic markup
  insertion">it can also come from script</span>, e.g. using the <code
  title="dom-document-write-HTML">document.write()</code> API.</p>

  <p><img src="images/parsing-model-overview.png" alt=""></p>

  <p id="nestedParsing">There is only one set of state for the
  tokeniser stage and the tree construction stage, but the tree
  construction stage is reentrant, meaning that while the tree
  construction stage is handling one token, the tokeniser might be
  resumed, causing further tokens to be emitted and processed before
  the first token's processing is complete.</p>

  <div class="example">

   <p>In the following example, the tree construction stage will be
   called upon to handle a "p" start tag token while handling the
   "script" start tag token:</p>

   <pre>...
&lt;script>
 document.write('&lt;p>');
&lt;/script>
...</pre>

  </div>


  <h4>The <dfn>input stream</dfn></h4>

  <p>The stream of Unicode characters that consists the input to the
  tokenisation stage will be initially seen by the user agent as a
  stream of bytes (typically coming over the network or from the local
  file system). The bytes encode the actual characters according to a
  particular <em>character encoding</em>, which the user agent must
  use to decode the bytes into characters.</p>

  <p class="note">For XML documents, the algorithm user agents must
  use to determine the character encoding is given by the XML
  specification. This section does not apply to XML documents. <a
  href="#refsXML">[XML]</a></p>


  <h5>Determining the character encoding</h5>

  <p>In some cases, it might be impractical to unambiguously determine
  the encoding before parsing the document. Because of this, this
  specification provides for a two-pass mechanism with an optional
  pre-scan. Implementations are allowed, as described below, to apply
  a simplified parsing algorithm to whatever bytes they have available
  before beginning to parse the document. Then, the real parser is
  started, using a tentative encoding derived from this pre-parse and
  other out-of-band metadata. If, while the document is being loaded,
  the user agent discovers an encoding declaration that conflicts with
  this information, then the parser can get reinvoked to perform a
  parse of the document with the real encoding.</p>

  <p id="documentEncoding">User agents must use the following
  algorithm (the <dfn>encoding sniffing algorithm</dfn>) to determine
  the character encoding to use when decoding a document in the first
  pass. This algorithm takes as input any out-of-band metadata
  available to the user agent (e.g. the <span
  title="Content-Type">Content-Type metadata</span> of the document)
  and all the bytes available so far, and returns an encoding and a
  <dfn title="concept-encoding-confidence">confidence</dfn>. The
  confidence is either <i>tentative</i> or <i>certain</i>. The
  encoding used, and whether the confidence in that encoding is
  <i>tentative</i> or <i>confident</i>, is <a
  href="#meta-charset-during-parse">used during the parsing</a> to
  determine whether to <span>change the encoding</span>.</p>

  <ol>

   <li><p>If the transport layer specifies an encoding, return that
   encoding with the <span
   title="concept-encoding-confidence">confidence</span>
   <i>certain</i>, and abort these steps.</p></li>

   <li><p>The user agent may wait for more bytes of the resource to be
   available, either in this step or at any later step in this
   algorithm. For instance, a user agent might wait 500ms or 512
   bytes, whichever came first. In general preparsing the source to
   find the encoding improves performance, as it reduces the need to
   throw away the data structures used when parsing upon finding the
   encoding information. However, if the user agent delays too long to
   obtain data to determine the encoding, then the cost of the delay
   could outweigh any performance improvements from the
   preparse.</p></li>

   <li><p>For each of the rows in the following table, starting with
   the first one and going down, if there are as many or more bytes
   available than the number of bytes in the first column, and the
   first bytes of the file match the bytes given in the first column,
   then return the encoding given in the cell in the second column of
   that row, with the <span
   title="concept-encoding-confidence">confidence</span>
   <i>certain</i>, and abort these steps:</p>

    <table>
     <thead>
      <tr>
       <th>Bytes in Hexadecimal
       <th>Encoding
     <tbody>
<!-- nobody uses this
      <tr>
       <td>00 00 FE FF
       <td>UTF-32BE
      <tr>
       <td>FF FE 00 00
       <td>UTF-32LE
-->
      <tr>
       <td>FE FF
       <td>UTF-16BE
      <tr>
       <td>FF FE
       <td>UTF-16LE
      <tr>
       <td>EF BB BF
       <td>UTF-8
<!-- nobody uses this
      <tr>
       <td>DD 73 66 73
       <td>UTF-EBCDIC
-->
    </table>

   <p class="note">This step looks for Unicode Byte Order Marks
   (BOMs).</p></li>

   <li><p>Otherwise, the user agent will have to search for explicit
   character encoding information in the file itself. This should
   proceed as follows:

    <p>Let <var title="">position</var> be a pointer to a byte in the
    input stream, initially pointing at the first byte. If at any
    point during these substeps the user agent either runs out of
    bytes or decides that scanning further bytes would not be
    efficient, then skip to the next step of the overall character
    encoding detection algorithm. User agents may decide that scanning
    <em>any</em> bytes is not efficient, in which case these substeps
    are entirely skipped.</p>

    <p>Now, repeat the following "two" steps until the algorithm
    aborts (either because user agent aborts, as described above, or
    because a character encoding is found):</p>

    <ol>

     <li><p>If <var title="">position</var> points to:</p>

      <dl class="switch">

       <dt>A sequence of bytes starting with: 0x3C 0x21 0x2D 0x2D (ASCII '&lt;!--')</dt>
       <dd>

        <p>Advance the <var title="">position</var> pointer so that it
        points at the first 0x3E byte which is preceded by two 0x2D
        bytes (i.e. at the end of an ASCII '-->' sequence) and comes
        after the 0x3C byte that was found. (The two 0x2D bytes can be
        the same as the those in the '&lt;!--' sequence.)</p>

       </dd>

       <dt>A sequence of bytes starting with: 0x3C, 0x4D or 0x6D, 0x45 or 0x65, 0x54 or 0x74, 0x41 or 0x61, and finally one of 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x20, 0x2F (case-insensitive ASCII '&lt;meta' followed by a space or slash)</dt>
       <dd>

        <ol>

         <li><p>Advance the <var title="">position</var> pointer so
         that it points at the next 0x09, 0x0A, 0x0B, 0x0C, 0x0D,
         0x20, or 0x2F byte (the one in sequence of characters matched
         above).</p></li>

         <li><p><span title="concept-get-attributes-when-sniffing">Get
         an attribute</span> and its value. If no attribute was
         sniffed, then skip this inner set of steps, and jump to the
         second step in the overall "two step" algorithm.</p></li>

         <li><p>If the attribute's name is neither "<code
         title="">charset</code>" nor "<code title="">content</code>",
         then return to step 2 in these inner steps.</p></li>

         <li><p>If the attribute's name is "<code
         title="">charset</code>", let <var title="">charset</var> be
         the attribute's value, interpreted as a character
         encoding.</p></li>

         <li><p>Otherwise, the attribute's name is "<code
         title="">content</code>": apply the <span>algorithm for
         extracting an encoding from a Content-Type</span>, giving the
         attribute's value as the string to parse. If an encoding is
         returned, let <var title="">charset</var> be that
         encoding. Otherwise, return to step 2 in these inner
         steps.</p></li>

         <li><p>If <var title="">charset</var> is a UTF-16 encoding,
         change it to UTF-8.</p></li>

         <li><p>If <var title="">charset</var> is a supported
         character encoding, then return the given encoding, with
         <span title="concept-encoding-confidence">confidence</span>
         <i>tentative</i>, and abort all these steps.</p></li>

         <li><p>Otherwise, return to step 2 in these inner
         steps.</p></li>

        </ol>

        <p class="note">Leading and trailing spaces in encoding names
        are <em>not</em> trimmed, and will result in encodings being
        treated as unknown.</p>

       </dd>

       <dt>A sequence of bytes starting with a 0x3C byte (ASCII '&lt;'), optionally a 0x2F byte (ASCII '/'), and finally a byte in the range 0x41-0x5A or 0x61-0x7A (an ASCII letter)</dt>
       <dd>

        <ol>

         <li><p>Advance the <var title="">position</var> pointer so
         that it points at the next 0x09 (ASCII TAB), 0x0A (ASCII LF),
         0x0B (ASCII VT), 0x0C (ASCII FF), 0x0D (ASCII CR), 0x20
         (ASCII space), or 0x3E (ASCII '>') byte.</p></li>

         <li><p>Repeatedly <span
         title="concept-get-attributes-when-sniffing">get an
         attribute</span> until no further attributes can be found,
         then jump to the second step in the overall "two step"
         algorithm.</p></li>

        </ol>

       </dd>

       <dt>A sequence of bytes starting with: 0x3C 0x21 (ASCII '&lt;!')</dt>
       <dt>A sequence of bytes starting with: 0x3C 0x2F (ASCII '&lt;/')</dt>
       <dt>A sequence of bytes starting with: 0x3C 0x3F (ASCII '&lt;?')</dt>
       <dd>

        <p>Advance the <var title="">position</var> pointer so that it
        points at the first 0x3E byte (ASCII '>') that comes after the
        0x3C byte that was found.</p>

       </dd>

       <dt>Any other byte</dt>
       <dd>

        <p>Do nothing with that byte.</p>

       </dd>

      </dl>

     </li>

     <li>Move <var title="">position</var> so it points at the next
     byte in the input stream, and return to the first step of this
     "two step" algorithm.</li>

    </ol>

    <p>When the above "two step" algorithm says to <dfn
    title="concept-get-attributes-when-sniffing">get an
    attribute</dfn>, it means doing this:</p>

    <ol>

     <li><p>If the byte at <var title="">position</var> is one of 0x09
     (ASCII TAB), 0x0A (ASCII LF), 0x0B (ASCII VT), 0x0C (ASCII FF),
     0x0D (ASCII CR), 0x20 (ASCII space), or 0x2F (ASCII '/') then
     advance <var title="">position</var> to the next byte and redo
     this substep.</p></li>

     <li><p>If the byte at <var title="">position</var> is 0x3E (ASCII
     '>'), then abort the "get an attribute" algorithm. There isn't
     one.</p></li>

     <li><p>Otherwise, the byte at <var title="">position</var> is the
     start of the attribute name. Let <var title="">attribute
     name</var> and <var title="">attribute value</var> be the empty
     string.</p></li>

     <li><p><em>Attribute name</em>: Process the byte at <var
     title="">position</var> as follows:</p>

      <dl class="switch">

       <dt>If it is 0x3D (ASCII '='), and the <var title="">attribute
       name</var> is longer than the empty string</dt>

       <dd>Advance <var title="">position</var> to the next byte and
       jump to the step below labelled <em>value</em>.</dd>

       <dt>If it is 0x09 (ASCII TAB), 0x0A (ASCII LF), 0x0B (ASCII
       VT), 0x0C (ASCII FF), 0x0D (ASCII CR), or 0x20 (ASCII
       space)</dt>

       <dd>Jump to the step below labelled <em>spaces</em>.</dd>

       <dt>If it is 0x2F (ASCII '/') or 0x3E (ASCII '>')</dt>

       <dd>Abort the "get an attribute" algorithm. The attribute's
       name is the value of <var title="">attribute name</var>, its
       value is the empty string.</dd>

       <dt>If it is in the range 0x41 (ASCII 'A') to 0x5A (ASCII
       'Z')</dt>

       <dd>Append the Unicode character with codepoint <span><var
       title="">b</var>+0x20</span> to <var title="">attribute
       name</var> (where <var title="">b</var> is the value of the
       byte at <var title="">position</var>).</dd>

       <dt>Anything else</dt>

       <dd>Append the Unicode character with the same codepoint as the
       value of the byte at <var title="">position</var>) to <var
       title="">attribute name</var>. (It doesn't actually matter how
       bytes outside the ASCII range are handled here, since only
       ASCII characters can contribute to the detection of a character
       encoding.)</dd>

      </dl>

     </li>

     <li><p>Advance <var title="">position</var> to the next byte and
     return to the previous step.</p></li>

     <li><p><em>Spaces.</em> If the byte at <var
     title="">position</var> is one of 0x09 (ASCII TAB), 0x0A (ASCII
     LF), 0x0B (ASCII VT), 0x0C (ASCII FF), 0x0D (ASCII CR), or 0x20
     (ASCII space) then advance <var title="">position</var> to the
     next byte, then, repeat this step.</p></li>

     <li><p>If the byte at <var title="">position</var> is
     <em>not</em> 0x3D (ASCII '='), abort the "get an attribute"
     algorithm. Move <var title="">position</var> back to the previous
     byte. The attribute's name is the value of <var
     title="">attribute name</var>, its value is the empty
     string.</p></li>

     <li><p>Advance <var title="">position</var> past the 0x3D (ASCII
     '=') byte.</p></li>

     <li><p><em>Value.</em> If the byte at <var
     title="">position</var> is one of 0x09 (ASCII TAB), 0x0A (ASCII
     LF), 0x0B (ASCII VT), 0x0C (ASCII FF), 0x0D (ASCII CR), or 0x20
     (ASCII space) then advance <var title="">position</var> to the
     next byte, then, repeat this step.</p></li>

     <li><p>Process the byte at <var title="">position</var> as
     follows:</p>

      <dl class="switch">

       <dt>If it is 0x22 (ASCII '"') or 0x27 ("'")</dt>

       <dd>

        <ol>

         <li>Let <var title="">b</var> be the value of the byte at
         <var title="">position</var>.</li>

         <li>Advance <var title="">position</var> to the next
         byte.</li>

         <li>If the value of the byte at <var title="">position</var>
         is the value of <var title="">b</var>, then abort the "get an
         attribute" algorithm. The attribute's name is the value of
         <var title="">attribute name</var>, and its value is the
         value of <var title="">attribute value</var>.</li>

         <li>Otherwise, if the value of the byte at <var
         title="">position</var> is in the range 0x41 (ASCII 'A') to
         0x5A (ASCII 'Z'), then append a Unicode character to <var
         title="">attribute value</var> whose codepoint is 0x20 more
         than the value of the byte at <var
         title="">position</var>.</li>

         <li>Otherwise, append a Unicode character to <var
         title="">attribute value</var> whose codepoint is the same as
         the value of the byte at <var title="">position</var>.</li>

         <li>Return to the second step in these substeps.</li>

        </ol>

       </dd>

       <dt>If it is 0x3E (ASCII '>')</dt>

       <dd>Abort the "get an attribute" algorithm. The attribute's
       name is the value of <var title="">attribute name</var>, its
       value is the empty string.</dd>


       <dt>If it is in the range 0x41 (ASCII 'A') to 0x5A (ASCII
       'Z')</dt>

       <dd>Append the Unicode character with codepoint <span><var
       title="">b</var>+0x20</span> to <var title="">attribute
       value</var> (where <var title="">b</var> is the value of the
       byte at <var title="">position</var>). Advance <var
       title="">position</var> to the next byte.</dd>

       <dt>Anything else</dt>

       <dd>Append the Unicode character with the same codepoint as the
       value of the byte at <var title="">position</var>) to <var
       title="">attribute value</var>. Advance <var
       title="">position</var> to the next byte.</dd>

      </dl>

     </li>

     <li><p>Process the byte at <var title="">position</var> as
     follows:</p>

      <dl class="switch">

       <dt>If it is 0x09 (ASCII TAB), 0x0A (ASCII LF), 0x0B (ASCII
       VT), 0x0C (ASCII FF), 0x0D (ASCII CR), 0x20 (ASCII space), or
       0x3E (ASCII '>')</dt>

       <dd>Abort the "get an attribute" algorithm. The attribute's
       name is the value of <var title="">attribute name</var> and its
       value is the value of <var title="">attribute value</var>.</dd>

       <dt>If it is in the range 0x41 (ASCII 'A') to 0x5A (ASCII
       'Z')</dt>

       <dd>Append the Unicode character with codepoint <span><var
       title="">b</var>+0x20</span> to <var title="">attribute
       value</var> (where <var title="">b</var> is the value of the
       byte at <var title="">position</var>).</dd>

       <dt>Anything else</dt>

       <dd>Append the Unicode character with the same codepoint as the
       value of the byte at <var title="">position</var>) to <var
       title="">attribute value</var>.</dd>

      </dl>

     </li>

     <li><p>Advance <var title="">position</var> to the next byte and
     return to the previous step.</p></li>

    </ol>

    <p>For the sake of interoperability, user agents should not use a
    pre-scan algorithm that returns different results than the one
    described above. (But, if you do, please at least let us know, so
    that we can improve this algorithm and benefit everyone...)</p>

   </li>

   <li><p>If the user agent has information on the likely encoding for
   this page, e.g. based on the encoding of the page when it was last
   visited, then return that encoding, with the <span
   title="concept-encoding-confidence">confidence</span>
   <i>tentative</i>, and abort these steps.</p></li>

   <li><p>The user agent may attempt to autodetect the character
   encoding from applying frequency analysis or other algorithms to
   the data stream. If autodetection succeeds in determining a
   character encoding, then return that encoding, with the <span
   title="concept-encoding-confidence">confidence</span>
   <i>tentative</i>, and abort these steps. <a
   href="#refsUNIVCHARDET">[UNIVCHARDET]</a></p></li> <!--
   http://www.mozilla.org/projects/intl/UniversalCharsetDetection.html
   -->

   <li><p>Otherwise, return an implementation-defined or
   user-specified default character encoding, with the <span
   title="concept-encoding-confidence">confidence</span>
   <i>tentative</i>. In non-legacy environments, the more
   comprehensive <code title="">UTF-8</code> encoding is
   recommended. Due to its use in legacy content, <code
   title="">windows-1252</code> is recommended as a default in
   predominantly Western demographics instead. Since these encodings
   can in many cases be distinguished by inspection, a user agent may
   heuristically decide which to use as a default.</p></li>

  </ol>


  <h5>Character encoding requirements</h5>

  <p>User agents must at a minimum support the UTF-8 and Windows-1252
  encodings, but may support more.</p>

  <p class="note">It is not unusual for Web browsers to support dozens
  if not upwards of a hundred distinct character encodings.</p>

  <p>User agents must support the preferred MIME name of every
  character encoding they support that has a preferred MIME name, and
  should support all the IANA-registered aliases. <a
  href="#refsIANACHARSET">[IANACHARSET]</a></p>

  <p>When a user agent would otherwise use the ISO-8859-1 encoding, it
  must instead use the Windows-1252 encoding; when a user agent would
  otherwise use the ISO-8859-11 encoding, it must instead use the
  Windows-874 encoding. In both cases, any bytes in the range 0x80 to
  0x9F must, in addition to being interpreted as per the Windows
  encoding instead of as a control character, be considered <span
  title="parse error">parse errors</span>.</p>

  <p class="note">The requirement to treat certain ISO-8859 encodings
  as Windows encodings is a willful violation of the W3C Character
  Model specification. <a href="#refsCHARMOD">[CHARMOD]</a></p>

  <p>User agents must not support the CESU-8, UTF-7, BOCU-1 and SCSU
  encodings. <a href="#refsCESU8">[CESU8]</a> <a
  href="#refsUTF7">[UTF7]</a> <a href="#refsBOCU1">[BOCU1]</a> <a
  href="#refsSCSU">[SCSU]</a></p>

  <p>Support for UTF-32 is not recommended. This encoding is rarely
  used, and frequently misimplemented.</p>



  <h5>Preprocessing the input stream</h5>

  <p>Given an encoding, the bytes in the input stream must be
  converted to Unicode characters for the tokeniser, as described by
  the rules for that encoding, except that the leading U+FEFF BYTE
  ORDER MARK character, if any, must not be stripped by the encoding
  layer (it is stripped by the rule below).</p> <!-- this is to
  prevent two leading BOMs from being both stripped, once by the
  decoder, and once by the parser -->

  <p>Bytes or sequences of bytes in the original byte stream that
  could not be converted to Unicode characters must be converted to
  U+FFFD REPLACEMENT CHARACTER code points.</p>

  <p class="note">Bytes or sequences of bytes in the original byte
  stream that did not conform to the encoding specification
  (e.g. invalid UTF-8 byte sequences in a UTF-8 input stream) are
  errors that conformance checkers are expected to report.</p>

  <p>One leading U+FEFF BYTE ORDER MARK character must be ignored if
  any are present.</p>

  <p>All U+0000 NULL characters in the input must be replaced by
  U+FFFD REPLACEMENT CHARACTERs. Any occurrences of such characters is
  a <span>parse error</span>.</p>

  <p>Any occurrences of any characters in the ranges U+0001 to U+0008,
  <!-- space characters allowed --> U+000E to U+001F, <!-- ASCII
  allowed --> U+007F <!--to U+0084, (U+0085 NEL not allowed),
  U+0086--> to U+009F, U+D800 to U+DFFF <!-- surrogates not allowed
  -->, U+FDD0 to U+FDDF, and characters U+FFFE, U+FFFF, U+1FFFE,
  U+1FFFF, U+2FFFE, U+2FFFF, U+3FFFE, U+3FFFF, U+4FFFE, U+4FFFF,
  U+5FFFE, U+5FFFF, U+6FFFE, U+6FFFF, U+7FFFE, U+7FFFF, U+8FFFE,
  U+8FFFF, U+9FFFE, U+9FFFF, U+AFFFE, U+AFFFF, U+BFFFE, U+BFFFF,
  U+CFFFE, U+CFFFF, U+DFFFE, U+DFFFF, U+EFFFE, U+EFFFF, U+FFFFE,
  U+FFFFF, U+10FFFE, and U+10FFFF are <span title="parse error">parse
  errors</span>. (These are all control characters or permanently
  undefined Unicode characters.)</p>

  <p>U+000D CARRIAGE RETURN (CR) characters, and U+000A LINE FEED (LF)
  characters, are treated specially. Any CR characters that are
  followed by LF characters must be removed, and any CR characters not
  followed by LF characters must be converted to LF characters. Thus,
  newlines in HTML DOMs are represented by LF characters, and there
  are never any CR characters in the input to the
  <span>tokenisation</span> stage.</p>

  <p>The <dfn>next input character</dfn> is the first character in the
  input stream that has not yet been <dfn>consumed</dfn>. Initially,
  the <em>next input character</em> is the first character in the
  input.</p>

  <p>The <dfn>insertion point</dfn> is the position (just before a
  character or just before the end of the input stream) where content
  inserted using <code
  title="dom-document-write-HTML">document.write()</code> is actually
  inserted. The insertion point is relative to the position of the
  character immediately after it, it is not an absolute offset into
  the input stream. Initially, the insertion point is
  uninitialised.</p>

  <p>The "EOF" character in the tables below is a conceptual character
  representing the end of the <span>input stream</span>. If the parser
  is a <span>script-created parser</span>, then the end of the
  <span>input stream</span> is reached when an <dfn>explicit "EOF"
  character</dfn> (inserted by the <code
  title="dom-document-close">document.close()</code> method) is
  consumed. Otherwise, the "EOF" character is not a real character in
  the stream, but rather the lack of any further characters.</p>


  <h5>Changing the encoding while parsing</h5>

  <p>When the parser requires the user agent to <dfn>change the
  encoding</dfn>, it must run the following steps. This might happen
  if the <span>encoding sniffing algorithm</span> described above
  failed to find an encoding, or if it found an encoding that was not
  the actual encoding of the file.</p>

  <ol>

   <li>If the new encoding is UTF-16, change it to UTF-8.</li>

   <li>If the new encoding is identical or equivalent to the encoding
   that is already being used to interpret the input stream, then set
   the <span title="concept-encoding-confidence">confidence</span> to
   <i>confident</i> and abort these steps. This happens when the
   encoding information found in the file matches what the
   <span>encoding sniffing algorithm</span> determined to be the
   encoding, and in the second pass through the parser if the first
   pass found that the encoding sniffing algorithm described in the
   earlier section failed to find the right encoding.</li>

   <li>If all the bytes up to the last byte converted by the current
   decoder have the same Unicode interpretations in both the current
   encoding and the new encoding, and if the user agent supports
   changing the converter on the fly, then the user agent may change
   to the new converter for the encoding on the fly. Set the encoding
   to the new encoding, set the <span
   title="concept-encoding-confidence">confidence</span> to
   <i>confident</i>, and abort these steps.</li>

   <li>Otherwise, <span>navigate</span> to the document again, with
   <span>replacement enabled</span>, but this time skip the
   <span>encoding sniffing algorithm</span> and instead just set the
   encoding to the new encoding and the <span
   title="concept-encoding-confidence">confidence</span> to
   <i>confident</i>. Whenever possible, this should be done without
   actually contacting the network layer (the bytes should be
   re-parsed from memory), even if, e.g., the document is marked as
   not being cacheable.</li>

  </ol>

  <p class="note">While the invocation of this algorithm is not a
  parse error, it is <a href="#charset">still indicative of
  non-conforming content</a>.</p>



  <h4><dfn>Tokenisation</dfn></h4>

  <p>Implementations must act as if they used the following state
  machine to tokenise HTML. The state machine must start in the
  <span>data state</span>. Most states consume a single character,
  which may have various side-effects, and either switches the state
  machine to a new state to <em>reconsume</em> the same character, or
  switches it to a new state (to consume the next character), or
  repeats the same state (to consume the next character). Some states
  have more complicated behaviour and can consume several characters
  before switching to another state.</p>

  <p>The exact behaviour of certain states depends on a <dfn>content
  model flag</dfn> that is set after certain tokens are emitted. The
  flag has several states: <em title="">PCDATA</em>, <em
  title="">RCDATA</em>, <em title="">CDATA</em>, and <em
  title="">PLAINTEXT</em>. Initially it must be in the PCDATA
  state. In the RCDATA and CDATA states, a further <dfn>escape
  flag</dfn> is used to control the behaviour of the tokeniser. It is
  either true or false, and initially must be set to the false
  state.</p>

  <p>The output of the tokenisation step is a series of zero or more
  of the following tokens: DOCTYPE, start tag, end tag, comment,
  character, end-of-file. DOCTYPE tokens have a name, a public
  identifier, a system identifier, and a <i>force-quirks
  flag</i>. When a DOCTYPE token is created, its name, public
  identifier, and system identifier must be marked as missing (which
  is a distinct state from the empty string), and the <i>force-quirks
  flag</i> must be set to <i>off</i> (its other state is
  <i>on</i>). Start and end tag tokens have a tag name and a list of
  attributes, each of which has a name and a value. Comment and
  character tokens have data.</p>

  <p>When a token is emitted, it must immediately be handled by the
  <span>tree construction</span> stage. The tree construction stage
  can affect the state of the <span>content model flag</span>, and can
  insert additional characters into the stream. (For example, the
  <code>script</code> element can result in scripts executing and
  using the <span>dynamic markup insertion</span> APIs to insert
  characters into the stream being tokenised.)</p>

  <p>When an end tag token is emitted, the <span>content model
  flag</span> must be switched to the PCDATA state.</p>

  <p>When an end tag token is emitted with attributes, that is a
  <span>parse error</span>.</p>

  <p>A <dfn>permitted slash</dfn> is a U+002F SOLIDUS character that
  is immediately followed by a U+003E GREATER-THAN SIGN, if, and only
  if, the current token being processed is a start tag token whose tag
  name is the same as the tag name of one of <span>void
  elements</span>.</p>

  <p>Before each step of the tokeniser, the user agent may check to
  see if either one of the scripts in the <span>list of scripts that
  will execute as soon as possible</span> or the first script in the
  <span>list of scripts that will execute asynchronously</span>, has
  <span>completed loading</span><!-- XXX xref -->. If one has, then it
  must be <span title="executing a script block">executed</span> and
  removed from its list.</p>

  <p>The tokeniser state machine is as follows:</p>

  <!-- XXX should go through these reordering the entries so that
  they're in some consistent order, like, by Unicode, errors last, or
  something -->

  <dl>

   <dt><dfn>Data state</dfn></dt>

   <dd>

    <p>Consume the <span>next input character</span>:</p>

    <dl class="switch">

     <dt>U+0026 AMPERSAND (&amp;)</dt>
     <dd>When the <span>content model flag</span> is set to one of the
     PCDATA or RCDATA states and the <span>escape flag</span> is
     false: switch to the <span>entity data state</span>.</dd>
     <dd>Otherwise: treat it as per the "anything else" entry below.</dd>

     <dt>U+002D HYPHEN-MINUS (-)</dt>
     <dd>

      <p>If the <span>content model flag</span> is set to either the
      RCDATA state or the CDATA state, and the <span>escape flag</span>
      is false, and there are at least three characters before this
      one in the input stream, and the last four characters in the
      input stream, including this one, are U+003C LESS-THAN SIGN,
      U+0021 EXCLAMATION MARK, U+002D HYPHEN-MINUS, and U+002D
      HYPHEN-MINUS ("&lt;!--"), then set the <span>escape flag</span>
      to true.</p>

      <p>In any case, emit the input character as a character
      token. Stay in the <span>data state</span>.</p>

     </dd>

     <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
     <dd>When the <span>content model flag</span> is set to the PCDATA
     state: switch to the <span>tag open state</span>.</dd>
     <dd>When the <span>content model flag</span> is set to either the
     RCDATA state or the CDATA state and the <span>escape flag</span>
     is false: switch to the <span>tag open state</span>.</dd>
     <dd>Otherwise: treat it as per the "anything else" entry
     below.</dd>

     <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
     <dd>

      <p>If the <span>content model flag</span> is set to either the
      RCDATA state or the CDATA state, and the <span>escape
      flag</span> is true, and the last three characters in the input
      stream including this one are U+002D HYPHEN-MINUS, U+002D
      HYPHEN-MINUS, U+003E GREATER-THAN SIGN ("--&gt;"), set the
      <span>escape flag</span> to false.</p> <!-- no need to check
      that there are enough characters, since you can only run into
      this if the flag is true in the first place, which requires four
      characters. -->

      <p>In any case, emit the input character as a character
      token. Stay in the <span>data state</span>.</p>

     </dd>

     <dt>EOF</dt>
     <dd>Emit an end-of-file token.</dd>

     <dt>Anything else</dt>
     <dd>Emit the input character as a character token. Stay in the
     <span>data state</span>.</dd>

    </dl>

   </dd>

   <dt><dfn>Entity data state</dfn></dt>

   <dd>

    <p><em>(This cannot happen if the <span>content model flag</span>
    is set to the CDATA state.)</em></p>

    <p>Attempt to <span>consume an entity</span>, with no
    <span>additional allowed character</span>.</p>

    <p>If nothing is returned, emit a U+0026 AMPERSAND character
    token.</p>

    <p>Otherwise, emit the character token that was returned.</p>

    <p>Finally, switch to the <span>data state</span>.</p>

   </dd>

   <dt><dfn>Tag open state</dfn></dt>

   <dd>

    <p>The behaviour of this state depends on the <span>content model
    flag</span>.</p>

    <dl>

     <dt>If the <span>content model flag</span> is set to the RCDATA
     or CDATA states</dt>

     <dd>

      <p>Consume the <span>next input character</span>. If it is a
      U+002F SOLIDUS (/) character, switch to the <span>close tag open
      state</span>. Otherwise, emit a U+003C LESS-THAN SIGN character
      token and reconsume the current input character in the
      <span>data state</span>.</p>

     </dd>

     <dt>If the <span>content model flag</span> is set to the PCDATA
     state</dt>

     <dd>

      <p>Consume the <span>next input character</span>:</p>

      <dl class="switch">

       <dt>U+0021 EXCLAMATION MARK (!)</dt>
       <dd>Switch to the <span>markup declaration open state</span>.</dd>

       <dt>U+002F SOLIDUS (/)</dt>
       <dd>Switch to the <span>close tag open state</span>.</dd>

       <dt>U+0041 LATIN CAPITAL LETTER A through to U+005A LATIN CAPITAL LETTER Z</dt>
       <dd>Create a new start tag token, set its tag name to the
       lowercase version of the input character (add 0x0020 to the
       character's code point), then switch to the <span>tag name
       state</span>. (Don't emit the token yet; further details will
       be filled in before it is emitted.)</dd>

       <dt>U+0061 LATIN SMALL LETTER A through to U+007A LATIN SMALL LETTER Z</dt>
       <dd>Create a new start tag token, set its tag name to the input
       character, then switch to the <span>tag name
       state</span>. (Don't emit the token yet; further details will
       be filled in before it is emitted.)</dd>

       <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
       <dd><span>Parse error</span>. Emit a U+003C LESS-THAN SIGN
       character token and a U+003E GREATER-THAN SIGN character
       token. Switch to the <span>data state</span>.</dd>

       <dt>U+003F QUESTION MARK (?)</dt>
       <dd><span>Parse error</span>. Switch to the <span>bogus
       comment state</span>.</dd>

       <dt>Anything else</dt>
       <dd><span>Parse error</span>. Emit a U+003C LESS-THAN SIGN
       character token and reconsume the current input character in the
       <span>data state</span>.</dd>

      </dl>

     </dd>

    </dl>

   </dd>

   <dt><dfn>Close tag open state</dfn></dt>

   <dd>

    <p>If the <span>content model flag</span> is set to the RCDATA or
    CDATA states but no start tag token has ever been emitted by this
    instance of the tokeniser (<span>fragment case</span>), or, if the
    <span>content model flag</span> is set to the RCDATA or CDATA
    states and the next few characters do not match the tag name of
    the last start tag token emitted (case insensitively), or if they
    do but they are not immediately followed by one of the following
    characters:</p>

    <ul class="brief">
     <li>U+0009 CHARACTER TABULATION</li>
     <li>U+000A LINE FEED (LF)</li>
     <li>U+000B LINE TABULATION</li>
     <li>U+000C FORM FEED (FF)</li>
     <!--<li>U+000D CARRIAGE RETURN (CR)</li>-->
     <li>U+0020 SPACE</li>
     <li>U+003E GREATER-THAN SIGN (&gt;)</li>
     <li>U+002F SOLIDUS (/)</li>
     <li>EOF</li>
    </ul>

    <p>...then emit a U+003C LESS-THAN SIGN character token, a U+002F
    SOLIDUS character token, and switch to the <span>data state</span>
    to process the <span>next input character</span>.</p>

    <p>Otherwise, if the <span>content model flag</span> is set to the
    PCDATA state, or if the next few characters <em>do</em> match that tag
    name, consume the <span>next input character</span>:</p>

    <dl class="switch">

     <dt>U+0041 LATIN CAPITAL LETTER A through to U+005A LATIN CAPITAL LETTER Z</dt>
     <dd>Create a new end tag token, set its tag name to the lowercase
     version of the input character (add 0x0020 to the character's
     code point), then switch to the <span>tag name
     state</span>. (Don't emit the token yet; further details will be
     filled in before it is emitted.)</dd>

     <dt>U+0061 LATIN SMALL LETTER A through to U+007A LATIN SMALL LETTER Z</dt>
     <dd>Create a new end tag token, set its tag name to the input
     character, then switch to the <span>tag name state</span>. (Don't
     emit the token yet; further details will be filled in before it
     is emitted.)</dd>

     <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
     <dd><span>Parse error</span>. Switch to the <span>data
     state</span>.</dd>

     <dt>EOF</dt>
     <dd><span>Parse error</span>. Emit a U+003C LESS-THAN SIGN
     character token and a U+002F SOLIDUS character token.  Reconsume
     the EOF character in the <span>data state</span>.</dd>

     <dt>Anything else</dt>
     <dd><span>Parse error</span>. Switch to the <span>bogus
     comment state</span>.</dd>

    </dl>

   </dd>

   <dt><dfn>Tag name state</dfn></dt>

   <dd>

    <p>Consume the <span>next input character</span>:</p>

    <dl class="switch">

     <dt>U+0009 CHARACTER TABULATION</dt>
     <dt>U+000A LINE FEED (LF)</dt>
     <dt>U+000B LINE TABULATION</dt>
     <dt>U+000C FORM FEED (FF)</dt>
     <!--<dt>U+000D CARRIAGE RETURN (CR)</dt>-->
     <dt>U+0020 SPACE</dt>
     <dd>Switch to the <span>before attribute name state</span>.</dd>

     <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
     <dd>Emit the current tag token. Switch to the <span>data
     state</span>.</dd>

     <dt>U+0041 LATIN CAPITAL LETTER A through to U+005A LATIN CAPITAL LETTER Z</dt>
     <dd>Append the lowercase version of the current input character
     (add 0x0020 to the character's code point) to the current tag
     token's tag name. Stay in the <span>tag name state</span>.</dd>

     <dt>EOF</dt>
     <dd><span>Parse error</span>. Emit the current tag
     token. Reconsume the EOF character in the <span>data
     state</span>.</dd>

     <dt>U+002F SOLIDUS (/)</dt>
     <dd><span>Parse error</span> unless this is a <span>permitted
     slash</span>. Switch to the <span>before attribute name
     state</span>.</dd>

     <dt>Anything else</dt>
     <dd>Append the current input character to the current tag token's
     tag name. Stay in the <span>tag name state</span>.</dd>

    </dl>

   </dd>

   <dt><dfn>Before attribute name state</dfn></dt>

   <dd>

    <p>Consume the <span>next input character</span>:</p>

    <dl class="switch">

     <dt>U+0009 CHARACTER TABULATION</dt>
     <dt>U+000A LINE FEED (LF)</dt>
     <dt>U+000B LINE TABULATION</dt>
     <dt>U+000C FORM FEED (FF)</dt>
     <!--<dt>U+000D CARRIAGE RETURN (CR)</dt>-->
     <dt>U+0020 SPACE</dt>
     <dd>Stay in the <span>before attribute name state</span>.</dd>

     <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
     <dd>Emit the current tag token. Switch to the <span>data
     state</span>.</dd>

     <dt>U+0041 LATIN CAPITAL LETTER A through to U+005A LATIN CAPITAL LETTER Z</dt>
     <dd>Start a new attribute in the current tag token. Set that
     attribute's name to the lowercase version of the current input
     character (add 0x0020 to the character's code point), and its
     value to the empty string. Switch to the <span>attribute name
     state</span>.</dd>

     <dt>U+002F SOLIDUS (/)</dt>
     <dd><span>Parse error</span> unless this is a <span>permitted
     slash</span>. Stay in the <span>before attribute name
     state</span>.</dd>

     <dt>U+0022 QUOTATION MARK (&quot;)</dt>
     <dt>U+0027 APOSTROPHE (')</dt>
     <dt>U+003D EQUALS SIGN (=)</dt>
     <dd><span>Parse error</span>. Treat it as per the "anything else"
     entry below.</dd>

     <dt>EOF</dt>
     <dd><span>Parse error</span>. Emit the current tag
     token. Reconsume the EOF character in the <span>data
     state</span>.</dd>
     
     <dt>Anything else</dt>
     <dd>Start a new attribute in the current tag token. Set that
     attribute's name to the current input character, and its value to
     the empty string. Switch to the <span>attribute name
     state</span>.</dd>

    </dl>

   </dd>

   <dt><dfn>Attribute name state</dfn></dt>

   <dd>

    <p>Consume the <span>next input character</span>:</p>

    <dl class="switch">

     <dt>U+0009 CHARACTER TABULATION</dt>
     <dt>U+000A LINE FEED (LF)</dt>
     <dt>U+000B LINE TABULATION</dt>
     <dt>U+000C FORM FEED (FF)</dt>
     <!--<dt>U+000D CARRIAGE RETURN (CR)</dt>-->
     <dt>U+0020 SPACE</dt>
     <dd>Switch to the <span>after attribute name state</span>.</dd>

     <dt>U+003D EQUALS SIGN (=)</dt>
     <dd>Switch to the <span>before attribute value state</span>.</dd>

     <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
     <dd>Emit the current tag token. Switch to the <span>data
     state</span>.</dd>

     <dt>U+0041 LATIN CAPITAL LETTER A through to U+005A LATIN CAPITAL LETTER Z</dt>
     <dd>Append the lowercase version of the current input character
     (add 0x0020 to the character's code point) to the current
     attribute's name. Stay in the <span>attribute name
     state</span>.</dd>

     <dt>U+002F SOLIDUS (/)</dt>
     <dd><span>Parse error</span> unless this is a <span>permitted
     slash</span>. Switch to the <span>before attribute name
     state</span>.</dd>

     <dt>U+0022 QUOTATION MARK (&quot;)</dt>
     <dt>U+0027 APOSTROPHE (')</dt>
     <dd><span>Parse error</span>. Treat it as per the "anything else"
     entry below.</dd>

     <dt>EOF</dt>
     <dd><span>Parse error</span>. Emit the current tag
     token. Reconsume the EOF character in the <span>data
     state</span>.</dd>

     <dt>Anything else</dt>
     <dd>Append the current input character to the current attribute's
     name. Stay in the <span>attribute name state</span>.</dd>

    </dl>

    <p>When the user agent leaves the attribute name state (and before
    emitting the tag token, if appropriate), the complete attribute's
    name must be compared to the other attributes on the same token;
    if there is already an attribute on the token with the exact same
    name, then this is a <span>parse error</span> and the new
    attribute must be dropped, along with the value that gets
    associated with it (if any).</p>

   </dd>

   <dt><dfn>After attribute name state</dfn></dt>

   <dd>

    <p>Consume the <span>next input character</span>:</p>

    <dl class="switch">

     <dt>U+0009 CHARACTER TABULATION</dt>
     <dt>U+000A LINE FEED (LF)</dt>
     <dt>U+000B LINE TABULATION</dt>
     <dt>U+000C FORM FEED (FF)</dt>
     <!--<dt>U+000D CARRIAGE RETURN (CR)</dt>-->
     <dt>U+0020 SPACE</dt>
     <dd>Stay in the <span>after attribute name state</span>.</dd>

     <dt>U+003D EQUALS SIGN (=)</dt>
     <dd>Switch to the <span>before attribute value state</span>.</dd>

     <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
     <dd>Emit the current tag token. Switch to the <span>data
     state</span>.</dd>

     <dt>U+0041 LATIN CAPITAL LETTER A through to U+005A LATIN CAPITAL LETTER Z</dt>
     <dd>Start a new attribute in the current tag token. Set that
     attribute's name to the lowercase version of the current input character
     (add 0x0020 to the character's code point), and its value to
     the empty string. Switch to the <span>attribute name
     state</span>.</dd>

     <dt>U+002F SOLIDUS (/)</dt>
     <dd><span>Parse error</span> unless this is a <span>permitted
     slash</span>. Switch to the <span>before attribute name
     state</span>.</dd>

     <dt>EOF</dt>
     <dd><span>Parse error</span>. Emit the current tag
     token. Reconsume the EOF character in the <span>data
     state</span>.</dd>

     <dt>Anything else</dt>
     <dd>Start a new attribute in the current tag token. Set that
     attribute's name to the current input character, and its value to
     the empty string. Switch to the <span>attribute name
     state</span>.</dd>

    </dl>

   </dd>

   <dt><dfn>Before attribute value state</dfn></dt>

   <dd>

    <p>Consume the <span>next input character</span>:</p>

    <dl class="switch">

     <dt>U+0009 CHARACTER TABULATION</dt>
     <dt>U+000A LINE FEED (LF)</dt>
     <dt>U+000B LINE TABULATION</dt>
     <dt>U+000C FORM FEED (FF)</dt>
     <!--<dt>U+000D CARRIAGE RETURN (CR)</dt>-->
     <dt>U+0020 SPACE</dt>
     <dd>Stay in the <span>before attribute value state</span>.</dd>

     <dt>U+0022 QUOTATION MARK (&quot;)</dt>
     <dd>Switch to the <span>attribute value (double-quoted) state</span>.</dd>

     <dt>U+0026 AMPERSAND (&amp;)</dt>
     <dd>Switch to the <span>attribute value (unquoted) state</span>
     and reconsume this input character.</dd>

     <dt>U+0027 APOSTROPHE (')</dt>
     <dd>Switch to the <span>attribute value (single-quoted) state</span>.</dd>

     <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
     <dd>Emit the current tag token. Switch to the <span>data
     state</span>.</dd>

     <dt>U+003D EQUALS SIGN (=)</dt>
     <dd><span>Parse error</span>. Treat it as per the "anything else"
     entry below.</dd>

     <dt>EOF</dt>
     <dd><span>Parse error</span>. Emit the current tag
     token. Reconsume the character in the <span>data
     state</span>.</dd>

     <dt>Anything else</dt>
     <dd>Append the current input character to the current attribute's
     value. Switch to the <span>attribute value (unquoted)
     state</span>.</dd>

    </dl>

   </dd>

   <dt><dfn>Attribute value (double-quoted) state</dfn></dt>

   <dd>

    <p>Consume the <span>next input character</span>:</p>

    <dl class="switch">

     <dt>U+0022 QUOTATION MARK (&quot;)</dt>
     <dd>Switch to the <span>after attribute value (quoted)
     state</span>.</dd>

     <dt>U+0026 AMPERSAND (&amp;)</dt>
     <dd>Switch to the <span>entity in attribute value state</span>,
     with the <span>additional allowed character</span> being U+0022
     QUOTATION MARK (&quot;).</dd>

     <dt>EOF</dt>
     <dd><span>Parse error</span>. Emit the current tag
     token. Reconsume the character in the <span>data
     state</span>.</dd>

     <dt>Anything else</dt>
     <dd>Append the current input character to the current attribute's
     value. Stay in the <span>attribute value (double-quoted)
     state</span>.</dd>

    </dl>

   </dd>

   <dt><dfn>Attribute value (single-quoted) state</dfn></dt>

   <dd>

    <p>Consume the <span>next input character</span>:</p>

    <dl class="switch">

     <dt>U+0027 APOSTROPHE (')</dt>
     <dd>Switch to the <span>after attribute value (quoted)
     state</span>.</dd>

     <dt>U+0026 AMPERSAND (&amp;)</dt>
     <dd>Switch to the <span>entity in attribute value state</span>,
     with the <span>additional allowed character</span> being U+0027
     APOSTROPHE (').</dd>

     <dt>EOF</dt>
     <dd><span>Parse error</span>. Emit the current tag
     token. Reconsume the character in the <span>data
     state</span>.</dd>

     <dt>Anything else</dt>
     <dd>Append the current input character to the current attribute's
     value. Stay in the <span>attribute value (single-quoted)
     state</span>.</dd>

    </dl>

   </dd>

   <dt><dfn>Attribute value (unquoted) state</dfn></dt>

   <dd>

    <p>Consume the <span>next input character</span>:</p>

    <dl class="switch">

     <dt>U+0009 CHARACTER TABULATION</dt>
     <dt>U+000A LINE FEED (LF)</dt>
     <dt>U+000B LINE TABULATION</dt>
     <dt>U+000C FORM FEED (FF)</dt>
     <!--<dt>U+000D CARRIAGE RETURN (CR)</dt>-->
     <dt>U+0020 SPACE</dt>
     <dd>Switch to the <span>before attribute name state</span>.</dd>

     <dt>U+0026 AMPERSAND (&amp;)</dt>
     <dd>Switch to the <span>entity in attribute value state</span>,
     with no <span>additional allowed character</span>.</dd>

     <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
     <dd>Emit the current tag token. Switch to the <span>data
     state</span>.</dd>

     <dt>U+0022 QUOTATION MARK (&quot;)</dt>
     <dt>U+0027 APOSTROPHE (')</dt>
     <dt>U+003D EQUALS SIGN (=)</dt>
     <dd><span>Parse error</span>. Treat it as per the "anything else"
     entry below.</dd>

     <dt>EOF</dt>
     <dd><span>Parse error</span>. Emit the current tag
     token. Reconsume the character in the <span>data
     state</span>.</dd>

     <dt>Anything else</dt>
     <dd>Append the current input character to the current attribute's
     value. Stay in the <span>attribute value (unquoted)
     state</span>.</dd>

    </dl>

   </dd>

   <dt><dfn>Entity in attribute value state</dfn></dt>

   <dd>

    <p>Attempt to <span>consume an entity</span>.</p>

    <p>If nothing is returned, append a U+0026 AMPERSAND character to
    the current attribute's value.</p>

    <p>Otherwise, append the returned character token to the current
    attribute's value.</p>

    <p>Finally, switch back to the attribute value state that you were
    in when were switched into this state.</p>

   </dd>

   <dt><dfn>After attribute value (quoted) state</dfn></dt>

   <dd>

    <p>Consume the <span>next input character</span>:</p>

    <dl class="switch">

     <dt>U+0009 CHARACTER TABULATION</dt>
     <dt>U+000A LINE FEED (LF)</dt>
     <dt>U+000B LINE TABULATION</dt>
     <dt>U+000C FORM FEED (FF)</dt>
     <!--<dt>U+000D CARRIAGE RETURN (CR)</dt>-->
     <dt>U+0020 SPACE</dt>
     <dd>Switch to the <span>before attribute name state</span>.</dd>

     <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
     <dd>Emit the current tag token. Switch to the <span>data
     state</span>.</dd>

     <dt>U+002F SOLIDUS (/)</dt>
     <dd><span>Parse error</span> unless this is a <span>permitted
     slash</span>. Switch to the <span>before attribute name
     state</span>.</dd>

     <dt>Anything else</dt>
     <dd><span>Parse error</span>. Reconsume the character in
     the <span>before attribute name state</span>.</dd>

    </dl>

   </dd>

   <dt><dfn>Bogus comment state</dfn></dt>

   <dd>

    <p><em>(This can only happen if the <span>content model
    flag</span> is set to the PCDATA state.)</em></p>

    <p>Consume every character up to the first U+003E GREATER-THAN
    SIGN character (&gt;) or the end of the file (EOF), whichever
    comes first. Emit a comment token whose data is the concatenation
    of all the characters starting from and including the character
    that caused the state machine to switch into the bogus comment
    state, up to and including the last consumed character before the
    U+003E character, if any, or up to the end of the file
    otherwise. (If the comment was started by the end of the file
    (EOF), the token is empty.)</p>

    <p>Switch to the <span>data state</span>.</p>

    <p>If the end of the file was reached, reconsume the EOF
    character.</p>

   </dd>

   <dt><dfn>Markup declaration open state</dfn></dt>

   <dd>

    <p><em>(This can only happen if the <span>content model
    flag</span> is set to the PCDATA state.)</em></p>

    <p>If the next two characters are both U+002D HYPHEN-MINUS (-)
    characters, consume those two characters, create a comment token
    whose data is the empty string, and switch to the <span>comment
    start state</span>.</p>

    <p>Otherwise if the next seven characters are a
    <span>case-insensitive</span><!-- XXX xref, ascii only --> match
    for the word "DOCTYPE", then consume those characters and switch
    to the <span>DOCTYPE state</span>.</p>

    <p>Otherwise, this is a <span>parse error</span>. Switch to the
    <span>bogus comment state</span>. The next character that is
    consumed, if any, is the first character that will be in the
    comment.</p>

   </dd>

   <dt><dfn>Comment start state</dfn></dt>

   <dd>

    <p>Consume the <span>next input character</span>:</p>

    <dl class="switch">

     <dt>U+002D HYPHEN-MINUS (-)</dt>
     <dd>Switch to the <span>comment start dash state</span>.</dd>

     <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
     <dd><span>Parse error</span>. Emit the comment token. Switch to
     the <span>data state</span>.</dd>

     <dt>EOF</dt>
     <dd><span>Parse error</span>. Emit the comment token. Reconsume
     the EOF character in the <span>data state</span>.</dd>

     <dt>Anything else</dt>
     <dd>Append the input character to the comment token's
     data. Switch to the <span>comment state</span>.</dd>

    </dl>

   </dd>

   <dt><dfn>Comment start dash state</dfn></dt>

   <dd>

    <p>Consume the <span>next input character</span>:</p>

    <dl class="switch">

     <dt>U+002D HYPHEN-MINUS (-)</dt>
     <dd>Switch to the <span>comment end state</span></dd>

     <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
     <dd><span>Parse error</span>. Emit the comment token. Switch to
     the <span>data state</span>.</dd>

     <dt>EOF</dt>
     <dd><span>Parse error</span>. Emit the comment token. Reconsume
     the EOF character in the <span>data state</span>.</dd>

     <dt>Anything else</dt>
     <dd>Append a U+002D HYPHEN-MINUS (-) character and the input
     character to the comment token's data. Switch to the
     <span>comment state</span>.</dd>

    </dl>

   </dd>

   <dt><dfn id="comment">Comment state</dfn></dt>

   <dd>

    <p>Consume the <span>next input character</span>:</p>

    <dl class="switch">

     <dt>U+002D HYPHEN-MINUS (-)</dt>
     <dd>Switch to the <span>comment end dash state</span></dd>

     <dt>EOF</dt>
     <dd><span>Parse error</span>. Emit the comment token. Reconsume
     the EOF character in the <span>data state</span>.</dd> <!-- For
     security reasons: otherwise, hostile user could put a <script> in
     a comment e.g. in a blog comment and then DOS the server so that
     the end tag isn't read, and then the commented <script> tag would
     be treated as live code -->

     <dt>Anything else</dt>
     <dd>Append the input character to the comment token's data. Stay
     in the <span>comment state</span>.</dd>

    </dl>

   </dd>

   <dt><dfn>Comment end dash state</dfn></dt>

   <dd>

    <p>Consume the <span>next input character</span>:</p>

    <dl class="switch">

     <dt>U+002D HYPHEN-MINUS (-)</dt>
     <dd>Switch to the <span>comment end state</span></dd>

     <dt>EOF</dt>
     <dd><span>Parse error</span>. Emit the comment token. Reconsume
     the EOF character in the <span>data state</span>.</dd> <!-- For
     security reasons: otherwise, hostile user could put a <script> in
     a comment e.g. in a blog comment and then DOS the server so that
     the end tag isn't read, and then the commented <script> tag would
     be treated as live code -->

     <dt>Anything else</dt>
     <dd>Append a U+002D HYPHEN-MINUS (-) character and the input
     character to the comment token's data. Switch to the
     <span>comment state</span>.</dd>

    </dl>

   </dd>

   <dt><dfn>Comment end state</dfn></dt>

   <dd>

    <p>Consume the <span>next input character</span>:</p>

    <dl class="switch">

     <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
     <dd>Emit the comment token. Switch to the <span>data
     state</span>.</dd>

     <dt>U+002D HYPHEN-MINUS (-)</dt>
     <dd><span>Parse error</span>. Append a U+002D HYPHEN-MINUS
     (-) character to the comment token's data. Stay in the
     <span>comment end state</span>.</dd>

     <dt>EOF</dt>
     <dd><span>Parse error</span>. Emit the comment token. Reconsume
     the EOF character in the <span>data state</span>.</dd> <!-- For
     security reasons: otherwise, hostile user could put a <script> in
     a comment e.g. in a blog comment and then DOS the server so that
     the end tag isn't read, and then the commented <script> tag would
     be treated as live code -->

     <dt>Anything else</dt>
     <dd><span>Parse error</span>. Append two U+002D HYPHEN-MINUS (-)
     characters and the input character to the comment token's
     data. Switch to the <span>comment state</span>.</dd>

    </dl>

   </dd>

   <dt><dfn>DOCTYPE state</dfn></dt>

   <dd>

    <p>Consume the <span>next input character</span>:</p>

    <dl class="switch">

     <dt>U+0009 CHARACTER TABULATION</dt>
     <dt>U+000A LINE FEED (LF)</dt>
     <dt>U+000B LINE TABULATION</dt>
     <dt>U+000C FORM FEED (FF)</dt>
     <!--<dt>U+000D CARRIAGE RETURN (CR)</dt>-->
     <dt>U+0020 SPACE</dt>
     <dd>Switch to the <span>before DOCTYPE name state</span>.</dd>

     <dt>Anything else</dt>
     <dd><span>Parse error</span>. Reconsume the current
     character in the <span>before DOCTYPE name state</span>.</dd>

    </dl>

   </dd>

   <dt><dfn>Before DOCTYPE name state</dfn></dt>

   <dd>

    <p>Consume the <span>next input character</span>:</p>

    <dl class="switch">

     <dt>U+0009 CHARACTER TABULATION</dt>
     <dt>U+000A LINE FEED (LF)</dt>
     <dt>U+000B LINE TABULATION</dt>
     <dt>U+000C FORM FEED (FF)</dt>
     <!--<dt>U+000D CARRIAGE RETURN (CR)</dt>-->
     <dt>U+0020 SPACE</dt>
     <dd>Stay in the <span>before DOCTYPE name state</span>.</dd>

     <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
     <dd><span>Parse error</span>. Create a new DOCTYPE token. Set its
     <i>force-quirks flag</i> to <i>on</i>. Emit the token. Switch to
     the <span>data state</span>.</dd>

     <dt>EOF</dt>
     <dd><span>Parse error</span>. Create a new DOCTYPE token. Set its
     <i>force-quirks flag</i> to <i>on</i>. Emit the token. Reconsume
     the EOF character in the <span>data state</span>.</dd>

     <dt>Anything else</dt>
     <dd>Create a new DOCTYPE token. Set the token's name to the
     current input character. Switch to the <span>DOCTYPE name
     state</span>.</dd>

    </dl>

   </dd>

   <dt><dfn>DOCTYPE name state</dfn></dt>

   <dd>

    <p>First, consume the <span>next input character</span>:</p>

    <dl class="switch">

     <dt>U+0009 CHARACTER TABULATION</dt>
     <dt>U+000A LINE FEED (LF)</dt>
     <dt>U+000B LINE TABULATION</dt>
     <dt>U+000C FORM FEED (FF)</dt>
     <!--<dt>U+000D CARRIAGE RETURN (CR)</dt>-->
     <dt>U+0020 SPACE</dt>
     <dd>Switch to the <span>after DOCTYPE name state</span>.</dd>

     <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
     <dd>Emit the current DOCTYPE token. Switch to the <span>data
     state</span>.</dd>

     <dt>EOF</dt>
     <dd><span>Parse error</span>. Set the DOCTYPE token's
     <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE token.
     Reconsume the EOF character in the <span>data state</span>.</dd>

     <dt>Anything else</dt>
     <dd>Append the current input character to the current DOCTYPE
     token's name. Stay in the <span>DOCTYPE name state</span>.</dd>

    </dl>

   </dd>

   <dt><dfn>After DOCTYPE name state</dfn></dt>

   <dd>

    <p>Consume the <span>next input character</span>:</p>

    <dl class="switch">

     <dt>U+0009 CHARACTER TABULATION</dt>
     <dt>U+000A LINE FEED (LF)</dt>
     <dt>U+000B LINE TABULATION</dt>
     <dt>U+000C FORM FEED (FF)</dt>
     <!--<dt>U+000D CARRIAGE RETURN (CR)</dt>-->
     <dt>U+0020 SPACE</dt>
     <dd>Stay in the <span>after DOCTYPE name state</span>.</dd>

     <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
     <dd>Emit the current DOCTYPE token. Switch to the <span>data
     state</span>.</dd>

     <dt>EOF</dt>
     <dd><span>Parse error</span>. Set the DOCTYPE token's
     <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE token.
     Reconsume the EOF character in the <span>data state</span>.</dd>

     <dt>Anything else</dt>
     <dd>

      <p>If the next six characters are a
      <span>case-insensitive</span><!-- XXX xref, ascii only --> match
      for the word "PUBLIC", then consume those characters and switch
      to the <span>before DOCTYPE public identifier state</span>.</p>

      <p>Otherwise, if the next six characters are a
      <span>case-insensitive</span><!-- XXX xref, ascii only --> match
      for the word "SYSTEM", then consume those characters and switch
      to the <span>before DOCTYPE system identifier state</span>.</p>

      <p>Otherwise, this is the <span>parse error</span>. Set the
      DOCTYPE token's <i>force-quirks flag</i> to <i>on</i>. Switch to
      the <span>bogus DOCTYPE state</span>.</p>

     </dd>

    </dl>

   </dd>

   <dt><dfn>Before DOCTYPE public identifier state</dfn></dt>

   <dd>

    <p>Consume the <span>next input character</span>:</p>

    <dl class="switch">

     <dt>U+0009 CHARACTER TABULATION</dt>
     <dt>U+000A LINE FEED (LF)</dt>
     <dt>U+000B LINE TABULATION</dt>
     <dt>U+000C FORM FEED (FF)</dt>
     <!--<dt>U+000D CARRIAGE RETURN (CR)</dt>-->
     <dt>U+0020 SPACE</dt>
     <dd>Stay in the <span>before DOCTYPE public identifier state</span>.</dd>

     <dt>U+0022 QUOTATION MARK (&quot;)</dt>
     <dd>Set the DOCTYPE token's public identifier to the empty
     string, then switch to the <span>DOCTYPE public identifier
     (double-quoted) state</span>.</dd>

     <dt>U+0027 APOSTROPHE (')</dt>
     <dd>Set the DOCTYPE token's public identifier to the empty
     string, then switch to the <span>DOCTYPE public identifier
     (single-quoted) state</span>.</dd>

     <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
     <dd><span>Parse error</span>. Set the DOCTYPE token's
     <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE
     token. Switch to the <span>data state</span>.</dd>

     <dt>EOF</dt>
     <dd><span>Parse error</span>. Set the DOCTYPE token's
     <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE token.
     Reconsume the EOF character in the <span>data state</span>.</dd>

     <dt>Anything else</dt>
     <dd><span>Parse error</span>.  Set the DOCTYPE token's
     <i>force-quirks flag</i> to <i>on</i>. Switch to the <span>bogus
     DOCTYPE state</span>.</dd>

    </dl>

   </dd>

   <dt><dfn>DOCTYPE public identifier (double-quoted) state</dfn></dt>

   <dd>

    <p>Consume the <span>next input character</span>:</p>

    <dl class="switch">

     <dt>U+0022 QUOTATION MARK (&quot;)</dt>
     <dd>Switch to the <span>after DOCTYPE public identifier state</span>.</dd>

     <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
     <dd><span>Parse error</span>. Set the DOCTYPE token's
     <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE
     token. Switch to the <span>data state</span>.</dd>

     <dt>EOF</dt>
     <dd><span>Parse error</span>. Set the DOCTYPE token's
     <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE token.
     Reconsume the EOF character in the <span>data state</span>.</dd>

     <dt>Anything else</dt>
     <dd>Append the current input character to the current DOCTYPE
     token's public identifier. Stay in the <span>DOCTYPE public
     identifier (double-quoted) state</span>.</dd>

    </dl>

   </dd>

   <dt><dfn>DOCTYPE public identifier (single-quoted) state</dfn></dt>

   <dd>

    <p>Consume the <span>next input character</span>:</p>

    <dl class="switch">

     <dt>U+0027 APOSTROPHE (')</dt>
     <dd>Switch to the <span>after DOCTYPE public identifier state</span>.</dd>

     <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
     <dd><span>Parse error</span>. Set the DOCTYPE token's
     <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE
     token. Switch to the <span>data state</span>.</dd>

     <dt>EOF</dt>
     <dd><span>Parse error</span>. Set the DOCTYPE token's
     <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE token.
     Reconsume the EOF character in the <span>data state</span>.</dd>

     <dt>Anything else</dt>
     <dd>Append the current input character to the current DOCTYPE
     token's public identifier. Stay in the <span>DOCTYPE public
     identifier (single-quoted) state</span>.</dd>

    </dl>

   </dd>

   <dt><dfn>After DOCTYPE public identifier state</dfn></dt>

   <dd>

    <p>Consume the <span>next input character</span>:</p>

    <dl class="switch">

     <dt>U+0009 CHARACTER TABULATION</dt>
     <dt>U+000A LINE FEED (LF)</dt>
     <dt>U+000B LINE TABULATION</dt>
     <dt>U+000C FORM FEED (FF)</dt>
     <!--<dt>U+000D CARRIAGE RETURN (CR)</dt>-->
     <dt>U+0020 SPACE</dt>
     <dd>Stay in the <span>after DOCTYPE public identifier state</span>.</dd>

     <dt>U+0022 QUOTATION MARK (&quot;)</dt>
     <dd>Set the DOCTYPE token's system identifier to the empty
     string, then switch to the <span>DOCTYPE system identifier
     (double-quoted) state</span>.</dd>

     <dt>U+0027 APOSTROPHE (')</dt>
     <dd>Set the DOCTYPE token's system identifier to the empty
     string, then switch to the <span>DOCTYPE system identifier
     (single-quoted) state</span>.</dd>

     <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
     <dd>Emit the current DOCTYPE token. Switch to the <span>data
     state</span>.</dd>

     <dt>EOF</dt>
     <dd><span>Parse error</span>. Set the DOCTYPE token's
     <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE token.
     Reconsume the EOF character in the <span>data state</span>.</dd>

     <dt>Anything else</dt>
     <dd><span>Parse error</span>. Set the DOCTYPE token's
     <i>force-quirks flag</i> to <i>on</i>. Switch to the <span>bogus
     DOCTYPE state</span>.</dd>

    </dl>

   </dd>

   <dt><dfn>Before DOCTYPE system identifier state</dfn></dt>

   <dd>

    <p>Consume the <span>next input character</span>:</p>

    <dl class="switch">

     <dt>U+0009 CHARACTER TABULATION</dt>
     <dt>U+000A LINE FEED (LF)</dt>
     <dt>U+000B LINE TABULATION</dt>
     <dt>U+000C FORM FEED (FF)</dt>
     <!--<dt>U+000D CARRIAGE RETURN (CR)</dt>-->
     <dt>U+0020 SPACE</dt>
     <dd>Stay in the <span>before DOCTYPE system identifier state</span>.</dd>

     <dt>U+0022 QUOTATION MARK (&quot;)</dt>
     <dd>Set the DOCTYPE token's system identifier to the empty
     string, then switch to the <span>DOCTYPE system identifier
     (double-quoted) state</span>.</dd>

     <dt>U+0027 APOSTROPHE (')</dt>
     <dd>Set the DOCTYPE token's system identifier to the empty
     string, then switch to the <span>DOCTYPE system identifier
     (single-quoted) state</span>.</dd>

     <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
     <dd><span>Parse error</span>. Set the DOCTYPE token's
     <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE
     token. Switch to the <span>data state</span>.</dd>

     <dt>EOF</dt>
     <dd><span>Parse error</span>. Set the DOCTYPE token's
     <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE token.
     Reconsume the EOF character in the <span>data state</span>.</dd>

     <dt>Anything else</dt>
     <dd><span>Parse error</span>. Set the DOCTYPE token's
     <i>force-quirks flag</i> to <i>on</i>. Switch to the <span>bogus
     DOCTYPE state</span>.</dd>

    </dl>

   </dd>

   <dt><dfn>DOCTYPE system identifier (double-quoted) state</dfn></dt>

   <dd>

    <p>Consume the <span>next input character</span>:</p>

    <dl class="switch">

     <dt>U+0022 QUOTATION MARK (&quot;)</dt>
     <dd>Switch to the <span>after DOCTYPE system identifier state</span>.</dd>

     <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
     <dd><span>Parse error</span>. Set the DOCTYPE token's
     <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE
     token. Switch to the <span>data state</span>.</dd>

     <dt>EOF</dt>
     <dd><span>Parse error</span>. Set the DOCTYPE token's
     <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE token.
     Reconsume the EOF character in the <span>data state</span>.</dd>

     <dt>Anything else</dt>
     <dd>Append the current input character to the current DOCTYPE
     token's system identifier. Stay in the <span>DOCTYPE system
     identifier (double-quoted) state</span>.</dd>

    </dl>

   </dd>

   <dt><dfn>DOCTYPE system identifier (single-quoted) state</dfn></dt>

   <dd>

    <p>Consume the <span>next input character</span>:</p>

    <dl class="switch">

     <dt>U+0027 APOSTROPHE (')</dt>
     <dd>Switch to the <span>after DOCTYPE system identifier state</span>.</dd>

     <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
     <dd><span>Parse error</span>. Set the DOCTYPE token's
     <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE
     token. Switch to the <span>data state</span>.</dd>

     <dt>EOF</dt>
     <dd><span>Parse error</span>. Set the DOCTYPE token's
     <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE token.
     Reconsume the EOF character in the <span>data state</span>.</dd>

     <dt>Anything else</dt>
     <dd>Append the current input character to the current DOCTYPE
     token's system identifier. Stay in the <span>DOCTYPE system
     identifier (single-quoted) state</span>.</dd>

    </dl>

   </dd>

   <dt><dfn>After DOCTYPE system identifier state</dfn></dt>

   <dd>

    <p>Consume the <span>next input character</span>:</p>

    <dl class="switch">

     <dt>U+0009 CHARACTER TABULATION</dt>
     <dt>U+000A LINE FEED (LF)</dt>
     <dt>U+000B LINE TABULATION</dt>
     <dt>U+000C FORM FEED (FF)</dt>
     <!--<dt>U+000D CARRIAGE RETURN (CR)</dt>-->
     <dt>U+0020 SPACE</dt>
     <dd>Stay in the <span>after DOCTYPE system identifier state</span>.</dd>

     <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
     <dd>Emit the current DOCTYPE token. Switch to the <span>data
     state</span>.</dd>

     <dt>EOF</dt>
     <dd><span>Parse error</span>. Set the DOCTYPE token's
     <i>force-quirks flag</i> to <i>on</i>. Emit that DOCTYPE token.
     Reconsume the EOF character in the <span>data state</span>.</dd>

     <dt>Anything else</dt>
     <dd><span>Parse error</span>. Switch to the <span>bogus DOCTYPE
     state</span>. (This does <em>not</em> set the DOCTYPE token's
     <i>force-quirks flag</i> to <i>on</i>.)</dd>

    </dl>

   </dd>

   <dt><dfn>Bogus DOCTYPE state</dfn></dt>

   <dd>

    <p>Consume the <span>next input character</span>:</p>

    <dl class="switch">

     <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
     <dd>Emit the DOCTYPE token. Switch to the <span>data
     state</span>.</dd>

     <dt>EOF</dt>
     <dd><span>Parse error</span>. Emit the DOCTYPE token.  Reconsume
     the EOF character in the <span>data state</span>.</dd>

     <dt>Anything else</dt>
     <dd>Stay in the <span>bogus DOCTYPE state</span>.</dd>

    </dl>

   </dd>

  </dl>


  <h5>Tokenising entities</h5>

  <p>This section defines how to <dfn>consume an entity</dfn>. This
  definition is used when parsing entities <span title="entity data
  state">in text</span> and <span title="entity in attribute value
  state">in attributes</span>.</p>

  <p>The behaviour depends on the identity of the next character (the
  one immediately after the U+0026 AMPERSAND character):</p>

  <dl class="switch">

   <dt>U+0009 CHARACTER TABULATION</dt>
   <dt>U+000A LINE FEED (LF)</dt>
   <dt>U+000B LINE TABULATION</dt>
   <dt>U+000C FORM FEED (FF)</dt>
   <!--<dt>U+000D CARRIAGE RETURN (CR)</dt>-->
   <dt>U+0020 SPACE</dt>
   <dt>U+003C LESS-THAN SIGN</dt>
   <dt>U+0026 AMPERSAND</dt>
   <dt>EOF</dt>
   <dt>The <dfn>additional allowed character</dfn>, if there is one</dt>

   <dd>Not an entity. No characters are consumed, and nothing is
   returned. (This is not an error, either.)</dd>


   <dt>U+0023 NUMBER SIGN (#)</dt>

   <dd>

    <p>Consume the U+0023 NUMBER SIGN.</p>

    <p>The behaviour further depends on the character after the U+0023
    NUMBER SIGN:</p>

    <dl class="switch">

     <dt>U+0078 LATIN SMALL LETTER X</dt>
     <dt>U+0058 LATIN CAPITAL LETTER X</dt>

     <dd>

      <p>Consume the X.</p>

      <p>Follow the steps below, but using the range of characters
      U+0030 DIGIT ZERO through to U+0039 DIGIT NINE, U+0061 LATIN
      SMALL LETTER A through to U+0066 LATIN SMALL LETTER F, and
      U+0041 LATIN CAPITAL LETTER A, through to U+0046 LATIN CAPITAL
      LETTER F (in other words, 0-9, A-F, a-f).</p>

      <p>When it comes to interpreting the number, interpret it as a
      hexadecimal number.</p>

     </dd>


     <dt>Anything else</dt>

     <dd>

      <p>Follow the steps below, but using the range of characters
      U+0030 DIGIT ZERO through to U+0039 DIGIT NINE (i.e. just
      0-9).</p>

      <p>When it comes to interpreting the number, interpret it as a
      decimal number.</p>

     </dd>

    </dl>

    <p>Consume as many characters as match the range of characters
    given above.</p>

    <p>If no characters match the range, then don't consume any
    characters (and unconsume the U+0023 NUMBER SIGN character and, if
    appropriate, the X character). This is a <span>parse
    error</span>; nothing is returned.</p>

    <p>Otherwise, if the next character is a U+003B SEMICOLON, consume
    that too. If it isn't, there is a <span>parse
    error</span>.</p>

    <p>If one or more characters match the range, then take them all
    and interpret the string of characters as a number (either
    hexadecimal or decimal as appropriate).</p>

    <p>If that number is one of the numbers in the first column of the
    following table, then this is a <span>parse error</span>. Find the
    row with that number in the first column, and return a character
    token for the Unicode character given in the second column of that
    row.</p>

    <table>
     <thead>
      <tr><th>Number <th colspan=2>Unicode character
     <tbody>
      <tr><td>0x0D <td>U+000A <td>LINE FEED (LF)
      <tr><td>0x80 <td>U+20AC <td>EURO SIGN ('&#x20AC;')
      <tr><td>0x81 <td>U+FFFD <td>REPLACEMENT CHARACTER
      <tr><td>0x82 <td>U+201A <td>SINGLE LOW-9 QUOTATION MARK ('&#x201A;')
      <tr><td>0x83 <td>U+0192 <td>LATIN SMALL LETTER F WITH HOOK ('&#x0192;')
      <tr><td>0x84 <td>U+201E <td>DOUBLE LOW-9 QUOTATION MARK ('&#x201E;')
      <tr><td>0x85 <td>U+2026 <td>HORIZONTAL ELLIPSIS ('&#x2026;')
      <tr><td>0x86 <td>U+2020 <td>DAGGER ('&#x2020;')
      <tr><td>0x87 <td>U+2021 <td>DOUBLE DAGGER ('&#x2021;')
      <tr><td>0x88 <td>U+02C6 <td>MODIFIER LETTER CIRCUMFLEX ACCENT ('&#x02C6;')
      <tr><td>0x89 <td>U+2030 <td>PER MILLE SIGN ('&#x2030;')
      <tr><td>0x8A <td>U+0160 <td>LATIN CAPITAL LETTER S WITH CARON ('&#x0160;')
      <tr><td>0x8B <td>U+2039 <td>SINGLE LEFT-POINTING ANGLE QUOTATION MARK ('&#x2039;')
      <tr><td>0x8C <td>U+0152 <td>LATIN CAPITAL LIGATURE OE ('&#x0152;')
      <tr><td>0x8D <td>U+FFFD <td>REPLACEMENT CHARACTER
      <tr><td>0x8E <td>U+017D <td>LATIN CAPITAL LETTER Z WITH CARON ('&#x017D;')
      <tr><td>0x8F <td>U+FFFD <td>REPLACEMENT CHARACTER
      <tr><td>0x90 <td>U+FFFD <td>REPLACEMENT CHARACTER
      <tr><td>0x91 <td>U+2018 <td>LEFT SINGLE QUOTATION MARK ('&#x2018;')
      <tr><td>0x92 <td>U+2019 <td>RIGHT SINGLE QUOTATION MARK ('&#x2019;')
      <tr><td>0x93 <td>U+201C <td>LEFT DOUBLE QUOTATION MARK ('&#x201C;')
      <tr><td>0x94 <td>U+201D <td>RIGHT DOUBLE QUOTATION MARK ('&#x201D;')
      <tr><td>0x95 <td>U+2022 <td>BULLET ('&#x2022;')
      <tr><td>0x96 <td>U+2013 <td>EN DASH ('&#x2013;')
      <tr><td>0x97 <td>U+2014 <td>EM DASH ('&#x2014;')
      <tr><td>0x98 <td>U+02DC <td>SMALL TILDE ('&#x02DC;')
      <tr><td>0x99 <td>U+2122 <td>TRADE MARK SIGN ('&#x2122;')
      <tr><td>0x9A <td>U+0161 <td>LATIN SMALL LETTER S WITH CARON ('&#x0161;')
      <tr><td>0x9B <td>U+203A <td>SINGLE RIGHT-POINTING ANGLE QUOTATION MARK ('&#x203A;')
      <tr><td>0x9C <td>U+0153 <td>LATIN SMALL LIGATURE OE ('&#x0153;')
      <tr><td>0x9D <td>U+FFFD <td>REPLACEMENT CHARACTER
      <tr><td>0x9E <td>U+017E <td>LATIN SMALL LETTER Z WITH CARON ('&#x017E;')
      <tr><td>0x9F <td>U+0178 <td>LATIN CAPITAL LETTER Y WITH DIAERESIS ('&#x0178;')
    </table>

    <p>Otherwise, if the number is zero, if the number is higher than
    0x10FFFF, or if it's one of the surrogate characters (characters
    in the range 0xD800 to 0xDFFF), then this is a <span>parse
    error</span>; return a character token for the U+FFFD REPLACEMENT
    CHARACTER character instead.</p>

    <p>Otherwise, return a character token for the Unicode character
    whose code point is that number.</p>

   </dd>


   <dt>Anything else</dt>

   <dd>

    <p>Consume the maximum number of characters possible, with the
    consumed characters case-sensitively matching one of the
    identifiers in the first column of the <span>entities</span>
    table.</p>

    <p>If no match can be made, then this is a <span>parse
    error</span>. No characters are consumed, and nothing is
    returned.</p>

    <p>If the last character matched is not a U+003B SEMICOLON (<code
    title="">;</code>), there is a <span>parse error</span>.</p>

    <p>If the entity is being consumed <span title="entity in
    attribute value state">as part of an attribute</span>, and the
    last character matched is not a U+003B SEMICOLON (<code
    title="">;</code>), and the next character is in the range U+0030
    DIGIT ZERO to U+0039 DIGIT NINE, U+0041 LATIN CAPITAL LETTER A to
    U+005A LATIN CAPITAL LETTER Z, or U+0061 LATIN SMALL LETTER A to
    U+007A LATIN SMALL LETTER Z, then, for historical reasons, all the
    characters that were matched after the U+0026 AMPERSAND (&amp;)
    must be unconsumed, and nothing is returned.</p>

    <p>Otherwise, return a character token for the character
    corresponding to the entity name (as given by the second column of
    the <span>entities</span> table).</p>

    <div class="example">

     <p>If the markup contains <code title="">I'm &amp;notit; I tell
     you</code>, the entity is parsed as "not", as in, <code
     title="">I'm &not;it; I tell you</code>. But if the markup was
     <code title="">I'm &amp;notin; I tell you</code>, the entity
     would be parsed as "notin;", resulting in <code title="">I'm
     &notin; I tell you</code>.</p>

    </div>

   </dd>

  </dl>



  <h4><dfn>Tree construction</dfn></h4>

  <p>The input to the tree construction stage is a sequence of tokens
  from the <span>tokenisation</span> stage. The tree construction
  stage is associated with a DOM <code>Document</code> object when a
  parser is created. The "output" of this stage consists of
  dynamically modifying or extending that document's DOM tree.</p>

  <p>This specification does not define when an interactive user agent
  has to render the <code>Document</code> so that it is available to
  the user, or when it has to begin accepting user input.</p>

  <p>When the steps below require the UA to <dfn>insert a
  character</dfn> into a node, if that node has a child immediately
  before where the character is to be inserted, and that child is a
  <code>Text</code> node, then the character must be appended to that
  <code>Text</code> node; otherwise, a new <code>Text</code> node
  whose data is just that character must be inserted in the
  appropriate place.</p>

  <p id="mutation-during-parsing">DOM mutation events must not fire
  for changes caused by the UA parsing the document. (Conceptually,
  the parser is not mutating the DOM, it is constructing it.) This
  includes the parsing of any content inserted using <code
  title="dom-document-write-HTML">document.write()</code> and <code
  title="dom-document-writeln">document.writeln()</code> calls.<!--
  XXX xref --> <a href="#refsDOM3EVENTS">[DOM3EVENTS]</a></p><!-- XXX
  what about innerHTML? -->

  <p class="note">Not all of the tag names mentioned below are
  conformant tag names in this specification; many are included to
  handle legacy content. They still form part of the algorithm that
  implementations are required to implement to claim conformance.</p>

  <p class="note">The algorithm described below places no limit on the
  depth of the DOM tree generated, or on the length of tag names,
  attribute names, attribute values, text nodes, etc. While
  implementators are encouraged to avoid arbitrary limits, it is
  recognised that <a href="#hardwareLimitations">practical
  concerns</a> will likely force user agents to impose nesting
  depths.</p>

  <p>As each token is emitted from the tokeniser, the user agent must
  process the token according to the rules given in the section
  corresponding to the current <dfn>insertion mode</dfn>.</p>

  <p>Initially the <span>insertion mode</span> is "<span
  title="insertion mode: initial">initial</span>". It can change to
  "<span title="insertion mode: before html">before html</span>",
  "<span title="insertion mode: before head">before head</span>",
  "<span title="insertion mode: in head">in head</span>", "<span
  title="insertion mode: in head noscript">in head noscript</span>",
  "<span title="insertion mode: after head">after head</span>", "<span
  title="insertion mode: in body">in body</span>", "<span
  title="insertion mode: in table">in table</span>", "<span
  title="insertion mode: in caption">in caption</span>", "<span
  title="insertion mode: in column group">in column group</span>",
  "<span title="insertion mode: in table body">in table body</span>",
  "<span title="insertion mode: in row">in row</span>", "<span
  title="insertion mode: in cell">in cell</span>", "<span
  title="insertion mode: in select">in select</span>", "<span
  title="insertion mode: in select in table">in select in
  table</span>", "<span title="insertion mode: after body">after
  body</span>", "<span title="insertion mode: in frameset">in
  frameset</span>", "<span title="insertion mode: after
  frameset">after frameset</span>", "<span title="insertion mode:
  after after body">after after body</span>", and "<span
  title="insertion mode: after after frameset">after after
  frameset</span>" during the course of the parsing, as described
  below. It affects how certain tokens are processed.</p>

  <p>Four of these modes, namely "<span title="insertion mode: in
  head">in head</span>", "<span title="insertion mode: in body">in
  body</span>", "<span title="insertion mode: in table">in
  table</span>", and "<span title="insertion mode: in select">in
  select</span>", are special, in that the other modes defer to them
  at various times. When the algorithm below says that the user agent
  is to do something "<dfn>using the rules for</dfn> the <var
  title="">m</var> insertion mode", where <var title="">m</var> is one
  of these modes, the user agent must use the rules described under
  that <span>insertion mode</span>'s section, but must leave the
  <span>insertion mode</span> unchanged (unless the rules in that
  section themselves switch the <span>insertion mode</span>).</p>

  <p>In addition to the <span>insertion mode</span>, the tree
  construction stage has several pieces of state: a <span>stack of
  open elements</span>, a <span>list of active formatting
  elements</span>, a <span><code title="">head</code> element
  pointer</span>, and a <span><code title="">form</code> element
  pointer</span>.</p>


  <h5>The stack of open elements</h5>

  <p>Initially the <dfn>stack of open elements</dfn> is empty. The
  stack grows downwards; the topmost node on the stack is the first
  one added to the stack, and the bottommost node of the stack is the
  most recently added node in the stack (notwithstanding when the
  stack is manipulated in a random access fashion as part of <a
  href="#adoptionAgency">the handling for misnested tags</a>).</p>

  <p>The "<span title="insertion mode: before html">before
  html</span>" <span>insertion mode</span> creates the
  <code>html</code> root element node, which is then added to the
  stack.</p>

  <p>In the <span>fragment case</span>, the <span>stack of open
  elements</span> is initialised to contain an <code>html</code>
  element that is created as part of <span title="html fragment
  parsing algorithm">that algorithm</span>. (The <span>fragment
  case</span> skips the "<span title="insertion mode: before
  html">before html</span>" <span>insertion mode</span>.)</p>

  <p>The <code>html</code> node, however it is created, is the topmost
  node of the stack. It never gets popped off the stack.</p>

  <p>The <dfn>current node</dfn> is the bottommost node in this
  stack.</p>

  <p>The <dfn>current table</dfn> is the last <code>table</code>
  element in the <span>stack of open elements</span>, if there is
  one. If there is no <code>table</code> element in the <span>stack of
  open elements</span> (<span>fragment case</span>), then the
  <span>current table</span> is the first element in the <span>stack
  of open elements</span> (the <code>html</code> element).</p>

  <p>Elements in the stack fall into the following categories:</p>

  <dl>

   <dt><dfn>Special</dfn></dt>
   <dd><p>The following HTML elements have varying levels of special
   parsing rules: <code>address</code>, <code>area</code>,
   <code>base</code>, <code>basefont</code>, <code>bgsound</code>,
   <code>blockquote</code>, <code>body</code>, <code>br</code>,
   <code>center</code>, <code>col</code>, <code>colgroup</code>,
   <code>dd</code>, <code>dir</code>, <code>div</code>,
   <code>dl</code>, <code>dt</code>, <code>embed</code>,
   <code>fieldset</code>, <code>form</code>, <code>frame</code>,
   <code>frameset</code>, <code>h1</code>, <code>h2</code>,
   <code>h3</code>, <code>h4</code>, <code>h5</code>, <code>h6</code>,
   <code>head</code>, <code>hr</code>, <code>iframe</code>,
   <code>image</code><!-- XXX ? this isn't an element that can end up
   on the stack-->, <code>img</code>, <code>input</code>,
   <code>isindex</code>, <code>li</code>, <code>link</code>,
   <code>listing</code>, <code>menu</code>, <code>meta</code>,
   <code>noembed</code>, <code>noframes</code>, <code>noscript</code>,
   <code>ol</code>, <code>optgroup</code>, <code>option</code>,
   <code>p</code>, <code>param</code>, <code>plaintext</code>,
   <code>pre</code>, <code>script</code>, <code>select</code>,
   <code>spacer</code>, <code>style</code>, <code>tbody</code>,
   <code>textarea</code>, <code>tfoot</code>, <code>thead</code>,
   <code>title</code>, <code>tr</code>, <code>ul</code>, and
   <code>wbr</code>.</p></dd>

   <dt><dfn>Scoping</dfn></dt>
   <dd><p>The following HTML elements introduce new <span title="has
   an element in scope">scopes</span> for various parts of the
   parsing: <code>applet</code>, <code>button</code>,
   <code>caption</code>, <code>html</code>, <code>marquee</code>,
   <code>object</code>, <code>table</code>, <code>td</code> and
   <code>th</code>.</p></dd>

   <dt><dfn>Formatting</dfn></dt>
   <dd><p>The following HTML elements are those that end up in the
   <span>list of active formatting elements</span>: <code>a</code>,
   <code>b</code>, <code>big</code>, <code>em</code>,
   <code>font</code>, <code>i</code>, <code>nobr</code>,
   <code>s</code>, <code>small</code>, <code>strike</code>,
   <code>strong</code>, <code>tt</code>, and <code>u</code>.</p></dd>

   <dt><dfn>Phrasing</dfn></dt>
   <dd><p>All other elements found while parsing an HTML
   document.</p></dd>

  </dl>

  <p class="big-issue">Still need to add these new elements to the
  lists: <code>event-source</code>, <code>section</code>,
  <code>nav</code>, <code>article</code>, <code>aside</code>,
  <code>header</code>, <code>footer</code>, <code>datagrid</code>,
  <code>command</code></p>

  <p>The <span>stack of open elements</span> is said to <dfn
  title="has an element in scope">have an element in scope</dfn> or
  <dfn title="has an element in table scope">have an element in
  <em>table scope</em></dfn> when the following algorithm terminates
  in a match state:</p>

  <ol>

   <li><p>Initialise <var title="">node</var> to be the <span>current
   node</span> (the bottommost node of the stack).</p></li>

   <li><p>If <var title="">node</var> is the target node, terminate in a match
   state.</p></li>

   <li><p>Otherwise, if <var title="">node</var> is a <code>table</code>
   element, terminate in a failure state.</p></li>

   <li><p>Otherwise, if the algorithm is the "has an element in scope"
   variant (rather than the "has an element in table scope" variant),
   and <var title="">node</var> is one of the following, terminate in a failure
   state:</p>
    <ul class="brief">
     <li><code>applet</code></li>
     <li><code>caption</code></li>
     <li><code>td</code></li>
     <li><code>th</code></li>
     <li><code>button</code></li>
     <li><code>marquee</code></li>
     <li><code>object</code></li>
    </ul>
   </li>

   <li><p>Otherwise, if <var title="">node</var> is an <code>html</code>
   element, terminate in a failure state. (This can only happen if the
   <var title="">node</var> is the topmost node of the <span>stack of open
   elements</span>, and prevents the next step from being invoked if
   there are no more elements in the stack.)</p></li>

   <li><p>Otherwise, set <var title="">node</var> to the previous entry in the
   <span>stack of open elements</span> and return to step 2. (This
   will never fail, since the loop will always terminate in the
   previous step if the top of the stack is reached.)</p></li>

  </ol>

  <p>Nothing happens if at any time any of the elements in the
  <span>stack of open elements</span> are moved to a new location in,
  or removed from, the <code>Document</code> tree. In particular, the
  stack is not changed in this situation. This can cause, amongst
  other strange effects, content to be appended to nodes that are no
  longer in the DOM.</p>

  <p class="note">In some cases (namely, when <a
  href="#adoptionAgency">closing misnested formatting elements</a>),
  the stack is manipulated in a random-access fashion.</p>


  <h5>The list of active formatting elements</h5>

  <p>Initially the <dfn>list of active formatting elements</dfn> is
  empty. It is used to handle mis-nested <span
  title="formatting">formatting element tags</span>.</p>

  <p>The list contains elements in the <span>formatting</span>
  category, and scope markers. The scope markers are inserted when
  entering <code>applet</code> elements, buttons, <code>object</code>
  elements, marquees, table cells, and table captions, and are used to
  prevent formatting from "leaking" into <code>applet</code> elements,
  buttons, <code>object</code> elements, marquees, and tables.</p>

  <p>When the steps below require the UA to <dfn>reconstruct the
  active formatting elements</dfn>, the UA must perform the following
  steps:</p>

  <ol>

   <li>If there are no entries in the <span>list of active formatting
   elements</span>, then there is nothing to reconstruct; stop this
   algorithm.</li>

   <li>If the last (most recently added) entry in the <span>list of
   active formatting elements</span> is a marker, or if it is an
   element that is in the <span>stack of open elements</span>, then
   there is nothing to reconstruct; stop this algorithm.</li>

   <li>Let <var title="">entry</var> be the last (most recently added)
   element in the <span>list of active formatting
   elements</span>.</li>

   <li>If there are no entries before <var title="">entry</var> in the
   <span>list of active formatting elements</span>, then jump to step
   8.</li>

   <li>Let <var title="">entry</var> be the entry one earlier than
   <var title="">entry</var> in the <span>list of active formatting
   elements</span>.</li>

   <li>If <var title="">entry</var> is neither a marker nor an element
   that is also in the <span>stack of open elements</span>, go to step
   4.</li>

   <li>Let <var title="">entry</var> be the element one later than
   <var title="">entry</var> in the <span>list of active formatting
   elements</span>.</li>

   <li>Perform a shallow clone of the element <var title="">entry</var> to
   obtain <var title="">clone</var>. <a
   href="#refsDOM3CORE">[DOM3CORE]</a></li>

   <li>Append <var title="">clone</var> to the <span>current
   node</span> and push it onto the <span>stack of open
   elements</span> so that it is the new <span>current
   node</span>.</li>

   <li>Replace the entry for <var title="">entry</var> in the list
   with an entry for <var title="">clone</var>.</li>

   <li>If the entry for <var title="">clone</var> in the <span>list of
   active formatting elements</span> is not the last entry in the
   list, return to step 7.</li>

  </ol>

  <p>This has the effect of reopening all the formatting elements that
  were opened in the current body, cell, or caption (whichever is
  youngest) that haven't been explicitly closed.</p>

  <p class="note">The way this specification is written, the
  <span>list of active formatting elements</span> always consists of
  elements in chronological order with the least recently added
  element first and the most recently added element last (except for
  while steps 8 to 11 of the above algorithm are being executed, of
  course).</p>

  <p>When the steps below require the UA to <dfn>clear the list of
  active formatting elements up to the last marker</dfn>, the UA must
  perform the following steps:</p>

  <ol>

   <li>Let <var title="">entry</var> be the last (most recently added)
   entry in the <span>list of active formatting elements</span>.</li>

   <li>Remove <var title="">entry</var> from the <span>list of active
   formatting elements</span>.</li>

   <li>If <var title="">entry</var> was a marker, then stop the
   algorithm at this point. The list has been cleared up to the last
   marker.</li>

   <li>Go to step 1.</li>

  </ol>


  <h5>Creating and inserting HTML elements</h5>

  <p>When the steps below require the UA to <dfn title="create an
  element for the token">create an element for a token</dfn>, the UA
  must create a node implementing the interface appropriate for the
  element type corresponding to the tag name of the token (as given in
  the section of this specification that defines that element,
  e.g. for an <code>a</code> element it would be the
  <code>HTMLAnchorElement</code> interface), with the tag name being
  the name of that element, with the node being in the <span>HTML
  namespace</span>, and with the attributes on the node being those
  given in the given token.</p>

  <p>When the steps below require the UA to <dfn>insert an HTML
  element</dfn> for a token, the UA must first <span>create an element
  for the token</span>, and then append this node to the <span>current
  node</span>, and push it onto the <span>stack of open
  elements</span> so that it is the new <span>current node</span>.</p>

  <p>The steps below may also require that the UA insert an HTML
  element in a particular place, in which case the UA must
  <span>create an element for the token</span> and then insert or
  append the new node in the location specified. (This happens in
  particular during the parsing of tables with invalid content.)</p>

  <p>The interface appropriate for an element that is not defined in
  this specification is <code>HTMLElement</code>.</p>

  <p>The <dfn>generic CDATA parsing algorithm</dfn> and the
  <dfn>generic RCDATA parsing algorithm</dfn> consist of the following
  steps. These algorithms are always invoked in response to a start
  tag token.</p>

  <ol>

   <li><p><span>Create an element for the token</span>.</p></li>

   <li><p>Append the new element to the <span>current
   node</span>.</p></li>

   <li><p>If the algorithm that was invoked is the <span>generic CDATA
   parsing algorithm</span>, switch the tokeniser's <span>content
   model flag</span> to the CDATA state; otherwise the algorithm
   invoked was the <span>generic RCDATA parsing algorithm</span>,
   switch the tokeniser's <span>content model flag</span> to the
   RCDATA state.</p></li>

   <li><p>Then, collect all the character tokens that the tokeniser
   returns until it returns a token that is not a character token, or
   until it stops tokenising.</p></li>

   <li><p>If this process resulted in a collection of character
   tokens, append a single <code>Text</code> node, whose contents is
   the concatenation of all those tokens' characters, to the new
   element node.</p></li>

   <li><p>The tokeniser's <span>content model flag</span> will have
   switched back to the PCDATA state.</p></li>

   <li><p>If the next token is an end tag token with the same tag name
   as the start tag token, ignore it. Otherwise, it's an end-of-file
   token, and this is a <span>parse error</span>.</p></li>

  </ol>



  <h5>Closing elements that have implied end tags</h5>

  <p>When the steps below require the UA to <dfn>generate implied end
  tags</dfn>, then, while the <span>current node</span> is a
  <code>dd</code> element, a <code>dt</code> element, an
  <code>li</code> element, or a <code>p</code> element, the UA must
  pop the <span>current node</span> off the <span>stack of open
  elements</span>.</p>

  <p>If a step requires the UA to generate implied end tags but lists
  an element to exclude from the process, then the UA must perform the
  above steps as if that element was not in the above list.</p>


  <h5>The element pointers</h5>

  <p>Initially the <dfn><code title="">head</code> element
  pointer</dfn> and the <dfn><code title="">form</code> element
  pointer</dfn> are both null.</p>

  <p>Once a <code>head</code> element has been parsed (whether
  implicitly or explicitly) the <span><code title="">head</code>
  element pointer</span> gets set to point to this node.</p>

  <p>The <span><code title="">form</code> element pointer</span>
  points to the last <code>form</code> element that was opened and
  whose end tag has not yet been seen. It is used to make form
  controls associate with forms in the face of dramatically bad
  markup, for historical reasons.</p>


  <h5>Resetting the insertion mode</h5>

  <p>When the steps below require the UA to <dfn>reset the insertion
  mode appropriately</dfn>, it means the UA must follow these
  steps:</p>

  <ol>

   <li>Let <var title="">last</var> be false.</li>

   <li>Let <var title="">node</var> be the last node in the
   <span>stack of open elements</span>.</li>

   <li>If <var title="">node</var> is the first node in the stack of
   open elements, then set <var title="">last</var> to true; if, in
   addition, the <var title="">context</var> element of the <span>HTML
   fragment parsing algorithm</span> is neither a <code>td</code>
   element nor a <code>th</code> element, then set <var
   title="">node</var> to the <var title="">context</var>
   element. (<span>fragment case</span>)</li>

   <li>If <var title="">node</var> is a <code>select</code> element,
   then switch the <span>insertion mode</span> to "<span
   title="insertion mode: in select">in select</span>" and abort these
   steps. (<span>fragment case</span>)</li>

   <li>If <var title="">node</var> is a <code>td</code> or
   <code>th</code> element, then switch the <span>insertion
   mode</span> to "<span title="insertion mode: in cell">in
   cell</span>" and abort these steps.</li>

   <li>If <var title="">node</var> is a <code>tr</code> element, then
   switch the <span>insertion mode</span> to "<span title="insertion
   mode: in row">in row</span>" and abort these steps.</li>

   <li>If <var title="">node</var> is a <code>tbody</code>,
   <code>thead</code>, or <code>tfoot</code> element, then switch the
   <span>insertion mode</span> to "<span title="insertion mode: in
   table body">in table body</span>" and abort these steps.</li>

   <li>If <var title="">node</var> is a <code>caption</code> element,
   then switch the <span>insertion mode</span> to "<span
   title="insertion mode: in caption">in caption</span>" and abort
   these steps.</li>

   <li>If <var title="">node</var> is a <code>colgroup</code> element,
   then switch the <span>insertion mode</span> to "<span
   title="insertion mode: in column group">in column group</span>" and
   abort these steps. (<span>fragment case</span>)</li>

   <li>If <var title="">node</var> is a <code>table</code> element,
   then switch the <span>insertion mode</span> to "<span
   title="insertion mode: in table">in table</span>" and abort these
   steps.</li>

   <li>If <var title="">node</var> is a <code>head</code> element,
   then switch the <span>insertion mode</span> to "<span
   title="insertion mode: in body">in body</span>" ("<span
   title="insertion mode: in body">in body</span>"! <em> not "<span
   title="insertion mode: in head">in head</span>"</em>!) and abort
   these steps. (<span>fragment case</span>)</li> <!-- This is only
   here for now in case people think that the spec accidentally
   omitted it and try to "fix" it. Note that noscript-in-head is also
   handled this way. This is all intentional. The only thing it
   doesn't handle is the scripting-enabled fragment parsing case for a
   <head> element containing a <noscript> which itself contains
   something other than a <link> or a <style> element; you'd expect
   that to break out of the <noscript> but it doesn't. This is an edge
   case that doesn't affect the spec, since the algorithm for fragment
   parsing is only used for innerHTML, where we know scripting is
   enabled. -->

   <li>If <var title="">node</var> is a <code>body</code> element,
   then switch the <span>insertion mode</span> to "<span
   title="insertion mode: in body">in body</span>" and abort these
   steps.</li>

   <li>If <var title="">node</var> is a <code>frameset</code> element,
   then switch the <span>insertion mode</span> to "<span
   title="insertion mode: in frameset">in frameset</span>" and abort
   these steps. (<span>fragment case</span>)</li>

   <li>If <var title="">node</var> is an <code>html</code> element,
   then: if the <span><code title="">head</code> element
   pointer</span> is null, switch the <span>insertion mode</span> to
   "<span title="insertion mode: before head">before head</span>",
   otherwise, switch the <span>insertion mode</span> to "<span
   title="insertion mode: after head">after head</span>". In either
   case, abort these steps. (<span>fragment case</span>)</li> <!-- XXX
   can the head element pointer ever be non-null when we're going
   through these steps? -->

   <li>If <var title="">last</var> is true, then switch the
   <span>insertion mode</span> to "<span title="insertion mode: in
   body">in body</span>" and abort these steps. (<span>fragment
   case</span>)</li>

   <li>Let <var title="">node</var> now be the node before <var
   title="">node</var> in the <span>stack of open
   elements</span>.</li>

   <li>Return to step 3.</li>

  </ol>

<!--When you don't have to handle the fragment case, you can use this
simplified explanation instead:

  <ol>

   <li><p>If the <span>stack of open elements</span> <span title="has
   an element in table scope">has a <code>td</code> or <code>th</code>
   element in table scope</span>, then switch the <span>insertion
   mode</span> to "<span title="insertion mode: in cell">in
   cell</span>".</p></li>

   <li><p>Otherwise, if the <span>stack of open elements</span> <span
   title="has an element in table scope">has a <code>tr</code> element
   in table scope</span>, then switch the <span>insertion mode</span>
   to "<span title="insertion mode: in row">in row</span>".</p></li>

   <li><p>Otherwise, if the <span>stack of open elements</span> <span
   title="has an element in table scope">has a <code>tbody</code>,
   <code>tfoot</code>, or <code>thead</code> element in table
   scope</span>, then switch the <span>insertion mode</span> to "<span
   title="insertion mode: in table body">in table
   body</span>".</p></li>

   <li><p>Otherwise, if the <span>stack of open elements</span> <span
   title="has an element in table scope">has a <code>caption</code>
   element in table scope</span>, then switch the <span>insertion
   mode</span> to "<span title="insertion mode: in caption">in
   caption</span>".</p></li>

   ( you can't reach this point with a colgroup element on the
   stack )

   <li><p>Otherwise, if the <span>stack of open elements</span> <span
   title="has an element in table scope">has a <code>table</code>
   element in table scope</span>, then switch the <span>insertion
   mode</span> to "<span title="insertion mode: in table">in
   table</span>".</p></li>

   <li><p>Otherwise, switch the <span>insertion mode</span> to "<span
   title="insertion mode: in body">in body</span>".</p></li>

  </ol>
-->


  <h5>The "<dfn title="insertion mode: initial">initial</dfn>" insertion mode</h5>

  <p>When the <span>insertion mode</span> is "<span title="insertion
  mode: initial">initial</span>", tokens must be handled as follows:</p>

  <dl class="switch">

   <dt>A character token that is one of one of U+0009 CHARACTER
   TABULATION, U+000A LINE FEED (LF), U+000B LINE TABULATION, U+000C
   FORM FEED (FF), <!--U+000D CARRIAGE RETURN (CR),--> or U+0020
   SPACE</dt>
   <dd>
    <p>Ignore the token.</p>
   </dd>

   <dt>A comment token</dt>
   <dd>
    <p>Append a <code>Comment</code> node to the <code>Document</code>
    object with the <code title="">data</code> attribute set to the
    data given in the comment token.</p>
   </dd>

   <dt>A DOCTYPE token</dt>
   <dd>

    <p>If the DOCTYPE token's <code title="">name</code> does not
    case-insensitively match the string "<code title="">HTML</code>",
    or if the token's public identifier is not missing, or if the
    token's system identifier is not missing, then there is a
    <span>parse error</span>. Conformance checkers may, instead of
    reporting this error, switch to a conformance checking mode for
    another language (e.g. based on the DOCTYPE token a conformance
    checker could recognise that the document is an HTML4-era
    document, and defer to an HTML4 conformance checker.)</p>

    <p>Append a <code>DocumentType</code> node to the
    <code>Document</code> node, with the <code title="">name</code>
    attribute set to the name given in the DOCTYPE token; the <code
    title="">publicId</code> attribute set to the public identifier
    given in the DOCTYPE token, or the empty string if the public
    identifier was not set; the <code title="">systemId</code>
    attribute set to the system identifier given in the DOCTYPE token,
    or the empty string if the system identifier was not set; and the
    other attributes specific to <code>DocumentType</code> objects set
    to null and empty lists as appropriate. Associate the
    <code>DocumentType</code> node with the <code>Document</code>
    object so that it is returned as the value of the <code
    title="">doctype</code> attribute of the <code>Document</code>
    object.</p>

    <p id="quirks-mode-doctypes">Then, if the DOCTYPE
    token matches one of the conditions in the following list, then
    set the document to <span>quirks mode</span>:</p>

    <ul class="brief">
     <li> The <i>force-quirks flag</i> is set to <i>on</i>. </li>
     <li> The name is set to anything other than "<code title="">HTML</code>". </li>
     <li> The public identifier is set to: "<code title="">+//Silmaril//dtd html Pro v0r11 19970101//EN</code>" </li>
     <li> The public identifier is set to: "<code title="">-//AdvaSoft Ltd//DTD HTML 3.0 asWedit + extensions//EN</code>" </li>
     <li> The public identifier is set to: "<code title="">-//AS//DTD HTML 3.0 asWedit + extensions//EN</code>" </li>
     <li> The public identifier is set to: "<code title="">-//IETF//DTD HTML 2.0 Level 1//EN</code>" </li>
     <li> The public identifier is set to: "<code title="">-//IETF//DTD HTML 2.0 Level 2//EN</code>" </li>
     <li> The public identifier is set to: "<code title="">-//IETF//DTD HTML 2.0 Strict Level 1//EN</code>" </li>
     <li> The public identifier is set to: "<code title="">-//IETF//DTD HTML 2.0 Strict Level 2//EN</code>" </li>
     <li> The public identifier is set to: "<code title="">-//IETF//DTD HTML 2.0 Strict//EN</code>" </li>
     <li> The public identifier is set to: "<code title="">-//IETF//DTD HTML 2.0//EN</code>" </li>
     <li> The public identifier is set to: "<code title="">-//IETF//DTD HTML 2.1E//EN</code>" </li>
     <li> The public identifier is set to: "<code title="">-//IETF//DTD HTML 3.0//EN</code>" </li>
     <li> The public identifier is set to: "<code title="">-//IETF//DTD HTML 3.0//EN//</code>" </li>
     <li> The public identifier is set to: "<code title="">-//IETF//DTD HTML 3.2 Final//EN</code>" </li>
     <li> The public identifier is set to: "<code title="">-//IETF//DTD HTML 3.2//EN</code>" </li>
     <li> The public identifier is set to: "<code title="">-//IETF//DTD HTML 3//EN</code>" </li>
     <li> The public identifier is set to: "<code title="">-//IETF//DTD HTML Level 0//EN</code>" </li>
     <li> The public identifier is set to: "<code title="">-//IETF//DTD HTML Level 0//EN//2.0</code>" </li>
     <li> The public identifier is set to: "<code title="">-//IETF//DTD HTML Level 1//EN</code>" </li>
     <li> The public identifier is set to: "<code title="">-//IETF//DTD HTML Level 1//EN//2.0</code>" </li>
     <li> The public identifier is set to: "<code title="">-//IETF//DTD HTML Level 2//EN</code>" </li>
     <li> The public identifier is set to: "<code title="">-//IETF//DTD HTML Level 2//EN//2.0</code>" </li>
     <li> The public identifier is set to: "<code title="">-//IETF//DTD HTML Level 3//EN</code>" </li>
     <li> The public identifier is set to: "<code title="">-//IETF//DTD HTML Level 3//EN//3.0</code>" </li>
     <li> The public identifier is set to: "<code title="">-//IETF//DTD HTML Strict Level 0//EN</code>" </li>
     <li> The public identifier is set to: "<code title="">-//IETF//DTD HTML Strict Level 0//EN//2.0</code>" </li>
     <li> The public identifier is set to: "<code title="">-//IETF//DTD HTML Strict Level 1//EN</code>" </li>
     <li> The public identifier is set to: "<code title="">-//IETF//DTD HTML Strict Level 1//EN//2.0</code>" </li>
     <li> The public identifier is set to: "<code title="">-//IETF//DTD HTML Strict Level 2//EN</code>" </li>
     <li> The public identifier is set to: "<code title="">-//IETF//DTD HTML Strict Level 2//EN//2.0</code>" </li>
     <li> The public identifier is set to: "<code title="">-//IETF//DTD HTML Strict Level 3//EN</code>" </li>
     <li> The public identifier is set to: "<code title="">-//IETF//DTD HTML Strict Level 3//EN//3.0</code>" </li>
     <li> The public identifier is set to: "<code title="">-//IETF//DTD HTML Strict//EN</code>" </li>
     <li> The public identifier is set to: "<code title="">-//IETF//DTD HTML Strict//EN//2.0</code>" </li>
     <li> The public identifier is set to: "<code title="">-//IETF//DTD HTML Strict//EN//3.0</code>" </li>
     <li> The public identifier is set to: "<code title="">-//IETF//DTD HTML//EN</code>" </li>
     <li> The public identifier is set to: "<code title="">-//IETF//DTD HTML//EN//2.0</code>" </li>
     <li> The public identifier is set to: "<code title="">-//IETF//DTD HTML//EN//3.0</code>" </li>
     <li> The public identifier is set to: "<code title="">-//Metrius//DTD Metrius Presentational//EN</code>" </li>
     <li> The public identifier is set to: "<code title="">-//Microsoft//DTD Internet Explorer 2.0 HTML Strict//EN</code>" </li>
     <li> The public identifier is set to: "<code title="">-//Microsoft//DTD Internet Explorer 2.0 HTML//EN</code>" </li>
     <li> The public identifier is set to: "<code title="">-//Microsoft//DTD Internet Explorer 2.0 Tables//EN</code>" </li>
     <li> The public identifier is set to: "<code title="">-//Microsoft//DTD Internet Explorer 3.0 HTML Strict//EN</code>" </li>
     <li> The public identifier is set to: "<code title="">-//Microsoft//DTD Internet Explorer 3.0 HTML//EN</code>" </li>
     <li> The public identifier is set to: "<code title="">-//Microsoft//DTD Internet Explorer 3.0 Tables//EN</code>" </li>
     <li> The public identifier is set to: "<code title="">-//Netscape Comm. Corp.//DTD HTML//EN</code>" </li>
     <li> The public identifier is set to: "<code title="">-//Netscape Comm. Corp.//DTD Strict HTML//EN</code>" </li>
     <li> The public identifier is set to: "<code title="">-//O'Reilly and Associates//DTD HTML 2.0//EN</code>" </li>
     <li> The public identifier is set to: "<code title="">-//O'Reilly and Associates//DTD HTML Extended 1.0//EN</code>" </li>
     <li> The public identifier is set to: "<code title="">-//O'Reilly and Associates//DTD HTML Extended Relaxed 1.0//EN</code>" </li>
     <li> The public identifier is set to: "<code title="">-//SoftQuad Software//DTD HoTMetaL PRO 6.0::19990601::extensions to HTML 4.0//EN</code>" </li>
     <li> The public identifier is set to: "<code title="">-//SoftQuad//DTD HoTMetaL PRO 4.0::19971010::extensions to HTML 4.0//EN</code>" </li>
     <li> The public identifier is set to: "<code title="">-//Spyglass//DTD HTML 2.0 Extended//EN</code>" </li>
     <li> The public identifier is set to: "<code title="">-//SQ//DTD HTML 2.0 HoTMetaL + extensions//EN</code>" </li>
     <li> The public identifier is set to: "<code title="">-//Sun Microsystems Corp.//DTD HotJava HTML//EN</code>" </li>
     <li> The public identifier is set to: "<code title="">-//Sun Microsystems Corp.//DTD HotJava Strict HTML//EN</code>" </li>
     <li> The public identifier is set to: "<code title="">-//W3C//DTD HTML 3 1995-03-24//EN</code>" </li>
     <li> The public identifier is set to: "<code title="">-//W3C//DTD HTML 3.2 Draft//EN</code>" </li>
     <li> The public identifier is set to: "<code title="">-//W3C//DTD HTML 3.2 Final//EN</code>" </li>
     <li> The public identifier is set to: "<code title="">-//W3C//DTD HTML 3.2//EN</code>" </li>
     <li> The public identifier is set to: "<code title="">-//W3C//DTD HTML 3.2S Draft//EN</code>" </li>
     <li> The public identifier is set to: "<code title="">-//W3C//DTD HTML 4.0 Frameset//EN</code>" </li>
     <li> The public identifier is set to: "<code title="">-//W3C//DTD HTML 4.0 Transitional//EN</code>" </li>
     <li> The public identifier is set to: "<code title="">-//W3C//DTD HTML Experimental 19960712//EN</code>" </li>
     <li> The public identifier is set to: "<code title="">-//W3C//DTD HTML Experimental 970421//EN</code>" </li>
     <li> The public identifier is set to: "<code title="">-//W3C//DTD W3 HTML//EN</code>" </li>
     <li> The public identifier is set to: "<code title="">-//W3O//DTD W3 HTML 3.0//EN</code>" </li>
     <li> The public identifier is set to: "<code title="">-//W3O//DTD W3 HTML 3.0//EN//</code>" </li>
     <li> The public identifier is set to: "<code title="">-//W3O//DTD W3 HTML Strict 3.0//EN//</code>" </li>
     <li> The public identifier is set to: "<code title="">-//WebTechs//DTD Mozilla HTML 2.0//EN</code>" </li>
     <li> The public identifier is set to: "<code title="">-//WebTechs//DTD Mozilla HTML//EN</code>" </li>
     <li> The public identifier is set to: "<code title="">-/W3C/DTD HTML 4.0 Transitional/EN</code>" </li>
     <li> The public identifier is set to: "<code title="">HTML</code>" </li>
     <li> The system identifier is set to: "<code title="">http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd</code>" </li>
     <li> The system identifier is missing and the public identifier is set to: "<code title="">-//W3C//DTD HTML 4.01 Frameset//EN</code>" </li>
     <li> The system identifier is missing and the public identifier is set to: "<code title="">-//W3C//DTD HTML 4.01 Transitional//EN</code>" </li>
    </ul>

    <p>Otherwise, if the DOCTYPE
    token matches one of the conditions in the following list, then
    set the document to <span>limited quirks mode</span>:</p>

    <ul class="brief">
     <li> The public identifier is set to: "<code title="">-//W3C//DTD XHTML 1.0 Frameset//EN</code>" </li>
     <li> The public identifier is set to: "<code title="">-//W3C//DTD XHTML 1.0 Transitional//EN</code>" </li>
     <li> The system identifier is not missing and the public identifier is set to: "<code title="">-//W3C//DTD HTML 4.01 Frameset//EN</code>" </li>
     <li> The system identifier is not missing and the public identifier is set to: "<code title="">-//W3C//DTD HTML 4.01 Transitional//EN</code>" </li>
    </ul>

    <p>The name, system identifier, and public identifier strings must
    be compared to the values given in the lists above in a
    case-insensitive<!-- ASCII --> manner.</p>

    <p>Then, switch the <span>insertion mode</span> to "<span
    title="insertion mode: before html">before html</span>".</p>

   </dd>

   <dt>Anything else</dt>
   <dd>

    <p><span>Parse error</span>.</p>

    <p>Set the document to <span>quirks mode</span>.</p>

    <p>Switch the <span>insertion mode</span> to "<span
    title="insertion mode: before html">before html</span>", then
    reprocess the current token.</p>

   </dd>

  </dl>


  <h5>The "<dfn title="insertion mode: before html">before html</dfn>" insertion mode</h5>

  <p>When the <span>insertion mode</span> is "<span title="insertion
  mode: before html">before html</span>", tokens must be handled as follows:</p>

  <dl class="switch">

   <dt>A DOCTYPE token</dt>
   <dd>
    <p><span>Parse error</span>. Ignore the token.</p>
   </dd>

   <dt>A comment token</dt>
   <dd>
    <p>Append a <code>Comment</code> node to the <code>Document</code>
    object with the <code title="">data</code> attribute set to the
    data given in the comment token.</p>
   </dd>

   <dt>A character token that is one of one of U+0009 CHARACTER
   TABULATION, U+000A LINE FEED (LF), U+000B LINE TABULATION, U+000C
   FORM FEED (FF), <!--U+000D CARRIAGE RETURN (CR),--> or U+0020
   SPACE</dt>
   <dd>
    <p>Ignore the token.</p>
   </dd>

   <dt>A start tag whose tag name is "html"</dt>
   <dd>

    <p><span>Create an element for the token</span>. Append it to the
    <code>Document</code> object. Put this element in the <span>stack
    of open elements</span>.</p>

    <p id="parser-appcache">If the token has an attribute "manifest",
    then run the <span
    title="concept-appcache-init-with-attribute">application cache
    selection algorithm</span> with the value of that attribute as the
    manifest URI. Otherwise, run the <span
    title="concept-appcache-init-no-attribute">application cache
    selection algorithm</span> with no manifest.</p>

    <p>Switch the <span>insertion mode</span> to "<span
    title="insertion mode: before head">before head</span>".</p>

   </dd>

   <dt>Anything else</dt>
   <dd>

    <p>Create an <code>HTMLElement</code> node with the tag name
    <code>html</code>, in the <span>HTML namespace</span>. Append it
    to the <code>Document</code> object. Put this element in the
    <span>stack of open elements</span>.</p>

    <p>Run the <span
    title="concept-appcache-init-no-attribute">application cache
    selection algorithm</span> with no manifest.</p>

    <p>Switch the <span>insertion mode</span> to "<span
    title="insertion mode: before head">before head</span>", then
    reprocess the current token.</p>

    <p class="big-issue">Should probably make end tags be ignored, so
    that "&lt;/head>&lt;!-- -->&lt;html>" puts the comment before the
    root node (or should we?)</p>

   </dd>

  </dl>

  <p>The root element can end up being removed from the
  <code>Document</code> object, e.g. by scripts; nothing in particular
  happens in such cases, content continues being appended to the nodes
  as described in the next section.</p>


  <h5>The "<dfn title="insertion mode: before head">before head</dfn>" insertion mode</h5>

  <p>When the <span>insertion mode</span> is "<span title="insertion
  mode: before head">before head</span>", tokens must be handled as follows:</p>

  <dl class="switch">

   <dt>A character token that is one of one of U+0009
   CHARACTER TABULATION, U+000A LINE FEED (LF), U+000B LINE
   TABULATION, U+000C FORM FEED (FF), <!--U+000D CARRIAGE RETURN (CR),-->
   or U+0020 SPACE</dt>
   <dd>
    <p>Ignore the token.</p> <!-- :-( -->
   </dd>

   <dt>A comment token</dt>
   <dd>
    <p>Append a <code>Comment</code> node to the <span>current
    node</span> with the <code title="">data</code> attribute set to
    the data given in the comment token.</p>
   </dd>

   <dt>A DOCTYPE token</dt>
   <dd>
    <p><span>Parse error</span>. Ignore the token.</p>
   </dd>

   <dt>A start tag whose tag name is "html"</dt>
   <dd>
    <p>Process the token <span>using the rules for</span> the "<span
    title="insertion mode: in body">in body</span>" <span>insertion
    mode</span>.</p>
   </dd>

   <dt>A start tag whose tag name is "head"</dt>
   <dd>

    <p><span>Create an element for the token</span>.</p>

    <p>Set the <span><code title="">head</code> element
    pointer</span> to this new element node.</p>

    <p>Append the new element to the <span>current node</span> and
    push it onto the <span>stack of open elements</span>.</p>

    <p>Switch the <span>insertion mode</span> to "<span
    title="insertion mode: in head">in head</span>".</p>

   </dd>

   <dt>An end tag whose tag name is one of: "head", "body", "html", "p", "br"</dt>
   <dd>

    <p>Act as if a start tag token with the tag name "head" and no
    attributes had been seen, then reprocess the current
    token.</p>

   </dd>

   <dt>Any other end tag</dt>
   <dd>

    <p><span>Parse error</span>. Ignore the token.</p>

    <p class="big-issue">Do we really want to ignore end tags here?</p>

   </dd>

   <dt>Anything else</dt>
   <dd>

    <p>Act as if a start tag token with the tag name "head" and no
    attributes had been seen, then reprocess the current
    token.</p>

    <p class="note">This will result in an empty <code>head</code>
    element being generated, with the current token being
    reprocessed in the "<span title="insertion mode: after
    head">after head</span>" <span>insertion mode</span>.</p>

   </dd>

  </dl>


  <h5 id="parsing-main-inhead">The "<dfn title="insertion mode: in head">in head</dfn>" insertion mode</h5>

  <p>When the <span>insertion mode</span> is "<span title="insertion
  mode: in head">in head</span>", tokens must be handled as follows:</p>

  <dl class="switch">

   <dt>A character token that is one of one of U+0009
   CHARACTER TABULATION, U+000A LINE FEED (LF), U+000B LINE
   TABULATION, U+000C FORM FEED (FF), <!--U+000D CARRIAGE RETURN (CR),-->
   or U+0020 SPACE</dt>
   <dd>
    <p><span title="insert a character">Insert the character</span> into
    the <span>current node</span>.</p>
   </dd>

   <dt>A comment token</dt>
   <dd>
    <p>Append a <code>Comment</code> node to the <span>current
    node</span> with the <code title="">data</code> attribute set to
    the data given in the comment token.</p>
   </dd>

   <dt>A DOCTYPE token</dt>
   <dd>
    <p><span>Parse error</span>. Ignore the token.</p>
   </dd>

   <dt>A start tag whose tag name is "html"</dt>
   <dd>
    <p>Process the token <span>using the rules for</span> the "<span
    title="insertion mode: in body">in body</span>" <span>insertion
    mode</span>.</p>
   </dd>

   <dt>A start tag whose tag name is one of: "base", "link"</dt>
   <dd>
    <p><span>Insert an HTML element</span> for the token. Immediately
    pop the <span>current node</span> off the <span>stack of open
    elements</span>.</p>
   </dd>

   <dt>A start tag whose tag name is "meta"</dt>
   <dd>
    <p><span>Insert an HTML element</span> for the token. Immediately
    pop the <span>current node</span> off the <span>stack of open
    elements</span>.</p>

    <p id="meta-charset-during-parse">If the element has a <code
    title="attr-meta-charset">charset</code> attribute, and its
    value is a supported encoding, and the <span
    title="concept-encoding-confidence">confidence</span> is
    currently <i>tentative</i>, then <span>change the
    encoding</span> to the encoding given by the value of the
    <code title="attr-meta-charset">charset</code> attribute.</p>

    <p>Otherwise, if the element has a <code
    title="attr-meta-charset">content</code> attribute, and
    applying the <span>algorithm for extracting an encoding from a
    Content-Type</span> to its value returns a supported encoding
    <var title="">encoding</var>, and the <span
    title="concept-encoding-confidence">confidence</span> is
    currently <i>tentative</i>, then <span>change the
    encoding</span> to the encoding <var
    title="">encoding</var>.</p>

   </dd>

   <dt>A start tag whose tag name is "title"</dt>
   <dd>
    <p>Follow the <span>generic RCDATA parsing algorithm</span>.</p>
   </dd>

   <dt>A start tag whose tag name is "noscript", if <span>scripting is enabled</span>:</dt>
   <dt>A start tag whose tag name is "style"</dt>
   <dd>
    <p>Follow the <span>generic CDATA parsing algorithm</span>.</p>
   </dd>

   <dt>A start tag whose tag name is "noscript", if <span>scripting is disabled</span>:</dt>
   <dd>

    <p><span>Insert an HTML element</span> for the token.</p>

    <p>Switch the <span>insertion mode</span> to "<span
    title="insertion mode: in head noscript">in head
    noscript</span>".</p>

   </dd>

   <dt id="scriptTag">A start tag whose tag name is "script"</dt>
   <dd>

    <p><span>Create an element for the token</span>.</p>

    <p>Mark the element as being
    <span>"parser-inserted"</span>. This ensures that, if the
    script is external, any <code
    title="dom-document-write-HTML">document.write()</code> calls
    in the script will execute in-line, instead of blowing the
    document away, as would happen in most other cases.</p>

    <p>Switch the tokeniser's <span>content model flag</span> to
    the CDATA state.</p>

    <p>Then, collect all the character tokens that the tokeniser
    returns until it returns a token that is not a character
    token, or until it stops tokenising.</p>

    <p>If this process resulted in a collection of character
    tokens, append a single <code>Text</code> node to the
    <code>script</code> element node whose contents is the
    concatenation of all those tokens' characters.</p>

    <p>The tokeniser's <span>content model flag</span> will have
    switched back to the PCDATA state.</p>

    <p>If the next token is not an end tag token with the tag name
    "script", then this is a <span>parse error</span>; mark the
    <code>script</code> element as <span>"already
    executed"</span>. Otherwise, the token is the
    <code>script</code> element's end tag, so ignore it.</p>

    <p>If the parser was originally created for the <span>HTML
    fragment parsing algorithm</span>, then mark the
    <code>script</code> element as <span>"already
    executed"</span>, and skip the rest of the processing
    described for this token (including the part below where
    "<span title="the script that will execute as soon as the
    parser resumes">scripts that will execute as soon as the
    parser resumes</span>" are executed). (<span>fragment
    case</span>)</p>

    <p class="note">Marking the <code>script</code> element as
    "already executed" prevents it from executing when it is
    inserted into the document a few paragraphs below. Thus,
    scripts missing their end tags and scripts that were inserted
    using <code title="dom-innerHTML-HTML">innerHTML</code> aren't
    executed.</p>

    <p>Let the <var title="">old insertion point</var> have the
    same value as the current <span>insertion point</span>. Let
    the <span>insertion point</span> be just before the <span>next
    input character</span>.</p>

    <p>Append the new element to the <span>current node</span>.
    <span title="running a script">Special processing occurs when
    a <code>script</code> element is inserted into a
    document</span> that might cause some script to execute, which
    might cause <span title="dom-document-write-HTML">new
    characters to be inserted into the tokeniser</span>.</p>

    <p>Let the <span>insertion point</span> have the value of the
    <var title="">old insertion point</var>. (In other words,
    restore the <span>insertion point</span> to the value it had
    before the previous paragraph. This value might be the
    "undefined" value.)</p>

    <p id="scriptTagParserResumes">At this stage, if there is
    <span title="the script that will execute as soon as the
    parser resumes">a script that will execute as soon as the
    parser resumes</span>, then:</p>

    <dl class="switch">

     <dt>If the tree construction stage is <a
     href="#nestedParsing">being called reentrantly</a>, say from
     a call to <code
     title="dom-document-write-HTML">document.write()</code>:</dt>

     <dd><p>Abort the processing of any nested invokations of the
     tokeniser, yielding control back to the caller. (Tokenisation
     will resume when the caller returns to the "outer" tree
     construction stage.)</p></dd>

     <dt>Otherwise:</dt>

     <dd>

      <p>Follow these steps:</p>

      <ol>

       <li><p>Let <var title="">the script</var> be <span>the
       script that will execute as soon as the parser
       resumes</span>. There is no longer <span title="the script
       that will execute as soon as the parser resumes">a script
       that will execute as soon as the parser
       resumes</span>.</p></li>

       <li><p><span>Pause</span> until the script has <span>completed
       loading</span><!-- XXX xref -->.</p></li>

       <li><p>Let the <span>insertion point</span> be just before the
       <span>next input character</span>.</p></li>

       <li><p><span title="executing a script block">Execute the
       script</span>.</p></li>

       <li><p>Let the <span>insertion point</span> be undefined
       again.</p></li>

       <li><p>If there is once again <span title="the script that
       will execute as soon as the parser resumes">a script that
       will execute as soon as the parser resumes</span>, then
       repeat these steps from step 1.</p></li>

      </ol>

     </dd>

    </dl>

   </dd>

   <dt>An end tag whose tag name is "head"</dt>
   <dd>

    <p>Pop the <span>current node</span> (which will be the
    <code>head</code> element) off the <span>stack of open
    elements</span>.</p>

    <p>Switch the <span>insertion mode</span> to "<span
    title="insertion mode: after head">after head</span>".</p>

   </dd>

   <dt>An end tag whose tag name is one of: "body", "html", "p", "br"</dt>
   <dd>
    <p>Act as described in the "anything else" entry below.</p>
   </dd>

   <dt>A start tag whose tag name is "head"</dt>
   <dt>Any other end tag</dt>
   <dd>
    <p><span>Parse error</span>. Ignore the token.</p>
   </dd>

   <dt>Anything else</dt>
   <dd>

    <!-- can't get here with an EOF and a fragment case -->

    <p>Act as if an end tag token with the tag name "head" had
    been seen, and reprocess the current token.</p>

    <p class="big-issue">In certain UAs, <a
    href="https://bugzilla.mozilla.org/attachment.cgi?id=180157&amp;action=view">some
    elements</a> don't trigger the "in body" mode straight away,
    but instead get put into the head. Do we want to copy
    that?</p>

   </dd>

  </dl>


  <h5 id="parsing-main-inheadnoscript">The "<dfn title="insertion mode: in head noscript">in head noscript</dfn>" insertion mode</h5>

  <p>When the <span>insertion mode</span> is "<span title="insertion
  mode: in head noscript">in head noscript</span>", tokens must be handled as follows:</p>

  <dl class="switch">

   <dt>A DOCTYPE token</dt>
   <dd>
    <p><span>Parse error</span>. Ignore the token.</p>
   </dd>

   <dt>A start tag whose tag name is "html"</dt>
   <dd>
    <p>Process the token <span>using the rules for</span> the "<span
    title="insertion mode: in body">in body</span>" <span>insertion
    mode</span>.</p>
   </dd>

   <dt>An end tag whose tag name is "noscript"</dt>
   <dd>

    <p>Pop the <span>current node</span> (which will be a
    <code>noscript</code> element) from the <span>stack of open
    elements</span>; the new <span>current node</span> will be a
    <code>head</code> element.</p>

    <p>Switch the <span>insertion mode</span> to "<span
    title="insertion mode: in head">in head</span>".</p>

   </dd>

   <dt>A character token that is one of one of U+0009
   CHARACTER TABULATION, U+000A LINE FEED (LF), U+000B LINE
   TABULATION, U+000C FORM FEED (FF), <!--U+000D CARRIAGE RETURN (CR),-->
   or U+0020 SPACE</dt>
   <dt>A comment token</dt>
   <dt>A start tag whose tag name is one of: "link", "meta", "style"</dt>
   <dd>
    <p>Process the token <span>using the rules for</span> the "<span
    title="insertion mode: in head">in head</span>" <span>insertion
    mode</span>.</p>
   </dd>

   <dt>An end tag whose tag name is one of: "p", "br"</dt>
   <dd>
    <p>Act as described in the "anything else" entry below.</p>
   </dd>

   <dt>A start tag whose tag name is one of: "head", "noscript"</dt>
   <dt>Any other end tag</dt>
   <dd>
    <p><span>Parse error</span>. Ignore the token.</p>
   </dd>

   <dt>Anything else</dt>
   <dd>

    <!-- can't get here with an EOF and a fragment case -->

    <p><span>Parse error</span>. Act as if an end tag with the tag
    name "noscript" had been seen and reprocess the current
    token.</p>

   </dd>

  </dl>


  <h5>The "<dfn title="insertion mode: after head">after head</dfn>" insertion mode</h5>

  <p>When the <span>insertion mode</span> is "<span title="insertion
  mode: after head">after head</span>", tokens must be handled as follows:</p>

  <dl class="switch">

   <dt>A character token that is one of one of U+0009
   CHARACTER TABULATION, U+000A LINE FEED (LF), U+000B LINE
   TABULATION, U+000C FORM FEED (FF), <!--U+000D CARRIAGE RETURN (CR),-->
   or U+0020 SPACE</dt>
   <dd>
    <p><span title="insert a character">Insert the character</span> into
    the <span>current node</span>.</p>
   </dd>

   <dt>A comment token</dt>
   <dd>
    <p>Append a <code>Comment</code> node to the <span>current
    node</span> with the <code title="">data</code> attribute set to
    the data given in the comment token.</p>
   </dd>

   <dt>A DOCTYPE token</dt>
   <dd>
    <p><span>Parse error</span>. Ignore the token.</p>
   </dd>

   <dt>A start tag whose tag name is "html"</dt>
   <dd>
    <p>Process the token <span>using the rules for</span> the "<span
    title="insertion mode: in body">in body</span>" <span>insertion
    mode</span>.</p>
   </dd>

   <dt>A start tag whose tag name is "body"</dt>
   <dd>

    <p><span>Insert an HTML element</span> for the token.</p>

    <p>Switch the <span>insertion mode</span> to "<span
    title="insertion mode: in body">in body</span>".</p>

   </dd>

   <dt>A start tag whose tag name is "frameset"</dt>
   <dd>

    <p><span>Insert an HTML element</span> for the token.</p>

    <p>Switch the <span>insertion mode</span> to "<span
    title="insertion mode: in frameset">in frameset</span>".</p>

   </dd>

   <dt>A start tag token whose tag name is one of: "base", "link",
   "meta", "script", "style", "title"</dt>
   <dd>

    <p><span>Parse error</span>.</p>

    <p>Push the node pointed to by the <span><code
    title="">head</code> element pointer</span> onto the
    <span>stack of open elements</span>.</p>

    <p>Process the token <span>using the rules for</span> the "<span
    title="insertion mode: in head">in head</span>" <span>insertion
    mode</span>.</p>

    <p>Pop the <span>current node</span> (which will be the node
    pointed to by the <span><code title="">head</code> element
    pointer</span>) off the <span>stack of open
    elements</span>.</p>

   </dd>

   <dt>Anything else</dt>
   <dd>
    <p>Act as if a start tag token with the tag name "body" and no
    attributes had been seen, and then reprocess the current
    token.</p>
   </dd>

  </dl>


  <h5 id="parsing-main-inbody">The "<dfn title="insertion mode: in body">in body</dfn>" insertion mode</h5>

  <p>When the <span>insertion mode</span> is "<span title="insertion
  mode: in body">in body</span>", tokens must be handled as follows:</p>

  <dl class="switch">

   <dt>A character token</dt>
   <dd>

    <p><span>Reconstruct the active formatting elements</span>, if
    any.</p>

    <p><span title="insert a character">Insert the token's
    character</span> into the <span>current node</span>.</p>

   </dd>

   <dt>A comment token</dt>
   <dd>
    <p>Append a <code>Comment</code> node to the <span>current
    node</span> with the <code title="">data</code> attribute set to
    the data given in the comment token.</p>
   </dd>

   <dt>A DOCTYPE token</dt>
   <dd>
    <p><span>Parse error</span>. Ignore the token.</p>
   </dd>

   <dt>A start tag whose tag name is "html"</dt>
   <dd>
    <p><span>Parse error</span>. For each attribute on the token,
    check to see if the attribute is already present on the top
    element of the <span>stack of open elements</span>. If it is not,
    add the attribute and its corresponding value to that element.</p>
   </dd>

   <dt>A start tag token whose tag name is one of: "base", "link",
   "meta", "script", "style", "title"</dt>
   <dd>
    <p>Process the token <span>using the rules for</span> the "<span
    title="insertion mode: in head">in head</span>" <span>insertion
    mode</span>.</p>
   </dd>

   <dt>A start tag whose tag name is "body"</dt>
   <dd>

    <p><span>Parse error</span>.</p>

    <p>If the second element on the <span>stack of open
    elements</span> is not a <code>body</code> element, or, if the
    <span>stack of open elements</span> has only one node on it,
    then ignore the token. (<span>fragment case</span>)</p>

    <p>Otherwise, for each attribute on the token, check to see if
    the attribute is already present on the <code>body</code>
    element (the second element) on the <span>stack of open
    elements</span>. If it is not, add the attribute and its
    corresponding value to that element.</p>

   </dd>

   <dt>An end-of-file token</dt>
   <dd>

    <p>If there is a node in the <span>stack of open elements</span>
    that is not either a <code>dd</code> element, a <code>dt</code>
    element, an <code>li</code> element, a <code>p</code> element, a
    <code>tbody</code> element, a <code>td</code> element, a
    <code>tfoot</code> element, a <code>th</code> element, a
    <code>thead</code> element, a <code>tr</code> element, the
    <code>body</code> element, or the <code>html</code> element, then
    this is a <span>parse error</span>.</p> <!-- (some of those are
    fragment cases) -->

    <p><span>Stop parsing</span>.</p>

   </dd>

   <dt>An end tag whose tag name is "body"</dt>
   <dd>

    <p>If the <span>stack of open elements</span> does not <span
    title="has an element in scope">have a <code>body</code> element
    in scope</span>, this is a <span>parse error</span>; ignore the
    token.</p>

    <p>Otherwise, if there is a node in the <span>stack of open
    elements</span> that is not either a <code>dd</code> element, a
    <code>dt</code> element, an <code>li</code> element, a
    <code>p</code> element, a <code>tbody</code> element, a
    <code>td</code> element, a <code>tfoot</code> element, a
    <code>th</code> element, a <code>thead</code> element, a
    <code>tr</code> element, the <code>body</code> element, or the
    <code>html</code> element, then this is a <span>parse
    error</span>.</p> <!-- (some of those are fragment cases) -->

    <!-- the insertion mode here is forcibly "in body". -->

    <p>Switch the <span>insertion mode</span> to "<span
    title="insertion mode: after body">after body</span>". Otherwise,
    ignore the token.</p>

   </dd>

   <dt>An end tag whose tag name is "html"</dt>
   <dd>

    <p>Act as if an end tag with tag name "body" had been seen,
    then, if that token wasn't ignored, reprocess the current
    token.</p>

    <p class="note">The fake end tag token here can only be
    ignored in the <span>fragment case</span>.</p>

   </dd>

   <dt>A start tag whose tag name is one of: "address", "blockquote",
   "center", "dir", "div", "dl", "fieldset", "h1", "h2", "h3", "h4",
   "h5", "h6", "menu", "ol", "p", "ul"</dt>
   <dd>

    <p class="big-issue">This doesn't match browsers.</p>
    <!-- XXX <p><i><p>: http://software.hixie.ch/utilities/js/live-dom-viewer/?%3C!DOCTYPE%20html%3E%3Cp%3E%3Ci%3E%3Cp%3E%3C%2Fp%3E%3C%2Fi%3E%3C%2Fp%3E -->
    <!-- XXX <p><i><div><p>: http://software.hixie.ch/utilities/js/live-dom-viewer/?%3C!DOCTYPE%20html%3E%3Cp%3E%3Ci%3E%3Cdiv%3E%3Cp%3E%3C%2Fp%3E%3C%2Fdiv%3E%3C%2Fi%3E%3C%2Fp%3E -->

    <p>If the <span>stack of open elements</span> <span title="has
    an element in scope">has a <code>p</code> element in
    scope</span>, then act as if an end tag with the tag name
    <code>p</code> had been seen.</p>

    <!-- (only applies to <h1>-<h6>)
         Removed for compatibility with IE7, though all other
         browsers do it this way. If you do put this back, make
         sure to handle <h1><a><h2>, as in Webkit bug 12646.
         http://bugs.webkit.org/show_bug.cgi?id=12646
    <p>If the <span>stack of open elements</span> <span title="has
    an element in scope">has in scope</span> an element whose tag
    name is one of "h1", "h2", "h3", "h4", "h5", or "h6", then
    this is a <span>parse error</span>; pop elements from the
    stack until an element with one of those tag names has been
    popped from the stack.</p>
    -->

    <p><span>Insert an HTML element</span> for the token.</p>

   </dd>

   <dt>A start tag whose tag name is one of: "pre", "listing"</dt>
   <dd>

    <p>If the <span>stack of open elements</span> <span title="has
    an element in scope">has a <code>p</code> element in
    scope</span>, then act as if an end tag with the tag name
    <code>p</code> had been seen.</p>

    <p><span>Insert an HTML element</span> for the token.</p>

    <p>If the next token is a U+000A LINE FEED (LF) character
    token, then ignore that token and move on to the next
    one. (Newlines at the start of <code>pre</code> blocks are
    ignored as an authoring convenience.)</p>

   </dd>

   <dt>A start tag whose tag name is "form"</dt>
   <dd>

    <p>If the <span><code title="form">form</code> element
    pointer</span> is not null, ignore the token with a
    <span>parse error</span>.</p>

    <p>Otherwise:</p>

    <p>If the <span>stack of open elements</span> <span title="has
    an element in scope">has a <code>p</code> element in
    scope</span>, then act as if an end tag with the tag name
    <code>p</code> had been seen.</p>

    <p><span>Insert an HTML element</span> for the token, and set the
    <code title="form">form</code> element pointer to point to the
    element created.</p>

   </dd>

   <dt>A start tag whose tag name is "li"</dt>
   <dd>

    <p>If the <span>stack of open elements</span> <span title="has
    an element in scope">has a <code>p</code> element in
    scope</span>, then act as if an end tag with the tag name
    <code>p</code> had been seen.</p>

    <p>Run the following algorithm:</p>

    <ol>

     <li><p>Initialise <var title="">node</var> to be the <span>current
     node</span> (the bottommost node of the stack).</p></li>

     <li><p>If <var title="">node</var> is an <code>li</code>
     element, then pop all the nodes from the <span>current
     node</span> up to <var title="">node</var>, including <var
     title="">node</var>, then stop this algorithm. If more than
     one node is popped, then this is a <span>parse
     error</span>.</p></li>

     <li><p>If <var title="">node</var> is not in the
     <span>formatting</span> category, and is not in the
     <span>phrasing</span> category, and is not an
     <code>address</code> or <code>div</code> element, then stop
     this algorithm.</p></li> <!-- an element <foo> is in this
     list if the following markup:

         <!DOCTYPE html><body><ol><li><foo><li>

     ...results in the second <li> not being (in any way) a
     descendant of the first <li>, or if <foo> is a formatting
     element that gets reopened later. -->

     <li><p>Otherwise, set <var title="">node</var> to the previous entry
     in the <span>stack of open elements</span> and return to step
     2.</p></li>

    </ol>

    <p>Finally, <span>insert an HTML element</span> for the token.</p>

   </dd>

   <dt>A start tag whose tag name is one of: "dd", "dt"</dt>
   <dd>

    <p>If the <span>stack of open elements</span> <span title="has
    an element in scope">has a <code>p</code> element in
    scope</span>, then act as if an end tag with the tag name
    <code>p</code> had been seen.</p>

    <p>Run the following algorithm:</p>

    <ol>

     <li><p>Initialise <var title="">node</var> to be the <span>current
     node</span> (the bottommost node of the stack).</p></li>

     <li><p>If <var title="">node</var> is a <code>dd</code> or
     <code>dt</code> element, then pop all the nodes from the
     <span>current node</span> up to <var title="">node</var>,
     including <var title="">node</var>, then stop this algorithm.
     If more than one node is popped, then this is a <span>parse
     error</span>.</p></li>

     <li><p>If <var title="">node</var> is not in the
     <span>formatting</span> category, and is not in the
     <span>phrasing</span> category, and is not an
     <code>address</code> or <code>div</code> element, then stop
     this algorithm.</p></li> <!-- an element <foo> is in this
     list if the following markup:

         <!DOCTYPE html><body><ol><dt><foo><dt>

     ...results in the second <li> not being (in any way) a
     descendant of the first <li>, or if <foo> is a formatting
     element that gets reopened later. -->

     <li><p>Otherwise, set <var title="">node</var> to the previous entry
     in the <span>stack of open elements</span> and return to step
     2.</p></li>

    </ol>

    <p>Finally, <span>insert an HTML element</span> for the token.</p>

   </dd>

   <dt>A start tag whose tag name is "plaintext"</dt>
   <dd>

    <p>If the <span>stack of open elements</span> <span title="has
    an element in scope">has a <code>p</code> element in
    scope</span>, then act as if an end tag with the tag name
    <code>p</code> had been seen.</p>

    <p><span>Insert an HTML element</span> for the token.</p>

    <p>Switch the <span>content model flag</span> to the PLAINTEXT
    state.</p>

    <p class="note">Once a start tag with the tag name "plaintext"
    has been seen, that will be the last token ever seen other
    than character tokens (and the end-of-file token), because
    there is no way to switch the <span>content model flag</span>
    out of the PLAINTEXT state.</p>

   </dd>

   <dt>An end tag whose tag name is one of: "address",
   "blockquote", "center", "dir", "div", "dl", "fieldset",
   "listing", "menu", "ol", "pre", "ul"</dt>
   <dd>

    <p>If the <span>stack of open elements</span> does not <span
    title="has an element in scope">have an element in scope</span>
    with the same tag name as that of the token, then this is a
    <span>parse error</span>.</p>

    <p>Otherwise, run these steps:</p>

    <ol>

     <li><p><span>Generate implied end tags</span>.</p></li>

     <li><p>If the <span>current node</span> is not an element with
     the same tag name as that of the token, then this is a
     <span>parse error</span>.</p></li>

     <li><p>Pop elements from the <span>stack of open elements</span>
     until an element with the same tag name as the token has been
     popped from the stack.</p></li>

    </ol>

   </dd>

   <dt>An end tag whose tag name is "form"</dt>
   <dd>

    <p>Set the <span><code title="">form</code> element pointer</span>
    to null.</p>

    <p>If the <span>stack of open elements</span> does not <span
    title="has an element in scope">have an element in scope</span>
    with the same tag name as that of the token, then this is a
    <span>parse error</span>.</p>

    <p>Otherwise, run these steps:</p>

    <ol>

     <li><p><span>Generate implied end tags</span>.</p></li>

     <li><p>If the <span>current node</span> is not an element with
     the same tag name as that of the token, then this is a
     <span>parse error</span>.</p></li>

     <li><p>Pop elements from the <span>stack of open elements</span>
     until an element with the same tag name as the token has been
     popped from the stack.</p></li>

    </ol>

   </dd>

   <dt>An end tag whose tag name is "p"</dt>
   <dd>

    <p>If the <span>current node</span> is not a <code>p</code>
    element, then this is a <span>parse error</span>.</p>

    <p>If the <span>stack of open elements</span> <span title="has
    an element in scope">has a <code>p</code> element in
    scope</span>, then pop elements from this stack until the
    stack no longer <span title="has an element in scope">has a
    <code>p</code> element in scope</span>.</p>

    <p>Otherwise, act as if a start tag with the tag name
    <code>p</code> had been seen, then reprocess the current
    token.</p>

   </dd>

   <dt>An end tag whose tag name is one of: "dd", "dt", "li"</dt>
   <dd>

    <p>If the <span>stack of open elements</span> does not <span
    title="has an element in scope">have an element in scope</span>
    with the same tag name as that of the token, then this is a
    <span>parse error</span>.</p>

    <p>Otherwise, run these steps:</p>

    <ol>

     <li><p><span>Generate implied end tags</span>, except
     for elements with the same tag name as the token.</p></li>

     <li><p>If the <span>current node</span> is not an element with
     the same tag name as that of the token, then this is a
     <span>parse error</span>.</p></li>

     <li><p>Pop elements from the <span>stack of open elements</span>
     until an element with the same tag name as the token has been
     popped from the stack.</p></li>

    </ol>

   </dd>

   <dt>An end tag whose tag name is one of: "h1", "h2", "h3",
   "h4", "h5", "h6"</dt>
   <dd>

    <p>If the <span>stack of open elements</span> does not <span
    title="has an element in scope">have an element in scope</span>
    whose tag name is one of "h1", "h2", "h3", "h4", "h5", or "h6",
    then this is a <span>parse error</span>. <!-- XXX quirk: Act as if
    a start tag with the tag name given in the token had been seen,
    then reprocess the current token. --></p>

    <p>Otherwise, run these steps:</p>

    <ol>

     <li><p><span>Generate implied end tags</span>.</p></li>

     <li><p>If the <span>current node</span> is not an element with
     the same tag name as that of the token, then this is a
     <span>parse error</span>.</p></li>

     <li><p>Pop elements from the <span>stack of open elements</span>
     until an element whose tag name is one of "h1", "h2", "h3", "h4",
     "h5", or "h6" has been popped from the stack.</p></li>

    </ol>

   </dd>

   <!-- ADOPTION AGENCY ELEMENTS
        Mozilla-only: bdo blink del ins sub sup q
        Safari-only: code dfn kbd nobr samp var wbr
        Both: a b big em font i s small strike strong tt u -->

   <dt>A start tag whose tag name is "a"</dt>
   <dd>

    <p>If the <span>list of active formatting elements</span>
    contains an element whose tag name is "a" between the end of
    the list and the last marker on the list (or the start of the
    list if there is no marker on the list), then this is a
    <span>parse error</span>; act as if an end tag with the tag
    name "a" had been seen, then remove that element from the
    <span>list of active formatting elements</span> and the
    <span>stack of open elements</span> if the end tag didn't
    already remove it (it might not have if the element is not
    <span title="has an element in table scope">in table
    scope</span>).</p>

    <p class="example">In the non-conforming stream
    <code>&lt;a&nbsp;href="a">a&lt;table>&lt;a&nbsp;href="b">b&lt;/table>x</code>,
    the first <code>a</code> element would be closed upon seeing
    the second one, and the "x" character would be inside a link
    to "b", not to "a". This is despite the fact that the outer
    <code>a</code> element is not in table scope (meaning that a
    regular <code>&lt;/a></code> end tag at the start of the table
    wouldn't close the outer <code>a</code> element).</p>

    <p><span>Reconstruct the active formatting elements</span>, if
    any.</p>

    <p><span>Insert an HTML element</span> for the token. Add that
    element to the <span>list of active formatting
    elements</span>.</p>

   </dd>

   <dt>A start tag whose tag name is one of: "b", "big", "em",
   "font", "i", "s", "small", "strike", "strong", "tt", "u"</dt>
   <dd>

    <p><span>Reconstruct the active formatting elements</span>, if
    any.</p>

    <p><span>Insert an HTML element</span> for the token. Add that
    element to the <span>list of active formatting
    elements</span>.</p>

   </dd>

   <dt>A start tag whose tag name is "nobr"</dt>
   <dd>

    <p><span>Reconstruct the active formatting elements</span>, if
    any.</p>

    <p>If the <span>stack of open elements</span> <span title="has
    an element in scope">has a <code>nobr</code> element in
    scope</span>, then this is a <span>parse error</span>. Act as
    if an end tag with the tag name <code>nobr</code> had been
    seen, then once again <span>reconstruct the active formatting
    elements</span>, if any.</p>

    <p><span>Insert an HTML element</span> for the token. Add that
    element to the <span>list of active formatting
    elements</span>.</p>

   </dd>

   <dt id="adoptionAgency">An end tag whose tag name is one of:
   "a", "b", "big", "em", "font", "i", "nobr", "s", "small",
   "strike", "strong", "tt", "u"</dt>
   <dd>

    <p>Follow these steps:</p>

    <ol>

     <li>

      <p>Let the <var title="">formatting element</var> be the
      last element in the <span>list of active formatting
      elements</span> that:</p>

      <ul>

       <li>is between the end of the list and the last scope
       marker in the list, if any, or the start of the list
       otherwise, and</li>

       <li>has the same tag name as the token.</li>

      </ul>

      <p>If there is no such node, or, if that node is also in the
      <span>stack of open elements</span> but the element is not
      <span title="has an element in scope">in scope</span>, then
      this is a <span>parse error</span>. Abort these steps. The
      token is ignored.</p>

      <p>Otherwise, if there is such a node, but that node is not
      in the <span>stack of open elements</span>, then this is a
      <span>parse error</span>; remove the element from the list,
      and abort these steps.</p>

      <p>Otherwise, there is a <var title="">formatting
      element</var> and that element is in <span title="stack of
      open elements">the stack</span> and is <span title="has an
      element in scope">in scope</span>. If the element is not the
      <span>current node</span>, this is a <span>parse
      error</span>. In any case, proceed with the algorithm as
      written in the following steps.</p>

     </li>

     <li><p>Let the <var title="">furthest block</var> be the
     topmost node in the <span>stack of open elements</span> that
     is lower in the stack than the <var title="">formatting
     element</var>, and is not an element in the
     <span>phrasing</span> or <span>formatting</span>
     categories. There might not be one.</p></li>

     <li><p>If there is no <var title="">furthest block</var>,
     then the UA must skip the subsequent steps and instead just
     pop all the nodes from the bottom of the <span>stack of open
     elements</span>, from the <span>current node</span> up to and
     including the <var title="">formatting element</var>, and
     remove the <var title="">formatting element</var> from the
     <span>list of active formatting elements</span>.</p></li>

     <li><p>Let the <var title="">common ancestor</var> be the element
     immediately above the <var title="">formatting element</var> in the
     <span>stack of open elements</span>.</p></li>

     <li><p>If the <var title="">furthest block</var> has a parent node,
     then remove the <var title="">furthest block</var> from its parent
     node.</p></li>

     <li><p>Let a bookmark note the position of the <var
     title="">formatting element</var> in the <span>list of active
     formatting elements</span> relative to the elements on either
     side of it in the list.</p></li>

     <li>

      <p>Let <var title="">node</var> and <var title="">last node</var> be the
      <var title="">furthest block</var>. Follow these steps:</p>

      <ol>

       <li>Let <var title="">node</var> be the element immediately
       above <var title="">node</var> in the <span>stack of open
       elements</span>.</li>

       <li>If <var title="">node</var> is not in the <span>list of
       active formatting elements</span>, then remove <var
       title="">node</var> from the <span>stack of open
       elements</span> and then go back to step 1.</li>

       <li>Otherwise, if <var title="">node</var> is the <var
       title="">formatting element</var>, then go to the next step
       in the overall algorithm.</li>

       <li>Otherwise, if <var title="">last node</var> is the <var
       title="">furthest block</var>, then move the aforementioned
       bookmark to be immediately after the <var
       title="">node</var> in the <span>list of active formatting
       elements</span>.</li>

       <li>If <var title="">node</var> has any children, perform a shallow
       clone of <var title="">node</var>, replace the entry for
       <var title="">node</var> in the <span>list of active formatting
       elements</span> with an entry for the clone, replace the
       entry for <var title="">node</var> in the <span>stack of open
       elements</span> with an entry for the clone, and let
       <var title="">node</var> be the clone.</li>

       <li>Insert <var title="">last node</var> into <var
       title="">node</var>, first removing it from its previous
       parent node if any.</li>

       <li>Let <var title="">last node</var> be <var title="">node</var>.</li>

       <li>Return to step 1 of this inner set of steps.</li>

      </ol>

     </li>

     <li>

      <p>If the <var title="">common ancestor</var> node is a
      <code>table</code>, <code>tbody</code>, <code>tfoot</code>,
      <code>thead</code>, or <code>tr</code> element, then, insert
      whatever <var title="">last node</var> ended up being in the
      previous step into the <i>foster parent element</i>. If the
      <i>foster parent element</i> is the parent element of the last
      <code>table</code> element in the <span>stack of open
      elements</span>, then <var title="">last node</var> must be
      inserted immediately <em>before</em> the last <code>table</code>
      element in the <span>stack of open elements</span> in the
      <i>foster parent element</i>; otherwise, <var title="">last
      node</var> must be <em>appended</em> to the <i>foster parent
      element</i>.</p>

      <p>Otherwise, append whatever <var title="">last node</var>
      ended up being in the previous step to the <var title="">common
      ancestor</var> node, first removing it from its previous parent
      node if any.</p>

     </li>

     <li><p>Perform a shallow clone of the <var title="">formatting
     element</var>.</p></li>

     <li><p>Take all of the child nodes of the <var title="">furthest
     block</var> and append them to the clone created in the last
     step.</p></li>

     <li><p>Append that clone to the <var title="">furthest
     block</var>.</p></li>

     <li><p>Remove the <var title="">formatting element</var> from the
     <span>list of active formatting elements</span>, and insert
     the clone into the <span>list of active formatting
     elements</span> at the position of the aforementioned
     bookmark.</p></li>

     <li><p>Remove the <var title="">formatting element</var> from the
     <span>stack of open elements</span>, and insert the clone into
     the <span>stack of open elements</span> immediately below the
     position of the <var title="">furthest block</var> in that
     stack.</p></li>

     <li><p>Jump back to step 1 in this series of steps.</p></li>

    </ol>

    <p class="note">The way these steps are defined, only elements
    in the <span>formatting</span> category ever get cloned by
    this algorithm.</p>

<!--XXX
    <div class="example">
     <p class="big-issue">Need an example.</p>
    </div>
-->

    <p class="note">Because of the way this algorithm causes elements to
    change parents, it has been dubbed the "adoption agency algorithm"
    (in contrast with other possibly algorithms for dealing with
    misnested content, which included the "incest algorithm", the
    "secret affair algorithm", and the "Heisenberg algorithm").</p>

   </dd>

   <dt>A start tag whose tag name is "button"</dt>
   <dd>

    <p>If the <span>stack of open elements</span> <span title="has
    an element in scope">has a <code>button</code> element in
    scope</span>, then this is a <span>parse error</span>;
    act as if an end tag with the tag name "button" had been seen,
    then reprocess the token.</p>

    <p>Otherwise:</p>

    <p><span>Reconstruct the active formatting elements</span>, if
    any.</p>

    <p><span>Insert an HTML element</span> for the token.</p>

    <p>If the <span><code title="">form</code> element pointer</span>
    is not null, then <span>associate</span><!--XXX xref! --> the
    <code>button</code> element with the <code>form</code> element
    pointed to by the <span><code title="">form</code> element
    pointer</span>.</p>

    <p>Insert a marker at the end of the <span>list of active
    formatting elements</span>.</p>

   </dd>

   <dt>A start tag token whose tag name is one of: "applet",
   "marquee", "object"</dt>
   <dd>

    <p><span>Reconstruct the active formatting elements</span>, if
    any.</p>

    <p><span>Insert an HTML element</span> for the token.</p>

    <p>Insert a marker at the end of the <span>list of active
    formatting elements</span>.</p>

   </dd>

   <dt>An end tag token whose tag name is one of: "applet", "button",
   "marquee", "object"</dt>
   <dd>

    <p>If the <span>stack of open elements</span> does not <span
    title="has an element in scope">have an element in scope</span>
    with the same tag name as that of the token, then this is a
    <span>parse error</span>.</p>

    <p>Otherwise, run these steps:</p>

    <ol>

     <li><p><span>Generate implied end tags</span>.</p></li>

     <li><p>If the <span>current node</span> is not an element with
     the same tag name as that of the token, then this is a
     <span>parse error</span>.</p></li>

     <li><p>Pop elements from the <span>stack of open elements</span>
     until an element with the same tag name as the token has been
     popped from the stack.</p></li>

     <li><span>Clear the list of active formatting elements up to the
     last marker</span>.</li>

    </ol>

   </dd>

   <dt>A start tag whose tag name is "xmp"</dt>
   <dd>

    <p><span>Reconstruct the active formatting elements</span>, if
    any.</p>

    <p>Follow the <span>generic CDATA parsing algorithm</span>.</p>

   </dd>

   <dt>A start tag whose tag name is "table"</dt>
   <dd>

    <p>If the <span>stack of open elements</span> <span title="has
    an element in scope">has a <code>p</code> element in
    scope</span>, then act as if an end tag with the tag name
    <code>p</code> had been seen.</p> <!-- XXX quirks: don't do this -->

    <p><span>Insert an HTML element</span> for the token.</p>

    <p>Switch the <span>insertion mode</span> to "<span
    title="insertion mode: in table">in table</span>".</p>

   </dd>

   <dt>A start tag whose tag name is one of: "area", "basefont",
   "bgsound", "br", "embed", "img", "param", "spacer", "wbr"</dt>
   <dd>

    <p><span>Reconstruct the active formatting elements</span>, if
    any.</p>

    <p><span>Insert an HTML element</span> for the token. Immediately
    pop the <span>current node</span> off the <span>stack of open
    elements</span>.</p>

   </dd>

   <dt>A start tag whose tag name is "hr"</dt>
   <dd>

    <p>If the <span>stack of open elements</span> <span title="has
    an element in scope">has a <code>p</code> element in
    scope</span>, then act as if an end tag with the tag name
    <code>p</code> had been seen.</p> <!-- XXX quirks: don't do this -->

    <p><span>Insert an HTML element</span> for the token. Immediately
    pop the <span>current node</span> off the <span>stack of open
    elements</span>.</p>

   </dd>

   <dt>A start tag whose tag name is "image"</dt>
   <dd>
    <p><span>Parse error</span>. Change the token's tag name
    to "img" and reprocess it. (Don't ask.)</p> <!-- As of
    2005-12, studies showed that around 0.2% of pages used the
    <image> element. -->
   </dd>

   <dt>A start tag whose tag name is "input"</dt>
   <dd>

    <p><span>Reconstruct the active formatting elements</span>, if
    any.</p>

    <p><span>Insert an HTML element</span> for the token.</p>

    <p>If the <span><code title="">form</code> element
    pointer</span> is not null, then <span>associate</span><!--XXX
    xref! --> the <code>input</code> element with the
    <code>form</code> element pointed to by the <span><code
    title="">form</code> element pointer</span>.</p>

    <p>Pop that <code>input</code> element off the <span>stack of
    open elements</span>.</p>

   </dd>

   <dt id="isindex">A start tag whose tag name is "isindex"</dt>
   <dd>

    <p><span>Parse error</span>.</p>

    <p>If the <span><code title="">form</code> element
    pointer</span> is not null, then ignore the token.</p>

    <p>Otherwise:</p>

    <p>Act as if a start tag token with the tag name "form" had been seen.</p>

    <p>If the token has an attribute called "action", set the
    <code title="attr-form-action">action</code> attribute on the
    resulting <code>form</code> element to the value of the
    "action" attribute of the token.</p>

    <p>Act as if a start tag token with the tag name "hr" had been
    seen.</p>

    <p>Act as if a start tag token with the tag name "p" had been
    seen.</p>

    <p>Act as if a start tag token with the tag name "label" had been
    seen.</p>

    <p>Act as if a stream of character tokens had been seen (see below
    for what they should say).</p>

    <p>Act as if a start tag token with the tag name "input" had been
    seen, with all the attributes from the "isindex" token except
    "name", "action", and "prompt". Set the <code
    title="attr-input-name">name</code> attribute of the resulting
    <code>input</code> element to the value "<code
    title="">isindex</code>".</p>

    <p>Act as if a stream of character tokens had been seen (see
    below for what they should say).</p>

    <p>Act as if an end tag token with the tag name "label" had been
    seen.</p>

    <p>Act as if an end tag token with the tag name "p" had been
    seen.</p>

    <p>Act as if a start tag token with the tag name "hr" had been
    seen.</p>

    <p>Act as if an end tag token with the tag name "form" had been
    seen.</p>

    <p>If the token has an attribute with the name "prompt", then the
    first stream of characters must be the same string as given in
    that attribute, and the second stream of characters must be
    empty. Otherwise, the two streams of character tokens together
    should, together with the <code>input</code> element, express the
    equivalent of "This is a searchable index. Insert your search
    keywords here: (input field)" in the user's preferred
    language.</p>

    <p class="big-issue"> Then need to specify that if the form
    submission causes just a single form control, whose name is
    "isindex", to be submitted, then we submit just the value part,
    not the "isindex=" part.  </p>

   </dd>

<!-- XXX keygen support; don't forget form element pointer!

   <dt>A start tag whose tag name is "keygen"</dt>
   <dd>
    ...
   </dd>
-->

   <dt>A start tag whose tag name is "textarea"</dt>
   <dd>

    <p><span>Create an element for the token</span>.</p>

    <p>If the <span><code title="">form</code> element
    pointer</span> is not null, then <span>associate</span><!--XXX
    xref! --> the <code>textarea</code> element with the
    <code>form</code> element pointed to by the <span><code
    title="">form</code> element pointer</span>.</p>

    <p>Append the new element to the <span>current
    node</span>.</p>

    <p>Switch the tokeniser's <span>content model flag</span> to
    the RCDATA state.</p>

    <p>If the next token is a U+000A LINE FEED (LF) character
    token, then ignore that token and move on to the next
    one. (Newlines at the start of <code>textarea</code> elements
    are ignored as an authoring convenience.)</p>

    <p>Then, collect all the character tokens that the tokeniser
    returns until it returns a token that is not a character
    token, or until it stops tokenising.</p>

    <p>If this process resulted in a collection of character
    tokens, append a single <code>Text</code> node, whose contents
    is the concatenation of all those tokens' characters, to the
    new element node.</p>

    <p>The tokeniser's <span>content model flag</span> will have
    switched back to the PCDATA state.</p>

    <p>If the next token is an end tag token with the tag name
    "textarea", ignore it. Otherwise, this is a <span>parse
    error</span>.</p>

   </dd>

   <dt>A start tag whose tag name is one of: "iframe",
   "noembed", "noframes"</dt>
   <dt>A start tag whose tag name is "noscript", if
   <span>scripting is enabled</span>:</dt>
   <dd>
    <p>Follow the <span>generic CDATA parsing algorithm</span>.</p>
   </dd>

   <dt>A start tag whose tag name is "select"</dt>
   <dd>

    <p><span>Reconstruct the active formatting elements</span>, if
    any.</p>

    <p><span>Insert an HTML element</span> for the token.</p>

    <p>If the <span><code title="">form</code> element pointer</span>
    is not null, then <span>associate</span><!--XXX xref! --> the
    <code>select</code> element with the <code>form</code> element
    pointed to by the <span><code title="">form</code> element
    pointer</span>.</p>

    <p>If the <span>insertion mode</span> is one of <span
    title="insertion mode: in table">in table</span>", "<span
    title="insertion mode: in caption">in caption</span>", "<span
    title="insertion mode: in column group">in column group</span>",
    "<span title="insertion mode: in table body">in table
    body</span>", "<span title="insertion mode: in row">in
    row</span>", or "<span title="insertion mode: in cell">in
    cell</span>", then switch the <span>insertion mode</span> to
    "<span title="insertion mode: in select in table">in select in
    table</span>". Otherwise, switch the <span>insertion mode</span>
    to "<span title="insertion mode: in select">in select</span>".</p>

   </dd>

   <dt>An end tag whose tag name is "br"</dt>
   <dd>
    <p><span>Parse error</span>. Act as if a start tag token with
    the tag name "br" had been seen. Ignore the end tag token.</p>
   </dd>

   <dt>A start or end tag whose tag name is one of: "caption", "col",
   "colgroup", "frame", "frameset", "head", "option", "optgroup",
   "tbody", "td", "tfoot", "th", "thead", "tr"</dt>
   <dt>An end tag whose tag name is one of: "area", "basefont",
   "bgsound", "embed", "hr", "iframe", "image", "img", "input",
   "isindex", "noembed", "noframes", "param", "select", "spacer",
   "table", "textarea", "wbr"</dt> <!-- add keygen if we add the start
   tag -->
   <dt>An end tag whose tag name is "noscript", if <span>scripting
   is enabled</span>:</dt>
   <dd>
    <p><span>Parse error</span>. Ignore the token.</p>
   </dd>

   <dt>A start or end tag whose tag name is one of:
   "event-source", "section", "nav", "article", "aside", "header",
   "footer", "datagrid", "command"</dt>

   <dd>

    <!-- XXXX -->

    <p class="big-issue">Work in progress!</p>

   </dd>

   <dt>A start tag token not covered by the previous entries</dt>
   <dd>

    <p><span>Reconstruct the active formatting elements</span>, if
    any.</p>

    <p><span>Insert an HTML element</span> for the token.</p>

    <p class="note">This element will be a <span>phrasing</span>
    element.</p>

<!--
Put the following into the MathML namespace if parsed:
math, mrow, mfrac, msqrt, mroot, mstyle, merror, mpadded, 
mphantom, mfenced, menclose, msub, msup, msubsup, munder, 
mover, munderover, mmultiscripts, mtable, mlabeledtr, mtr, 
mtd, maction
-->

   </dd>

   <dt>An end tag token not covered by the previous entries</dt>
   <dd>

    <p>Run the following algorithm:</p>

    <ol>

     <li><p>Initialise <var title="">node</var> to be the <span>current
     node</span> (the bottommost node of the stack).</p></li>

     <li><p>If <var title="">node</var> has the same tag name as
     the end tag token, then:</p>

      <ol>

       <li><p><span>Generate implied end tags</span>.</p></li>

       <li><p>If the tag name of the end tag token does not match
       the tag name of the <span>current node</span>, this is a
       <span>parse error</span>.</p></li>

       <li><p>Pop all the nodes from the <span>current node</span> up
       to <var title="">node</var>, including <var
       title="">node</var>, then stop this algorithm.</p></li>

      </ol>

     </li>

     <li><p>Otherwise, if <var title="">node</var> is in neither
     the <span>formatting</span> category nor the
     <span>phrasing</span> category, then this is a <span>parse
     error</span>. Stop this algorithm. The end tag token is
     ignored.</p></li>

     <li><p>Set <var title="">node</var> to the previous entry in the
     <span>stack of open elements</span>.</p></li>

     <li><p>Return to step 2.</p></li>

    </ol>

   </dd>

  </dl>


  <h5 id="parsing-main-intable">The "<dfn title="insertion mode: in table">in table</dfn>" insertion mode</h5>

  <p>When the <span>insertion mode</span> is "<span title="insertion
  mode: in table">in table</span>", tokens must be handled as follows:</p>

  <dl class="switch">

   <dt>A character token that is one of one of U+0009
   CHARACTER TABULATION, U+000A LINE FEED (LF), U+000B LINE
   TABULATION, U+000C FORM FEED (FF), <!--U+000D CARRIAGE RETURN (CR),-->
   or U+0020 SPACE</dt>
   <dd>

    <p>If the <span>current table</span> is <span>tainted</span>, then
    act as described in the "anything else" entry below.</p>

    <p>Otherwise, <span title="insert a character">insert the
    character</span> into the <span>current node</span>.</p>

   </dd>

   <dt>A comment token</dt>
   <dd>
    <p>Append a <code>Comment</code> node to the <span>current
    node</span> with the <code title="">data</code> attribute set to
    the data given in the comment token.</p>
   </dd>

   <dt>A DOCTYPE token</dt>
   <dd>
    <p><span>Parse error</span>. Ignore the token.</p>
   </dd>

   <dt>A start tag whose tag name is "caption"</dt>
   <dd>

    <p><span>Clear the stack back to a table context</span>. (See
    below.)</p>

    <p>Insert a marker at the end of the <span>list of active
    formatting elements</span>.</p>

    <p><span>Insert an HTML element</span> for the token, then
    switch the <span>insertion mode</span> to "<span
    title="insertion mode: in caption">in caption</span>".</p>

   </dd>

   <dt>A start tag whose tag name is "colgroup"</dt>
   <dd>

    <p><span>Clear the stack back to a table context</span>. (See
    below.)</p>

    <p><span>Insert an HTML element</span> for the token, then
    switch the <span>insertion mode</span> to "<span
    title="insertion mode: in column group">in column
    group</span>".</p>

   </dd>

   <dt>A start tag whose tag name is "col"</dt>
   <dd>
    <p>Act as if a start tag token with the tag name "colgroup"
    had been seen, then reprocess the current token.</p>
   </dd>

   <dt>A start tag whose tag name is one of: "tbody", "tfoot", "thead"</dt>
   <dd>

    <p><span>Clear the stack back to a table context</span>. (See
    below.)</p>

    <p><span>Insert an HTML element</span> for the token, then
    switch the <span>insertion mode</span> to "<span
    title="insertion mode: in table body">in table
    body</span>".</p>

   </dd>

   <dt>A start tag whose tag name is one of: "td", "th", "tr"</dt>
   <dd>
    <p>Act as if a start tag token with the tag name "tbody" had
    been seen, then reprocess the current token.</p>
   </dd>

   <dt>A start tag whose tag name is "table"</dt>
   <dd>

    <p><span>Parse error</span>. Act as if an end tag token with
    the tag name "table" had been seen, then, if that token wasn't
    ignored, reprocess the current token.</p>

    <p class="note">The fake end tag token here can only be
    ignored in the <span>fragment case</span>.</p>

   </dd>

   <dt>An end tag whose tag name is "table"</dt>
   <dd>

    <p>If the <span>stack of open elements</span> does not <span
    title="has an element in table scope">have an element in table
    scope</span> with the same tag name as the token, this is a
    <span>parse error</span>. Ignore the token. (<span>fragment
    case</span>)</p>

    <p>Otherwise:</p>

    <p>Pop elements from this stack until a <code>table</code>
    element has been popped from the stack.</p>

    <p><span>Reset the insertion mode appropriately</span>.</p>

   </dd>

   <dt>An end tag whose tag name is one of: "body", "caption",
   "col", "colgroup", "html", "tbody", "td", "tfoot", "th",
   "thead", "tr"</dt>
   <dd>
    <p><span>Parse error</span>. Ignore the token.</p>
   </dd>

   <dt>A start tag whose tag name is one of: "style", "script"</dt>
   <dd>

    <p>If the <span>current table</span> is <span>tainted</span> then
    act as described in the "anything else" entry below.</p>

    <p>Otherwise, process the token <span>using the rules for</span>
    the "<span title="insertion mode: in head">in
    head</span>" <span>insertion mode</span>.</p>

   </dd>

   <dt>A start tag whose tag name is "input"</dt>
   <dd>

    <p>If the token does not have an attribute with the name "type",
    or if it does, but that attribute's value is not a
    case-insensitive <!-- XXX ASCII --> match for the string "hidden",
    or, if the <span>current table</span> is <span>tainted</span>,
    then: act as described in the "anything else" entry below.</p>

    <p>Otherwise:</p>

    <p><span>Parse error</span>.</p>

    <p><span>Insert an HTML element</span> for the token.</p>

    <p>If the <span><code title="">form</code> element
    pointer</span> is not null, then <span>associate</span><!--XXX
    xref! --> the <code>input</code> element with the
    <code>form</code> element pointed to by the <span><code
    title="">form</code> element pointer</span>.</p>

    <p>Pop that <code>input</code> element off the <span>stack of
    open elements</span>.</p>

   </dd>

   <dt>An end-of-file token</dt>
   <dd>

    <p>If the <span>current node</span> is not the root
    <code>html</code> element, then this is a <span>parse
    error.</span>.</p>

    <p class="note">It can only be the <span>current node</span> in
    the <span>fragment case</span>.</p>

    <p><span>Stop parsing.</span></p>

   </dd>

   <dt>Anything else</dt>
   <dd>

    <p><span>Parse error</span>. Process the token <span>using the
    rules for</span> the "<span title="insertion mode: in body">in
    body</span>" <span>insertion mode</span>, with the following
    exception:</p>

    <p>If the <span>current node</span> is a <code>table</code>,
    <code>tbody</code>, <code>tfoot</code>, <code>thead</code>, or
    <code>tr</code> element, then, whenever a node would be inserted
    into the <span>current node</span>, it must instead be inserted
    into the <i>foster parent element</i>, and the <span>current
    table</span> must be marked as <dfn>tainted</dfn>. (Once the
    <span>current table</span> has been <span>tainted</span>,
    whitespace characters are inserted into the <i>foster parent
    element</i> instead of the <span>current node</span>.)</p>

    <p>The <dfn>foster parent element</dfn> is the parent element
    of the last <code>table</code> element in the <span>stack of
    open elements</span>, if there is a <code>table</code> element
    and it has such a parent element. If there is no
    <code>table</code> element in the <span>stack of open
    elements</span> (<span>fragment case</span>), then the
    <em>foster parent element</em> is the first element in the
    <span>stack of open elements</span> (the <code>html</code>
    element). Otherwise, if there is a <code>table</code> element
    in the <span>stack of open elements</span>, but the last
    <code>table</code> element in the <span>stack of open
    elements</span> has no parent, or its parent node is not an
    element, then the <em>foster parent element</em> is the
    element before the last <code>table</code> element in the
    <span>stack of open elements</span>.</p>

    <p>If the <i>foster parent element</i> is the parent element of
    the last <code>table</code> element in the <span>stack of open
    elements</span>, then the new node must be inserted immediately
    <em>before</em> the last <code>table</code> element in the
    <span>stack of open elements</span> in the <i>foster parent
    element</i>; otherwise, the new node must be <em>appended</em> to
    the <i>foster parent element</i>.</p>

   </dd>

  </dl>

  <p>When the steps above require the UA to <dfn>clear the stack
  back to a table context</dfn>, it means that the UA must, while
  the <span>current node</span> is not a <code>table</code>
  element or an <code>html</code> element, pop elements from the
  <span>stack of open elements</span>.</p>

  <p class="note">The <span>current node</span> being an
  <code>html</code> element after this process is a <span>fragment
  case</span>.</p>


  <h5 id="parsing-main-incaption">The "<dfn title="insertion mode: in caption">in caption</dfn>" insertion mode</h5>

  <p>When the <span>insertion mode</span> is "<span title="insertion
  mode: in caption">in caption</span>", tokens must be handled as follows:</p>

  <dl class="switch">

   <dt>An end tag whose tag name is "caption"</dt>
   <dd>

    <p>If the <span>stack of open elements</span> does not <span
    title="has an element in table scope">have an element in table
    scope</span> with the same tag name as the token, this is a
    <span>parse error</span>. Ignore the token. (<span>fragment
    case</span>)</p>

    <p>Otherwise:</p>

    <p><span>Generate implied end tags</span>.</p>

    <p>Now, if the <span>current node</span> is not a
    <code>caption</code> element, then this is a <span>parse
    error</span>.</p>

    <p>Pop elements from this stack until a <code>caption</code>
    element has been popped from the stack.</p>

    <p><span>Clear the list of active formatting elements up to
    the last marker</span>.</p>

    <p>Switch the <span>insertion mode</span> to "<span
    title="insertion mode: in table">in table</span>".</p>

   </dd>

   <dt>A start tag whose tag name is one of: "caption", "col",
   "colgroup", "tbody", "td", "tfoot", "th", "thead", "tr"</dt>
   <dt>An end tag whose tag name is "table"</dt>
   <dd>

    <p><span>Parse error</span>. Act as if an end tag with the tag
    name "caption" had been seen, then, if that token wasn't
    ignored, reprocess the current token.</p>

    <p class="note">The fake end tag token here can only be
    ignored in the <span>fragment case</span>.</p>

   </dd>

   <dt>An end tag whose tag name is one of: "body", "col",
   "colgroup", "html", "tbody", "td", "tfoot", "th", "thead",
   "tr"</dt>
   <dd>
    <p><span>Parse error</span>. Ignore the token.</p>
   </dd>

   <dt>Anything else</dt>
   <dd>
    <p>Process the token <span>using the rules for</span> the "<span
    title="insertion mode: in body">in body</span>" <span>insertion
    mode</span>.</p>
   </dd>

  </dl>


  <h5 id="parsing-main-incolgroup">The "<dfn title="insertion mode: in column group">in column group</dfn>" insertion mode</h5>

  <p>When the <span>insertion mode</span> is "<span title="insertion
  mode: in column group">in column group</span>", tokens must be handled as follows:</p>

  <dl class="switch">

   <dt>A character token that is one of one of U+0009
   CHARACTER TABULATION, U+000A LINE FEED (LF), U+000B LINE
   TABULATION, U+000C FORM FEED (FF), <!--U+000D CARRIAGE RETURN (CR),-->
   or U+0020 SPACE</dt>
   <dd>
    <p><span title="insert a character">Insert the character</span> into
    the <span>current node</span>.</p>
   </dd>

   <dt>A comment token</dt>
   <dd>
    <p>Append a <code>Comment</code> node to the <span>current
    node</span> with the <code title="">data</code> attribute set to
    the data given in the comment token.</p>
   </dd>

   <dt>A DOCTYPE token</dt>
   <dd>
    <p><span>Parse error</span>. Ignore the token.</p>
   </dd>

   <dt>A start tag whose tag name is "html"</dt>
   <dd>
    <p>Process the token <span>using the rules for</span> the "<span
    title="insertion mode: in body">in body</span>" <span>insertion
    mode</span>.</p>
   </dd>

   <dt>A start tag whose tag name is "col"</dt>
   <dd>
    <p><span>Insert an HTML element</span> for the token. Immediately
    pop the <span>current node</span> off the <span>stack of open
    elements</span>.</p>
   </dd>

   <dt>An end tag whose tag name is "colgroup"</dt>
   <dd>

    <p>If the <span>current node</span> is the root
    <code>html</code> element, then this is a <span>parse
    error</span>, ignore the token. (<span>fragment
    case</span>)</p>

    <p>Otherwise, pop the <span>current node</span> (which will be
    a <code>colgroup</code> element) from the <span>stack of open
    elements</span>. Switch the <span>insertion mode</span> to
    "<span title="insertion mode: in table">in table</span>".</p>

   </dd>

   <dt>An end tag whose tag name is "col"</dt>
   <dd>
    <p><span>Parse error</span>. Ignore the token.</p>
   </dd>

   <dt>An end-of-file token</dt>
   <dd>

    <p>If the <span>current node</span> is the root <code>html</code>
    element, then <span>stop parsing</span>. (<span>fragment
    case</span>)</p>

    <p>Otherwise, act as described in the "anything else" entry
    below.</p>

   </dd>

   <dt>Anything else</dt>
   <dd>

    <p>Act as if an end tag with the tag name "colgroup" had been
    seen, and then, if that token wasn't ignored, reprocess the
    current token.</p>

    <p class="note">The fake end tag token here can only be
    ignored in the <span>fragment case</span>.</p>

   </dd>

  </dl>


  <h5 id="parsing-main-intbody">The "<dfn title="insertion mode: in table body">in table body</dfn>" insertion mode</h5>

  <p>When the <span>insertion mode</span> is "<span title="insertion
  mode: in table body">in table body</span>", tokens must be handled as follows:</p>

  <dl class="switch">

   <dt>A start tag whose tag name is "tr"</dt>
   <dd>

    <p><span>Clear the stack back to a table body
    context</span>. (See below.)</p>

    <p><span>Insert an HTML element</span> for the token, then switch
    the <span>insertion mode</span> to "<span title="insertion mode:
    in row">in row</span>".</p>

   </dd>

   <dt>A start tag whose tag name is one of: "th", "td"</dt>
   <dd>
    <p><span>Parse error</span>. Act as if a start tag with
    the tag name "tr" had been seen, then reprocess the current
    token.</p>
   </dd>

   <dt>An end tag whose tag name is one of: "tbody", "tfoot",
   "thead"</dt>
   <dd>

    <p>If the <span>stack of open elements</span> does not <span
    title="has an element in table scope">have an element in table
    scope</span> with the same tag name as the token, this is a
    <span>parse error</span>. Ignore the token.</p>

    <p>Otherwise:</p>

    <p><span>Clear the stack back to a table body
    context</span>. (See below.)</p>

    <p>Pop the <span>current node</span> from the <span>stack of
    open elements</span>. Switch the <span>insertion mode</span>
    to "<span title="insertion mode: in table">in table</span>".</p>

   </dd>

   <dt>A start tag whose tag name is one of: "caption", "col",
   "colgroup", "tbody", "tfoot", "thead"</dt>
   <dt>An end tag whose tag name is "table"</dt>
   <dd>

    <p>If the <span>stack of open elements</span> does not <span
    title="has an element in table scope">have a
    <code>tbody</code>, <code>thead</code>, or <code>tfoot</code>
    element in table scope</span>, this is a <span>parse
    error</span>. Ignore the token. (<span>fragment
    case</span>)</p>

    <p>Otherwise:</p>

    <p><span>Clear the stack back to a table body
    context</span>. (See below.)</p>

    <p>Act as if an end tag with the same tag name as the
    <span>current node</span> ("tbody", "tfoot", or "thead") had
    been seen, then reprocess the current token.</p>

   </dd>

   <dt>An end tag whose tag name is one of: "body", "caption",
   "col", "colgroup", "html", "td", "th", "tr"</dt>
   <dd>
    <p><span>Parse error</span>. Ignore the token.</p>
   </dd>

   <dt>Anything else</dt>
   <dd>
    <p>Process the token <span>using the rules for</span> the "<span
    title="insertion mode: in table">in table</span>" <span>insertion
    mode</span>.</p>
   </dd>

  </dl>

  <p>When the steps above require the UA to <dfn>clear the stack
  back to a table body context</dfn>, it means that the UA must,
  while the <span>current node</span> is not a <code>tbody</code>,
  <code>tfoot</code>, <code>thead</code>, or <code>html</code>
  element, pop elements from the <span>stack of open
  elements</span>.</p>

  <p class="note">The <span>current node</span> being an
  <code>html</code> element after this process is a <span>fragment
  case</span>.</p>


  <h5 id="parsing-main-intr">The "<dfn title="insertion mode: in row">in row</dfn>" insertion mode</h5>

  <p>When the <span>insertion mode</span> is "<span title="insertion
  mode: in row">in row</span>", tokens must be handled as follows:</p>

  <dl class="switch">

   <dt>A start tag whose tag name is one of: "th", "td"</dt>
   <dd>

    <p><span>Clear the stack back to a table row
    context</span>. (See below.)</p>

    <p><span>Insert an HTML element</span> for the token, then switch
    the <span>insertion mode</span> to "<span title="insertion mode:
    in cell">in cell</span>".</p>

    <p>Insert a marker at the end of the <span>list of active
    formatting elements</span>.</p>

   </dd>

   <dt>An end tag whose tag name is "tr"</dt>
   <dd>

    <p>If the <span>stack of open elements</span> does not <span
    title="has an element in table scope">have an element in table
    scope</span> with the same tag name as the token, this is a
    <span>parse error</span>. Ignore the token. (<span>fragment
    case</span>)</p>

    <p>Otherwise:</p>

    <p><span>Clear the stack back to a table row
    context</span>. (See below.)</p>

    <p>Pop the <span>current node</span> (which will be a
    <code>tr</code> element) from the <span>stack of open
    elements</span>. Switch the <span>insertion mode</span> to
    "<span title="insertion mode: in table body">in table
    body</span>".</p>

   </dd>

   <dt>A start tag whose tag name is one of: "caption", "col",
   "colgroup", "tbody", "tfoot", "thead", "tr"</dt>
   <dt>An end tag whose tag name is "table"</dt>
   <dd>

    <p>Act as if an end tag with the tag name "tr" had been seen,
    then, if that token wasn't ignored, reprocess the current
    token.</p>

    <p class="note">The fake end tag token here can only be
    ignored in the <span>fragment case</span>.</p>

   </dd>

   <dt>An end tag whose tag name is one of: "tbody", "tfoot",
   "thead"</dt>
   <dd>

    <p>If the <span>stack of open elements</span> does not <span
    title="has an element in table scope">have an element in table
    scope</span> with the same tag name as the token, this is a
    <span>parse error</span>. Ignore the token.</p>

    <p>Otherwise, act as if an end tag with the tag name "tr" had
    been seen, then reprocess the current token.</p>

   </dd>

   <dt>An end tag whose tag name is one of: "body", "caption",
   "col", "colgroup", "html", "td", "th"</dt>
   <dd>
    <p><span>Parse error</span>. Ignore the token.</p>
   </dd>

   <dt>Anything else</dt>
   <dd>
    <p>Process the token <span>using the rules for</span> the "<span
    title="insertion mode: in table">in table</span>" <span>insertion
    mode</span>.</p>
   </dd>

  </dl>

  <p>When the steps above require the UA to <dfn>clear the stack
  back to a table row context</dfn>, it means that the UA must,
  while the <span>current node</span> is not a <code>tr</code>
  element or an <code>html</code> element, pop elements from the
  <span>stack of open elements</span>.</p>

  <p class="note">The <span>current node</span> being an
  <code>html</code> element after this process is a <span>fragment
  case</span>.</p>


  <h5 id="parsing-main-intd">The "<dfn title="insertion mode: in cell">in cell</dfn>" insertion mode</h5>

  <p>When the <span>insertion mode</span> is "<span title="insertion
  mode: in cell">in cell</span>", tokens must be handled as follows:</p>

  <dl class="switch">

   <dt>An end tag whose tag name is one of: "td", "th"</dt>
   <dd>

    <p>If the <span>stack of open elements</span> does not <span
    title="has an element in table scope">have an element in table
    scope</span> with the same tag name as that of the token, then
    this is a <span>parse error</span> and the token must be
    ignored.</p>

    <p>Otherwise:</p>

    <p><span>Generate implied end tags</span>.</p>

    <p>Now, if the <span>current node</span> is not an element
    with the same tag name as the token, then this is a
    <span>parse error</span>.</p>

    <p>Pop elements from this stack until an element with the same
    tag name as the token has been popped from the stack.</p>

    <p><span>Clear the list of active formatting elements up to
    the last marker</span>.</p>

    <p>Switch the <span>insertion mode</span> to "<span
    title="insertion mode: in row">in row</span>". (The
    <span>current node</span> will be a <code>tr</code> element at
    this point.)</p>

   </dd>

   <dt>A start tag whose tag name is one of: "caption", "col",
   "colgroup", "tbody", "td", "tfoot", "th", "thead", "tr"</dt>
   <dd>

    <p>If the <span>stack of open elements</span> does
    <em>not</em> <span title="has an element in table scope">have
    a <code>td</code> or <code>th</code> element in table
    scope</span>, then this is a <span>parse error</span>; ignore
    the token. (<span>fragment case</span>)</p>

    <p>Otherwise, <span>close the cell</span> (see below) and
    reprocess the current token.</p>

   </dd>

   <dt>An end tag whose tag name is one of: "body", "caption",
   "col", "colgroup", "html"</dt>
   <dd>
    <p><span>Parse error</span>. Ignore the token.</p>
   </dd>

   <dt>An end tag whose tag name is one of: "table", "tbody",
   "tfoot", "thead", "tr"</dt>
   <dd>

    <p>If the <span>stack of open elements</span> does not <span
    title="has an element in table scope">have an element in table
    scope</span> with the same tag name as that of the token
    (which can only happen for "tbody", "tfoot" and "thead", or,
    in the <span>fragment case</span>), then this is a <span>parse
    error</span> and the token must be ignored.</p>

    <p>Otherwise, <span>close the cell</span> (see below) and
    reprocess the current token.</p>

   </dd>

   <dt>Anything else</dt>
   <dd>
    <p>Process the token <span>using the rules for</span> the "<span
    title="insertion mode: in body">in body</span>" <span>insertion
    mode</span>.</p>
   </dd>

  </dl>

  <p>Where the steps above say to <dfn>close the cell</dfn>, they
  mean to run the following algorithm:</p>

  <ol>

   <li><p>If the <span>stack of open elements</span> <span
   title="has an element in table scope">has a <code>td</code>
   element in table scope</span>, then act as if an end tag token
   with the tag name "td" had been seen.</p></li>

   <li><p>Otherwise, the <span>stack of open elements</span> will
   <span title="has an element in table scope">have a
   <code>th</code> element in table scope</span>; act as if an end
   tag token with the tag name "th" had been seen.</p></li>

  </ol>

  <p class="note">The <span>stack of open elements</span> cannot
  have both a <code>td</code> and a <code>th</code> element <span
  title="has an element in table scope">in table scope</span> at
  the same time, nor can it have neither when the <span>insertion
  mode</span> is "<span title="insertion mode: in cell">in
  cell</span>".</p>


  <h5 id="parsing-main-inselect">The "<dfn title="insertion mode: in select">in select</dfn>" insertion mode</h5>

  <p>When the <span>insertion mode</span> is "<span title="insertion
  mode: in select">in select</span>", tokens must be handled as follows:</p>

  <dl class="switch">

   <dt>A character token</dt>
   <dd>
    <p><span title="insert a character">Insert the token's
    character</span> into the <span>current node</span>.</p>
   </dd>

   <dt>A comment token</dt>
   <dd>
    <p>Append a <code>Comment</code> node to the <span>current
    node</span> with the <code title="">data</code> attribute set to
    the data given in the comment token.</p>
   </dd>

   <dt>A DOCTYPE token</dt>
   <dd>
    <p><span>Parse error</span>. Ignore the token.</p>
   </dd>

   <dt>A start tag whose tag name is "html"</dt>
   <dd>
    <p>Process the token <span>using the rules for</span> the "<span
    title="insertion mode: in body">in body</span>" <span>insertion
    mode</span>.</p>
   </dd>

   <dt>A start tag whose tag name is "option"</dt>
   <dd>

    <p>If the <span>current node</span> is an <code>option</code>
    element, act as if an end tag with the tag name "option" had
    been seen.</p>

    <p><span>Insert an HTML element</span> for the token.</p>

   </dd>

   <dt>A start tag whose tag name is "optgroup"</dt>
   <dd>

    <p>If the <span>current node</span> is an <code>option</code>
    element, act as if an end tag with the tag name "option" had
    been seen.</p>

    <p>If the <span>current node</span> is an
    <code>optgroup</code> element, act as if an end tag with the
    tag name "optgroup" had been seen.</p>

    <p><span>Insert an HTML element</span> for the token.</p>

   </dd>

   <dt>An end tag whose tag name is "optgroup"</dt>
   <dd>

    <p>First, if the <span>current node</span> is an
    <code>option</code> element, and the node immediately before
    it in the <span>stack of open elements</span> is an
    <code>optgroup</code> element, then act as if an end tag with
    the tag name "option" had been seen.</p>

    <p>If the <span>current node</span> is an
    <code>optgroup</code> element, then pop that node from the
    <span>stack of open elements</span>. Otherwise, this is a
    <span>parse error</span>, ignore the token.</p>

   </dd>

   <dt>An end tag whose tag name is "option"</dt>
   <dd>

    <p>If the <span>current node</span> is an <code>option</code>
    element, then pop that node from the <span>stack of open
    elements</span>. Otherwise, this is a <span>parse
    error</span>, ignore the token.</p>

   </dd>

   <dt>An end tag whose tag name is "select"</dt>
   <dd>

    <p>If the <span>stack of open elements</span> does not <span
    title="has an element in table scope">have an element in table
    scope</span> with the same tag name as the token, this is a
    <span>parse error</span>. Ignore the token. (<span>fragment
    case</span>)</p>

    <p>Otherwise:</p>

    <p>Pop elements from the <span>stack of open elements</span>
    until a <code>select</code> element has been popped from the
    stack.</p>

    <p><span>Reset the insertion mode appropriately</span>.</p>

   </dd>

   <dt>A start tag whose tag name is "select"</dt>
   <dd>

    <p><span>Parse error</span>. Act as if the token had been
    an end tag with the tag name "select" instead.</p>

   </dd>

   <dt>A start tag whose tag name is "input"</dt>
   <dd>
    <p><span>Parse error</span>. Act as if an end tag with the tag
    name "select" had been seen, and reprocess the token.</p>
   </dd>

   <dt>An end-of-file token</dt>
   <dd>

    <p>If the <span>current node</span> is not the root
    <code>html</code> element, then this is a <span>parse
    error.</span>.</p>

    <p class="note">It can only be the <span>current node</span> in
    the <span>fragment case</span>.</p>

    <p><span>Stop parsing.</span></p>

   </dd>

   <dt>Anything else</dt>
   <dd>
    <p><span>Parse error</span>. Ignore the token.</p>
   </dd>

  </dl>


  <h5 id="parsing-main-inselect">The "<dfn title="insertion mode: in select in table">in select in table</dfn>" insertion mode</h5>

  <p>When the <span>insertion mode</span> is "<span title="insertion
  mode: in select in table">in select in table</span>", tokens must be handled as follows:</p>

  <dl class="switch">

   <dt>A start tag whose tag name is one of: "caption", "table",
   "tbody", "tfoot", "thead", "tr", "td", "th"</dt>
   <dd>
    <p><span>Parse error</span>. Act as if an end tag with the tag
    name "select" had been seen, and reprocess the token.</p>
   </dd>

   <dt>An end tag whose tag name is one of: "caption", "table",
   "tbody", "tfoot", "thead", "tr", "td", "th"</dt>
   <dd>

    <p><span>Parse error</span>.</p>

    <p>If the <span>stack of open elements</span> <span>has an
    element in table scope</span> with the same tag name as that
    of the token, then act as if an end tag with the tag name
    "select" had been seen, and reprocess the token. Otherwise,
    ignore the token.</p>

   </dd>

   <dt>Anything else</dt>
   <dd>
    <p>Process the token <span>using the rules for</span> the "<span
    title="insertion mode: in select">in select</span>" <span>insertion
    mode</span>.</p>
   </dd>

  </dl>


  <h5 id="parsing-main-afterbody">The "<dfn title="insertion mode: after body">after body</dfn>" insertion mode</h5>

  <p>When the <span>insertion mode</span> is "<span title="insertion
  mode: after body">after body</span>", tokens must be handled as follows:</p>

  <dl class="switch">

   <dt>A character token that is one of one of U+0009
   CHARACTER TABULATION, U+000A LINE FEED (LF), U+000B LINE
   TABULATION, U+000C FORM FEED (FF), <!--U+000D CARRIAGE RETURN (CR),-->
   or U+0020 SPACE</dt>
   <dd>
    <p>Process the token <span>using the rules for</span> the "<span
    title="insertion mode: in body">in body</span>" <span>insertion
    mode</span>.</p>
   </dd>

   <dt>A comment token</dt>
   <dd>
    <p>Append a <code>Comment</code> node to the first element in
    the <span>stack of open elements</span> (the <code>html</code>
    element), with the <code title="">data</code> attribute set to
    the data given in the comment token.</p>
   </dd>

   <dt>A DOCTYPE token</dt>
   <dd>
    <p><span>Parse error</span>. Ignore the token.</p>
   </dd>

   <dt>A start tag whose tag name is "html"</dt>
   <dd>
    <p>Process the token <span>using the rules for</span> the "<span
    title="insertion mode: in body">in body</span>" <span>insertion
    mode</span>.</p>
   </dd>

   <dt>An end tag whose tag name is "html"</dt>
   <dd>

    <p>If the parser was originally created as part of the <span>HTML
    fragment parsing algorithm</span>, this is a <span>parse
    error</span>; ignore the token.  (<span>fragment case</span>)</p>
    <!-- can only happen for <html>'s own innerHTML -->

    <p>Otherwise, switch the <span>insertion mode</span> to "<span
    title="insertion mode: after after body">after after
    body</span>".</p>

   </dd>

   <dt>An end-of-file token</dt>
   <dd>
    <p><span>Stop parsing.</span></p>
   </dd>

   <dt>Anything else</dt>
   <dd>

    <p><span>Parse error</span>. Switch the <span>insertion
    mode</span> to "<span title="insertion mode: in body">in
    body</span>" and reprocess the token.</p>

   </dd>

  </dl>


  <h5 id="parsing-main-inframeset">The "<dfn title="insertion mode: in frameset">in frameset</dfn>" insertion mode</h5>

  <p>When the <span>insertion mode</span> is "<span title="insertion
  mode: in frameset">in frameset</span>", tokens must be handled as follows:</p>

  <dl class="switch">

   <dt>A character token that is one of one of U+0009
   CHARACTER TABULATION, U+000A LINE FEED (LF), U+000B LINE
   TABULATION, U+000C FORM FEED (FF), <!--U+000D CARRIAGE RETURN (CR),-->
   or U+0020 SPACE</dt>
   <dd>
    <p><span title="insert a character">Insert the character</span> into
    the <span>current node</span>.</p>
   </dd>

   <dt>A comment token</dt>
   <dd>
    <p>Append a <code>Comment</code> node to the <span>current
    node</span> with the <code title="">data</code> attribute set to
    the data given in the comment token.</p>
   </dd>

   <dt>A DOCTYPE token</dt>
   <dd>
    <p><span>Parse error</span>. Ignore the token.</p>
   </dd>

   <dt>A start tag whose tag name is "html"</dt>
   <dd>
    <p>Process the token <span>using the rules for</span> the "<span
    title="insertion mode: in body">in body</span>" <span>insertion
    mode</span>.</p>
   </dd>

   <dt>A start tag whose tag name is "frameset"</dt>
   <dd>
    <p><span>Insert an HTML element</span> for the token.</p>
   </dd>

   <dt>An end tag whose tag name is "frameset"</dt>
   <dd>

    <p>If the <span>current node</span> is the root
    <code>html</code> element, then this is a <span>parse
    error</span>; ignore the token. (<span>fragment
    case</span>)</p>

    <p>Otherwise, pop the <span>current node</span> from the
    <span>stack of open elements</span>.</p>

    <p>If the parser was <em>not</em> originally created as part
    of the <span>HTML fragment parsing algorithm</span>
    (<span>fragment case</span>), and the <span>current
    node</span> is no longer a <code>frameset</code> element, then
    switch the <span>insertion mode</span> to "<span
    title="insertion mode: after frameset">after
    frameset</span>".</p>

   </dd>

   <dt>A start tag whose tag name is "frame"</dt>
   <dd>
    <p><span>Insert an HTML element</span> for the token.
    Immediately pop the <span>current node</span> off the
    <span>stack of open elements</span>.</p>
   </dd>

   <dt>A start tag whose tag name is "noframes"</dt>
   <dd>
    <p>Process the token <span>using the rules for</span> the "<span
    title="insertion mode: in body">in body</span>" <span>insertion
    mode</span>.</p>
   </dd>

   <dt>An end-of-file token</dt>
   <dd>

    <p>If the <span>current node</span> is not the root
    <code>html</code> element, then this is a <span>parse
    error.</span>.</p>

    <p class="note">It can only be the <span>current node</span> in
    the <span>fragment case</span>.</p>

    <p><span>Stop parsing.</span></p>

   </dd>

   <dt>Anything else</dt>
   <dd>
    <p><span>Parse error</span>. Ignore the token.</p>
   </dd>

  </dl>


  <h5 id="parsing-main-afterframeset">The "<dfn title="insertion mode: after frameset">after frameset</dfn>" insertion mode</h5>

  <p>When the <span>insertion mode</span> is "<span title="insertion
  mode: after frameset">after frameset</span>", tokens must be handled as follows:</p>

  <!-- due to rules in the "in frameset" mode, this can't be entered in the fragment case -->
  <dl class="switch">

   <dt>A character token that is one of one of U+0009
   CHARACTER TABULATION, U+000A LINE FEED (LF), U+000B LINE
   TABULATION, U+000C FORM FEED (FF), <!--U+000D CARRIAGE RETURN (CR),-->
   or U+0020 SPACE</dt>
   <dd>
    <p><span title="insert a character">Insert the character</span> into
    the <span>current node</span>.</p>
   </dd>

   <dt>A comment token</dt>
   <dd>
    <p>Append a <code>Comment</code> node to the <span>current
    node</span> with the <code title="">data</code> attribute set to
    the data given in the comment token.</p>
   </dd>

   <dt>A DOCTYPE token</dt>
   <dd>
    <p><span>Parse error</span>. Ignore the token.</p>
   </dd>

   <dt>A start tag whose tag name is "html"</dt>
   <dt>A start tag whose tag name is "noframes"</dt>
   <dd>
    <p>Process the token <span>using the rules for</span> the "<span
    title="insertion mode: in body">in body</span>" <span>insertion
    mode</span>.</p>
   </dd>

   <dt>An end tag whose tag name is "html"</dt>
   <dd>
    <p>Switch the <span>insertion mode</span> to "<span
    title="insertion mode: after after frameset">after after
    frameset</span>".</p>
   </dd>

   <dt>An end-of-file token</dt>
   <dd>
    <p><span>Stop parsing.</span></p>
   </dd>

   <dt>Anything else</dt>
   <dd>
    <p><span>Parse error</span>. Ignore the token.</p>
   </dd>

  </dl>

  <p class="big-issue">This doesn't handle UAs that don't support
  frames, or that do support frames but want to show the NOFRAMES
  content. Supporting the former is easy; supporting the latter is
  harder.</p>


  <h5>The "<dfn title="insertion mode: after after body">after after body</dfn>" insertion mode</h5>

  <p>When the <span>insertion mode</span> is "<span title="insertion
  mode: after after body">after after body</span>", tokens must be handled as follows:</p>

  <dl class="switch">

   <dt>A comment token</dt>
   <dd>
    <p>Append a <code>Comment</code> node to the <code>Document</code>
    object with the <code title="">data</code> attribute set to the
    data given in the comment token.</p>
   </dd>

   <dt>A DOCTYPE token</dt>
   <dt>A character token that is one of one of U+0009 CHARACTER
   TABULATION, U+000A LINE FEED (LF), U+000B LINE TABULATION, U+000C
   FORM FEED (FF), <!--U+000D CARRIAGE RETURN (CR),--> or U+0020
   SPACE</dt>
   <dt>A start tag whose tag name is "html"</dt>
   <dd>
    <p>Process the token <span>using the rules for</span> the "<span
    title="insertion mode: in body">in body</span>" <span>insertion
    mode</span>.</p>
   </dd>

   <dt>An end-of-file token</dt>
   <dd>
    <p><span>Stop parsing</span>.</p>
   </dd>

   <dt>Anything else</dt>
   <dd>
    <p><span>Parse error</span>. Switch the <span>insertion mode</span>
    to "<span title="insertion mode: in body">in body</span>" and
    reprocess the token.</p>
   </dd>

  </dl>


  <h5>The "<dfn title="insertion mode: after after frameset">after after frameset</dfn>" insertion mode</h5>

  <p>When the <span>insertion mode</span> is "<span title="insertion
  mode: after after frameset">after after frameset</span>", tokens must be handled as follows:</p>

  <dl class="switch">
 
   <dt>A comment token</dt>
   <dd>
    <p>Append a <code>Comment</code> node to the <code>Document</code>
    object with the <code title="">data</code> attribute set to the
    data given in the comment token.</p>
   </dd>

   <dt>A DOCTYPE token</dt>
   <dt>A character token that is one of one of U+0009 CHARACTER
   TABULATION, U+000A LINE FEED (LF), U+000B LINE TABULATION, U+000C
   FORM FEED (FF), <!--U+000D CARRIAGE RETURN (CR),--> or U+0020
   SPACE</dt>
   <dt>A start tag whose tag name is "html"</dt>
   <dd>
    <p>Process the token <span>using the rules for</span> the "<span
    title="insertion mode: in body">in body</span>" <span>insertion
    mode</span>.</p>
   </dd>

   <dt>An end-of-file token</dt>
   <dd>
    <p><span>Stop parsing</span>.</p>
   </dd>

   <dt>Anything else</dt>
   <dd>
    <p><span>Parse error</span>. Switch the <span>insertion mode</span>
    to "<span title="insertion mode: in frameset">in frameset</span>" and
    reprocess the token.</p>
   </dd>

  </dl>


  <h4>The end</h4>

  <p>Once the user agent <dfn title="stop parsing">stops parsing</dfn>
  the document, the user agent must follow the steps in this
  section.</p>

  <p>First, <!--the user agent must <span title="fire a DOMContentLoaded
  event">fire a <code
  title="event-DOMContentLoaded">DOMContentLoaded</code> event</span>
  at <span>the <code>body</code> element</span>.</p>

  <p>Then, -->the rules for <span>when a script completes
  loading</span> start applying (script execution is no longer managed
  by the parser).</p>

  <p>If any of the scripts in the <span>list of scripts that will
  execute as soon as possible</span> have <span>completed
  loading</span><!-- XXX xref -->, or if the <span>list of scripts
  that will execute asynchronously</span> is not empty and the first
  script in that list has <span>completed loading</span><!-- XXX xref
  -->, then the user agent must act as if those scripts just completed
  loading, following the rules given for that in the
  <code>script</code> element definition.</p>

  <p>Then, if the <span>list of scripts that will execute when the
  document has finished parsing</span> is not empty, and the first
  item in this list has already <span>completed loading</span><!--XXX
  xref -->, then the user agent must act as if that script just
  finished loading.</p>

  <p>By this point, there will be no scripts that have loaded but have
  not yet been executed.</p>

  <p>The user agent must then <span>fire a simple event</span> called
  <code title="event-DOMContentLoaded">DOMContentLoaded</code> at the
  <code>Document</code>.</p>

  <p>Once everything that <dfn title="delay the load event">delays the
  load event</dfn> has completed, the user agent must <span
  title="fire a load event">fire a <code
  title="event-load">load</code> event</span> at <span>the
  <code>body</code> element</span>.</p>

  <!-- XXX make sure things "delay the load event" -->

  <p class="big-issue">delaying the load event for things like image
  loads allows for intranet port scans (even without
  javascript!). Should we really encode that into the spec?</p>


<!--XXX need to handle
http://lxr.mozilla.org/mozilla/source/parser/htmlparser/src/CNavDTD.cpp#2354
2354           // Don't open transient styles if it makes the stack deep, bug 58917.
-->

<!--XXX
http://lxr.mozilla.org/mozilla/source/parser/htmlparser/src/nsHTMLTokenizer.cpp#749
-->

<!--
see also  CTextToken::ConsumeCharacterData()  for CDATA parsing?

1212                      1  Here's a tricky case from bug 22596:  <h5><li><h5>
1213                         How do we know that the 2nd <h5> should close the <LI> rather than nest inside the <LI>?
1214                         (Afterall, the <h5> is a legal child of the <LI>).
1215               
1216                         The way you know is that there is no root between the two, so the <h5> binds more
1217                         tightly to the 1st <h5> than to the <LI>.
1218                      2.  Also, bug 6148 shows this case: <SPAN><DIV><SPAN>
1219                         From this case we learned not to execute this logic if the parent is a block.
1220                     
1221                      3. Fix for 26583
1222                         Ex. <A href=foo.html><B>foo<A href-bar.html>bar</A></B></A>  <- A legal HTML
1223                         In the above example clicking on "foo" or "bar" should link to
1224                         foo.html or bar.html respectively. That is, the inner <A> should be informed
1225                         about the presence of an open <A> above <B>..so that the inner <A> can close out
1226                         the outer <A>. The following code does it for us.
1227                      
1228                      4. Fix for 27865 [ similer to 22596 ]. Ex: <DL><DD><LI>one<DD><LI>two
 - http://lxr.mozilla.org/mozilla/source/parser/htmlparser/src/CNavDTD.cpp#1211

815             // Here's a problem.  If theTag is legal in here, we don't move it
816             // out.  So if we're moving stuff out of here, the parent of theTag
817             // gets closed at this point.  But some things are legal
818             // _everywhere_ and hence would effectively close out misplaced
819             // content in tables.  This is undesirable, so treat them as
820             // illegal here so they'll be shipped out with their parents and
821             // siblings.  See bug 40855 for an explanation (that bug was for
822             // comments, but the same issues arise with whitespace, newlines,
823             // noscript, etc).  Script is special, though.  Shipping it out
824             // breaks document.write stuff.  See bug 243064.
 - http://lxr.mozilla.org/mozilla/source/parser/htmlparser/src/CNavDTD.cpp#825


1326     /**************************************************************************************
1327      *
1328      * Now a little code to deal with bug #49687 (crash when layout stack gets too deep)
1329      * I've also opened this up to any container (not just inlines): re bug 55095
1330      * Improved to handle bug 55980 (infinite loop caused when DEPTH is exceeded and
1331      * </P> is encountered by itself (<P>) is continuously produced.
1332      *
1333      **************************************************************************************/

1912               // Oh boy!! we found a "stray" tag. Nav4.x and IE introduce line break in
1913               // such cases. So, let's simulate that effect for compatibility.
1914               // Ex. <html><body>Hello</P>There</body></html>
http://lxr.mozilla.org/mozilla/source/parser/htmlparser/src/CNavDTD.cpp#1912

http://lxr.mozilla.org/seamonkey/search?string=nested
/parser/htmlparser/src/CNavDTD.cpp, line 791 - * 2. <CENTER><DL><DT><A><CENTER> allow nested <CENTER>
/parser/htmlparser/src/CNavDTD.cpp, line 792 - * 3. <TABLE><TR><TD><TABLE>... allow nested <TABLE>
/parser/htmlparser/src/CNavDTD.cpp, line 2562 - // Discard nested forms - bug 72639
/parser/htmlparser/src/nsElementTable.cpp, line 1453 - * 2. <CENTER><DL><DT><A><CENTER> allow nested <CENTER>
/parser/htmlparser/src/nsElementTable.cpp, line 1454 - * 3. <TABLE><TR><TD><TABLE>... allow nested <TABLE>
/parser/htmlparser/src/nsElementTable.cpp, line 1901 - // Ex: <H1><LI><H1><LI>. Inner LI has the potential of getting nested
-->

  <h3>Namespaces</h3>

  <p>The <dfn>HTML namespace</dfn> is: <code>http://www.w3.org/1999/xhtml</code></p>



  <h3>Serialising HTML fragments</h3>

  <p>The following steps form the <dfn>HTML fragment serialisation
  algorithm</dfn>. The algorithm takes as input a DOM
  <code>Element</code> or <code>Document</code>, referred to as <var
  title="">the node</var>, and either returns a string or raises an
  exception.</p>

  <p class="note">This algorithm serialises the <em>children</em> of
  the node being serialised, not the node itself.</p>

  <ol>

   <li><p>Let <var title="">s</var> be a string, and initialise it to
   the empty string.</p></li>

   <li>

    <p>For each child node of <var title="">the node</var>, in
    <span>tree order</span>, run the following steps:

    <ol>

     <li><p>Let <var title="">current node</var> be the child node
     being processed.</p></li>

     <li>

      <p>Append the appropriate string from the following list to
      <var title="">s</var>:</p>

      <dl class="switch">

       <dt>If <var title="">current node</var> is an <code title="">Element</code></dt>

       <dd>

        <p>Append a U+003C LESS-THAN SIGN (<code title="">&lt;</code>)
        character, followed by the element's tag name. (For nodes
        created by the <span>HTML parser</span>, <code
        title="">Document.createElement()</code>, or <code
        title="">Document.renameNode()</code>, the tag name will be
        lowercase.)</p>

        <p>For each attribute that the element has, append a U+0020
        SPACE character, the attribute's name (which, for attributes set
        by the <span>HTML parser</span> or by <code
        title="">Element.setAttributeNode()</code> or <code
        title="">Element.setAttribute()</code>, will be lowercase), a
        U+003D EQUALS SIGN (<code title="">=</code>) character, a U+0022
        QUOTATION MARK (<code title="">&quot;</code>) character, the
        attribute's value, <span title="escaping a string">escaped as
        described below</span>, and a second U+0022 QUOTATION MARK
        (<code title="">&quot;</code>) character.</p>

        <p>While the exact order of attributes is UA-defined, and may
        depend on factors such as the order that the attributes were
        given in the original markup, the sort order must be stable,
        such that consecutive invocations of this algorithm serialise an
        element's attributes in the same order.</p>

        <p>Append a U+003E GREATER-THAN SIGN (<code title="">&gt;</code>)
        character.</p>

        <p>If <var title="">current node</var> is an
        <code>area</code>, <code>base</code>, <code>basefont</code>,
        <code>bgsound</code>, <code>br</code>, <code>col</code>,
        <code>embed</code>, <code>frame</code>, <code>hr</code>,
        <code>img</code>, <code>input</code>, <code>link</code>,
        <code>meta</code>, <code>param</code>, <code>spacer</code>, or
        <code>wbr</code> element, then continue on to the next child
        node at this point.</p> <!-- also, i guess: image, isindex,
        and keygen, but we don't list those because we don't consider
        those "elements", more "macros", and thus we should never
        serialise them --> <!-- XXX when we get around to it, add
        event-source -->

        <p>If <var title="">current node</var> is a <code>pre</code>
        or <code>textarea</code> element, append a U+000A LINE FEED
        (LF) character.</p>

        <p>Append the value of running the <span>HTML fragment
        serialisation algorithm</span> on the <var title="">current
        node</var> element (thus recursing into this algorithm for
        that element), followed by a U+003C LESS-THAN SIGN (<code
        title="">&lt;</code>) character, a U+002F SOLIDUS (<code
        title="">/</code>) character, the element's tag name again,
        and finally a U+003E GREATER-THAN SIGN (<code
        title="">&gt;</code>) character.</p>

       </dd>


       <dt>If <var title="">current node</var> is a <code
       title="">Text</code> or <code title="">CDATASection</code>
       node</dt>

       <dd>

        <p>If one of the ancestors of <var title="">current node</var>
        is a <code>style</code>, <code>script</code>,
        <code>xmp</code>, <code>iframe</code>, <code>noembed</code>,
        <code>noframes</code>, <code>noscript</code>, or
        <code>plaintext</code> element, then append the value of <var
        title="">current node</var>'s <code title="">data</code> DOM
        attribute literally.</p> <!-- note about noscript: we're
        assuming here that scripting is disabled. If this algorithm is
        used with scripting disabled, this won't work right. -->

        <p>Otherwise, append the value of <var title="">current
        node</var>'s <code title="">data</code> DOM attribute, <span
        title="escaping a string">escaped as described
        below</span>.</p>

       </dd>


       <dt>If <var title="">current node</var> is a <code
       title="">Comment</code></dt>

       <dd>

        <p>Append the literal string <code>&lt;!--</code> (U+003C
        LESS-THAN SIGN, U+0021 EXCLAMATION MARK, U+002D HYPHEN-MINUS,
        U+002D HYPHEN-MINUS), followed by the value of <var
        title="">current node</var>'s <code title="">data</code> DOM
        attribute, followed by the literal string <code>--&gt;</code>
        (U+002D HYPHEN-MINUS, U+002D HYPHEN-MINUS, U+003E GREATER-THAN
        SIGN).</p>

       </dd>


       <dt>If <var title="">current node</var> is a <code
       title="">ProcessingInstruction</code></dt>

       <dd>

        <p>Append the literal string <code>&lt;?</code> (U+003C
        LESS-THAN SIGN, U+003F QUESTION MARK), followed by the value
        of <var title="">current node</var>'s <code
        title="">target</code> DOM attribute, followed by a single
        U+0020 SPACE character, followed by the value of <var
        title="">current node</var>'s <code title="">data</code> DOM
        attribute, followed by a single U+003E GREATER-THAN SIGN
        character ('>').</p>

       </dd>


       <dt>If <var title="">current node</var> is a <code title="">DocumentType</code></dt>

       <dd>

        <p>Append the literal string <code>&lt;!DOCTYPE</code> (U+003C
        LESS-THAN SIGN, U+0021 EXCLAMATION MARK, U+0044 LATIN CAPITAL
        LETTER D, U+004F LATIN CAPITAL LETTER O, U+0043 LATIN CAPITAL
        LETTER C, U+0054 LATIN CAPITAL LETTER T, U+0059 LATIN CAPITAL
        LETTER Y, U+0050 LATIN CAPITAL LETTER P, U+0045 LATIN CAPITAL
        LETTER E), followed by a space (U+0020 SPACE), followed by the
        value of <var title="">current node</var>'s <code
        title="">name</code> DOM attribute, followed by the literal
        string <code>&gt;</code> (U+003E GREATER-THAN SIGN).</p>

       </dd>


      </dl>

      <p>Other node types (e.g. <code title="">Attr</code>) cannot
      occur as children of elements. If, despite this, they somehow do
      occur, this algorithm must raise an
      <code>INVALID_STATE_ERR</code> exception.</p>

     </li>

    </ol>

   </li>

   <li><p>The result of the algorithm is the string <var
   title="">s</var>.</p></li>

  </ol>

  <p><dfn id="escapingString">Escaping a string</dfn> (for the
  purposes of the algorithm above) consists of replacing any
  occurrences of the "<code title="">&amp;</code>" character by the
  string "<code title="">&amp;amp;</code>", any occurrences of the
  "<code title="">&lt;</code>" character by the string "<code
  title="">&amp;lt;</code>", any occurrences of the "<code
  title="">&gt;</code>" character by the string "<code
  title="">&amp;gt;</code>", any occurrences of the "<code
  title="">&quot;</code>" character by the string "<code
  title="">&amp;quot;</code>", and any occurrences of the U+00A0
  NO-BREAK SPACE character by the string "<code
  title="">&amp;nbsp;</code>".</p>

  <p class="note">Entity reference nodes are <a
  href="#entity-references">assumed to be expanded</a> by the user
  agent, and are therefore not covered in the algorithm above.</p>

  <p class="note">It is possible that the output of this algorithm, if
  parsed with an <span>HTML parser</span>, will not return the
  original tree structure. For instance, if a <code>textarea</code>
  element to which a <code title="">Comment</code> node has been
  appended is serialised and the output is then reparsed, the comment
  will end up being displayed in the text field. Similarly, if, as a
  result of DOM manipulation, an element contains a comment that
  contains the literal string "<code title="">--&gt;</code>", then
  when the result of serialising the element is parsed, the comment
  will be truncated at that point and the rest of the comment will be
  interpreted as markup. More examples would be making a
  <code>script</code> element contain a text node with the text string
  "<code>&lt;/script></code>", or having a <code>p</code> element that
  contains a <code>ul</code> element (as the <code>ul</code> element's
  <span title="syntax-start-tag">start tag</span> would imply the end
  tag for the <code>p</code>).</p>



  <h3>Parsing HTML fragments</h3>

  <p>The following steps form the <dfn>HTML fragment parsing
  algorithm</dfn>. The algorithm takes as input a DOM
  <code>Element</code>, referred to as the <var title="">context</var>
  element, which gives the context for the parser, as well as <var
  title="">input</var>, a string to parse, and returns a list of zero
  or more nodes.</p>

  <p class="note">Parts marked <dfn>fragment case</dfn> in algorithms
  in the parser section are parts that only occur if the parser was
  created for the purposes of this algorithm. The algorithms have been
  annotated with such markings for informational purposes only; such
  markings have no normative weight. If it is possible for a condition
  described as a <span>fragment case</span> to occur even when the
  parser wasn't created for the purposes of handling this algorithm,
  then that is an error in the specification.</p>

  <ol>

   <li>

    <p>Create a new <code>Document</code> node, and mark it as being
    an <span title="HTML documents">HTML document</span>.</p>

   </li>

   <li>

    <p>Create a new <span>HTML parser</span>, and associate it with
    the just created <code>Document</code> node.</p>

   </li>

   <li>

    <p>Set the <span>HTML parser</span>'s <span>tokenisation</span>
    stage's <span>content model flag</span> according to the <var
    title="">context</var> element, as follows:</p>

    <dl class="switch">

     <dt>If it is a <code>title</code> or <code>textarea</code>
     element</dt>

     <dd>Set the <span>content model flag</span> to
     <em>RCDATA</em>.</dd>


     <dt>If it is a <code>style</code>, <code>script</code>,
     <code>xmp</code>, <code>iframe</code>, <code>noembed</code>, or
     <code>noframes</code> element</dt>

     <dd>Set the <span>content model flag</span> to
     <em>CDATA</em>.</dd>


     <dt>If it is a <code>noscript</code> element</dt>
     <dd>If <span>scripting is enabled</span>, set the <span>content
     model flag</span> to <em>CDATA</em>. Otherwise, set the
     <span>content model flag</span> to <em>PCDATA</em>.</dd>


     <dt>If it is a <code>plaintext</code> element</dt>

     <dd>Set the <span>content model flag</span> to
     <em>PLAINTEXT</em>.</dd>


     <dt>Otherwise</dt>

     <dd>Set the <span>content model flag</span> to <em>PCDATA</em>.</dd>

    </dl>

   </li>

   <li>

    <p>Let <var title="">root</var> be a new <code>html</code> element
    with no attributes.</p>

   </li>

   <li>

    <p>Append the element <var title="">root</var> to the
    <code>Document</code> node created above.</p>

   </li>

   <li>

    <p>Set up the parser's <span>stack of open elements</span> so that
    it contains just the single element <var title="">root</var>.</p>

   </li>

   <li>

    <p><span title="reset the insertion mode appropriately">Reset the
    parser's insertion mode appropriately</span>.</p>

    <p class="note">The parser will reference the <var
    title="">context</var> element as part of that algorithm.</p>

   </li>

   <li>

    <p>Set the parser's <span><code>form</code> element pointer</span>
    to the nearest node to the <var title="">context</var> element
    that is a <code>form</code> element (going straight up the
    ancestor chain, and including the element itself, if it is a
    <code>form</code> element), or, if there is no such
    <code>form</code> element, to null.</p>

   </li>

   <li>

    <p>Place into the <span>input stream</span> for the <span>HTML
    parser</span> just created the <var title="">input</var>.</p>

   </li>

   <li>

    <p>Start the parser and let it run until it has consumed all the
    characters just inserted into the input stream.</p>

   </li>

   <li>

    <p>Return all the child nodes of <var title="">root</var>,
    preserving the document order.</p>

   </li>

  </ol>



  <h3><dfn>Entities</dfn></h3>

  <p>This table lists the entity names that are supported by HTML, and
  the code points to which they refer. It is referenced by the previous
  sections.</p>

  <div class="tall-and-narrow">
   <table>
    <thead>
     <tr> <th> Entity Name </th> <th> Character </th> </tr>
    </thead>
    <tbody>
     <tr> <td> <code title="">AElig;</code> </td> <td> U+00C6 </td> </tr>
     <tr> <td> <code title="">AElig</code> </td> <td> U+00C6 </td> </tr>
     <tr> <td> <code title="">AMP;</code> </td> <td> U+0026 </td> </tr>
     <tr> <td> <code title="">AMP</code> </td> <td> U+0026 </td> </tr>
     <tr> <td> <code title="">Aacute;</code> </td> <td> U+00C1 </td> </tr>
     <tr> <td> <code title="">Aacute</code> </td> <td> U+00C1 </td> </tr>
     <tr> <td> <code title="">Acirc;</code> </td> <td> U+00C2 </td> </tr>
     <tr> <td> <code title="">Acirc</code> </td> <td> U+00C2 </td> </tr>
     <tr> <td> <code title="">Agrave;</code> </td> <td> U+00C0 </td> </tr>
     <tr> <td> <code title="">Agrave</code> </td> <td> U+00C0 </td> </tr>
     <tr> <td> <code title="">Alpha;</code> </td> <td> U+0391 </td> </tr>
     <tr> <td> <code title="">Aring;</code> </td> <td> U+00C5 </td> </tr>
     <tr> <td> <code title="">Aring</code> </td> <td> U+00C5 </td> </tr>
     <tr> <td> <code title="">Atilde;</code> </td> <td> U+00C3 </td> </tr>
     <tr> <td> <code title="">Atilde</code> </td> <td> U+00C3 </td> </tr>
     <tr> <td> <code title="">Auml;</code> </td> <td> U+00C4 </td> </tr>
     <tr> <td> <code title="">Auml</code> </td> <td> U+00C4 </td> </tr>
     <tr> <td> <code title="">Beta;</code> </td> <td> U+0392 </td> </tr>
     <tr> <td> <code title="">COPY;</code> </td> <td> U+00A9 </td> </tr>
     <tr> <td> <code title="">COPY</code> </td> <td> U+00A9 </td> </tr>
     <tr> <td> <code title="">Ccedil;</code> </td> <td> U+00C7 </td> </tr>
     <tr> <td> <code title="">Ccedil</code> </td> <td> U+00C7 </td> </tr>
     <tr> <td> <code title="">Chi;</code> </td> <td> U+03A7 </td> </tr>
     <tr> <td> <code title="">Dagger;</code> </td> <td> U+2021 </td> </tr>
     <tr> <td> <code title="">Delta;</code> </td> <td> U+0394 </td> </tr>
     <tr> <td> <code title="">ETH;</code> </td> <td> U+00D0 </td> </tr>
     <tr> <td> <code title="">ETH</code> </td> <td> U+00D0 </td> </tr>
     <tr> <td> <code title="">Eacute;</code> </td> <td> U+00C9 </td> </tr>
     <tr> <td> <code title="">Eacute</code> </td> <td> U+00C9 </td> </tr>
     <tr> <td> <code title="">Ecirc;</code> </td> <td> U+00CA </td> </tr>
     <tr> <td> <code title="">Ecirc</code> </td> <td> U+00CA </td> </tr>
     <tr> <td> <code title="">Egrave;</code> </td> <td> U+00C8 </td> </tr>
     <tr> <td> <code title="">Egrave</code> </td> <td> U+00C8 </td> </tr>
     <tr> <td> <code title="">Epsilon;</code> </td> <td> U+0395 </td> </tr>
     <tr> <td> <code title="">Eta;</code> </td> <td> U+0397 </td> </tr>
     <tr> <td> <code title="">Euml;</code> </td> <td> U+00CB </td> </tr>
     <tr> <td> <code title="">Euml</code> </td> <td> U+00CB </td> </tr>
     <tr> <td> <code title="">GT;</code> </td> <td> U+003E </td> </tr>
     <tr> <td> <code title="">GT</code> </td> <td> U+003E </td> </tr>
     <tr> <td> <code title="">Gamma;</code> </td> <td> U+0393 </td> </tr>
     <tr> <td> <code title="">Iacute;</code> </td> <td> U+00CD </td> </tr>
     <tr> <td> <code title="">Iacute</code> </td> <td> U+00CD </td> </tr>
     <tr> <td> <code title="">Icirc;</code> </td> <td> U+00CE </td> </tr>
     <tr> <td> <code title="">Icirc</code> </td> <td> U+00CE </td> </tr>
     <tr> <td> <code title="">Igrave;</code> </td> <td> U+00CC </td> </tr>
     <tr> <td> <code title="">Igrave</code> </td> <td> U+00CC </td> </tr>
     <tr> <td> <code title="">Iota;</code> </td> <td> U+0399 </td> </tr>
     <tr> <td> <code title="">Iuml;</code> </td> <td> U+00CF </td> </tr>
     <tr> <td> <code title="">Iuml</code> </td> <td> U+00CF </td> </tr>
     <tr> <td> <code title="">Kappa;</code> </td> <td> U+039A </td> </tr>
     <tr> <td> <code title="">LT;</code> </td> <td> U+003C </td> </tr>
     <tr> <td> <code title="">LT</code> </td> <td> U+003C </td> </tr>
     <tr> <td> <code title="">Lambda;</code> </td> <td> U+039B </td> </tr>
     <tr> <td> <code title="">Mu;</code> </td> <td> U+039C </td> </tr>
     <tr> <td> <code title="">Ntilde;</code> </td> <td> U+00D1 </td> </tr>
     <tr> <td> <code title="">Ntilde</code> </td> <td> U+00D1 </td> </tr>
     <tr> <td> <code title="">Nu;</code> </td> <td> U+039D </td> </tr>
     <tr> <td> <code title="">OElig;</code> </td> <td> U+0152 </td> </tr>
     <tr> <td> <code title="">Oacute;</code> </td> <td> U+00D3 </td> </tr>
     <tr> <td> <code title="">Oacute</code> </td> <td> U+00D3 </td> </tr>
     <tr> <td> <code title="">Ocirc;</code> </td> <td> U+00D4 </td> </tr>
     <tr> <td> <code title="">Ocirc</code> </td> <td> U+00D4 </td> </tr>
     <tr> <td> <code title="">Ograve;</code> </td> <td> U+00D2 </td> </tr>
     <tr> <td> <code title="">Ograve</code> </td> <td> U+00D2 </td> </tr>
     <tr> <td> <code title="">Omega;</code> </td> <td> U+03A9 </td> </tr>
     <tr> <td> <code title="">Omicron;</code> </td> <td> U+039F </td> </tr>
     <tr> <td> <code title="">Oslash;</code> </td> <td> U+00D8 </td> </tr>
     <tr> <td> <code title="">Oslash</code> </td> <td> U+00D8 </td> </tr>
     <tr> <td> <code title="">Otilde;</code> </td> <td> U+00D5 </td> </tr>
     <tr> <td> <code title="">Otilde</code> </td> <td> U+00D5 </td> </tr>
     <tr> <td> <code title="">Ouml;</code> </td> <td> U+00D6 </td> </tr>
     <tr> <td> <code title="">Ouml</code> </td> <td> U+00D6 </td> </tr>
     <tr> <td> <code title="">Phi;</code> </td> <td> U+03A6 </td> </tr>
     <tr> <td> <code title="">Pi;</code> </td> <td> U+03A0 </td> </tr>
     <tr> <td> <code title="">Prime;</code> </td> <td> U+2033 </td> </tr>
     <tr> <td> <code title="">Psi;</code> </td> <td> U+03A8 </td> </tr>
     <tr> <td> <code title="">QUOT;</code> </td> <td> U+0022 </td> </tr>
     <tr> <td> <code title="">QUOT</code> </td> <td> U+0022 </td> </tr>
     <tr> <td> <code title="">REG;</code> </td> <td> U+00AE </td> </tr>
     <tr> <td> <code title="">REG</code> </td> <td> U+00AE </td> </tr>
     <tr> <td> <code title="">Rho;</code> </td> <td> U+03A1 </td> </tr>
     <tr> <td> <code title="">Scaron;</code> </td> <td> U+0160 </td> </tr>
     <tr> <td> <code title="">Sigma;</code> </td> <td> U+03A3 </td> </tr>
     <tr> <td> <code title="">THORN;</code> </td> <td> U+00DE </td> </tr>
     <tr> <td> <code title="">THORN</code> </td> <td> U+00DE </td> </tr>
     <tr> <td> <code title="">TRADE;</code> </td> <td> U+2122 </td> </tr>
     <tr> <td> <code title="">Tau;</code> </td> <td> U+03A4 </td> </tr>
     <tr> <td> <code title="">Theta;</code> </td> <td> U+0398 </td> </tr>
     <tr> <td> <code title="">Uacute;</code> </td> <td> U+00DA </td> </tr>
     <tr> <td> <code title="">Uacute</code> </td> <td> U+00DA </td> </tr>
     <tr> <td> <code title="">Ucirc;</code> </td> <td> U+00DB </td> </tr>
     <tr> <td> <code title="">Ucirc</code> </td> <td> U+00DB </td> </tr>
     <tr> <td> <code title="">Ugrave;</code> </td> <td> U+00D9 </td> </tr>
     <tr> <td> <code title="">Ugrave</code> </td> <td> U+00D9 </td> </tr>
     <tr> <td> <code title="">Upsilon;</code> </td> <td> U+03A5 </td> </tr>
     <tr> <td> <code title="">Uuml;</code> </td> <td> U+00DC </td> </tr>
     <tr> <td> <code title="">Uuml</code> </td> <td> U+00DC </td> </tr>
     <tr> <td> <code title="">Xi;</code> </td> <td> U+039E </td> </tr>
     <tr> <td> <code title="">Yacute;</code> </td> <td> U+00DD </td> </tr>
     <tr> <td> <code title="">Yacute</code> </td> <td> U+00DD </td> </tr>
     <tr> <td> <code title="">Yuml;</code> </td> <td> U+0178 </td> </tr>
     <tr> <td> <code title="">Zeta;</code> </td> <td> U+0396 </td> </tr>
     <tr> <td> <code title="">aacute;</code> </td> <td> U+00E1 </td> </tr>
     <tr> <td> <code title="">aacute</code> </td> <td> U+00E1 </td> </tr>
     <tr> <td> <code title="">acirc;</code> </td> <td> U+00E2 </td> </tr>
     <tr> <td> <code title="">acirc</code> </td> <td> U+00E2 </td> </tr>
     <tr> <td> <code title="">acute;</code> </td> <td> U+00B4 </td> </tr>
     <tr> <td> <code title="">acute</code> </td> <td> U+00B4 </td> </tr>
     <tr> <td> <code title="">aelig;</code> </td> <td> U+00E6 </td> </tr>
     <tr> <td> <code title="">aelig</code> </td> <td> U+00E6 </td> </tr>
     <tr> <td> <code title="">agrave;</code> </td> <td> U+00E0 </td> </tr>
     <tr> <td> <code title="">agrave</code> </td> <td> U+00E0 </td> </tr>
     <tr> <td> <code title="">alefsym;</code> </td> <td> U+2135 </td> </tr>
     <tr> <td> <code title="">alpha;</code> </td> <td> U+03B1 </td> </tr>
     <tr> <td> <code title="">amp;</code> </td> <td> U+0026 </td> </tr>
     <tr> <td> <code title="">amp</code> </td> <td> U+0026 </td> </tr>
     <tr> <td> <code title="">and;</code> </td> <td> U+2227 </td> </tr>
     <tr> <td> <code title="">ang;</code> </td> <td> U+2220 </td> </tr>
     <tr> <td> <code title="">apos;</code> </td> <td> U+0027 </td> </tr>
     <tr> <td> <code title="">aring;</code> </td> <td> U+00E5 </td> </tr>
     <tr> <td> <code title="">aring</code> </td> <td> U+00E5 </td> </tr>
     <tr> <td> <code title="">asymp;</code> </td> <td> U+2248 </td> </tr>
     <tr> <td> <code title="">atilde;</code> </td> <td> U+00E3 </td> </tr>
     <tr> <td> <code title="">atilde</code> </td> <td> U+00E3 </td> </tr>
     <tr> <td> <code title="">auml;</code> </td> <td> U+00E4 </td> </tr>
     <tr> <td> <code title="">auml</code> </td> <td> U+00E4 </td> </tr>
     <tr> <td> <code title="">bdquo;</code> </td> <td> U+201E </td> </tr>
     <tr> <td> <code title="">beta;</code> </td> <td> U+03B2 </td> </tr>
     <tr> <td> <code title="">brvbar;</code> </td> <td> U+00A6 </td> </tr>
     <tr> <td> <code title="">brvbar</code> </td> <td> U+00A6 </td> </tr>
     <tr> <td> <code title="">bull;</code> </td> <td> U+2022 </td> </tr>
     <tr> <td> <code title="">cap;</code> </td> <td> U+2229 </td> </tr>
     <tr> <td> <code title="">ccedil;</code> </td> <td> U+00E7 </td> </tr>
     <tr> <td> <code title="">ccedil</code> </td> <td> U+00E7 </td> </tr>
     <tr> <td> <code title="">cedil;</code> </td> <td> U+00B8 </td> </tr>
     <tr> <td> <code title="">cedil</code> </td> <td> U+00B8 </td> </tr>
     <tr> <td> <code title="">cent;</code> </td> <td> U+00A2 </td> </tr>
     <tr> <td> <code title="">cent</code> </td> <td> U+00A2 </td> </tr>
     <tr> <td> <code title="">chi;</code> </td> <td> U+03C7 </td> </tr>
     <tr> <td> <code title="">circ;</code> </td> <td> U+02C6 </td> </tr>
     <tr> <td> <code title="">clubs;</code> </td> <td> U+2663 </td> </tr>
     <tr> <td> <code title="">cong;</code> </td> <td> U+2245 </td> </tr>
     <tr> <td> <code title="">copy;</code> </td> <td> U+00A9 </td> </tr>
     <tr> <td> <code title="">copy</code> </td> <td> U+00A9 </td> </tr>
     <tr> <td> <code title="">crarr;</code> </td> <td> U+21B5 </td> </tr>
     <tr> <td> <code title="">cup;</code> </td> <td> U+222A </td> </tr>
     <tr> <td> <code title="">curren;</code> </td> <td> U+00A4 </td> </tr>
     <tr> <td> <code title="">curren</code> </td> <td> U+00A4 </td> </tr>
     <tr> <td> <code title="">dArr;</code> </td> <td> U+21D3 </td> </tr>
     <tr> <td> <code title="">dagger;</code> </td> <td> U+2020 </td> </tr>
     <tr> <td> <code title="">darr;</code> </td> <td> U+2193 </td> </tr>
     <tr> <td> <code title="">deg;</code> </td> <td> U+00B0 </td> </tr>
     <tr> <td> <code title="">deg</code> </td> <td> U+00B0 </td> </tr>
     <tr> <td> <code title="">delta;</code> </td> <td> U+03B4 </td> </tr>
     <tr> <td> <code title="">diams;</code> </td> <td> U+2666 </td> </tr>
     <tr> <td> <code title="">divide;</code> </td> <td> U+00F7 </td> </tr>
     <tr> <td> <code title="">divide</code> </td> <td> U+00F7 </td> </tr>
     <tr> <td> <code title="">eacute;</code> </td> <td> U+00E9 </td> </tr>
     <tr> <td> <code title="">eacute</code> </td> <td> U+00E9 </td> </tr>
     <tr> <td> <code title="">ecirc;</code> </td> <td> U+00EA </td> </tr>
     <tr> <td> <code title="">ecirc</code> </td> <td> U+00EA </td> </tr>
     <tr> <td> <code title="">egrave;</code> </td> <td> U+00E8 </td> </tr>
     <tr> <td> <code title="">egrave</code> </td> <td> U+00E8 </td> </tr>
     <tr> <td> <code title="">empty;</code> </td> <td> U+2205 </td> </tr>
     <tr> <td> <code title="">emsp;</code> </td> <td> U+2003 </td> </tr>
     <tr> <td> <code title="">ensp;</code> </td> <td> U+2002 </td> </tr>
     <tr> <td> <code title="">epsilon;</code> </td> <td> U+03B5 </td> </tr>
     <tr> <td> <code title="">equiv;</code> </td> <td> U+2261 </td> </tr>
     <tr> <td> <code title="">eta;</code> </td> <td> U+03B7 </td> </tr>
     <tr> <td> <code title="">eth;</code> </td> <td> U+00F0 </td> </tr>
     <tr> <td> <code title="">eth</code> </td> <td> U+00F0 </td> </tr>
     <tr> <td> <code title="">euml;</code> </td> <td> U+00EB </td> </tr>
     <tr> <td> <code title="">euml</code> </td> <td> U+00EB </td> </tr>
     <tr> <td> <code title="">euro;</code> </td> <td> U+20AC </td> </tr>
     <tr> <td> <code title="">exist;</code> </td> <td> U+2203 </td> </tr>
     <tr> <td> <code title="">fnof;</code> </td> <td> U+0192 </td> </tr>
     <tr> <td> <code title="">forall;</code> </td> <td> U+2200 </td> </tr>
     <tr> <td> <code title="">frac12;</code> </td> <td> U+00BD </td> </tr>
     <tr> <td> <code title="">frac12</code> </td> <td> U+00BD </td> </tr>
     <tr> <td> <code title="">frac14;</code> </td> <td> U+00BC </td> </tr>
     <tr> <td> <code title="">frac14</code> </td> <td> U+00BC </td> </tr>
     <tr> <td> <code title="">frac34;</code> </td> <td> U+00BE </td> </tr>
     <tr> <td> <code title="">frac34</code> </td> <td> U+00BE </td> </tr>
     <tr> <td> <code title="">frasl;</code> </td> <td> U+2044 </td> </tr>
     <tr> <td> <code title="">gamma;</code> </td> <td> U+03B3 </td> </tr>
     <tr> <td> <code title="">ge;</code> </td> <td> U+2265 </td> </tr>
     <tr> <td> <code title="">gt;</code> </td> <td> U+003E </td> </tr>
     <tr> <td> <code title="">gt</code> </td> <td> U+003E </td> </tr>
     <tr> <td> <code title="">hArr;</code> </td> <td> U+21D4 </td> </tr>
     <tr> <td> <code title="">harr;</code> </td> <td> U+2194 </td> </tr>
     <tr> <td> <code title="">hearts;</code> </td> <td> U+2665 </td> </tr>
     <tr> <td> <code title="">hellip;</code> </td> <td> U+2026 </td> </tr>
     <tr> <td> <code title="">iacute;</code> </td> <td> U+00ED </td> </tr>
     <tr> <td> <code title="">iacute</code> </td> <td> U+00ED </td> </tr>
     <tr> <td> <code title="">icirc;</code> </td> <td> U+00EE </td> </tr>
     <tr> <td> <code title="">icirc</code> </td> <td> U+00EE </td> </tr>
     <tr> <td> <code title="">iexcl;</code> </td> <td> U+00A1 </td> </tr>
     <tr> <td> <code title="">iexcl</code> </td> <td> U+00A1 </td> </tr>
     <tr> <td> <code title="">igrave;</code> </td> <td> U+00EC </td> </tr>
     <tr> <td> <code title="">igrave</code> </td> <td> U+00EC </td> </tr>
     <tr> <td> <code title="">image;</code> </td> <td> U+2111 </td> </tr>
     <tr> <td> <code title="">infin;</code> </td> <td> U+221E </td> </tr>
     <tr> <td> <code title="">int;</code> </td> <td> U+222B </td> </tr>
     <tr> <td> <code title="">iota;</code> </td> <td> U+03B9 </td> </tr>
     <tr> <td> <code title="">iquest;</code> </td> <td> U+00BF </td> </tr>
     <tr> <td> <code title="">iquest</code> </td> <td> U+00BF </td> </tr>
     <tr> <td> <code title="">isin;</code> </td> <td> U+2208 </td> </tr>
     <tr> <td> <code title="">iuml;</code> </td> <td> U+00EF </td> </tr>
     <tr> <td> <code title="">iuml</code> </td> <td> U+00EF </td> </tr>
     <tr> <td> <code title="">kappa;</code> </td> <td> U+03BA </td> </tr>
     <tr> <td> <code title="">lArr;</code> </td> <td> U+21D0 </td> </tr>
     <tr> <td> <code title="">lambda;</code> </td> <td> U+03BB </td> </tr>
     <tr> <td> <code title="">lang;</code> </td> <td> U+27E8 </td> </tr> <!-- HTML4 had this mapping to U+2329 which is canonically equivalent to U+3008 which is a CJK full-width character. U+27E8 is the mathematical equivalent. -->
     <tr> <td> <code title="">laquo;</code> </td> <td> U+00AB </td> </tr>
     <tr> <td> <code title="">laquo</code> </td> <td> U+00AB </td> </tr>
     <tr> <td> <code title="">larr;</code> </td> <td> U+2190 </td> </tr>
     <tr> <td> <code title="">lceil;</code> </td> <td> U+2308 </td> </tr>
     <tr> <td> <code title="">ldquo;</code> </td> <td> U+201C </td> </tr>
     <tr> <td> <code title="">le;</code> </td> <td> U+2264 </td> </tr>
     <tr> <td> <code title="">lfloor;</code> </td> <td> U+230A </td> </tr>
     <tr> <td> <code title="">lowast;</code> </td> <td> U+2217 </td> </tr>
     <tr> <td> <code title="">loz;</code> </td> <td> U+25CA </td> </tr>
     <tr> <td> <code title="">lrm;</code> </td> <td> U+200E </td> </tr>
     <tr> <td> <code title="">lsaquo;</code> </td> <td> U+2039 </td> </tr>
     <tr> <td> <code title="">lsquo;</code> </td> <td> U+2018 </td> </tr>
     <tr> <td> <code title="">lt;</code> </td> <td> U+003C </td> </tr>
     <tr> <td> <code title="">lt</code> </td> <td> U+003C </td> </tr>
     <tr> <td> <code title="">macr;</code> </td> <td> U+00AF </td> </tr>
     <tr> <td> <code title="">macr</code> </td> <td> U+00AF </td> </tr>
     <tr> <td> <code title="">mdash;</code> </td> <td> U+2014 </td> </tr>
     <tr> <td> <code title="">micro;</code> </td> <td> U+00B5 </td> </tr>
     <tr> <td> <code title="">micro</code> </td> <td> U+00B5 </td> </tr>
     <tr> <td> <code title="">middot;</code> </td> <td> U+00B7 </td> </tr>
     <tr> <td> <code title="">middot</code> </td> <td> U+00B7 </td> </tr>
     <tr> <td> <code title="">minus;</code> </td> <td> U+2212 </td> </tr>
     <tr> <td> <code title="">mu;</code> </td> <td> U+03BC </td> </tr>
     <tr> <td> <code title="">nabla;</code> </td> <td> U+2207 </td> </tr>
     <tr> <td> <code title="">nbsp;</code> </td> <td> U+00A0 </td> </tr>
     <tr> <td> <code title="">nbsp</code> </td> <td> U+00A0 </td> </tr>
     <tr> <td> <code title="">ndash;</code> </td> <td> U+2013 </td> </tr>
     <tr> <td> <code title="">ne;</code> </td> <td> U+2260 </td> </tr>
     <tr> <td> <code title="">ni;</code> </td> <td> U+220B </td> </tr>
     <tr> <td> <code title="">not;</code> </td> <td> U+00AC </td> </tr>
     <tr> <td> <code title="">not</code> </td> <td> U+00AC </td> </tr>
     <tr> <td> <code title="">notin;</code> </td> <td> U+2209 </td> </tr>
     <tr> <td> <code title="">nsub;</code> </td> <td> U+2284 </td> </tr>
     <tr> <td> <code title="">ntilde;</code> </td> <td> U+00F1 </td> </tr>
     <tr> <td> <code title="">ntilde</code> </td> <td> U+00F1 </td> </tr>
     <tr> <td> <code title="">nu;</code> </td> <td> U+03BD </td> </tr>
     <tr> <td> <code title="">oacute;</code> </td> <td> U+00F3 </td> </tr>
     <tr> <td> <code title="">oacute</code> </td> <td> U+00F3 </td> </tr>
     <tr> <td> <code title="">ocirc;</code> </td> <td> U+00F4 </td> </tr>
     <tr> <td> <code title="">ocirc</code> </td> <td> U+00F4 </td> </tr>
     <tr> <td> <code title="">oelig;</code> </td> <td> U+0153 </td> </tr>
     <tr> <td> <code title="">ograve;</code> </td> <td> U+00F2 </td> </tr>
     <tr> <td> <code title="">ograve</code> </td> <td> U+00F2 </td> </tr>
     <tr> <td> <code title="">oline;</code> </td> <td> U+203E </td> </tr>
     <tr> <td> <code title="">omega;</code> </td> <td> U+03C9 </td> </tr>
     <tr> <td> <code title="">omicron;</code> </td> <td> U+03BF </td> </tr>
     <tr> <td> <code title="">oplus;</code> </td> <td> U+2295 </td> </tr>
     <tr> <td> <code title="">or;</code> </td> <td> U+2228 </td> </tr>
     <tr> <td> <code title="">ordf;</code> </td> <td> U+00AA </td> </tr>
     <tr> <td> <code title="">ordf</code> </td> <td> U+00AA </td> </tr>
     <tr> <td> <code title="">ordm;</code> </td> <td> U+00BA </td> </tr>
     <tr> <td> <code title="">ordm</code> </td> <td> U+00BA </td> </tr>
     <tr> <td> <code title="">oslash;</code> </td> <td> U+00F8 </td> </tr>
     <tr> <td> <code title="">oslash</code> </td> <td> U+00F8 </td> </tr>
     <tr> <td> <code title="">otilde;</code> </td> <td> U+00F5 </td> </tr>
     <tr> <td> <code title="">otilde</code> </td> <td> U+00F5 </td> </tr>
     <tr> <td> <code title="">otimes;</code> </td> <td> U+2297 </td> </tr>
     <tr> <td> <code title="">ouml;</code> </td> <td> U+00F6 </td> </tr>
     <tr> <td> <code title="">ouml</code> </td> <td> U+00F6 </td> </tr>
     <tr> <td> <code title="">para;</code> </td> <td> U+00B6 </td> </tr>
     <tr> <td> <code title="">para</code> </td> <td> U+00B6 </td> </tr>
     <tr> <td> <code title="">part;</code> </td> <td> U+2202 </td> </tr>
     <tr> <td> <code title="">permil;</code> </td> <td> U+2030 </td> </tr>
     <tr> <td> <code title="">perp;</code> </td> <td> U+22A5 </td> </tr>
     <tr> <td> <code title="">phi;</code> </td> <td> U+03C6 </td> </tr>
     <tr> <td> <code title="">pi;</code> </td> <td> U+03C0 </td> </tr>
     <tr> <td> <code title="">piv;</code> </td> <td> U+03D6 </td> </tr>
     <tr> <td> <code title="">plusmn;</code> </td> <td> U+00B1 </td> </tr>
     <tr> <td> <code title="">plusmn</code> </td> <td> U+00B1 </td> </tr>
     <tr> <td> <code title="">pound;</code> </td> <td> U+00A3 </td> </tr>
     <tr> <td> <code title="">pound</code> </td> <td> U+00A3 </td> </tr>
     <tr> <td> <code title="">prime;</code> </td> <td> U+2032 </td> </tr>
     <tr> <td> <code title="">prod;</code> </td> <td> U+220F </td> </tr>
     <tr> <td> <code title="">prop;</code> </td> <td> U+221D </td> </tr>
     <tr> <td> <code title="">psi;</code> </td> <td> U+03C8 </td> </tr>
     <tr> <td> <code title="">quot;</code> </td> <td> U+0022 </td> </tr>
     <tr> <td> <code title="">quot</code> </td> <td> U+0022 </td> </tr>
     <tr> <td> <code title="">rArr;</code> </td> <td> U+21D2 </td> </tr>
     <tr> <td> <code title="">radic;</code> </td> <td> U+221A </td> </tr>
     <tr> <td> <code title="">rang;</code> </td> <td> U+27E9 </td> </tr> <!-- HTML4 had this mapping to U+232A which is canonically equivalent to U+3009 which is a CJK full-width character. U+27E9 is the mathematical equivalent. -->
     <tr> <td> <code title="">raquo;</code> </td> <td> U+00BB </td> </tr>
     <tr> <td> <code title="">raquo</code> </td> <td> U+00BB </td> </tr>
     <tr> <td> <code title="">rarr;</code> </td> <td> U+2192 </td> </tr>
     <tr> <td> <code title="">rceil;</code> </td> <td> U+2309 </td> </tr>
     <tr> <td> <code title="">rdquo;</code> </td> <td> U+201D </td> </tr>
     <tr> <td> <code title="">real;</code> </td> <td> U+211C </td> </tr>
     <tr> <td> <code title="">reg;</code> </td> <td> U+00AE </td> </tr>
     <tr> <td> <code title="">reg</code> </td> <td> U+00AE </td> </tr>
     <tr> <td> <code title="">rfloor;</code> </td> <td> U+230B </td> </tr>
     <tr> <td> <code title="">rho;</code> </td> <td> U+03C1 </td> </tr>
     <tr> <td> <code title="">rlm;</code> </td> <td> U+200F </td> </tr>
     <tr> <td> <code title="">rsaquo;</code> </td> <td> U+203A </td> </tr>
     <tr> <td> <code title="">rsquo;</code> </td> <td> U+2019 </td> </tr>
     <tr> <td> <code title="">sbquo;</code> </td> <td> U+201A </td> </tr>
     <tr> <td> <code title="">scaron;</code> </td> <td> U+0161 </td> </tr>
     <tr> <td> <code title="">sdot;</code> </td> <td> U+22C5 </td> </tr>
     <tr> <td> <code title="">sect;</code> </td> <td> U+00A7 </td> </tr>
     <tr> <td> <code title="">sect</code> </td> <td> U+00A7 </td> </tr>
     <tr> <td> <code title="">shy;</code> </td> <td> U+00AD </td> </tr>
     <tr> <td> <code title="">shy</code> </td> <td> U+00AD </td> </tr>
     <tr> <td> <code title="">sigma;</code> </td> <td> U+03C3 </td> </tr>
     <tr> <td> <code title="">sigmaf;</code> </td> <td> U+03C2 </td> </tr>
     <tr> <td> <code title="">sim;</code> </td> <td> U+223C </td> </tr>
     <tr> <td> <code title="">spades;</code> </td> <td> U+2660 </td> </tr>
     <tr> <td> <code title="">sub;</code> </td> <td> U+2282 </td> </tr>
     <tr> <td> <code title="">sube;</code> </td> <td> U+2286 </td> </tr>
     <tr> <td> <code title="">sum;</code> </td> <td> U+2211 </td> </tr>
     <tr> <td> <code title="">sup1;</code> </td> <td> U+00B9 </td> </tr>
     <tr> <td> <code title="">sup1</code> </td> <td> U+00B9 </td> </tr>
     <tr> <td> <code title="">sup2;</code> </td> <td> U+00B2 </td> </tr>
     <tr> <td> <code title="">sup2</code> </td> <td> U+00B2 </td> </tr>
     <tr> <td> <code title="">sup3;</code> </td> <td> U+00B3 </td> </tr>
     <tr> <td> <code title="">sup3</code> </td> <td> U+00B3 </td> </tr>
     <tr> <td> <code title="">sup;</code> </td> <td> U+2283 </td> </tr>
     <tr> <td> <code title="">supe;</code> </td> <td> U+2287 </td> </tr>
     <tr> <td> <code title="">szlig;</code> </td> <td> U+00DF </td> </tr>
     <tr> <td> <code title="">szlig</code> </td> <td> U+00DF </td> </tr>
     <tr> <td> <code title="">tau;</code> </td> <td> U+03C4 </td> </tr>
     <tr> <td> <code title="">there4;</code> </td> <td> U+2234 </td> </tr>
     <tr> <td> <code title="">theta;</code> </td> <td> U+03B8 </td> </tr>
     <tr> <td> <code title="">thetasym;</code> </td> <td> U+03D1 </td> </tr>
     <tr> <td> <code title="">thinsp;</code> </td> <td> U+2009 </td> </tr>
     <tr> <td> <code title="">thorn;</code> </td> <td> U+00FE </td> </tr>
     <tr> <td> <code title="">thorn</code> </td> <td> U+00FE </td> </tr>
     <tr> <td> <code title="">tilde;</code> </td> <td> U+02DC </td> </tr>
     <tr> <td> <code title="">times;</code> </td> <td> U+00D7 </td> </tr>
     <tr> <td> <code title="">times</code> </td> <td> U+00D7 </td> </tr>
     <tr> <td> <code title="">trade;</code> </td> <td> U+2122 </td> </tr>
     <tr> <td> <code title="">uArr;</code> </td> <td> U+21D1 </td> </tr>
     <tr> <td> <code title="">uacute;</code> </td> <td> U+00FA </td> </tr>
     <tr> <td> <code title="">uacute</code> </td> <td> U+00FA </td> </tr>
     <tr> <td> <code title="">uarr;</code> </td> <td> U+2191 </td> </tr>
     <tr> <td> <code title="">ucirc;</code> </td> <td> U+00FB </td> </tr>
     <tr> <td> <code title="">ucirc</code> </td> <td> U+00FB </td> </tr>
     <tr> <td> <code title="">ugrave;</code> </td> <td> U+00F9 </td> </tr>
     <tr> <td> <code title="">ugrave</code> </td> <td> U+00F9 </td> </tr>
     <tr> <td> <code title="">uml;</code> </td> <td> U+00A8 </td> </tr>
     <tr> <td> <code title="">uml</code> </td> <td> U+00A8 </td> </tr>
     <tr> <td> <code title="">upsih;</code> </td> <td> U+03D2 </td> </tr>
     <tr> <td> <code title="">upsilon;</code> </td> <td> U+03C5 </td> </tr>
     <tr> <td> <code title="">uuml;</code> </td> <td> U+00FC </td> </tr>
     <tr> <td> <code title="">uuml</code> </td> <td> U+00FC </td> </tr>
     <tr> <td> <code title="">weierp;</code> </td> <td> U+2118 </td> </tr>
     <tr> <td> <code title="">xi;</code> </td> <td> U+03BE </td> </tr>
     <tr> <td> <code title="">yacute;</code> </td> <td> U+00FD </td> </tr>
     <tr> <td> <code title="">yacute</code> </td> <td> U+00FD </td> </tr>
     <tr> <td> <code title="">yen;</code> </td> <td> U+00A5 </td> </tr>
     <tr> <td> <code title="">yen</code> </td> <td> U+00A5 </td> </tr>
     <tr> <td> <code title="">yuml;</code> </td> <td> U+00FF </td> </tr>
     <tr> <td> <code title="">yuml</code> </td> <td> U+00FF </td> </tr>
     <tr> <td> <code title="">zeta;</code> </td> <td> U+03B6 </td> </tr>
     <tr> <td> <code title="">zwj;</code> </td> <td> U+200D </td> </tr>
     <tr> <td> <code title="">zwnj;</code> </td> <td> U+200C </td> </tr>
    </tbody>
   </table>
  <!--
   If we want to add entities, Almorca suggests:
   > I would add the entity sub1; (character U+2081), the entity sub2;
   > (character U+2082) and the entity sub3; (character U+2083). They
   > would are the equivalent to sup1; , sup2, and sup3;.
   See also: http://www.w3.org/2003/entities/
  -->
  </div>


  <h2 id="wysiwyg">WYSIWYG editors</h2>

  <p><dfn>WYSIWYG editors</dfn> are authoring tools with a
  predominantly presentation-driven user interface.</p>


  <h3>Presentational markup</h3>


  <h4><dfn>WYSIWYG signature</dfn></h4>

  <p>WYSIWYG editors must include a <code>meta</code> element in the
  <code>head</code> element whose <code
  title="attr-meta-name">name</code> attribute has the value <code
  title="meta-generator">generator</code> and whose <code
  title="attr-meta-content">content</code> attribute's value ends with
  the string "<code title="">(WYSIWYG editor)</code>". Non-WYSIWYG
  authoring tools must not include this string in their generator
  string.</p>

  <p class="big-issue">This entire section will probably be
  dropped. The intent of this section was to allow a way for WYSIWYG
  editors, which aren't going to use semantic markup, to still write
  conforming documents, while not letting it be ok for hand-coding
  authors to not use semantic markup. We still need some sort of
  solution to this, but it's not clear what it is.</p>

  <h4>The <dfn><code>font</code></dfn> element</h4>

  <dl class="element">
   <dt>Categories</dt>
   <dd><span>Phrasing content</span>.</dd>
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>phrasing content</span> is expected.</dd>
   <dt>Content model:</dt>
   <dd><span>Transparent</span>.</dd>
   <dt>Element-specific attributes:</dt><!--
   <dd><code title="attr-font-color">color</code></dd>
   <dd><code title="attr-font-face">face</code></dd>
   <dd><code title="attr-font-size">size</code></dd>-->
   <dd><code title="attr-font-style">style</code></dd>
   <dt>DOM interface:</dt>
   <dd>
<pre class="idl">interface <dfn>HTMLFontElement</dfn> : <span>HTMLElement</span> {<!--
           attribute DOMString <span title="dom-font-color">color</span>;
           attribute DOMString <span title="dom-font-face">face</span>;
           attribute DOMString <span title="dom-font-size">size</span>;-->
  readonly attribute CSSStyleDeclaration <span title="dom-font-style">style</span>;
};</pre>
   </dd>
  </dl>

  <p class="big-issue">This entire section will probably be
  dropped. The intent of this section was to allow a way for WYSIWYG
  editors, which don't have enough information to use the "real"
  "semantic" elements, to still make HTML pages without abusing those
  semantic elements (since abusing elements is even worse than not
  using them in the first place). We have still got to find a solution
  to this, while not letting it be ok for hand-coding authors to abuse
  the style="" attribute.</p>

  <p>The <code>font</code> element doesn't represent anything. It must
  not be used except by <span>WYSIWYG editors</span>, which may use it
  to achieve presentational affects. Even WYSIWYG editors, however,
  should make every effort to use appropriate semantic markup and
  avoid the use of media-specific presentational markup.</p>

  <p>Conformance checkers must consider this element to be
  non-conforming if it is used on a page lacking the <span>WYSIWYG
  signature</span>.</p>

  <div class="example">

   <p>The following would be syntactically legal (as the output from a
   WYSIWYG editor, though not anywhere else):</p>

   <pre>&lt;!DOCTYPE HTML>
&lt;html>
 &lt;head>
  &lt;title>&lt;/title>
  &lt;meta name="generator" content="Sample Editor 1.0 <em>(WYSIWYG editor)</em>">
 &lt;/head>
 &lt;body>
  &lt;font style="display: block; border: solid">
   &lt;h1>Hello.&lt;/h1>
  &lt;/font>
  &lt;p>
   &lt;font style="color: orange; background: white">How&lt;/font>
   &lt;font style="color: yellow; background: white">do&lt;/font>
   &lt;font style="color: green; background: white"><em>&lt;em></em>you<em>&lt;/em></em>&lt;/font>
   &lt;font style="color: blue; background: white">do?&lt;/font>
  &lt;/p>
 &lt;/body>
&lt;/html></pre>

   <p>The first <code>font</code> element is conformant because
   <code>h1</code> and <code>p</code> elements are both allowed in
   <code>body</code> elements. the next four are allowed because text
   and <code>em</code> elements are allowed in <code>p</code>
   elements.</p>

  </div>

  <p>The <dfn title="attr-font-style"><code>style</code></dfn>
  attribute, if specified, must contain only a list of zero or more
  semicolon-separated (;) CSS declarations. <a
  href="#refsCSS21">[CSS21]</a></p>

  <p class="big-issue">We probably need to move this attribute to more
  elements, maybe even all of them, though if we do that we really
  should find a way to strongly discourage its use (and the use of its
  DOM attribute) for non-WYSIWYG authors.</p>

  <!-- XXX deal with each of the use cases in this:
  http://lists.w3.org/Archives/Public/www-html/2003Jan/0277.html -->

  <p>The declarations specified must be parsed and treated as the body
  of a declaration block whose selector matches just that
  <code>font</code> element. For the purposes of the CSS cascade, the
  attribute must be considered to be a 'style' attribute at the author
  level.</p>

  <p>The <dfn title="dom-font-style"><code>style</code></dfn> DOM
  attribute must return a <code>CSSStyleDeclaration</code> whose value
  represents the declarations specified in the attribute, if
  present. Mutating the <code>CSSStyleDeclaration</code> object must
  create a <code title="attr-font-style">style</code> attribute on the
  element (if there isn't one already) and then change its value to be
  a value representing the serialised form of the
  <code>CSSStyleDeclaration</code> object. <a
  href="#refsCSSOM">[CSSOM]</a>



  <h2 id="rendering">Rendering</h2>

  <!-- XXX

    Rendering

    Default styling
      (have one paragraph or subsection per element)
      :link, :visited { }
      :link { }
      :visited { }
      section { }
      p { }
      img { } - how to handle alt text, img in link (no border)...
      mark { }
      /* ... */

      Form Controls
        ...

    Default UI
      link: click
      mark: skip to next mark element
      title attribute: tooltip
      cite attribute on q, blockquote, ins, del: on hover, show link
      ...

    Define how to determine what element is under the cursor, unless
    the CSS group has finally gotten around to defining that before we
    get to it

    Extensions to CSS
      for drag and drop
      for datagrid
      ...

  -->

  <p class="big-issue">This section will probably include details on
  how to render DATAGRID (including <span id="datagridPseudos">its
  pseudo-elements</span>), drag-and-drop, etc, in a visual medium, in
  concert with CSS. Terms that need to be defined include: <dfn>sizing
  of embedded content</dfn></p>

  <p>CSS UAs in visual media must, when scrolling a page to a fragment
  identifier, align the top of the viewport with the target element's
  top border edge.</p> <!-- XXX horiz pos given bidi, and not
  scrolling when not required to? -->

<!-- Elements that have been dropped: ACRONYM APPLET B BASEFONT BLINK
BIG CENTER DIR DIV FONT FRAME FRAMESET I ISINDEX MARQUEE NOEMBED
NOFRAMES S SPACER STRIKE TT U -->

<!-- XXX bits and pieces that were removed from the semantic parts:

  <p>In CSS-aware user agents, the default presentation of this
  element should be achieved by including the following rules, or
  their equivalent, in the UA's user agent style sheet:</p>

  <pre>@namespace xh url(http://www.w3.org/1999/xhtml);
xh|section { display: block; margin: 1em 0; }</pre>
-->


<!-- XXX alt="": Define that either the src="" is shown (as an image)
or the alt="" is shown (inline) but should not ever have both at
once. -->

<!--
  <h4>Section headers</h4>

  <p>For <code>h1</code> elements, CSS-aware visual user agents should
  derive the size of the header from the level of <code>section</code>
  nesting. This effect should be achieved by including the following
  rules, or their equivalent, in the UA's user agent style sheet:</p>

  <pre>@namespace xh url(http://www.w3.org/1999/xhtml);
xh|section xh|h1 { /* same styles as h2 */ }
xh|section xh|section xh|h1 { /* same styles as h4 */ }
xh|section xh|section xh|section xh|h1 { /* same styles as h4 */ }
xh|section xh|section xh|section xh|section xh|h1 { /* same styles as h5 */ }
xh|section xh|section xh|section xh|section xh|section xh|h1 { /* same styles as h6 */ }</pre>

  <p>Authors should use <code>h1</code> elements to denote headers in
  sections. Authors may instead use <code>h2</code> ...
  <code>h6</code> elements, for backwards compatibility with user
  agents that do not support <code>section</code> elements.</p>

-->


  <p class="big-issue"> must define letting the user <dfn>obtain a
  physical form</dfn> of a document (printing) and what this means for
  the UA </p>

  <p class="big-issue">Must define that in CSS, tag names in HTML
  documents, and class names in quirks mode documents, are
  case-insensitive.</p>


  <h3>Rendering and the DOM</h3>

  <p class="big-issue">This section is wrong. mediaMode will end up on
  Window, I think. All views implement Window.</p>

  <p>Any object implement the <code>AbstractView</code> interface must
  also implement the <code>MediaModeAbstractView</code> interface.</p>

  <pre class="idl">interface <dfn>MediaModeAbstractView</dfn> {
  readonly attribute DOMString <span>mediaMode</span>;
};</pre>

  <p>The <dfn><code>mediaMode</code></dfn> attribute on objects
  implementing the <code>MediaModeAbstractView</code> interface must
  return the string that represents the canvas' current rendering mode
  (<code>screen</code>, <code>print</code>, etc). This is a lowercase
  string, as <a
  href="http://www.w3.org/TR/CSS21/media.html#media-types">defined by
  the CSS specification</a>. <a href="#refsCSS21">[CSS21]</a></p>

  <p>Some user agents may support multiple media, in which case there
  will exist multiple objects implementing the
  <code>AbstractView</code> interface. Only the default view
  implements the <code>Window</code> interface. The other views can be
  reached using the <code>view</code> attribute of the
  <code>UIEvent</code> inteface, during event propagation. There is no
  way currently to enumerate all the views.</p>

  <!-- XXX examples! -->

  <h3>Rendering and menus/toolbars</h3>

  <h4>The 'icon' property</h4>

  <p>UAs should use the command's Icon as the default generic icon
  provided by the user agent when the 'icon' property computes to
  'auto' on an element that either defines a command or refers to one
  using the <code title="command-attribute">command</code> attribute,
  but when the property computes to an actual image, it should use
  that image instead.</p>






  <h2 id="no">Things that you can't do with this specification because
  they are better handled using other technologies that are further
  described herein</h2>

  <p><em>This section is non-normative.</em></p>

  <p>There are certain features that are not handled by this
  specification because a client side markup language is not the right
  level for them, or because the features exist in other languages
  that can be integrated into this one. This section covers some of
  the more common requests.</p>

  <h3>Localisation</h3>

  <p>If you wish to create localised versions of an HTML application,
  the best solution is to preprocess the files on the server, and then
  use HTTP content negotation to serve the appropriate language.</p>

  <!-- <p>XXX example here</p> -->

  <h3>Declarative 2D vector graphics and animation</h3>

  <p>Embedding vector graphics into XHTML documents is the domain of
  SVG.</p>

  <!-- <p>XXX example here</p> -->

  <h3>Declarative 3D scenes</h3>

  <p>Embedding 3D imagery into XHTML documents is the domain of X3D,
  or technologies based on X3D that are namespace-aware.</p>

  <!-- <p>XXX example here</p> -->



  <h3 id="timers">Timers</h3>

  <p>This section is expected to be moved to the Window Object
  specification in due course.</p>

<pre class="idl">
interface <dfn>WindowTimers</dfn> {
  // timers
  long <span>setTimeout</span>(in <span>TimeoutHandler</span> handler, in long timeout);
  long <span>setTimeout</span>(in <span>TimeoutHandler</span> handler, in long timeout, <var title="">arguments...</var>);
  long <span>setTimeout</span>(in DOMString code, in long timeout);
  long <span>setTimeout</span>(in DOMString code, in long timeout, in DOMString language);
  void <span>clearTimeout</span>(in long handle);
  long <span>setInterval</span>(in <span>TimeoutHandler</span> handler, in long timeout);
  long <span>setInterval</span>(in <span>TimeoutHandler</span> handler, in long timeout, <var title="">arguments...</var>);
  long <span>setInterval</span>(in DOMString code, in long timeout);
  long <span>setInterval</span>(in DOMString code, in long timeout, in DOMString language);
  void <span>clearInterval</span>(in long handle);
};

interface <dfn>TimeoutHandler</dfn> {
  void handleEvent(<var title="">arguments...</var>);
};
</pre>

  <p>The <code>WindowTimers</code> interface must be obtainable from
  any <code>Window</code> object using binding-specific casting
  methods.</p>

  <p>The <code>setTimeout</code> and <code>setInterval</code> methods
  allow authors to schedule timer-based events.</p>

  <p>The <dfn title="setTimeout"><code>setTimeout(<var
  title="">handler</var>, <var title="">timeout</var>[, <var
  title="">arguments...</var>])</code></dfn> method takes a reference
  to a <code>TimeoutHandler</code> object and a length of time in
  milliseconds. It must return a handle to the timeout created, and
  then asynchronously wait <var title="">timeout</var> milliseconds
  and then invoke <code>handleEvent()</code> on the <var
  title="">handler</var> object. If any <var
  title="">arguments...</var> were provided, they must be passed to
  the <var title="">handler</var> as arguments to the
  <code>handleEvent()</code> function.</p>

  <p>In the ECMAScript DOM binding, the ECMAScript native
  <code>Function</code> type must implement the
  <code>TimeoutHandler</code> interface such that invoking the
  <code>handleEvent()</code> method of that interface on the object
  from another language binding invokes the function itself, with the
  arguments passed to <code>handleEvent()</code> as the arguments
  passed to the function. In the ECMAScript DOM binding itself,
  however, the <code>handleEvent()</code> method of the interface is
  not directly accessible on <code>Function</code> objects. Such
  functions must be called in the scope of the <span>browsing
  context</span> in which they were created.</p>

  <p>Alternatively, <dfn title=""><code>setTimeout(<var
  title="">code</var>, <var title="">timeout</var>[, <var
  title="">language</var>])</code></dfn> may be used. This variant
  takes a string instead of a <code>TimeoutHandler</code> object. That
  string must be parsed using the specified <var
  title="">language</var> (defaulting to ECMAScript if the third
  argument is omitted) and executed in the scope of the <span>browsing
  context</span> associated with the <code>Window</code> object on
  which the <code title="setTimeout">setTimeout()</code> method was
  invoked.</p>

  <p class="big-issue">Need to define <var title="">language</var> values.</p>

  <p>The <dfn><code>setInterval(...)</code></dfn> variants must work
  in the same way as the <code>setTimeout</code> variants except that
  if <var title="">timeout</var> is a value greater than zero, the
  <var title="">handler</var> or <code>code</code> must be invoked
  again every <var title="">timeout</var> milliseconds, not just the
  once.</p> <!-- so setInterval(x) and setInterval(x, 0) are
  equivalent to setTimeout(x) and setTimeout(x, 0) respectively -->

  <p>The <dfn><code>clearTimeout()</code></dfn> and
  <dfn><code>clearInterval()</code></dfn> methods take one integer (the
  value returned by <code>setTimeout</code> and
  <code>setInterval</code> respectively) and must cancel the specified
  timeout. When called with a value that does not correspond to an
  active timeout or interval, the methods must return without doing
  anything.</p>

  <p>Timeouts must never fire while another script is executing. (Thus
  the HTML scripting model is strictly single-threaded and not
  reentrant.)</p>


  <h3>Events</h3>

  <p id="js-function-listener">In the ECMAScript DOM binding, the
  ECMAScript native <code>Function</code> type must implement the
  <code>EventListener</code> interface such that invoking the
  <code>handleEvent()</code> method of that interface on the object
  from another language binding invokes the function itself, with the
  <code>event</code> argument as its only argument. In the ECMAScript
  binding itself, however, the <code>handleEvent()</code> method of
  the interface is not directly accessible on <code>Function</code>
  objects. Such functions, when invoked, must be called in the scope
  of the <span>browsing context</span> that they were created in.</p>




  <h2 class="no-num" id="references">References</h2>

  <p class="big-issue">This section will be written in a future
  draft.<!--XXX--></p>



  <h2 class="no-num">Acknowledgements</h2>

  <p>Thanks to Aankhen, Aaron Boodman, Aaron Leventhal, Adam Roben,
  Addison Phillips, Adrian Sutton, Agust&iacute;n Fern&aacute;ndez,
  Alexey Feldgendler, Andrew Gove, Andrew Sidwell, Anne van Kesteren,
  Anthony Hickson, Antti Koivisto, Arphen Lin, Asbj&oslash;rn Ulsberg,
  Ben Godfrey, Ben Meadowcroft, Benjamin Hawkes-Lewis, Bert Bos, Billy
  Wong, Bjoern Hoehrmann, Boris Zbarsky, Brad Fults, Brad Neuberg,
  Brady Eidson, Brendan Eich, Brett Wilson, Brian Campbell, Brian
  Smith, Cameron McCormack, Carlos Perell&oacute; Mar&iacute;n, Chao
  Cai, &#xc724;&#xc11d;&#xcc2c; (Channy Yun), Charl van Niekerk,
  Charles Iliya Krempeaux, Charles McCathieNevile, Christian
  Biesinger, Christian Johansen, Chriswa, Collin Jackson, Daniel
  Brumbaugh Keeney, Daniel Glazman, Daniel Peng, Daniel Sp&aring;ng,
  Darin Alder, Darin Fisher, Dave Singer, Dave Townsend<!-- Mossop on
  moz irc -->, David Baron, David Flanagan, David H&aring;s&auml;ther,
  David Hyatt, Derek Featherstone, DeWitt Clinton, Dimitri Glazkov,
  dolphinling, Doron Rosenberg, Doug Kramer, Eira Monstad, Elliotte
  Harold, Erik Arvidsson, Evan Martin, fantasai, Franck 'Shift'
  Qu&eacute;lain, Garrett Smith, Geoffrey Sneddon, H&aring;kon Wium
  Lie, Henri Sivonen, Henrik Lied, Henry Mason, Hugh Winkler, Ignacio
  Javier, Ivo Emanuel Gon&ccedil;alves, J. King, James Graham, James M
  Snell, James Perrett, Jan-Klaas Kollhof, Jason White, Jasper
  Bryant-Greene, Jeff Cutsinger, Jeff Walden, Jens Bannmann, Jens
  Fendler, Jeroen van der Meer, Jim Meehan, Joel Spolsky, John Boyer,
  John Bussjaeger, John Harding, Johnny Stenback, Jon Perlow, Jonathan
  Worent, Jorgen Horstink, Josh Levenberg, Joshua Randall, Jukka
  K. Korpela, Kai Hendry, <!-- Keryx Web, = Lars Gunther --> Kornel
  Lesinski, &#x9ed2;&#x6fa4;&#x525b;&#x5fd7; (KUROSAWA Takeshi),
  Kristof Zelechovski, Lachlan Hunt, Larry Page, Lars Gunther, Laurens
  Holst, Leif Halvard Silli, Lenny Domnitser, L&eacute;onard Bouchet,
  Leons Petrazickis, Logan<!-- on moz irc -->, Loune, Maciej
  Stachowiak, Malcolm Rowe, Mark Nottingham, Mark Rowe<!--bdash-->,
  Mark Schenk, Martijn Wargers, Martin Atkins, Martin D&uuml;rst,
  Martin Honnen, Mathieu Henri, Matthew Mastracci, Matthew Raymond,
  Matthew Thomas, Mattias Waldau, Max Romantschuk, Michael 'Ratt'
  Iannarelli, Michael A. Nachbaur, Michael A. Puls
  II<!--Shadow2531-->, Michael Gratton, Michael Powers, Michel Fortin,
  Michiel van der Blonk, Mihai &#x015E;ucan<!-- from ROBO Design -->,
  Mike Brown, Mike Dierken<!-- S. Mike Dierken -->, Mike Dixon, Mike
  Schinkel, Mike Shaver, Mike Smith, Mikko Rantalainen, Neil Deakin,
  Olav Junker Kj&aelig;r, Oliver Hunt, Peter Kasting, Philip Taylor,
  Rachid Finge, Rajas Moonka, Ralf Stoltze, Ralph Giles, Raphael
  Champeimont, Rimantas Liubertas, Robert O'Callahan, Robert Sayre,
  Roman Ivanov, S. Mike Dierken, Sam Ruby, Sam Weinig, Scott Hess,
  Sean Knapp, Shaun Inman, Silvia Pfeiffer, Simon Pieters, Stefan
  Haustein, Stephen Ma, Steve Runyon, Steven Garrity, Stewart Brodie,
  Stuart Parmenter, Tantek &Ccedil;elik, Thomas Broyer, Thomas
  O'Connor, Tim Altman, Tyler Close, Vladimir Vuki&#x0107;evi&#x0107;,
  Wakaba, William Swanson, and &Oslash;istein E. Andersen, for their
  useful and substantial comments.</p>

  <p>Thanks also to everyone who has ever posted about HTML5 to their
  blogs, public mailing lists, or forums, including the <a
  href="http://lists.w3.org/Archives/Public/public-html/">W3C
  public-html list</a> and the <a
  href="http://www.whatwg.org/mailing-list">various WHATWG lists</a>.

  <p>Special thanks to Richard Williamson for creating the first
  implementation of <code>canvas</code> in Safari, from which the
  canvas feature was designed.</p>

  <p>Special thanks also to the Microsoft employees who first
  implemented the event-based drag-and-drop mechanism, <code
  title="attr-contenteditable">contenteditable</code>, and other
  features first widely deployed by the Windows Internet Explorer
  browser.</p>

  <p>Special thanks and $10,000 to David Hyatt who came up with a
  broken implementation of the <a href="#adoptionAgency">adoption
  agency algorithm</a> that the editor had to reverse engineer and fix
  before using it in the parsing section.</p>

  <p>Thanks also the Microsoft blogging community for some ideas, to
  the attendees of the W3C Workshop on Web Applications and Compound
  Documents for inspiration, and to the #mrt crew, the #mrt.no crew,
  and the cabal for their ideas and support.</p>

  <!-- Hopefully Kam won't notice he's covered by these
  acknowledgements three times! -->

<!--
 !  menus

<hyatt> the ability to get the current focused window in a window hierarchy

wizards
tabbed interface

Application object? http://longhorn.msdn.microsoft.com/lhsdk/ref/ns/msavalon.windows/c/application/application.aspx

<input type="text" menu="foo" icon="g.png"/> <menu id="foo"> <menuitem icon="g.png" onclick="engine('yahoo')">Yahoo</menuitem> ... </menu>

> One more aspect I want you think about - for "user interface systems" in
> general: The windowing system.
>   Different kinds of windows ("document", "browser (file-system/network or
> otherwise)", "palette", "application modal dialog", "system modal dialog"),
> the rules for layering them (appropriately flexible to allow different
> implementations, e.g. MacOS vs. X-Windows), and simplifications for handheld
> devices (which are sometimes single window devices anyway, but sometimes
> they are one "normal" window plus sometimes one "dialog" window on top.

window.open for dialogs


Thus, they lack things like proper windows, tree 
widgets, menu bars, rich text areas and so forth. This is what I would 
like XUL to solve. - Paul Prescod




Olav:
> <product> to indicate something you can buy, like a cd on amazon
> or a biker jacket at harleydavidson.com


Drop downs often have a title for when there is no selection.

http://www.w3.org/mid/BAY1-F150PNOkJvX41K000418e1@hotmail.com

http://crew.tweakers.net/crisp/newlayout/index.html
http://crew.tweakers.net/crisp/newlayout/list_topics.html
http://crew.tweakers.net/crisp/newlayout/list_messages.html
http://crew.tweakers.net/crisp/newlayout/list_messages_mod.html

http://mail.mozilla.org/private/gui-toolkit/2004-April/000041.html

> > > A standard for rich edit widgets would also be of interest to me.
> >
> > As in WYSIWIG editing? Of the bold/italic/underline/larger/smaller kind?
> > 
> > Or do you mean as in the bare bones to be able to build an editor on top
> > of? As in something that basically just gives you a cursor and the ability
> > to tell where the selection is and some way to hook into the Undo
> > functionality?
> 
> I have use cases for both...I have a more desperate business need for
> the latter (and have build apps using the gross APIs out there today)
> but there are a lot of circumstances where an editor that already has
> all standard HTML editing behaviour would be fine.
>
- Paul Prescod

 * a way of selecting rows, so that you can declaratively have buttons
   outside the template that move a "selected row" around. => web apps


Calendar with list of days that have events (think: blog calendars)

Find object at (x,y)
Find mouse position

Styling scrollbars:

   ::scrollbars { ... }


table of contents?


http://www.gadgetopia.com/2004/05/04/FileIconTag.html


on going back
on going forward
on came from back
on came from forward
better state serialisation for going back/forward


some sort of markup to tell google _not_ to index a particular part of the site

drop down menu with URIs to replace the silly <select> hacks.

http://www.cs.tut.fi/~jkorpela/html/em.html

<htmlarea>, <xmlarea>...

> 3) Extensible syntax highlighting (coloring). I am aware that a ton of
> code editors don't even do this well. The ability to load a syntax
> definition file and have it color a block of code would do wonders for
> making the web a more friendly place to script.
 - Ryan Johnson

toolbars, status bars. - Didier PH Martin

   * methods/properties for scrolling managing, especially in
   TextArea, such as .scrollTop and .scrollHeight in Mozilla and -


Robert Bateman:

   I've looked thru as many of the examples from around the web as I can find and
   don't see an obvious way to do date calculations.

   What I'm trying to do is populate an xsd:date field with now() plus 5 days as
   it's default value.  The field in question is a proposed "due date" for a
   work order.

   I've seen that I can get a "difference" between two dates, but no
   calculations.


Wladimir Palant pointed out problems with chunking with server-sent-events



> 2.  Some method of integration to allow Web apps to respond
>      to the browser's Cut, Copy, Paste, and Select All menu
>      items and keyboard equivalents. These work automatically
>      for text fields in any Web application; it would be
>      great if apps could make them work for stocks, address
>      book cards, message attachments, transactions, photos,
>      and so on too.
>
>      I'd add Undo and Redo to that list, but unfortunately
>      IE6 doesn't have Undo and Redo menu items.
 - mpt



>> maybe except for the server sent events and the clipboard
>> api (but even in those cases it might be possible).
>
> Clipboard API I don't really want to see, given the problems IE's
> implementation of such brought up. A better standardised drag-and-drop
> interface would be great though, as doing it with mouse events and IE's
> proprietary events is annoying-to-impossible to get right all the time.
>
> I really like the idea of server-side events, though I would prefer to
> have them set up by a scripting call rather than an HTML element.
 - Andrew Clover


    <html application="application">

...would, instead of showing the Web page itself, the first time, show
(inline in the browser):

  :::: Security Warning :::::::::::::::::::::::::::::::::::::
  ::                                                       ::
  ::  The Web page at this domain:                         ::
  ::                                                       ':
  ::     paypcl.com                                        
  ::                                                       
  ::  ...wishes to launch an application in a separate     
  ::  window. Do you trust this domain?                    
  ::                                                       
  ::  [x] Remember this decision.                          
  ::                                                       
  ::      (( Trust paypcl.com ))  ( Display as Web page )  
  ::                                                      
  :::::.
- (spurred on by Jose Dinuncio)


  :::: Security Warning :::::::::::::::::::::::::::::::::::::
  ::                                                       ::
  ::  This Web page wishes to launch an application in a   ::
  ::  separate window. Do you trust this domain?           ::
  ::                                                       ::
  ::     paypcl.com                                         '
  ::                                                       
  ::             ( Trust this site for now )
  ::
  ::              ( Always trust this site )
  ::
  ::              (( Display as Web page ))
  ::                                                      
  :::::.


breadcrumb navigation markup
other markup:
   http://www.stuffandnonsense.co.uk/archives/whats_in_a_name_pt2.html


common icons: http://www.intersmash.com/300images/


http://www.gadgetopia.com/2004/06/18/DoYouWantToSaveYourChanges.html#Comments

http://www.mojavelinux.com/cooker/demos/domTT/index.html

http://www.mozilla.org/projects/ui/accessibility/dynamic-accessibility.html

http://blog.colorstudy.com/ianb/weblog/2004/06/23.html
http://daringfireball.net/2004/06/location_field

listview/gridview API
http://www.activewidgets.com/grid/


> I would rather have it that changing the dom attribute 'value' or typing
> in the textarea, would also change the contents of the textnode in the
> textarea.
>
> In that way the dom level 2 traversal and range specification would not
> be useless for textarea's.
> 
> The same goes for input text controls and probably also for other form
> controls.
 - martijnw



1. point to an xml instance and cause the page to be filled in
2. serialise the site to a version of that xml instance

<menu>
 <li state="bar"/>
</menu>
<button state="bar"/>
<state id="bar" label="" disabled="" value=""/>

<input state="foo"/>
<input state="foo"/>
<input state="foo 2"/>
<input state="foo 2"/>
<state id="foo" model="x" ref="cat:orderLine[$v1]/cat:foo"/>

<instance src=""/>

<instance id="x">

<Order xmlns="urn:oasis:names:tc:ubl:Order:1.0:0.70" xmlns:cat="urn:oasis:names:tc:ubl:CommonAggregateTypes:1.0:0.70">
  <cat:ID/>
  <cat:IssueDate/>
  <cat:LineExtensionTotalAmount currencyID="USD"/>
  <cat:BuyerParty>
    <cat:ID/>
    <cat:PartyName>
      <cat:Name/>
    </cat:PartyName>
    <cat:Address>
      <cat:ID/>
      <cat:Street/>
      <cat:CityName/>
      <cat:PostalZone/>
      <cat:CountrySub-Entity/>
    </cat:Address>
    <cat:BuyerContact>
      <cat:ID/>
      <cat:Name/>
    </cat:BuyerContact>
  </cat:BuyerParty>
  <cat:SellerParty>
    <cat:ID/>
    <cat:PartyName>
      <cat:Name/>
    </cat:PartyName>
    <cat:Address>
      <cat:ID/>
      <cat:Street/>
      <cat:CityName/>
      <cat:CountrySub-Entity/>
    </cat:Address>
  </cat:SellerParty>
  <cat:DeliveryTerms>
    <cat:ID/>
    <cat:SpecialTerms/>
  </cat:DeliveryTerms>
  <cat:OrderLine>
    <cat:BuyersID/>
    <cat:SellersID/>
    <cat:LineExtensionAmount currencyID=""/>
    <cat:Quantity unitCode="">1</cat:Quantity>
    <cat:Item>
      <cat:ID/>
      <cat:Description>Enter description here</cat:Description>
      <cat:SellersItemIdentification>
        <cat:ID>Enter part number here</cat:ID>
      </cat:SellersItemIdentification>
      <cat:BasePrice>
        <cat:PriceAmount currencyID="">0.00</cat:PriceAmount>
      </cat:BasePrice>
    </cat:Item>
  </cat:OrderLine>
</Order> 

</instance>




  <h2>Tree and List Widgets</h2>
   click item to go uri
   doube click to submit form with value
   sort list by any column
   specify column headers, column sort types
   specify data inline, or out of band
   data can be linear or a one way tree
   rows can have an icon associated with them
   rows can have overlays associated with them

 progress meter

    http://www.gazingus.org/html/menuDropdown.html



Disclosure triangles


I think UAs should automatically highlight the accesskey (or add it in    
brackets if it isn't already in the string). I am thinking of writing some
text - optional, of course, since this wouldn't apply to all UAs or all  
platforms - that specifies this.

I also think that there should be an accesskey value which is basically   
"auto", and which picks a non-clashing access key based on the element    
content.



| adding HTTP authentication capabilities to HTML allow sites to:
|   - remove a site's authentication state from the browser when
|     activated (i.e., a "log out" interface)
|   - add user data to a site's authentication state in the browser
|     (i.e., "log on" interfaces)
|   - display the user's current authentication state
| 
| There are a few good reasons to do this. Many sites use cookies to
| authenticate users, because HTTP authentication doesn't have any
| mechanism to allow logging out (a key requirement of financial
| institutions and other sensitive applications), and because the UI for
| HTTP authentication can't be controlled, and doesn't offer an
| "anyonymous" / "not logged in" view.
| 
| By accommodating HTTP authentication in Web forms, it will be possible
| to have styled, custom "log on" interfaces as part of pages, as well
| as "log out" facilities, while still retaining the benefits of HTTP
| authentication.
| 
| Specifically, HTTP authentication is more secure than cookies (when
| Digest auth is used), and is more amenable to automated processes
| (agents, spiders, etc.) as well as alternate browsing devices (screen
| readers, etc.).


http://jogin.com/weblog/archives/2004/07/19/hierarchy


Yeah, <header> and <footer> or similar elements are almost certainly going
to be defined at some point, along with <content> (for the main body of
the page), <entry> or <post> or <article> to refer to a unit of text
bigger than a section but smaller than a page, <aside> to mean a
side bar, <note> to mean a note... and so forth. Suggestions welcome.     
We'll probably keep it to a minimum though. The idea is just to relieve   
the most common pseudo-semantic uses of <div>.


http://lxr.mozilla.org/seamonkey/source/dom/public/idl/base/nsIDOMWindow.idl
scrollBy, etc
http://lxr.mozilla.org/seamonkey/source/dom/public/idl/base/nsIDOMWindowInternal.idl
DOM level 0


DH: I was arguing that you should be able to get the CSS info for
document fragments if you had an owner document with CSS in it.



So maybe:

   var library = new ZipFile("data.zip");
   library.onload = function() {
      var sound1 = library.getAudio("sound1.wav"); // returns an Audio object
      var image1 = library.getImage("image1.png"); // returns an HTMLImageElement
      var doc1 = library.getXMLDocument("doc1.xml"); // returns a Document
      var doc2 = library.getHTMLDocument("doc1.html"); // returns an HTMLDocument
   }

Also maybe supporting more than one file at a time:

   var library = new ResourceLoader("data.zip");
   library.add("moredata.zip");
   library.onload = function() { ... }
   library.onloading = function() {
      reportLoadProgress(library.progress); // 0.0 .. 1.0
   }

...although I'm not sure how we would then deal with filename clashes.

   var library = new AudioZip("sounds.zip");
   library.onload = function() {
      var sound1 = library["sound1.wav"];
      sound.play();
   }


If we define onbeforeunload, then we have to say that the JS
implementation of EventListener::handleEvent checks for that event,
treating the return value as the string to use for the unload warning
message if there is a return value, and calling preventDefault if
there isn't.


> > > Schematic editors, layout editors, interactive maps, data 
> > > visualization for network flows, etc.
> Searching the web for the above keywords should find you a lot more.
 - Denis Bohm



Jens Meiert:
- For non-native English speakers, it's sometimes difficult to understand
the difference between <cite /> and <quote />, since citations often seem to
be quoted, too (this is a presentational aspect, I know).
- Is it right that the <dfn /> element [1] /must/ be used only in the
context of the definition of the enclosed term (as the example suggests)?
(If so, wouldn't it be useful to add this note, too?)


http://secunia.com/advisories/9711/
In particular number 7. - Chris Hofmann


> [1] http://www.stopdesign.com/log/2004/08/25/microsoft-advances.html
> [2] http://www.stopdesign.com/articles/throwing_tables/


In other areas, however, the replacement is not a match in terms of functionality. Like it or not, but showModalDialog is a better way to provide feature-rich user feedback windows than window.confirm (which Firefox supports, even though there is NO PUBLIC STANDARD for it). With showModalDialog, I can pop a window offering "Yes," "No," or "Cancel" buttons that requires a response before proceeding. With window.confirm, I have to craft all my questions as something to which "OK" or "Cancel" makes sense, never mind asking for three, four, or five state responses.
- http://news.zdnet.com/2100-9588-5438955.html ( John Carroll )



> http://channel9.msdn.com/wiki/default.aspx/Channel9.InternetExplorerFeatureRequests
>    Alternate way of caching content
>    Avalon Integration
>    getData/setData improvement (clipboardData)
>    Input type=file improvements
>    HTML editing: Editing Tables
>    Input type=file improvements
>    .NET framework
>    
> http://channel9.msdn.com/wiki/default.aspx/Channel9.InternetExplorerOutrageous
>     Some decent controls
 - lachlan.hunt@lachy.id.au


http://lists.w3.org/Archives/Member/w3c-html-wg/2004JulSep/att-0135/role072704a.html


> I've encountered two situations where setting or retrieving the caret
> position would be useful.  The first is a situation where I'd like to
> apply an input mask to a text box.  For example, I'd like the ability to
> create a text box where the date delimiters (dashes or slashes) appear  
> automatically in a text box upon entering the field, and when the user  
> types in the field, it fills into the appropriate spaces in the input    
> box and sets the text selection to the next appropriate position, all    
> while allowing the user to reposition the cursor within the text box     
> with a keyboard or mouse without being able to edit or delete the
> delimiters (dashes or slashes).  This would be very similar to input
> mask features in certain native apps that I've used.
 - Greg Kilwein

> The second situation is an application that would like to highlight text  
> in a text box or textarea for the purposes of a spell check, thesaurus, 
> or search-and-replace operation.
 - Greg Kilwein




HTMLImageElement.click(x, y); (for Csaba Gabor)
or clickPoint, if click() can't be done in IE
can this be emulated in IE by posting a synthetic moue click event
with those X and Y coords?


<menulabel>, or rather menus in general, need an icon attribute and a
hide attribute, like the <command> element.


What about safe clipboard access.
As discussed before by others as well:
The user initiates a paste action as recognized by the UISystem the user is working in.
E.g pressing Ctrl-V or selecting paste from a context menu.
An event is fired and a Listener can now access the pasted data as part of the event object.
The same for cut and copy. The Listner can set data as part of the event object.
This is safe and will not allow any script to mess with the clipboard without the user specifically asking for it
by initiating a cut/copy/paste action.
 -  Jan-Klaas Kollhof


Need to say that NodeList's items are enumerable, so that for (var x in myNodeList) { } works.
 thank Dethe Elza

rel="" on submit buttons?

what does <label> _mean_? how about an empty one, one which contains
more than one control, no controls?


data: URIs and same-origin policy when navigated to from http:?
 - Hallvord Reiar Michaelsen Steen


need conformance section for editors, which says stuff like "can't be
conforming if editor has an "italics" button"

people want multiline tooltips with explicit line breaks



attributes of type ID that have no value beyond the empty string do
not give the element an ID of "".


ability for a web app to save a file to the local disk:
   var file = window.openFile(); // throws up UI
   file.read();
   var file = window.saveAsFile(); // throws up UI
   file.write();
...or something? Or use data: URIs and right-click-to-save?

http://lxr.mozilla.org/mozilla/source/dom/public/idl/html/nsIDOMNSHTMLDocument.idl


  <p><em>This section is non-normative.</em></p>


how to handle 404s and 500s and other non-OK responses when it comes
to <script>, <link>, <style>, etc.


normative classes:
  -example
  -note
  -warning
  -issue
  hCard, hCalendar
  wiki based registration, first come first served
   * class:
   * applies to elements:
   * processing model:
   * status:


<Hixie> vlad: you should define what the UA should do with out-of-order aDATs
<pav> its an error
<pav> pretty sure we say that somewhere
<Hixie> yes i know it's an error
<Hixie> but that doesn't say what the UA should do
<pav> error == image is invalid
<vlad> yep
<vlad> either broken image icon
<vlad> or display first frame (fall back to normal PNG)
<vlad> up to the UA
<Hixie> right
<Hixie> you should say which one
<pav> its up to the UA
<Hixie> why?
<vlad> "SHOULD display the first frame, but MAY display broken image icon if that's not convenient", in rfc parlance
<vlad> because it's not useful to specify that, IMO
<Hixie> up to the UA means one UA will implement something, it'll become a popular UA, then all the others will have to copy it.
<vlad> how a UA wants to handle image errors is up to the UA
<pav> we're designing an image format, not the html image tag
<pav> the html spec should say what to do with it


should we say that elements in HTML must be lowercase? (but with error
handling for uppercase tags, obviously)? If so, update examples.

<title> is for out of context headers
<h1> is for in-context headers

The parsing rules of HTML

media="" is case-insensitive
case-sensitivity of other attributes, and what it means

empty title attribute is equivalent to missing attribute for purposes
of alternate style sheet processing


<p>s that contain <ul><ol><table><dl><blockquote>? (did we get all those?)



> I'd like search engines to be able to show me the title of a page in the
> same consistent position in a search result, and the name of the site
> (if available) in the same consistent position in a search result, and
> the name of the author (if available) in the same consistent position in
> a search result.
>  
> For that to happen, it would help slightly if the HTML specification
> stopped SHOULD-ing the current <title> behavior. It would help more if
> the HTML specification contained clear, straightforward markup for
> author and site name (and encouraged UAs to present this information   
> when the document is taken out of context).

   <title site="" publisher="" author="">Page Title</title>
   <title>Page Title - <site></site> - <author></author> (<publisher></publisher>)</title>

   <title>Page Title</title>
   <link rel="top" title="" href="">
   <link rel="publisher" title="" href="">
   <link rel="author" title="" href="">


 h1 is styled appropriately, h2 to h6 are styled according to legacy.


[onclick] should make element focusable; enter should send onclick

define implied <html>, <head>, <body>, <p>, </p>, etc.

http://www.aujsproduction.com/samples/wishlist/revampedselector.asp


interactive elements can't be nested (as in <a><button><input></button></a>)


need a summary of all the content models and how they interact:
   a | interactive strictly inline-level element   | where inline-level content is expected | strictly inline-level content  | interactive elements must not be nested
   i | strictly inline-level element               | where inline-level content is expected | strictly inline-level content  |
  em | strictly inline-level element               | where inline-level content is expected | inline-level content           |
   p | block-level element, structured inline-     | where block-level content is expected, | inline-level content           | must not be nested
     | level element                               | where inline-level content is expected |                                |
...etc


need a summary of the differences between the HTML and XML serialisations.



Google suggest: oninput -> submit a form whose only contents is the
drop down list which you refresh (<datalist>).

Inline editing of <select multiple=""> boxes

image buttons shouldn't be used unless you want the coordinate

need for the spec to say something about sending proprietary data over
the network, e.j. in XMLHttpRequest and other data streams. Is it ok,
if the page is doing the translation?

built-in spell-checking in <input type="text">, <textarea>

author-driven highlighting of individual words in text fields


support access Array element via () instead of [] (IEism)
- https://bugzilla.mozilla.org/show_bug.cgi?id=289876


atom can do this:
       <author>
         <name>Mark Pilgrim</name>
         <uri>http://example.org/</uri>
         <email>f8dy@example.com</email>
       </author>
       <contributor>
         <name>Sam Ruby</name>
         <uri>http://intertwingly.net/blog/</uri>
       </contributor>
how do we do this in HTML5? (what's the use case?)

how to interpret an HTML5 document for syndication
http://hixie.ch/specs/hsf/hsf



section "rendering HTML" has to cope with:
 <q> element's quotes
 <section> <h1>
 default margins and paddings for <ul>, <form>, etc.

  <h4>The <code>q</code> element</h4>
  <p class="big-issue">Need to deal with the quotemark problem without
  adding verbose markup, breaking existing documents, or adding
  redundant elements.</p>



<Hixie> here's how <object> works (assuming you don't support ActiveX)
<Hixie> 1. look at the data="" attribute. If it's not there, go to the step i'll label "bail" below.
<Hixie> 2. fetch the file indicated by the data="" attribute.
<Hixie> 3. while waiting for the MIME type, treat <object> as a replaced element of transparent nothingness, intrinsic size zero.
<hyatt> (so we would honor width/height)
<hyatt> (because it's replaced)
<Hixie> (yes)
<Hixie> 4. if the MIME type is a long time coming (e.g. DNS is being slow) then jump to the "bail" step below until you have the MIME type, then jump back to step 5.
<Hixie> 5. Once you have the MIME type, examine it. If it's a plugin type, jump to the plugin step below. If it's an image, jump to the image step below. If it's a document type (HTML, XML, etc) jump to the iframe step below. Otherwise, you don't recognise it, and jump to the "bail" step.
<Hixie> plugin step: collect all the <param> element children in the <object>. instantiate the plugin and pass the params to it.
<Hixie> image step: render the <object> as if it was an <img>
<Hixie> document step: render the <object> as if it was an <iframe>
<Hixie> bail step: render the <object> as if it was a <span>
 - if there is no authoratative MIME type, then use the type="" attribute.
 - if type="" is something you know you don't support, you MAY not download it
 - if type="" is dynamically changed, do nothing
 - if data="" is dynamically changed, redo loop

<hyatt> apparently your url can come from <param>
<hyatt> not just the data attribute
<hyatt> our code looks for params with "src", "movie", "code" and "url"
<hyatt> and also tries to find the type on a param
<Hixie> oh that's you trying to have hacky activex support
<Hixie> opera does that too
<hyatt> yeah we support activex versions of plugins that are common
<hyatt> like flash and quicktime and realaudio
<Hixie> that would be a step 1b. if no data attribute, then look for a <param> to get you a URL instead.
<Hixie> and if you find one, carry on as if that was your data="".


should have some text talking about the fact that it's ok if your page
passes through a period of non-conformance while script is running,
but that in between scripts it should be compliant.


how to handle 205 reset content responses and other HTTP codes in
response to link clicks, link clicks with target="" attributes,
window.open(), the user typing a URI in the URL bar, etc.

XXX Native code for fast sorting of many data?

http://www.microsoft.com/mind/1097/directanim.asp


events: onmousewheel
<hyatt> with a wheelDelta field on the WheelEvent (whcih comes off UIEvent)
<hyatt> but in OS X you can wheel horizontally 
<hyatt> so we actually added wheelX, wheelY, and wheelZ
<hyatt> with wheelDelta just mapping to wheelY for WinIE compat
<Hixie_> oh i don't mind wheelZ, maybe we can even say ctrl+wheel should map to it on some platforms (windows)
<hyatt> but if you hold down Shift+mouse wheel in mac apps on os x you'll wheel horizontally
wheelDelta is multiples of 120
http://msdn.microsoft.com/workshop/author/dhtml/reference/properties/wheeldelta.asp

events:
http://damowmow.com/temp/safari/WebCore-315/khtml/ecma/kjs_events.cpp

Need to resolve whether <a rel=""> should affect an out-of-band UI (or
whether it should just be a may), see
https://bugs.opera.com/show_bug.cgi?id=169791


should have appendix listing what was already implemented
- http://www.xml.com/pub/a/2005/04/27/deviant.html

| Hixie and Steven shared an item: in both XHTML2 and HTML5, it will
| be possible to have a list child of a paragraph. That's good, from a
| structural point of view. But that's bad, from a user's point of
| view. Imagine you have a paragraph, with red background color. And
| you have an unordered list in your clipboard. You place the caret at
| the end of the paragraph and paste your list. Where does it end up?
| In the paragraph or after it? Red background or not? I really fear
| that, once again, document model authors are completely neglecting
| the authoring side.
 - http://www.glazman.org/weblog/dotclear/index.php?2005/05/27/1055-adam-2

need to define how to process MIME types in <style> and <script> and so forth.

http://www.paulgraham.com/popular.html



  <p>In the ECMAScript DOM binding, objects implementing this interface
  can also be dereferenced using square bracket notation (e.g.
  <code>foo[1]</code> or <code>foo["bar"]</code>). Dereferencing with
  an integer index is equivalent to invoking the <code>item()</code>
  method with that index, and dereferencing with a string index is
  equivalent to invoking the <code>namedItem()</code> method with that
  index.</p>


"you have mail": bubble notification; flash taskbar button, 
=> how do you stop advertisers?



events should bubble from documents to Window

say something about events fired on <body> -> document -> window, like
onload? onpopstate is defined as body->html->doc->window; as is the
local storage event. What about the old ones, how do they work? load,
error, scroll, resize, etc?

If we assuming that bubbling events bubble from document to window,
then it seems reasonable for scroll events that bubble to be fired at
the document if the window is resized, and scroll events that don't
bubble to be fired at elements if they are scrolled. window.onscroll
and document.onscroll should both work.


[HIT TESTING TRANSPARENCY]
Definition: IE considers a point of an element "transparent" if any
one of the following are true:

 1. All of the following are true:
    a: The computed value of 'background-image' is 'none', and
    b: The computed value of 'background-color' is 'transparent', and
    c: The point is over a pixel of an AlphaImageLoader filter image
       that has an alpha value of 0 (fully transparent), or the
       element does not have an AlphaImageLoader filter applied;

 2. The point is outside the element's CSS clip rectangle;

 3. The computed value of 'visibility' is 'hidden';

 4. The element is a transparent IFRAME (in IE, an IFRAME with the
    custom attribute "allowtransparency");

 5. The element is an OBJECT with the custom attribute "wmode" set to 
    "transparent" and the point in question is fully transparent.

Given those definitions, when a mouse event occurs, IE finds the
target element as follows:

   A. Take the topmost node that is under the point where the pointer
      was for the event. For CSS boxes, borders, padding areas and
      content areas are considered part of the node, margins and
      leading generated by the 'line-height' property are not.

   B. If there is no node at that point, no event is fired. STOP.

   C. If the node is a text node, then the event is fired at the text
      node's nearest ancestor element node. STOP.

   D. If the node is not an element, assign the node's nearest
      ancestor element node to a variable X. Otherwise, assign the
      element node itself to X.

   E. If the element X is the BODY element or the HTML element and its
      document is not the document of a transparent IFRAME, goto step
      H. Similarly, if the element X is a TABLE element, or is an IMG
      element, goto step H.

   F. If the point where the pointer was is, per the above definition,
      a point that on the element X is transparent, then ignore that
      element and assign the element that is below that element in the
      stacking order to X. If there is no element below X, or if the
      point on X is not transparent and so the previous condition
      doesn't apply, then leave X as is and go straight to step H.

   G. Goto step E.

   H. If the element X is now a BODY or TABLE element, but the element
      assigned to X in step D was some other element, assign the
      element originally assigned in step D back to X.

   I. The event goes to X. STOP




mousedown's default action is focus, so canceling mousedown stops focus transference.
e.g. on http://www.mozilla.org/editor/midasdemo/

xref all the _ERR exceptions to DOM3CORE


<select><option><hr> support


raising an exception when the wrong number of arguments is passed -
is that a language-specific thing, or what?

why |new XMLHttpRequest()| returns an object that .toStrings to
[object XMLHttpRequest], same with new TCPConnection(); what if a
constructor is called without using "new" in JS?


reload: fire an event when "reload" is pressed so that the page can
reload its data instead of the whole page. cancel the event cancels
the HTTP reload. Abuse prevention required, though.


load event: fire on body, document, window? or just let it bubble?


http://msdn.microsoft.com/workshop/author/dhtml/reference/methods/elementfrompoint.asp
http://msdn.microsoft.com/workshop/author/dhtml/reference/methods/showmodaldialog.asp


refs for TCP/IP (rfc793) and IPv6

http://www.joelonsoftware.com/items/2004/06/17.html
http://www.joelonsoftware.com/items/2004/06/18.html


<neutralise> block that kills scripting or anything dangerous?


XXXX need explanation of when to use undo/redo, and when to use back/forward

XXX "alternate style sheet" should be "alternative style sheet"




  <h5>Using the <code>a</code> element with the <code>command</code> attribute</h5>

  <p>If an <code>a</code> element has a <code
  title="command-attribute">command</code> attribute, then:</p>

  <p>If the element's <code>title</code> attribute is absent, then
  when the UA attempts to display the element's hint, it must instead
  use the specified command's Hint.</p>

  <p>Even if the element's <code>href</code> attribute is absent, the
  element must still match the CSS <code>:link</code> or
  <code>:visited</code> pseudo-classes. It must match the
  <code>:visited</code> pseudo-class if the command's action is to
  follow a link that has already been visited by the user, and must
  match the <code>:link</code> pseudo-class otherwise.</p>

  <p>If a <code>DOMActivate</code> event is dispatched on the element
  and is not canceled, and the event has no other default action, and
  the command's Disabled State is false (enabled), then the command's
  Action must be triggered as the default action.</p>

  <p class="note">The <code>DOMActivate</code> event is fired as the
  default action of the <code>click</code> event.</p>

  <p>If the command's Disabled State is true (disabled) then the
  element must be disabled and must therefore match the
  <code>:disabled</code> pseudo-class. UAs should style disabled links
  in such a way as to clearly convey their disabled state.</p>

  <p>The Label, Icon, Checked State and Type facets of the command are
  ignored by the <code>a</code> element (except for <a
  href="#pseudosAndCommands">matching CSS pseudo-classes</a>).</p>

  <h5>Using the <code>button</code> element with the <code>command</code> attribute</h5>

  <p>If a <code>button</code> element has a <code
  title="command-attribute">command</code> attribute, then:</p>

  <p>If the element's <code>title</code> attribute is absent, then
  when the UA attempts to display the element's hint, it must instead
  use the specified command's Hint.</p>

  <p>If a <code>DOMActivate</code> event is dispatched on the element
  and is not canceled, and the event has no other default action, and
  the command's Disabled State is false (enabled), and the button's
  <code>disabled</code> attribute is absent, then the command's Action
  must be triggered as the default action.</p>

  <p class="note">The <code>DOMActivate</code> event is fired as the
  default action of the <code>click</code> event.</p>

  <p>If the command's Disabled State is true (disabled) then the
  element must be disabled. The <code>button</code> element must also
  be disabled if the element's <code>disabled</code> attribute is
  set.</p>
 
  <p>The Label, Icon, Checked State and Type facets of the command are
  ignored by the <code>button</code> element (except for <a
  href="#pseudosAndCommands">matching CSS pseudo-classes</a>).</p>

  <h5>Using the <code>input</code> element with the <code>command</code> attribute</h5>

  <p>If an <code>input</code> element has no <code>type</code>
  attribute and no <code>name</code> attribute, and it has a <code
  title="command-attribute">command</code> attribute, then:</p>

  <p>If the command is of Type "command" then the element must
  generally be styled and behave as if it was of type
  <code>button</code>; if the Type of the command is "radio" then the
  element must generally be styled and behave as if it was of type
  <code>radio</code>; and if the Type of the command is "checkbox"
  then the element must generally be styled and behave as if it was of
  type <code>checkbox</code>.</p>

  <p>If the command is of Type "command" and the element's
  <code>value</code> attribute is absent, then when the UA attempts to
  display the element's caption, it must instead use the specified
  command's Label. The Label facet is ignored if the command is not of
  Type "command".</p>

  <p>The UA may use the Icon facet of the command to render an
  icon in the control, if appropriate for the UI used.</p>

  <p>If the element's <code>title</code> attribute is absent, then
  when the UA attempts to display the element's hint, it must instead
  use the specified command's Hint.</p>

  <p>If a <code>DOMActivate</code> event is dispatched on the element
  and is not canceled, and the event has no other default action, and
  the command's Disabled State is false (enabled), and the element's
  <code>disabled</code> attribute is absent, then the command's Action
  must be triggered as the default action.</p>

  <p class="note">The <code>DOMActivate</code> event is fired as the
  default action of the <code>click</code> event.</p>

  <p>If the command's Disabled State is true (disabled) then the
  element must be disabled. The <code>input</code> element must also
  be disabled if the element's <code>disabled</code> attribute is
  set.</p>

  <p>If the command's Checked State is true (checked) then the element
  must be checked. The <code>input</code> element must also be checked
  if the element's <code>checked</code> attribute is set.</p>




  <p>This element should not be directly displayed. In CSS-aware user
  agents, this should be achieved by including the following rules, or
  their equivalent, in the UA's user agent style sheet:</p>

  <pre>@namespace xh url(http://www.w3.org/1999/xhtml);
xh|command { display: none; }</pre>



  <h5 id="command-with-command">Using the <code>command</code> element with the <code>command</code> attribute</h5>

  <p>If a <code>command</code> element has a <code
  title="command-attribute">command</code> attribute, then:</p>

  <p>If the element's <code>label</code> attribute is absent, then
  when the UA attempts to display the element's caption, it must instead
  use the specified command's Label.</p>

  <p>If the element's <code>icon</code> attribute is absent, then
  when the UA attempts to display the element's icon, it must instead
  use the specified command's Icon.</p>

  <p>If the element's <code>title</code> attribute is absent, then
  when the UA attempts to display the element's hint, it must instead
  use the specified command's Hint.</p>

  <p>If a <code>click</code> event is dispatched on the element and is
  not canceled, and the command's Disabled State is false (enabled),
  and the element's own <code>disabled</code> attribute is absent,
  then the command's Action must be triggered as the default
  action.</p>

  <p>If the command's Disabled State is true (disabled) then the
  element must be disabled. The <code>command</code> element must also
  be disabled if the element's <code>disabled</code> attribute is
  set.</p>

  <p>If the command's Checked State is true (checked) then the
  element must be checked. The <code>command</code> element must also
  be checked if the element's <code>checked</code> attribute is
  set.</p>

  <p>When a <code title="command-element">command</code> element has a
  <code title="command-attribute">command</code> attribute, any <code
  title="attr-command-type">type</code> and <code
  title="attr-command-radiogroup">radiogroup</code> attribute is
  ignored.</p>


  <h4 id="pseudosAndCommands">CSS pseudo-classes and commands</h4>

  <p>When an element uses the <code
  title="command-attribute">command</code> attribute, any UI
  pseudo-classes from the following list that apply to the element
  defining the command also apply to the elements that refer to that
  command.</p>

  <dl>

   <dt>:enabled, :disabled</dt>

   <dd>Matches commands whose Disabled State facet is False and True
   respectively.</dd>

   <dt>:checked</dt>

   <dd>Matches commands whose Type facet is either "radio" or
   "checkbox", and whose Checked State facet is true.</dd>

  </dl>



  <p><code>menu</code> elements with explicit <code>label</code>
  attributes, and <code>menu</code> elements following
  <code>menulabel</code> elements, should be hidden. In CSS-aware UAs,
  this effect should be achieved by including the following rules, or
  their equivalent, in the UA's user agent style sheet:</p>

  <pre>@namespace xh url(http://www.w3.org/1999/xhtml);
xh|menu[label], xh|menulabel + xh|menu { display: none; }</pre>

  <p>All other <code>menu</code> elements should be rendered
  identically to <code>ul</code> elements. In CSS-aware UAs, this
  effect may be achieved by including rules similar to the following
  in the UA's user agent style sheet:</p>

  <pre>@namespace xh url(http://www.w3.org/1999/xhtml);
xh|menu { display: block; margin: 0 0 0 40px; list-style: disc; }</pre>




  <h5>Displaying menus</h5>

  <p>When a <code>menu</code> element is activated, the associated
  menu should be constructed and shown. (For details on how a
  <code>menu</code> element can be activated, see the sections on
  <span>menu links</span> and <span>menu bars</span>.)</p>

  <p>The styles applied to each element in the <code>menu</code>
  element, as well as the element itself, may be applied when
  constructing a menu. UAs are recommended to not apply styling to
  context menus and menus for application menu bars, and to only use
  styles for in-page menus.</p>

  <p>If user agents support styling of menus, they should only support
  the '<code>background</code>', '<code>color</code>',
  '<code>border</code>', '<code>padding</code>' and
  '<code>font</code>' properties on menus and menu items. (This list
  might be incomplete; in general, properties that merely affect the
  appearance of the element should work, but properties that affect
  the layout should not.)</p>

  <p>As the user interacts with a menu, the elements from which the
  menu was created should have appropriate pseudo-classes (:hover,
  :focus, :active) applied.</p>

  <p>The menu items must only consider the computed styles of the
  elements from which they were derived, not other elements.</p>

  <div class="example">

   <p>For example, take this menu:</p>

   <pre>&lt;menu&gt;
&lt;li&gt;&lt;command label="a"/&gt;&lt;/li&gt;
&lt;menu&gt;</pre>

   <p>The menu has one menu item, labelled "a".</p>

   <p>Styles applied to the <code>li</code> element in this menu would
   have no effect on the rendered menu, except in so far as styles
   inherit from that element to the <code>command</code> element.</p>

   <p>Styles applied to the <code>command</code> element could affect
   the menu. While the user is hovering over the menu item, the
   <code>:hover</code> pseudo-class matches the <code>command</code>
   element and any appropriate newly matching rules could be
   applied.</p>

  </div>

  <p>When activated from a <span title="menu links">menu link</span>,
  a menu must be placed in an Appropriate Place. Specifically, if the
  <code>a</code> element is displayed as a vertically-stacked box (as
  is typically seen for elements with '<code>display: block</code>',
  '<code>list-item</code>', or '<code>table</code>'), then the menu
  should appear vertically below the element, anchored so that one of
  its top corners coincides with a bottom corner of the box so that
  the menu and the box each have a horizontal sides in common (or a
  bottom corner of the menu coincides with a top corner of the box, if
  there isn't enough room for the menu to drop down); otherwise, if
  the element is displayed as a horizontally stacked box
  ('<code>display: inline</code>', '<code>table-cell</code>', etc),
  the menu should appear to the <em>side</em> of the box in an
  analogous way. If the element is on the right of the page, the menu
  should drop to the left, and vice versa.</p>

  <p>UAs should implement the drop-down behaviour in more
  platform-appropriate ways if the platform conventions differ from
  the behaviour described above.</p>




  <h4>The <dfn title="command-attribute"><code>command</code></dfn>
  attribute</h4>

  <p>Any element that can define a command can also, instead, have a
  <code>command</code> attribute that specifies the ID of a command
  that the element should defer to. In this case the element does not
  define a command, but, in the absence of attributes to the contrary,
  reflects the state of the element specified.</p>

  <p>If the <code>command</code> attribute specifies an ID that is not
  the ID of an element that defines a command, then the
  <code>command</code> DOM attribute is set to the null value, and the
  element acts as if it was linked to an element that defined a
  command with no Label, no Hint, no Icon, no Action, that was not
  Hidden, not Disabled, not Checked, and that was of Type
  "command".</p>


replaceable DOM properties: http://lxr.mozilla.org/mozilla/source/dom/src/base/nsDOMClassInfo.cpp#5928
<       brendan>|Hixie: so yeah, lxr for JSRESOLVE_QUALIFIED

screen object:
screen contains top left width height pixelDepth colorDepth availWidth availHeight availLeft availTop



  <p>The most direct way to represent a command is by using the <code
  title="command-element">command</code> element. A <code
  title="command-element">command</code> element defines a command if
  it does not have a <code title="command-attribute">command</code>
  attribute.</p>

  <div class="example">
   <pre>...
 &lt;command id="c_stop" label="Emergency Stop" onclick="dostop()"/&gt;
 &lt;command id="c_go" label="Go" onclick="dogo()"/&gt;
 &lt;command id="c_lamp" label="Headlamps" onclick="dof2()" disabled="disabled"/&gt;
...</pre>
</div>

  <p>The <code>command</code> element, in addition to the core and
  internationalisation attributes, may have the following
  attributes specified:</p>

  <dl>

   <!-+- yes i know that some of these are core attributes. If you can
   give me a better introductory paragraph, I'm all for it. -+->

   <dt><dfn title="attr-command-type"><code>type</code></dfn></dt>

   <dd>The command's Type. If present, this attribute must either have
   the value <code>radio</code>, in which case the command is of Type
   "radio", or the value <code>checkbox</code>, in which case the
   command is (amazingly) of Type "checkbox". Any other value, or the
   absence of the attribute altogether, means that the command is of
   Type "command".</dd>

   <dt><dfn title="attr-command-id"><code>id</code></dfn></dt>

   <dd>The command's ID. If this attribute is not specified, then the
   command is anonymous.</dd>

   <dt><dfn title="attr-command-label"><code>label</code></dfn></dt>

   <dd>The command's Label. If the attribute is not specified, the
   command's Label is given by the element's <code>textContent</code>
   DOM attribute.</dd>

   <dt><dfn title="attr-command-title"><code>title</code></dfn></dt>

   <dd>The command's Hint. If the attribute is not specified, the
   command's Hint is the empty string.</dd>

   <dt><dfn title="attr-command-icon"><code>icon</code></dfn></dt>

   <dd>A URI to the command's Icon. If the attribute is not specified,
   then the command has no Icon.</dd>

   <dt><dfn title="attr-command-onclick"><code>onclick</code></dfn></dt>

   <dd>An event handler attribute that listens for <code>click</code>
   events.</dd>

   <dt><dfn title="attr-command-hide"><code>hide</code></dfn></dt>

   <dd>The command's Hidden State. If the attribute is present, the
   command is hidden (and also disabled, regardless of the value of
   the <code>disabled</code> attribute), otherwise, the command is
   shown. If the attribute is present, it should have the value
   "<code>hide</code>". <!-+-The name of the attribute reflects the
   fact that Hidden commands in menus are hidden.-+-></dd>

   <dt><dfn title="attr-command-disabled"><code>disabled</code></dfn></dt>

   <dd>The command's Disabled State. If the attribute is present, the
   command is disabled, otherwise, the command is enabled. If the
   attribute is present, it should have the value
   "<code>disabled</code>".</dd>

   <dt><dfn title="attr-command-checked"><code>checked</code></dfn></dt>

   <dd>The command's Checked State. If the attribute is present, the
   command is checked, otherwise, the command is not. If the attribute
   is present, it should have the value "<code>checked</code>".</dd>

   <dt><dfn title="attr-command-radiogroup"><code>radiogroup</code></dfn></dt>

   <dd>An attribute indicating the name of the group of commands that
   will be toggled when the command itself is toggled. (Described <a
   href="#radiocommand">below</a>.)</dd>

   <dt><dfn title="attr-command-default"><code>default</code></dfn></dt>

   <dd>An attribute indicating whether the command is the default
   command. If the attribute is present, the command is the default
   command, otherwise it is not. If it is set, it should have the
   value <code>default</code>. Used by context menus to indicate what
   the default option would be. The :default pseudo-class matches
   <code>command</code> elements with this attribute.</dd>

  </dl>

  <p>In addition, <code title="command-element">command</code>
  elements may also have a <code
  title="command-attribute">command</code> attribute, as <a
  href="#command-with-command">described below</a>.</p>

  <p>The Type, ID, Label, Hint, Icon, Hidden State, Disabled State,
  and Checked State of the command defined by a <code
  title="command-element">command</code> element are as described
  above. The Action of a <code title="command-element">command</code>
  element is that a <code>{null, "click"}</code> event is fired on the
  element.</p>

  <p>If the Type of the command is "checkbox", when a
  <code>click</code> event is dispatched on the element, user agents
  must toggle the value of the <code>checked</code> attribute before
  the event is dispatched in the document. (If the attribute is
  absent, then it is set to the value <code>checked</code>, and if the
  attribute is present, it is removed.) If the default action of the
  event is canceled, the value of the attribute must be changed back
  to the value it had before the event was dispatched.</p>

  <p id="radiocommand">If the Type of the command is "radio", when a
  <code>click</code> event is dispatched on the element, user agents
  must set the value of the <code>checked</code> attribute on the
  element to <code>checked</code>, and remove the attribute from any
  <code>command</code> elements with <code>type</code> set to
  <code>radio</code> and the same parent element and same
  <code>radiogroup</code> attribute, before the event is dispatched in
  the document. (If the element has no <code>radiogroup</code>
  attribute, then the elements "with the same <code>radiogroup</code>
  attribute" are those elements with <em>no</em>
  <code>radiogroup</code> attribute.) If the default action of the
  event is canceled, the value of the attributes that were changed
  must be changed back to the values they had before the event was
  dispatched.</p>

  <p>In HTML the <code>command</code> element is an empty element with
  no end tag.</p>

  <p>Authors should put <code>command</code> elements inside the
  <code>head</code> element, inside any element that may contain
  ...
  content</span>, or inside <code>commandset</code> elements.</p> <!-+-
  should, because hey, if they want to put them elsewhere, why not.
  XXX -+->

  <p>Authors should not put elements or text inside
  <code>command</code> elements.</p>




  <p>The <code title="dom-command-ro-command">command</code> DOM attribute
  is defined with the <code title="attr-command">command</code>
  content attribute.</p>


Need to become consistent about whether or not to quote keyword
("<code title="">foo</code>" vs <code>foo</code>)



  XXX command icons in rendering section:

  If the element defining the command has no explicit icon, then the
  attribute must instead return the computed value of the CSS '<code
  title="">icon</code>' property on that element. <a
  href="#refsCSS3UI">[CSS3UI]</a>

  If the computed value of '<code title="">icon</code>' is
  '<code>auto</code>',


search for event-click and make them all point to:
<a href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#event-click"><code>click</code></a>
...or something.

<code>DOMActivate -> <code title="event-DOMActivate">DOMActivate


onclick="" only fires if it is a MouseEvent


<form> .submit definition - see http://lxr.mozilla.org/mozilla/source/content/html/content/src/nsHTMLFormElement.cpp#600
for how to handle multiple calls in series


http://lxr.mozilla.org/mozilla/source/content/html/content/src/nsHTMLFormElement.cpp#699

How events are handled:
http://lxr.mozilla.org/mozilla/ident?i=HandleDOMEvent

http://www.quirksmode.org/js/events_compinfo.html
e.g. mousedown mouseup click mousedown mouseup click dblclick

http://msdn.microsoft.com/library/default.asp?url=/workshop/author/dhtml/reference/events.asp



05:46 <            bz>|Hixie: let's put it this way
05:46 <            bz>|Hixie: 1)  A script is executed when its data is available
05:47 <            bz>|Hixie: 2) The data for an inline script is available when its </script> is seen
05:47 <            bz>|Hixie: 3) The data for a script with src is available when it finishes loading
05:47 <            bz>|Hixie: all good so far?
05:47 <         Hixie>|i'm waiting for the bit where src= causes blocking in the normal, non-d.w case
05:47 <            bz>|Hixie: 4) The data for a script with src starts loading when the <script> node is inserted into the DOM
05:48 <        shaver>|it causes parser blocking in the normal case
05:48 <            bz>|Hixie: 5)  When such a load starts, all further parsing is suspended until the load has completed and the script has executed.
05:48 <            bz>|Hixie: so if we forget document.write
05:48 <            bz>|Hixie: and look at the HTML:  <script src="foo"></script><div>
05:48 <            bz>|Hixie: the text "<div>" will nto be parsed until after the script runs
05:49 <            bz>|Hixie: this is needed so that if the script does document.write that text can be inserted _before_ the "<div>" text into the parser
05:49 <         Hixie>|sure
05:49 <         Hixie>|all this is fine
05:49 <            bz>|Hixie: ok.  So now let's look at our case
05:49 <         Hixie>|but how does document.write() know when to return?
05:49 -!- davel [davel@moz-4F4E281A.dsl.static.sonic.net] has quit [Quit: davel]
05:49 <            bz>|It gives the data to the parser, and tells the parser to parse it
05:49 <            bz>|Once the parser returns, document.write returns
05:50 <            bz>|The parser returns when it runs out of data to parse (it's parsed it all)
05:50 <            bz>|Or if it's explicitly suspended (eg by a <script src="">)
05:50 <         Hixie>|AH
05:50 <            bz>|All this in Gecko
05:50 <         Hixie>|ok that was the key piece of information i was missing
05:50 <         Hixie>|the "explicit suspension"
05:50 <         Hixie>|ok
but test IE on this...


XXX publish a "Valid HTML5!" button with a kitten on it. Made by an artist. (Doodle?)


   Interaction with document.open/write/close is undefined
   How to determine the character encoding
   Integration with quirks mode problems
   <style> parsing needs tweaking if we want to exactly match IE
   <base> parsing needs tweaking to handle multiple <base>s
   <isindex> needs some prose in the form submission section
   No-frames and no-script modes aren't yet defined
   Execution of <script> is not yet defined
   New HTML5 elements aren't yet defined
   There are various cases (marked) where EOF handling is undefined
   Interaction with the "load" event is undefined


hsivonen:
> To make document conformance a more useful concept for the purpose of catching
> author errors, I suggest that the following attributes be made required:
> href and rel on link
> href on base
> name and content on meta (other than the encoding decl)
> src on img
> code, height and width on applet
> name and value on param
...
> To allow user agents see whether the author provided the empty string as the
> alternative text of whether the author just didn't care, I suggest that the
> alt attribute on img be made optional.
(i agree -ian)
...
> On the other hand, I have doubts about the requirement of significant
> inline content. When the W3C said that paragraphs mustn't be empty,
> various applications started emitting <p>&nbsp;</p>. If the WHAT WG says
> that paragraphs must contend significant inline content, are the
> developers of those applications suddenly going to decide not to allow
> them to paragraphs to be saved or are they going to come up with an even
> more crufty work-around to comply with the machine-checkable
> requirements of the spec?


bjoern:
> If the concern here is what the specification should say, then that's
> what a valid state is, not what a valid document is, since the class of
> "predictably valid" documents does not cover many dynamic documents.



arv asks for: a way to track download progress of, e.g., images when
you are preloading 10 images; cf onprogress on XHR in mozilla


window.getAttention() or some similar API to let the user know the
page wants attention? How do you reduce the chance of irritation?
see also https://bugzilla.mozilla.org/show_bug.cgi?id=293412



ITEM

Items have:
 - parents, children
 - properties
 - commands that can apply to them



   <li>Inline markup for pop-up windows, for example for dialog boxes
   or tool palettes, so that dialogs need not be defined in separate
   files.</li>

   <li>Command updating: applications that have several access
   points for the same feature, for instance a menu item and a
   tool-bar button, would benefit from having to disable such
   commands only once, instead of having to keep each access point
   synchronized with the feature's availability at all times.
   Similarly menu items or tool-bar buttons that represent a toggle
   state could automatically stay synchronized whenever
   toggled.</li>

   <li>More device-independent DOM events: The DOM event set needs
   device-independent events, such as events that fire when a button
   or link is activated, whether via the mouse or the keyboard.
   <code>DOMActivate</code> is a start, but it lacks equivalent HTML
   attributes, and additional events may be needed.</li>

   <li>Richer widget set: the existing HTML controls are quite
   limited, some controls for commonly used types such as date
   controls and range controls would be useful.</li>

   <li>Sortable and multicolumn tree views and list views with rich
   formatting.</li>

   <li>Ability to define custom widgets cleanly, for example using
   XBL and APIs to query and control focus state, widget state, the
   position and state of input devices, etc.</li>

   <li>Rich text editing: an underlying architecture upon which
   domain-specific editors can be created, including things like
   control over the caret position.</li>

   <li>A predefined HTML editor based on the rich text editing
   architecture.</li>

   <li>Drag and drop APIs.</li>

   <li>Text selection manipulation APIs.</li>

   <li>Clipboard APIs (if the security and privacy concerns can be
   addressed).</li>

   <li>Flexible box model: The existing box model in CSS is designed
   largely for documents rather than user interface. We need a new
   box model designed for user interface which would relieve author
   complaints about other aspects of CSS and also reduce the need
   for tables for layout.</li>

   <li>Window-based state management (so that new windows don't
   interfere with existing sessions), for example implemented as a
   per-domain, per-window "file system". This would allow multiple
   instances of the same application (from the same site) to run
   without the instances overwriting each other's cookies.</li>

   <li>Markup to denote <span>mutually exclusive sections</span> (as
   in the commonly seen wizard interfaces).</li>

   <li>An improved CSS object model, for example with better APIs
   for animation, simpler ways to navigate the rendered content, a
   way to find the position of an element, methods to list the
   elements under a coordinate, etc.</li>

   <li>Better defined user authentication state handling. (Being able
   to "log out" of sites reliably, for instance, or being able to
   integrate the HTTP authentication model into the Web page.)</li>


offline storage / caching pining:
http://groups.google.com/group/mozilla.dev.platform/browse_frm/thread/bf866101aa238773/a298294c27b9380a?lnk=gst&q=offline&rnum=1#a298294c27b9380a


DOM0 quirks that Mozilla knows about:
http://lxr.mozilla.org/seamonkey/source/dom/src/base/nsDOMClassInfo.cpp



mutually exclusive sections:
  <p class="example">For example, in an application for an online
  mutiplayer game, there could be four mutually exclusive sections:
  one for the login page, one for the network status page displayed
  while the user is logging in, one for a "lobby" where players get
  together to organise a game, and one for the actual game. The
  different sections are the various states that the application can
  reach.</p>


XXX make a consistent decision of which of the following formats to use:

    U+1234 FOO BAR character ("foo")
    U+1234 FOO BAR character ('foo')
    U+1234 FOO BAR character (foo)
    U+1234 FOO BAR ("foo") character
    U+1234 FOO BAR ('foo') character
    U+1234 FOO BAR (foo) character
    U+1234 FOO BAR character ("<code title="">foo</code>")
    U+1234 FOO BAR character ('<code title="">foo</code>')
    U+1234 FOO BAR character (<code title="">foo</code>)
    U+1234 FOO BAR ("<code title="">foo</code>") character
    U+1234 FOO BAR ('<code title="">foo</code>') character
    U+1234 FOO BAR (<code title="">foo</code>) character

And make these match:

    0x12 (ASCII FOO)
    0x12 (ASCII "foo")
    0x12 (ASCII 'foo')
    0x12 ("foo")
    0x12 ('foo')

-->

 </body>
</html>
