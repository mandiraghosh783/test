<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN">
<html lang="en-GB-hixie">
 <head>
  <title>Web Applications 1.0</title>
  <link rel="stylesheet" type="text/css" href="/style/specification">
  <link rel="icon" href="/images/icon">
  <style type="text/css">
   h4 + .element { margin-top: -2.5em; padding-top: 2em; }
   h4 + p + .element { margin-top: -5em; padding-top: 4em; }
   .element { background: #EEFFEE; color: black; margin: 0 0 1em -1em; padding: 0 1em 0.25em 0.75em; border-left: solid #99FF99 0.25em; -padding: 0; /* that last decl is for IE6. Try removing it, it's hilarious! */ }
   .proposal { border: blue solid; padding: 1em; }
   table.matrix, table.matrix td { border: none; text-align: right; }
   table.matrix { margin-left: 2em; }
  </style>
 </head>
 <body class="draft">

  <div class="head">
   <p><a rel="home" href="http://www.whatwg.org/" class="logo"><img alt="WHATWG" src="/images/logo"></a></p>
   <h1>Web Applications 1.0</h1>
   <h2 class="no-num no-toc">Working Draft &mdash; [DATE: 01 Jan 1901]</h2>
   <p>You can take part in this work. <a href="http://www.whatwg.org/mailing-list">Join the working group's discussion list.</a></p>
   <dl>
    <dt>This version:</dt>
    <dd><a href="http://www.whatwg.org/specs/web-apps/current-work/">http://www.whatwg.org/specs/web-apps/current-work/</a></dd>
    <dt>Latest version:</dt>
    <dd><a href="http://www.whatwg.org/specs/web-apps/current-work/">http://www.whatwg.org/specs/web-apps/current-work/</a></dd>
    <dt>Previous versions:</dt>
    <dd><a href="http://www.whatwg.org/specs/web-apps/2006-01-01/">http://www.whatwg.org/specs/web-apps/2006-01-01/</a><!-- (<a href="diff-2006-01-01">diffs</a>)--></dd>
    <dd><a href="http://www.whatwg.org/specs/web-apps/2005-09-01/">http://www.whatwg.org/specs/web-apps/2005-09-01/</a><!-- (<a href="diff-2005-09-01">diffs</a>)--></dd>
    <dd>Version history from 2006-03-01 available via Subversion at: <a href="http://svn.whatwg.org/">http://svn.whatwg.org/</a></dd>
    <dt>Editor:</dt>
    <dd>Ian Hickson, Google, ian@hixie.ch</dd>
   </dl>
   <p class="copyright">&copy; Copyright 2004-2006 Apple Computer, Inc.,
   Mozilla Foundation, and Opera Software ASA.</p>
   <p class="copyright">You are granted a license to use, reproduce
   and create derivative works of this document.</p>
  </div>

  <hr>

  <h2 class="no-num no-toc" id="abstract">Abstract</h2>

  <p>This specification introduces features to HTML and the DOM that
  ease the authoring of Web-based applications. Additions include the
  context menus, a direct-mode graphics canvas, inline popup windows,
  and server-sent events.</p>

  <h2 class="no-num no-toc" id="status">Status of this document</h2>

  <p class="big-issue">This specification is being restructured so
  that certain core components (in particular the Window interface and
  definitions for how JavaScript should interact with IDL) can be
  defined by the W3C instead. Please bear with us as this will
  initially result in many broken links.</p>

  <p><strong>This is a work in progress!</strong> This document is
  changing on a daily if not hourly basis in response to comments and
  as a general part of its development process. Comments are very
  welcome, please send them to <a
  href="mailto:whatwg@whatwg.org">whatwg@whatwg.org</a>. Thank
  you.</p>

  <p>Implementors should be aware that this specification is not
  stable. <strong>Implementors who are not taking part in the
  discussions are likely to find the specification changing out from
  under them in incompatible ways.</strong> Vendors interested in
  implementing this specification before it eventually reaches the
  call for implementations should join the <a
  href="/mailing-list">WHATWG mailing list</a> and take part in the
  discussions.</p>

  <p>This draft may contain namespaces that use the <code>uuid:</code>
  URI scheme. These are temporary and will be changed before those
  parts of the specification are ready to be implemented in shipping
  products.</p>

  <p>To find the latest version of this working draft, please follow
  the "Latest version" link above.</p>

  <p>Sections marked <dfn title="TBW">[TBW]</dfn> are placeholders
  for future text. Sections marked <dfn title="WIP">[WIP]</dfn> are
  very early drafts that need much more work. Other sections are first
  drafts that are ready for substantial comments.</p>

  <p>Sections marked <dfn title="SCS">[SCS]</dfn> are sections
  intended to be self-contained (Self Contained Section). Such
  sections are considered logical units that it would make sense to
  implement independent of most of the rest of the specification,
  provided that enough of the infrastructure is already
  implemented.</p>

  <p>It is not expected that any new major sections will be added to
  this specification beyond those already present (though much work
  still remains in the sections that <em>are</em> present).</p>

  <p>This specification is intended to replace (be the new version of)
  what was previously the HTML4, XHTML 1.x, and DOM2 HTML
  specifications.</p>


  <h2 class="no-num no-toc" id="contents">Table of contents</h2>
  <!--toc-->
  <hr>

  <h2>Introduction</h2>

  <p>The World Wide Web's markup language has always been HTML. HTML
  was primarily designed as a language for semantically describing
  scientific documents, although its general design and adaptations
  over the years has enabled it to be used to describe a number of
  other types of documents.</p>

  <p>The main area that has not been adequately addressed by HTML is a
  vague subject referred to as Web Applications. This specification
  attempts to rectify this, while at the same time updating the HTML
  specifications to address issues raised in the past few years.</p>

  <h3>Scope</h3>

  <p>This specification is limited to providing a semantic-level
  markup language and associated semantic-level scripting APIs for
  authoring accessible pages on the Web ranging from static documents
  to dynamic applications.</p>

  <p>The scope of this specification does not include addressing
  presentation concerns, although default rendering rules for Web
  browsers are included.</p>

  <p>The scope of this specification does not include documenting
  every HTML or DOM feature supported by Web browsers. Browsers
  support many features that are considered to be very bad for
  accessibility or that are otherwise inappropriate. For example, the
  <code>blink</code> element is clearly presentational and authors
  wishing to cause text to blink should instead use CSS.</p>

  <p>The scope of this specification is not to describe an entire
  operating system. In particular, hardware configuration software,
  image manipulation tools, and applications that users would be
  expected to use with high-end workstations on a daily basis are out
  of scope. In terms of applications, this specification is targetted
  specifically at applications that would be expected to be used by
  users on an occasional basis, or regularly but from disparate
  locations, with low CPU requirements. For instance online purchasing
  systems, searching systems, games (especially multiplayer online
  games), public telephone books or address books, communications
  software (e-mail clients, instant messaging clients, discussion
  software), document editing software, etc.</p>

  <p>For sophisticated cross-platform applications, there already
  exist several proprietary solutions (such as Mozilla's XUL and
  Macromedia's Flash). These solutions are evolving faster than any
  standards process could follow, and the requirements are evolving
  even faster. These systems are also significantly more complicated
  to specify, and are orders of magnitude more difficult to achieve
  interoperability with, than the solutions described in this
  document. Platform-specific solutions for such sophisticated
  applications (for example the MacOS X Core APIs) are even further
  ahead.</p>


  <h3>Structure of this specification <span title="TBW">[TBW]</span></h3>

  <p class="big-issue">This spec is probably big enough to need a
  guide as to where to look for various things. Hence once the
  structure is stable we should probably fill out this section. I'm
  not sure how to do that, though. Suggestions as to what should go
  here?</p>



  <h3>Relationship to HTML 4.01, XHTML 1.1, DOM2 HTML</h3>

  <p>This specification represents a new version of HTML4 and XHTML1,
  along with a new version of the associated DOM2 HTML API. Migration
  from HTML4 or XHTML1 to the format and APIs described in this
  specification should in most cases be straightforward, as care has
  been taken to ensure that backwards-compatibility is retained.</p>
  <!-- XXX refs -->

  <p>This specification will eventually supplant Web Forms 2.0 as
  well. <a href="#refsWF2">[WF2]</a></p>


  <h3>Relationship to XHTML2</h3>

  <p>XHTML2 <a href="#refsXHTML2">[XHTML2]</a> defines a new HTML
  vocabulary with better features for hyperlinks, multimedia content,
  annotating document edits, rich metadata, declarative interactive
  forms, and describing the semantics of human literary works such as
  poems and scientific papers.</p>

  <p>However, it lacks elements to express the semantics of many of
  the non-document types of content often seen on the Web. For
  instance, forum sites, auction sites, search engines, online shops,
  and the like, do not fit the document metaphor well, and are not
  covered by XHTML2.</p>

  <p><em>This</em> specification aims to extend HTML so that it is
  also suitable in these contexts.</p>

  <p>XHTML2 and this specification use different namespaces and
  therefore can both be implemented in the same XML processor.</p>


  <h3>Relationship to XUL, Avalon/XAML, and other proprietary UI languages</h3>

  <p>This specification is independent of the various proprietary UI
  languages that various vendors provide.</p> <!-- XXX flesh this out? -->



  <h3>Conformance requirements</h3>

  <p>All diagrams, examples, and notes in this specification are
  non-normative, as are all sections explicitly marked non-normative.
  Everything else in this specification is normative.</p>

  <p>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
  NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL"
  in the normative parts of this document are to be interpreted as
  described in <a href="#refsRFC2119">[RFC2119]</a>. For readability,
  these words do not appear in all uppercase letters in this
  specification.</p> <!-- XXX but they should be marked up -->

  <p>This specification describes the conformance criteria for user
  agents (relevant to implementors) and documents (relevant to
  authors and authoring tool implementors).</p>

  <p class="note">There is no implied relationship between document
  conformance requirements and implementation conformance
  requirements. User agents are not free to handle non-conformant
  documents as they please; the processing model described in this
  specification applies to implementations regardless of the
  conformity of the input documents.</p> <!--XXX quite possible that
  this is stated twice. check for whether this is a dupe. -->

  <p>User agents fall into several (overlapping) categories with
  different conformance requirements.</p>

  <dl>

   <dt id="interactive">Web browsers and other interactive user agents</dt>

   <dd>

    <p>Web browsers that support <span>XHTML</span> must process
    elements and attributes from the XHTML namespace found in XML
    documents as described in this specification, so that users can
    interact with them, unless the semantics of those elements have
    been overridden by other specifications.</p>

    <p class="example">A conforming XHTML processor would, upon
    finding an XHTML <code>script</code> element in an XML document,
    execute the script contained in that element. However, if the
    element is found within an XSLT transformation sheet (assuming the
    UA also supports XSLT), then the processor would instead treat the
    <code>script</code> element as an opaque element that forms part
    of the transform.</p>

    <p>Web browsers that support <span>HTML</span> must process
    documents labelled as <code>text/html</code> as described in this
    specification, so that users can interact with them.</p>

   </dd>

   <dt id="non-interactive">Non-interactive presentation user agents</dt>

   <dd>

    <p>User agents that process HTML and XHTML documents purely to
    render non-interactive versions of them must comply to the same
    conformance criteria as Web browsers, except that they are exempt
    from requirements regarding user interaction.</p>

    <p class="note">Typical examples of non-interactive presentation
    user agents are printers (static UAs) and overhead displays
    (dynamic UAs). It is expected that most static non-interactive
    presentation user agents will also opt to <a
    href="#non-scripted">lack scripting support</a>.</p>

    <p class="example">A non-interactive but dynamic presentation UA
    would still execute scripts, allowing forms to be dynamically
    submitted, and so forth. However, since the concept of "focus" is
    irrelevant when the user cannot interact with the document, the UA
    would not need to support any of the focus-related DOM APIs.</p>

   </dd>

   <dt>User agents with no scripting support</dt>

   <dd id="non-scripted">

    <p>Implementations that do not support scripting (or which have
    their scripting features disabled) are exempt from supporting the
    events and DOM interfaces mentioned in this specification. For the
    parts of this specification that are defined in terms of an events
    model or in terms of the DOM, such user agents must still act as
    if events and the DOM were supported.</p>

    <p class="note">Scripting can form an integral part of an
    application. Web browsers that do not support scripting, or that
    have scripting disabled, might be unable to fully convey the
    author's intent.</p>

   </dd>

   <dt>Conformance checkers</dt>

   <dd id="conformance-checkers">

    <p>Conformance checkers must verify that a document conforms to
    the applicable conformance criteria described in this
    specification. Conformance checkers are exempt from detecting
    errors that require interpretation of the author's intent (for
    example, while a document is non-conforming if the content of a
    <code>blockquote</code> element is not a quote, conformance
    checkers do not have to check that <code>blockquote</code>
    elements only contain quoted material).</p>

    <p>Conformance checkers must check that the input document
    conforms when scripting is disabled, and should also check that
    the input document conforms when scripting is enabled. (This is
    only a "SHOULD" and not a "MUST" requirement because it has been
    proven to be impossible. <a
    href="#refsHALTINGPROBLEM">[HALTINGPROBLEM]</a>)</p> <!-- XXX
    http://en.wikipedia.org/wiki/Halting_problem but I'd rather
    reference Godel's original paper if someone can find the
    ref... -->

    <div class="note">
     <p>The term "validation" specifically refers to a subset of
     conformance checking that only verifies that a document complies
     with the requirements given by an SGML or XML DTD. Conformance
     checkers that only perform validation are non-conforming, as
     there are many conformance requirements described in this
     specification that cannot be checked by SGML or XML DTDs.</p>
     <p>To put it another way, there are three types of conformance
     criteria:</p>
     <ol>
      <li>Criteria that can be expressed in a DTD.</li>
      <li>Criteria that cannot be expressed by a DTD, but can still be
      checked by a machine.</li>
      <li>Criteria that can only be checked by a human.</li>
     </ol>
     <p>A conformance checker must check for the first two. A simple
     DTD-based validator only checks for the first class of errors and
     is therefore not a conforming conformance checker according to
     this specification.</p>
    </div>
   </dd>

   <dt>Data mining tools</dt>

   <dd id="data-mining">

    <p>Applications and tools that process HTML and XHTML documents
    for reasons other than to either render the documents or check
    them for conformance should act in accordance to the semantics of
    the documents that they process.</p>

    <p class="example">A tool that generates <span title="sections and
    headings">document outlines</span> but increases the nesting level
    for each paragraph and does not increase the nesting level for
    each section would not be conforming.</p>

   </dd>

   <dt id="editors">Authoring tools and markup generators</dt>

   <dd>

    <p>Authoring tools and markup generators must generate conforming
    documents. Conformance criteria that apply to authors also apply
    to authoring tools, where appropriate.</p>

    <p class="big-issue">This needs expanding (see source).</p>

<!--
> The requirement that authoring tools must generate conforming documents
> should probably also make the distinction between the three types of
> conformance requirements made in the section on conformance tools.  I
> would say that authoring tools must generate documents that conform to
> the first two requirements and should encourage their users to generate
> documents that conform to the third.  I'd also allow an exception for
> preservation of nonconformant content across editing operations, since
> in editors often should not change content unrelated to what is being
> edited.

I've noted this in the markup for now. I need to take a much closer look
at the conformance requirements for editors; in particular I've been
talking to a number of people who implement HTML editors and their
unanimous feedback is that it is unrealistic to prevent them from
including presentational markup, because the state of the art in UI does
not yet have a way of conveying "semantics" in a comprehensive way.

Thus the conformance criteria for editors will probably be changed to
allow them to include <font> markup while still defining such documents to
be non-conformant HTML5 documents.

Or something. Like I said, this needs thought (feel free to mail ideas
and suggestions on this to the list, btw).

-->


   </dd>

  </dl>

  <p>Some conformance requirements are phrased as requirements on
  elements, attributes, methods or objects. Such requirements fall
  into two categories; those describing content model restrictions,
  and those describing implementation behaviour. The former category
  of requirements are requirements on documents and authoring
  tools. The second category are requirements on user agents.</p>

  <p>Conformance requirements phrased as algorithms or specific steps
  may be implemented in any manner, so long as the end result is
  equivalent. (In particular, the algorithms defined in this
  specification are intended to be easy to follow, and not intended to
  be performant.)</p>

  <p id="hardwareLimitations">User agents may impose
  implementation-specific limits on otherwise unconstrained inputs,
  e.g. to prevent denial of service attacks, to guard against running
  out of memory, or to work around platform-specific limitations.</p>

  <p>For compatibility with existing content and prior specifications,
  this specification describes two authoring formats: one based on XML
  (referred to as <dfn id="xhtml5" title="XHTML">XHTML5</dfn>), and
  one using a <a href="#parsing">custom format</a> inspired by SGML
  (referred to as <dfn id="html5">HTML5</dfn>). Implementations may
  support only one of these two formats, although supporting both is
  encouraged.</p>

  <p>XML documents using elements from the XHTML namespace that use
  the new features described in this specification and that are served
  over the wire (e.g. by HTTP) must be sent using an XML MIME type
  such as <code>application/xml</code> or
  <code>application/xhtml+xml</code> and must not be served as
  <code>text/html</code>. <a href="#refsRFC3023">[RFC3023]</a></p>

  <p>These XML documents may contain a <code>DOCTYPE</code> if
  desired, but this is not required to conform to this
  specification.</p>

  <p>HTML documents that use the new features described in this
  specification must start with the string <code>&lt;!DOCTYPE
  html&gt;</code> and, if they are served over the wire (e.g. by HTTP)
  must be labelled with the <code>text/html</code> MIME type.</p> <!--
  XXX move the DOCTYPE requirement to the syntax section -->
  

  <h4>Dependencies</h4>

  <p>This specification relies on several other underlying
  specifications.</p>

  <dl>

   <dt>XML</dt>

   <dd>

    <p>Implementations that support XHTML5 must support some version
    of XML, as well as its corresponding namespaces specification,
    because XHTML5 uses an XML serialisation with namespaces. <a
    href="#refsXML">[XML]</a> <a
    href="#refsXMLNAMES">[XMLNAMES]</a></p>

   </dd>

   <dt>XML Base</dt>

   <dd>

    <p id="xmlBase">User agents must follow the rules given by XML
    Base to resolve relative URIs in HTML and XHTML fragments, because
    that is the mechanism used in this specification for resolving
    relative URIs in DOM trees. <a
    href="#refsXMLBASE">[XMLBASE]</a></p>

    <p class="note">It is possible for <code>xml:base</code> attributes
    to be present even in HTML fragments, as such attributes can be
    added dynamically using script.</p>

   </dd>

   <dt>DOM</dt>

   <dd>

    <p>Implementations must support some version of DOM Core and DOM
    Events, because this specification is defined in terms of the DOM,
    and some of the features are defined as extensions to the DOM Core
    interfaces. <a href="#refsDOM3CORE">[DOM3CORE]</a> <a
    href="#refsDOM3CORE">[DOM3EVENTS]</a></p>

    <p>Implementations must support some version of the Window Object,
    because this specification extends this interface to provide some
    of its features. <a href="#refsWINDOW">[WINDOW]</a></p>

   </dd>

   <dt>ECMAScript</dt>

   <dd>

    <p>Implementations that use ECMAScript to implement the APIs
    defined in this specification must implement them in a manner
    consistent with the ECMAScript Bindings for DOM Specifications
    specification, as this specification uses that specification's
    terminology. <a href="#refsEBFD">[EBFD]</a></p>

   </dd>

  </dl>

  <p>This specification does not require support of any particular
  network transport protocols, image formats, audio formats, video
  formats, style sheet language, scripting language, or any of the DOM
  and WebAPI specifications beyond those described above. However, the
  language described by this specification is biased towards CSS as
  the styling language, ECMAScript as the scripting language, and HTTP
  as the network protocol, and several features assume that those
  languages and protocols are in use.</p>


  <h4>Features defined in other specifications</h4>

  <p>Some elements are defined in terms of their DOM
  <code>textContent</code> attribute. This is an attribute defined on
  the <code>Node</code> interface in DOM3 Core. <a
  href="#refsDOM3CORE">[DOM3CORE]</a></p>

  <p class="big-issue">Should textContent be defined differently for
  dir="" and &lt;bdo>? Should we come up with an alternative to
  textContent that handles those and other things, like alt=""?</p>

  <!-- This section is currently here exclusively so that we crossref
  to textContent. XXX also add event-click, event-change,
  event-DOMActivate, etc, here, and just have the section be a general
  "defined in other specifications" section -->

  <p>The terms <dfn>browsing context</dfn> and <dfn>top-level browsing
  context</dfn> are used as defined in the Window Object
  specification. <a href="#refsWINDOW">[WINDOW]</a></p>



  <h3>Terminology</h3>

  <p>This specification refers to both HTML and XML attributes and DOM
  attributes, often in the same context. When it is not clear which is
  being referred to, they are referred to as <dfn>content
  attributes</dfn> for HTML and XML attributes, and <dfn>DOM
  attributes</dfn> for those from the DOM. Similarly, the term
  "properties" is used for both ECMAScript object properties and CSS
  properties. When these are ambiguous they are qualified as object
  properties and CSS properties respectively.</p>

  <p id="html-namespace">To ease migration from HTML to XHTML, UAs
  conforming to this specification will place elements in HTML in the
  <code>http://www.w3.org/1999/xhtml</code> namespace, at least for
  the purposes of the DOM and CSS. The term "<dfn>elements in the HTML
  namespace</dfn>", when used in this specification, thus refers to
  both HTML and XHTML elements.</p>

  <p>Unless otherwise stated, all elements defined or mentioned in
  this specification are in the
  <code>http://www.w3.org/1999/xhtml</code> namespace, and all
  attributes defined or mentioned in this specification have no
  namespace (they are in the per-element partition).</p>

  <p>Generally, when the specification states that a feature applies
  to HTML or XHTML, it also includes the other. When a feature
  specifically only applies to one of the two languages, it is called
  out by explicitly stating that it does not apply to the other
  format, as in "for HTML, ... (this does not apply to XHTML)".</p>

  <p>This specification uses the term <em>HTML documents</em> to
  generally refer to any use of HTML, ranging from short static
  documents to long essays or reports with rich multimedia, as well as
  to fully-fledged interactive applications.</p>

  <p>For readability, the term URI is used to refer to both ASCII URIs
  and Unicode IRIs, as those terms are defined by <a
  href="#refsRFC3986">[RFC3986]</a> and <a
  href="#refsRFC3987">[RFC3987]</a> respectively. On the rare
  occasions where IRIs are not allowed but ASCII URIs are, this is
  called out explicitly.</p>

  <p>The term <dfn>root element</dfn>, when not qualified to
  explicitly refer to the document's root element, means the furthest
  ancestor element node of whatever node is being discussed, or the
  node itself is there is none. When the node is a part of the
  document, then that is indeed the document's root element. However,
  if the node is not currently part of the document tree, the root
  element will be an orphaned node.</p>

  <p>When it is stated that some element or attribute is ignored, or
  treated as some other value, or handled as if it was something else,
  this refers only to the processing of the node after it is in the
  DOM. A user agent must not mutate the DOM in such situations.</p>

  <p>When an XML name, such as an attribute or element name, is
  referred to in the form
  <code><var title="">prefix</var>:<var title="">localName</var></code>, as in
  <code>xml:id</code> or <code>svg:rect</code>, it refers to a name
  with the local name <var title="">localName</var> and the namespace given by
  the prefix, as defined by the following table:</p>

  <dl>
   <dt><code title="">xml</code></dt>
   <dd><code>http://www.w3.org/XML/1998/namespace</code></dd>
   <dt><code title="">html</code></dt>
   <dd><code>http://www.w3.org/1999/xhtml</code></dd>
   <dt><code title="">svg</code></dt>
   <dd><code>http://www.w3.org/2000/svg</code></dd>
  </dl>

  <p>For simplicity, terms such as <em>shown</em>, <em>displayed</em>,
  and <em>visible</em> might sometimes be used when referring to the
  way a document is rendered to the user. These terms are not meant to
  imply a visual medium; they must be considered to apply to other
  media in equivalent ways.</p>

  <p>Various DOM interfaces are defined in this specification using
  pseudo-IDL. This looks like OMG IDL but isn't. For instance, method
  overloading is used, and types from the W3C DOM specifications are
  used without qualification. Language-specific bindings for these
  abstract interface definitions must be derived in the way consistent
  with W3C DOM specifications. Some interface-specific binding
  information for ECMAScript is included in this specification.</p>

  <p>The construction "a <code>Foo</code> object", where
  <code>Foo</code> is actually an interface, is sometimes used instead
  of the more accurate "an object implementing the interface
  <code>Foo</code>".</p>

  <p>The terms <em>fire</em> and <em>dispatch</em> are used
  interchangeably in the context of events, as in the DOM Events
  specifications. <a href="#refsDOM3EVENTS">[DOM3EVENTS]</a></p>

  <p>If a DOM object is said to be <dfn>live</dfn>, then that means
  that any attributes returning that object must always return the
  same object (not a new object each time), and the attributes and
  methods on that object must operate on the actual underlying data,
  not a snapshot of the data.</p>

  <p>Some of the algorithms in this specification, for historical
  reasons, require the user agent to <dfn>pause</dfn> until some
  condition has been met. While a user agent is paused, it must ensure
  that no scripts execute (e.g. no event handlers, no timers,
  etc). User agents should remain responsive to user input while
  paused, however.</p>




  <h2>The Document Object Model</h2>

  <p>The Document Object Model (DOM) is a representation &mdash; a
  model &mdash; of the document and its content. <a
  href="#refsDOM3CORE">[DOM3CORE]</a> The DOM is not just an API; the
  conformance criteria of HTML implementations are defined, in this
  specifiation, in terms of operations on the DOM.</p>


  <h3>The security model <span title="WIP">[WIP]</span></h3>

  <p><em>Web browser vendors should implement this security model, to
  provide Web authors with a consistent development environment that
  is interoperable across different implementations. However,
  implementors may use any other model if desired.</em></p>

  <p class="big-issue">This section is <em>so</em> not complete.</p>

  <p>The <dfn title="document's domain">domain of a
  <code>Document</code> object</dfn> is the domain given by the
  <code>hostname</code> attribute of the <code>Location</code> object
  returned by the <code>Document</code> object's <code
  title="dom-document-location">location</code> attribute, <em>if</em>
  that <code>hostname</code> attribute is not the empty string. <span
  class="big-issue">If it is, the domain of the document is
  UA-defined. For now.</span> <!-- XXX data: and javascript: URIs
  should be relative to the spawning DocumentUI, but we need to make
  sure that's a defined concept first. --> <span
  class="big-issue">Need to be more correct about where .location is
  defined. It's not actually on Document.</span>

  <p>The <dfn title="script's domain">domain of a script</dfn> is the
  <span title="document's domain">domain of the <code>Document</code>
  object</span> that is returned by the <code
  title="dom-document">document</code> attribute of the script's
  primary <code>Window</code> object (in UAs that implement
  ECMAScript, <a href="#globalScopeObject">that is the global scope
  object</a>).</p>

  <p>The <dfn>the string representing the script's domain in IDNA
  format</dfn> is obtained as follows: take the <span>script's
  domain</span> and apply the IDNA ToASCII algorithm and then the IDNA
  ToUnicode algorithm to each component of the domain name (with both
  the AllowUnassigned and UseSTD3ASCIIRules flags set both times). <a
  href="#refsRFC3490">[RFC3490]</a> If ToASCII fails to convert one of
  the components of the string, e.g. because it is too long or because
  it contains invalid characters, then the string representing the
  script's domain in IDNA format cannot be obtained. (ToUnicode is
  defined to never fail.)</p>


  <h3>Common DOM interfaces <span title="TBW">[TBW]</span></h3>

  <p class="big-issue">Still need to define
  <code>HTMLCollection</code>.</p> <!-- XXX HTMLCollection -->

  <pre class="idl">interface <dfn>DOMTokenString</dfn> {
  boolean <span title="dom-tokenstring-has">has</span>(in DOMString token);
  void <span title="dom-tokenstring-add">add</span>(in DOMString token);
  void <span title="dom-tokenstring-remove">remove</span>(in DOMString token);
};</pre>

  <p class="big-issue">Need to define those members.</p> <!-- XXX -->


  <h3>The document <span title="TBW">[TBW]</span></h3>

  <p>Every XML and HTML document in an HTML UA is represented by a
  <code>Document</code> object. <a
  href="#refsDOM3CORE">[DOM3CORE]</a></p>

  <p>All <code>Document</code> objects (in user agents implementing
  this specification) must also implement the
  <code>HTMLDocument</code> interface, available using
  binding-specific methods. (This is the case whether or not the
  document in question is an HTML document.)</p>

  <p><code>Document</code> objects must also implement the
  document-level interface of any other namespaces found in the
  document that the UA supports. For example, if an HTML
  implementation also supports SVG, then the <code>Document</code>
  object must implement <code>HTMLDocument</code> and
  <code>SVGDocument</code>.</p>

  <p class="note">Because the <code>HTMLDocument</code> interface is
  now obtained using binding-specific casting methods instead of
  simply being the primary interface of the document object, it is no
  longer defined as inheriting from <code>Document</code>.</p>

  <pre class="idl">interface <dfn>HTMLDocument</dfn> {
           attribute DOMString <span title="dom-document-title">title</span>;
  readonly attribute DOMString <span title="dom-document-referrer">referrer</span>;
  readonly attribute DOMString <span title="dom-document-domain">domain</span>;
  readonly attribute DOMString <span title="dom-document-URL">URL</span>;
           attribute <span>HTMLElement</span> <span title="dom-document-body">body</span>;
  readonly attribute <span>HTMLCollection</span> <span title="dom-document-images">images</span>;
  readonly attribute <span>HTMLCollection</span> <span title="dom-document-applets">applets</span>;
  readonly attribute <span>HTMLCollection</span> <span title="dom-document-links">links</span>;
  readonly attribute <span>HTMLCollection</span> <span title="dom-document-forms">forms</span>;
  readonly attribute <span>HTMLCollection</span> <span title="dom-document-anchors">anchors</span>;
           attribute DOMString <span title="dom-document-cookie">cookie</span>;

  void <span title="dom-document-open">open</span>();
  void <span title="dom-document-close">close</span>();
  void <span title="dom-document-write">write</span>(in DOMString text);
  void <span title="dom-document-writeln">writeln</span>(in DOMString text);
  NodeList <span title="dom-document-getElementsByName">getElementsByName</span>(in DOMString elementName);
  NodeList <span title="dom-document-getElementsByClassName">getElementsByClassName</span>(in DOMString className1 [, in DOMString className2, ...] );

  <span>Selection</span> <span title="dom-document-getSelection">getSelection</span>();
  readonly attribute HTMLCollection <span title="dom-document-commands">commands</span>;

  // <span title="contenteditable">editing</span>:
           attribute boolean <span title="dom-document-designMode">designMode</span>;
  boolean <span title="dom-document-execCommand">execCommand</span>(in DOMString commandID);
  boolean <span title="dom-document-execCommand">execCommand</span>(in DOMString commandID, in boolean doShowUI);
  boolean <span title="dom-document-execCommand">execCommand</span>(in DOMString commandID, in boolean doShowUI, in DOMString value);

<!-- lots of other stuff to come XXX
     see e.g. http://lxr.mozilla.org/seamonkey/source/dom/public/idl/html/nsIDOMNSHTMLDocument.idl -->
};</pre>

  <p class="big-issue">Need to define those members; the <code
  title="dom-document-body">body</code> attribute will be used to
  define <dfn>the <code title="">body</code> element</dfn>.</p> <!--
  XXX also, document.body might need to point to the first <frameset>
  in framed pages -->

  <!-- implied window.open() call when parsing starts, not when
  .write() called; xref to parsing section -->

  <p>The <dfn
  title="dom-document-getElementsByClassName"><code>getElementsByClassName()</code></dfn>
  method takes one or more strings representing classes and must
  return all the elements in that document that are of all those
  classes. HTML, XHTML, SVG and MathML elements define which classes
  they are in by having an attribute in the per-element partition with
  the name <code>class</code> containing a space-separated list of
  classes to which the element belongs. Other specifications may also
  allow elements in their namespaces to be labelled as being in
  specific classes. UAs must not assume that all attributes of the
  name <code>class</code> for elements in any namespace work in this
  way, however, and must not assume that such attributes, when used as
  global attributes, label other elements as being in specific
  classes.</p>

  <p class="big-issue">There is an open issue on whether we should use
  multiple arguments or just one argument that needs to be split on
  spaces.</p>

  <p>The space character (U+0020) is not special in the method's
  arguments. In HTML, XHTML, SVG and MathML it is impossible for an
  element to belong to a class whose name contains a space character,
  however, and so typically the method would return no nodes if one of
  its arguments contained a space.</p>

  <p>Similarly, if the method is passed an argument consisting of the
  empty string, it will typically not return any nodes since in HTML,
  XHTML, SVG and MathML it is impossible to assign an element to the
  "" class.</p>

  <div class="example">
   <p>Given the following XHTML fragment:</p>
   <pre>&lt;div id="example"&gt;
 &lt;p id="p1" class="aaa bbb"/&gt;
 &lt;p id="p2" class="aaa ccc"/&gt;
 &lt;p id="p3" class="bbb ccc"/&gt;
&lt;/div&gt;</pre>
   <p>A call to
   <code>document.getElementById('example').getElementsByClassName('aaa')</code>
   would return a <code>NodeList</code> with the two paragraphs
   <code>p1</code> and <code>p2</code> in it. A call to
   <code>getElementsByClassName('ccc', 'bbb')</code> would only return
   one node, however, namely <code>p3</code>.</p>
   <p>A call to <code>getElementsByClassName('aaa bbb')</code> would
   return no nodes; none of the elements above are in the "aaa bbb"
   class.</p>
  </div>

<!-- XXX
>         * xGetParentElementByClassName(rootElement, className, tagName) -
> Navigates upwards until we hit a parent element with the given class name and
> optional tag name.

> * Right now most people directly access an elements className property, 
> without realizing that they might be clobbering multi-classed elements (i.e.
> something with class="class1 class2").  I usually have to create wrapper
> methods to ensure that this doesn't happen, such as xAddClass(target,
> className), xRemoveClass(target, className), and xHasClass(target, className),
> but it would be much nicer if the className property itself had better support
> for multi-classed elements.  Some example possibilities of what this might
> look like:
>         * someElement.className.add("someNewClass")
>         * someElement.className.remove("SomeOldClass")
>         * someElement.className.hasClass("someClass")
-->


  <h4><code>document.write()</code>, <code>innerHTML</code> <span title="TBW">[TBW]</span></h4>

  <p class="big-issue">...</p>

  <!-- XXX must make sure we spec that innerHTML causes mutation
  events to fire, but document.write() doesn't. (the latter is already
  req-stated in the parser section, btw) -->


  <h3>The elements <span title="TBW">[TBW]</span></h3>

  <p>The nodes representing HTML elements in the DOM must implement,
  and expose to scripts, the interfaces listed for them in the
  relevant sections of this specification. This includes XHTML
  elements in XML documents, even when those documents are in another
  context (e.g. inside an XSLT transform).</p>

  <p>The basic interface, from which all the HTML elements' interfaces
  inherit, and which is used by elements that have no additional
  requirements, is the <code>HTMLElement</code> interface.</p>

  <p class="big-issue">Define HTMLElement here.</p>

  <p>In HTML documents, for HTML elements, the DOM APIs must return
  tag names and attributes names in uppercase, regardless of the case
  with which they were created. This does not apply to XML documents;
  in XML documents, the DOM APIs must always return tag names and
  attribute names in the original case used to create those nodes.</p>


  <h4>Elements and documents</h4>

  <p>An element is said to have been <dfn title="insert an element
  into a document">inserted into a document</dfn> when either its
  <code>parentNode</code> DOM attribute changes and its new value is
  the <code>Document</code> in question, or, when the DOM node
  represented by its <code>parentNode</code>, if any, has itself just
  been <span title="insert an element into a document">inserted into a
  document</span>.</p> <!-- XXX that doesn't work... -->



  <h3>DOM feature strings</h3>

  <p>DOM3 Core defines mechanisms for checking for interface support,
  and for obtaining implementations of interfaces, using <a
  href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#DOMFeatures">feature
  strings</a>. <a href="#refsDOM3CORE">[DOM3CORE]</a></p>

  <p>A DOM application can use the <dfn
  title="hasFeature"><code>hasFeature(<var title="">feature</var>,
  <var title="">version</var>)</code></dfn> method of the
  <code>DOMImplementation</code> interface with parameter values
  "<code title="">HTML</code>" and "<code>5.0</code>" (respectively)
  to determine whether or not this module is supported by the
  implementation. In addition to the feature string "<code
  title="">HTML</code>", the feature string "<code
  title="">XHTML</code>" (with version string "<code>5.0</code>") can
  be used to check if the implementation supports XHTML. User agents
  should respond with a true value when the <code>hasFeature</code>
  method is queried with these values. Authors are cautioned, however,
  that UAs returning true might not be perfectly compliant, and that
  UAs returning false might well have support for features in this
  specification; in general, therefore, use of this method is
  discouraged.</p>

  <p>The values "<code title="">HTML</code>" and "<code
  title="">XHTML</code>" (both with version "<code>5.0</code>") should
  also be supported in the context of the <code>getFeature()</code>
  and <code>isSupported()</code> methods, as defined by DOM3 Core.</p>

  <p class="note">The interfaces defined in this specification are not
  always supersets of the interfaces defined in DOM2 HTML; some
  features that were formerly deprecated, poorly supported, rarely
  used or considered unnecessary have been removed. Therefore it is
  not guarenteed that an implementation that supports "<code
  title="">HTML</code>" "<code>5.0</code>" also supports "<code
  title="">HTML</code>" "<code>2.0</code>".</p>


  <h3>Reflecting content attributes in DOM attributes</h3>

  <p>Some <span title="DOM attribute">DOM attributes</span> are
  defined to <dfn>reflect</dfn> a particular <span>content
  attribute</span>. This means that on getting, the DOM attribute
  returns the current value of the content attribute, and on setting,
  the DOM attribute changes the value of the content attribute to the
  given value.</p>

  <p>If a reflecting DOM attribute is a <code>DOMString</code>
  attribute defined to contain a URI, then on getting, the DOM
  attribute returns the value of the content attribute, resolved to an
  absolute URI, and on setting, sets the content attribute to the
  specified literal value. If the content attribute is absent, the DOM
  attribute must return the default value, if the content attribute
  has one, or else the empty string.</p>

  <p>If a reflecting DOM attribute is a <code>DOMString</code>
  attribute that is not defined to contain a URI, then the getting and
  setting is done in a transparent, case-sensitive manner, except if
  the content attribute is defined to only allow a specific set of
  values. In this latter case, the attribute's value is first
  <span>converted to lowercase</span><!--XXX xref --> before being
  returned. If the content attribute is absent, the DOM attribute must
  return the default value, if the content attribute has one, or else
  the empty string.</p>

  <p>If a reflecting DOM attribute is a boolean attribute, then the
  DOM attribute returns true if the attribute is set, and false if it
  is absent. On setting, the content attribute is removed if the DOM
  attribute is set to false, and is set to have the same value as its
  name if the DOM attribute is set to true.</p>

  <p>If a reflecting DOM attribute is a numeric type
  (<code>long</code>) then the content attribute must be <a
  href="#toNumber">converted to a numeric type</a> first (truncating
  any fractional part). If that fails, or if the attribute is absent,
  the default value should be returned instead, or 0 if there is no
  default value. On setting, the given value is converted to a string
  representing the number in base ten and then that string should be
  used as the new content attribute value.</p>

  <!-- XXX DOMTokenString attributes -->


  <h3>Event listeners</h3>

  <p id="js-function-listener">In the ECMAScript DOM binding, the
  ECMAScript native <code>Function</code> type must implement the
  <code>EventListener</code> interface such that invoking the
  <code>handleEvent()</code> method of that interface on the object
  from another language binding invokes the function itself, with the
  <code>event</code> argument as its only argument. In the ECMAScript
  binding itself, however, the <code>handleEvent()</code> method of
  the interface is not directly accessible on <code>Function</code>
  objects. Such functions must be called in the global scope. If the
  function returns false, the event's <code>preventDefault()</code>
  method must then invoked. Exception: for historical reasons, for the
  HTML <code>mouseover</code> event, the <code>preventDefault()</code>
  method must be called when the function returns true instead.</p>

  <p id="event-handler-attributes">In HTML, event handler attributes
  (such as <code>onclick</code>) are invoked as if they were functions
  implementing <code>EventListener</code>, with the argument called
  <code>event</code>. Such attributes are added as non-capture event
  listeners of the type given by their name (without the leading
  <code>on</code> prefix). Only attributes actually defined <!--to
  exist--> by specifications implemented by the UA (e.g. this
  specification) are actually registered, however. If, for example, an
  author created an <code>onfoo</code> attribute, it would not be
  fired for <code>foo</code> events.</p>

  <p id="scopeResolution">The scope chain for ECMAScript executed in
  HTML event handler attributes must link from the activation object
  for the handler, to its <code>this</code> parameter (the event
  target), to the element's <code>form</code> element if it is a form
  control, to the document, to the global scope (the object
  implementing the <code>Window</code> interface).</p>

  <p class="note">This definition is compatible with how most browsers
  implemented DOM Level 0, but does not exactly describe IE's
  behaviour. See also ECMA262 Edition 3, sections 10.1.6 and 10.2.3,
  for more details on activation objects. <a
  href="#refsECMA262">[ECMA262]</a></p>


  <h3>Event firing</h3>

  <p>Certain operations and methods are defined as firing events on
  elements. For example, the <code
  title="dom-command-click">click()</code> method on the
  <code>HTMLCommandElement</code> is defined as firing a <code
  title="event-click">click</code> event on the element.  <a
  href="#refsDOM3EVENTS">[DOM3EVENTS]</a></p>

  <p><dfn title="fire a click event">Firing a <code
  title="event-click">click</code> event</dfn> means that a <a
  href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#event-click"><code>click</code></a>
  event in the <code>http://www.w3.org/2001/xml-events</code>
  namespace, which bubbles and is cancelable, and which uses the
  <code>MouseEvent</code> interface, must be dispatched at the given
  element. The event object must have its <code
  title="">screenX</code>, <code title="">screenY</code>, <code
  title="">clientX</code>, <code title="">clientY</code>, and <code
  title="">button</code> attributes set to 0, its <code
  title="">ctrlKey</code>, <code title="">shiftKey</code>, <code
  title="">altKey</code>, and <code title="">metaKey</code> attributes
  set according to the current state of the key input device, if any
  (false for any keys that are not available), its <code
  title="">detail</code> attribute set to 1, and its <code
  title="">relatedTarget</code> attribute set to null. The <code
  title="">getModifierState()</code> method on the object must return
  values appropriately describing the state of the key input device at
  the time the event is created.</p>

  <p><dfn title="fire a change event">Firing a <code
  title="event-change">change</code> event</dfn> means that a <a
  href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#event-change"><code>change</code></a>
  event in the <code>http://www.w3.org/2001/xml-events</code>
  namespace, which bubbles but is not cancelable, and which uses the
  <code>Event</code> interface, must be dispatched at the given
  element. The event object must have its <code title="">detail</code>
  attribute set to 0.</p>

  <p><dfn title="fire a contextmenu event">Firing a <code
  title="event-contextmenu">contextmenu</code> event</dfn> means that
  a <code title="event-contextmenu">contextmenu</code> event in the
  <code>http://www.w3.org/2001/xml-events</code> namespace, which
  bubbles and is cancelable, and which uses the <code>Event</code>
  interface, must be dispatched at the given element. The event object
  must have its <code title="">detail</code> attribute set to 0.</p>

  <p><dfn title="fire a show event">Firing a <code
  title="event-show">show</code> event</dfn> means that a <code
  title="event-show">show</code> event in the
  <code>http://www.w3.org/2001/xml-events</code> namespace, which does
  not bubble but is cancelable, and which uses the <code>Event</code>
  interface, must be dispatched at the given element. The event object
  must have its <code title="">detail</code> attribute set to 0.</p>

  <!-- XXX need to define the dispatching of DOMActivate -->

  <p>The default action of these event is to do nothing unless
  otherwise stated.</p>

  <p class="big-issue">If you dispatch a custom "click" event at an
  element that would normally have default actions, they should get
  triggered. We need to go through the entire spec and make sure that
  any default actions are defined in terms of <em>any</em> event of
  the right type on that element, not those that are dispatched in
  expected ways.</p>


  <h3>Event handling</h3>

  <p class="big-issue">We need a section to define how events all
  work, default actions, etc. For example, how does clicking on a span
  in a link that is in another link actually cause a link to be
  followed? which one? (where should this section be?)</p>



  <h2>Semantics and structure of HTML elements</h2>


  <h3>Introduction <span title="TBW">[TBW]</span></h3>

  <p><em>This section is non-normative.</em></p>

  <p class="big-issue">An introduction to marking up a document.</p>


  <h3>Common microsyntaxes</h3>

  <p>There are various places in HTML that accept particular data
  types, such as dates or numbers. This section describes what the
  conformance criteria for content in those formats is, and how to
  parse them.</p>


  <h4>Numbers</h4>

  <p>A <dfn>valid floating point number</dfn> ...</p>

  <p>A <dfn>valid denominator punctuation character</dfn> ...</p>

  <p>The <dfn title="values associated with denominator punctuation
  characters">value associated with each denominator punctuation
  character</dfn> is ...</p>

  <pre class="big-issue">
        U+0025 PERCENT SIGN
        U+066A ARABIC PERCENT SIGN
        U+FE6A SMALL PERCENT SIGN
        U+FF05 FULLWIDTH PERCENT SIGN
         => 100

        U+2030 PER MILLE SIGN
         => 1000

        U+2031 PER TEN THOUSAND SIGN
         => 10000
  </pre>

  <p>The <dfn>rules for parsing floating point number values</dfn> ...</p>

  <p class="big-issue">...</p>

  <!-- XXX should have the term "positive" and the term "denominator
  punctuation character" in the following term name, since it ignores
  "-" characters and is very specific to the whole gauge/progress
  thing -->

  <p>The <dfn>steps for finding one or two numbers in a string</dfn>
  are as follows:</p>

  <ol>

   <li>If the string is empty, then return nothing and abort these
   steps.</li>

   <li><span>Find a number</span> in the string according to the
   algorithm below, starting at the start of the string.</li>

   <li>If the sub-algorithm in step 2 returned nothing or returned an
   error condition, return nothing and abort these steps.</li>

   <li>Set <var>number1</var> to the number returned by the
   sub-algorithm in step 2.</li>

   <li>Starting with the character immediately after the last one
   examined by the sub-algorithm in step 2, skip any characters in the
   string that are in the Unicode character class Zs (this might match
   zero characters). <a href="#refsUNICODE">[UNICODE]</a></li>

   <li>If there are still further characters in the string, and the
   next character in the string is a <span>valid denominator
   punctuation character</span>, set <var>denominator</var> to that
   character.</li>

   <li>If the string contains any other characters in the range U+0030
   DIGIT ZERO to U+0039 DIGIT NINE, but <var>denominator</var> was
   given a value in the step 6, return nothing and abort these
   steps.</li>

   <li>Otherwise, if <var>denominator</var> was given a value in step
   6, return <var>number1</var> and <var>denominator</var> and abort
   these steps.</li>

   <li><span>Find a number</span> in the string again, starting
   immediately after the last character that was examined by the
   sub-algorithm in step 2.</li>

   <li>If the sub-algorithm in step 9 returned nothing or an error
   condition, return nothing and abort these steps.</li>

   <li>Set <var>number2</var> to the number returned by the
   sub-algorithm in step 9.</li>

   <li>If there are still further characters in the string, and the
   next character in the string is a <span>valid denominator
   punctuation character</span>, return nothing and abort these
   steps.</li>

   <li>If the string contains any other characters in the range U+0030
   DIGIT ZERO to U+0039 DIGIT NINE, return nothing and abort these
   steps.</li>
 
   <li>Otherwise, return <var>number1</var> and
   <var>number2</var>.</li>

  </ol>

  <!-- XXX again, this should say "positive number" -->
  <p>The algorithm to <dfn>find a number</dfn> is as follows. It is
  given a string and a starting position, and returns either nothing,
  a number, or an error condition.</p>

  <ol>

   <li>Starting at the given starting position, ignore all characters
   in the given string until the first character that is either a
   U+002E FULL STOP or one of the ten characters in the range U+0030
   DIGIT ZERO to U+0039 DIGIT NINE.</li>

   <li>If there are no such characters, return nothing and abort these
   steps.</li>

   <li>Starting with the character matched in step 1, collect all the
   consecutive characters that are either a U+002E FULL STOP or one of
   the ten characters in the range U+0030 DIGIT ZERO to U+0039 DIGIT
   NINE, and assign this string of one or more characters to
   <var>string</var>.</li>

   <li>If <var>string</var> contains more than one U+002E FULL STOP
   character then return an error condition and abort these
   steps.</li>

   <li>Parse <var>string</var> according to the <span>rules for
   parsing floating point number values</span>, to obtain
   <var>number</var>. This step cannot fail (<var>string</var> is
   guarenteed to be a <span>valid floating point number</span>).</li>

   <li>Return <var>number</var>.</li>

  </ol>

  <p class="big-issue">The following paragraph needs merging in to the
  above at some point.</p>

  <p id="toNumber">When a UA needs to convert a string to a number,
  algorithms equivalent to those specified in ECMA262 sections 9.3.1
  ("ToNumber Applied to the String Type") and 8.5 ("The Number type")
  should be used (possibly after suitably altering the algorithms to
  handle numbers of the range that the UA can support). <a
  href="#refsECMA262">[ECMA262]</a></p><!-- XXX for integers, do we
  instead want to use
  http://lxr.mozilla.org/seamonkey/source/xpcom/string/src/nsTStringObsolete.cpp#143
  or should we use E262's? This affects how attributes are parsed,
  e.g. if start="1e2" means "1" or "100". -->


  <h4>Dates</h4>

  <p class="big-issue">...</p>


  <h3>HTML documents and document fragments</h3>

  <h4>Semantics</h4>

  <p>Elements, attributes, and attribute values in HTML are defined
  (by this specification) to have certain meanings (semantics). For
  example, the <code>ol</code> element represents an ordered list, and
  the <code title="lang">lang</code> attribute represents the language
  of the content.</p>

  <p>Authors must only use elements, attributes, and attribute values
  for their appropriate semantic purposes.</p>

  <div class="example">
   <p>For example, the following document is non-conforming, despite
   being syntactically correct:</p>

   <pre>&lt;!DOCTYPE html&gt;
&lt;html lang="en-GB"&gt;
 &lt;head&gt; &lt;title&gt; Demonstration &lt;/title&gt; &lt;/head&gt;
 &lt;body&gt;
  &lt;table&gt;
   &lt;tr&gt; &lt;td&gt; My favourite animal is the cat. &lt;/td&gt; &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;
     &mdash;&lt;a href="http://example.org/~ernest/"&gt;&lt;cite&gt;Ernest&lt;/cite&gt;&lt;/a&gt;,
     in an essay from 1992
    &lt;/td&gt;
   &lt;/tr&gt;
  &lt;/table&gt;
 &lt;/body&gt;
&lt;/html&gt;</pre>

   <p>...because the data placed in the cells is clearly not tabular
   data. A corrected version of this document might be:</p>

   <pre>&lt;!DOCTYPE html&gt;
&lt;html lang="en-GB"&gt;
 &lt;head&gt; &lt;title&gt; Demonstration &lt;/title&gt; &lt;/head&gt;
 &lt;body&gt;
  &lt;blockquote&gt;
   &lt;p&gt; My favourite animal is the cat. &lt;/p&gt;
  &lt;/blockquote&gt;
  &lt;p&gt;
   &mdash;&lt;a href="http://example.org/~ernest/"&gt;&lt;cite&gt;Ernest&lt;/cite&gt;&lt;/a&gt;,
   in an essay from 1992
  &lt;/p&gt;
 &lt;/body&gt;
&lt;/html&gt;</pre>

   <p>This next document fragment, intended to represent the heading
   of a corporate site, is similarly non-conforming because the second
   line is not intended to be a heading of a subsection, but merely a
   subheading or subtitle (a subordinate heading for the same
   section).</p>

   <pre>&lt;body&gt;
 &lt;h1&gt;ABC Company&lt;/h1&gt;
 &lt;h2&gt;Leading the way in widget design since 1432&lt;/h2&gt;
 ...</pre>

   <p>The <code>header</code> element should be used in these kinds of
   situations:</p>

   <pre>&lt;body&gt;
 &lt;header&gt;
  &lt;h1&gt;ABC Company&lt;/h1&gt;
  &lt;h2&gt;Leading the way in widget design since 1432&lt;/h2&gt;
 &lt;/header&gt;
 ...</pre>

  </div>

  <p>Through scripting and using other mechanisms, the values of
  attributes, text, and indeed the entire structure of the document
  may change dynamically while a user agent is processing it. The
  semantics of a document at an instant in time are those represented
  by the state of the document at that instant in time, and the
  semantics of a document can therefore change over time. User agents
  must update their presentation of the document as this occurs.</p>

  <p class="example">HTML has a <code>progress</code> element that
  describes a progress bar. If its "value" attribute is dynamically
  updated by a script, the UA would update the rendering to show the
  progress changing.</p>

  <h4>Structure</h4>

  <p>All the elements in this specification have a defined content
  model, which describes what nodes are allowed inside the elements,
  and thus what the structure of an HTML document or fragment must
  look like. Authors must only put elements inside an element if that
  element allows them to be there according to its content model.</p>

  <p>For the purposes of determining if an element matches its content
  model or not, CDATA nodes in the DOM must be treated as text nodes,
  and character entity reference nodes must be treated as if they were
  expanded in place.</p> <!-- XXX unexpandable entities? -->

  <p>The whitespace characters U+0020 SPACE, U+000A LINE FEED, and
  U+000D CARRIAGE RETURN are always allowed between elements. User
  agents must always represent these characters between elements in
  the source markup as text nodes in the DOM. Empty text nodes and
  text nodes consisting of just sequences of those characters are
  considered <dfn>inter-element whitespace</dfn> and must be ignored
  when establishing whether an element matches its content model or
  not.</p>

  <!-- XXX need to define how to handle U+000A LINE FEED and U+000D
  CARRIAGE RETURN in attributes (for HTML) -->

  <p>Authors must only use elements from the HTML namespace in the
  contexts where they are allowed, as defined for each element. For
  XML compound documents, these contexts could be inside elements from
  other namespaces, if those elements are defined as providing the
  relevant contexts.</p>

  <div class="example">
   <p>The SVG specification defines the SVG <code>foreignObject</code>
   element as allowing foreign namespaces to be included, thus
   allowing compound documents to be created by inserting subdocument
   content under that element. <em>This</em> specification defines the
   XHTML <code>html</code> element as being allowed where subdocument
   fragments are allowed in a compound document. Together, these two
   definitions mean that placing an XHTML <code>html</code> element as
   a child of an SVG <code>foreignObject</code> element is
   conforming.</p>
  </div>


  <h4>Kinds of elements</h4>

  <p>Each element in HTML falls into zero or more categories that
  group elements with similar characteristics together. This
  specification uses the following categories:</p>

  <ul class="brief">
   <li><span>Metadata elements</span></li>
   <li><span>Sectioning elements</span></li>
   <li><span>Block-level elements</span></li>
   <li><span>Strictly inline-level content</span></li>
   <li><span>Structured inline-level elements</span></li>
   <li><span>Interactive elements</span></li>
   <li><span>Form control elements</span></li>
  </ul>

  <!-- XXX check that all the above got a section defining them,
  however briefly -->

  <!-- XXX check that the element definitions also link to those
  sections -->

  <p>Some elements have unique requirements and do not fit into any
  particular category.</p> <!-- no category -->


  <h5><dfn>Block-level elements</dfn></h5>

  <p>Block-level elements are used for structural grouping of page
  content.</p>

  <p>There are several kinds of block-level elements:</p>

  <ul>

   <li>Some can only contain other block-level elements:
   <code>blockquote</code>, <code>section</code>,
   <code>article</code>, <code>header</code>.</li>

   <li>Some can only contain <span>inline-level content</span>:
   <code>p</code>, <code>h1</code>-<code>h6</code>,
   <code>address</code>.</li>

   <li>Some can contain either block-level elements or
   <span>inline-level content</span> (but not both):
   <code>nav</code>, <code>aside</code>, <code>footer</code>,
   <code>div</code>.</li>

   <li>Finally, some have very specific content models:
   <code>ul</code>, <code>ol</code>, <code>dl</code>,
   <code>table</code>, <code>script</code>.

   </li>

  </ul>

  <p>There are also elements that seem to be block-level but aren't,
  such as <code>body</code>, <code>li</code>, <code>dt</code>,
  <code>dd</code>, and <code>td</code>. These elements are allowed
  only in specific places, not simply anywhere that block-level
  elements are allowed.</p>

  <p>Some block-level elements play multiple roles. For instance, the
  <code>script</code> elements is allowed inside <code>head</code>
  elements and can also be used as <span>inline-level content</span>.
  Similarly, the <code>ul</code>, <code>ol</code>, <code>dl</code>,
  <code>table</code>, and <code>blockquote</code> elements play dual
  roles as both block-level and inline-level elements.</p>


  <h5><dfn>Inline-level content</dfn></h5>

  <p>Inline-level content consists of text and various elements to
  annotate the text, as well as some <span>embedded content</span>
  (such as images or sound clips).</p>

  <p>Inline-level content comes in various types:</p>

  <dl>

   <dt><dfn>Strictly inline-level content</dfn></dt>
   <dd>Text, embedded content, and elements that annotate the text
   without introducing structural grouping. For example:
   <code>a</code>, <code>i</code>, <code>noscript</code>. Elements
   used in contexts allowing only strictly inline-level content must
   not contain anything other than strictly inline-level content.</dd>

   <dt><dfn>Structured inline-level elements</dfn></dt>
   <dd>Block-level elements that can also be used as inline-level
   content. For example: <code>ol</code>, <code>blockquote</code>,
   <code>table</code>.</dd>

  </dl>

  <p>Unless an element's content model explicitly states that it must
  contain <span>significant inline content</span>, simply having no
  text nodes and no elements satisfies an element whose content model
  is some kind of inline content.</p>

  <p>Some elements are defined to have as a content model
  <dfn>significant inline content</dfn>. This means that at least one
  descendant of the element must be <span>significant text</span> or
  <span>embedded content</span>.</p> <!-- XXX links -->

  <p><dfn>Significant text</dfn>, for the purposes of determining the
  presence of <span>significant inline content</span>, consists of any
  character other than those falling in the <a
  href="http://unicode.org/Public/UNIDATA/UCD.html#General_Category_Values">Unicode
  categories</a> Zs, Zl, Zp, Cc, and Cf. <a
  href="#refsUNICODE">[UNICODE]</a></p>

  <div class="example">
   <p>The following three paragraphs are non-conforming because their
   content model is not satisfied (they all count as empty).</p>
   <pre>
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;#x00A0;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;
 &lt;ol&gt;
  &lt;li&gt;&lt;/li&gt;
 &lt;/ol&gt;
&lt;/p&gt;
</pre>
  </div>


  <h5><dfn>Determining if a particular element contains block-level
  elements or inline-level content</dfn></h5>

  <p>Some elements are defined to have content models that allow
  either <span>block-level elements</span> or <span>inline-level
  content</span>, but not both. For example, the <code>aside</code>
  and <code>li</code> elements.</p>

  <p>To establish whether such an element is being used as a
  block-level container or as an inline-level container, for example
  in order to determine if a document conforms to these requirements,
  user agents must look at the element's child nodes. If any of the
  child nodes are not allowed in block-level contexts, then the
  element is being used for <span>inline-level content</span>. If all
  the child nodes are allowed in a block-level context, then the
  element is being used for <span>block-level elements</span>.</p>

  <div class="example">
   <p>For instance, in the following (non-conforming) fragment, the
   <code>li</code> element is being used as an inline-level element
   container, because the <code>style</code> element is not allowed in
   a block-level context. (It doesn't matter, for the purposes of
   determining whether it is an inline-level or block-level context,
   that the <code>style</code> element is not allowed in inline-level
   contexts either.)</p>
   <pre>&lt;ol&gt;
 &lt;li&gt;
  &lt;p&gt; Hello World &lt;/p&gt;
  &lt;style&gt;
   /* This example is illegal. */
  &lt;/style&gt;
 &lt;/li&gt;
&lt;/ol&gt;
</pre>
   <p>In the following fragment, the <code>aside</code> element is
   being used as a block-level container, because even though all the
   elements it contains could be considered inline-level elements,
   there are no nodes that can only be considered inline-level.</p>
   <pre>&lt;aside&gt;
 &lt;ol&gt;
  &lt;li&gt; ... &lt;/li&gt;
 &lt;/ol&gt;
 &lt;ul&gt;
  &lt;li&gt; ... &lt;/li&gt;
 &lt;/ul&gt;
&lt;/aside&gt;</pre>
   <p>On the other hand, in the following similar fragment, the
   <code>aside</code> element is an inline-level container, because
   the text ("Foo") can only be considered inline-level.</p>
   <pre>&lt;aside&gt;
 &lt;ol&gt;
  &lt;li&gt; ... &lt;/li&gt;
 &lt;/ol&gt;
 Foo
&lt;/aside&gt;</pre>
  </div>

  <h5><dfn>Interactive elements</dfn></h5>

  <p>Certain elements in HTML can be activated, for instance
  <code>a</code> elements, <code>button</code> elements, or
  <code>input</code> elements when their <code>type</code> attribute
  is set to <code>radio</code>. Activation of those elements can
  happen in various (UA-defined) ways, for instance via the mouse or
  keyboard.</p>

  <p>When activation is performed via some method other than clicking
  the pointing device, the default action of the event that triggers
  the activation must, instead of being activating the element
  directly, be to <span>fire a <code title="">click</code> event</span>
  on the same element.</p>

  <p>The default action of this <code title="event-click">click</code>
  event, or of the real <code title="event-click">click</code> event
  if the element was activated by clicking a pointing device, must be
  to dispatch yet another event, namely <a
  href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#event-DOMActivate"><code>DOMActivate</code></a>.
  It is the default action of <em>that</em> event that then performs
  the actual action.</p> <!-- XXX need to define the dispatching of
  DOMActivate in the same way we define the dispatching of click -->

  <p>For certain form controls, this process is complicated further by
  <a
  href="http://whatwg.org/specs/web-forms/current-work/#the-click">changes
  that must happen around the click event</a>. <a
  href="#refsWF2">[WF2]</a></p> <!-- XXX WF2: when this is merged into
  this spec, update xrefs -->

  <p class="note">Most interactive elements have content models that
  disallowed nesting interactive elements.</p>

  <p class="big-issue"> Need to define how default actions actually
  work. For instance, if you click an event inside a link, the event
  is triggered on that element, but then we'd like a click is sent on
  the link itself. So how does that happen? Does the link have a
  bubbling listener that triggers that second click event? what if
  there are multiple nested links, which one should we send that event
  to?</p>

<!--
   <li><span>Form control elements</span></li>
-->


  <h4>Global attributes <span title="WIP">[WIP]</span></h4>

  <p>User agents must support the following common attributes on all
  elements in the HTML namespace (including elements that are not
  defined <!--to exist--> by this specification).</p>

  <dl>

   <dt><dfn title="attr-id"><code>id</code></dfn></dt>

   <dd>

    <p>The element's unique identifier. The value must be unique in
    the document and must <!--match the <code>Name</code> production
    from the XML specification. <a href="#refsXML">[XML]</a> [removed
    because we want square brackets to be allowed for WF2]--> contain
    at least one character.</p>

    <p>If the value is not the empty string, user agents must
    associate the element with the given value (exactly) for the
    purposes of ID matching (e.g. for selectors in CSS or for the
    <code>getElementById()</code> method in the DOM).</p>

    <p>Identifiers are opaque strings. Particular meanings should not
    be derived from the value of the <code title="attr-id">id</code>
    attribute.</p>

    <p>When an element has an ID set through multiple methods (for
    example, if it has both <code title="attr-id">id</code> and
    <code>xml:id</code> attributes simultaneously <a
    href="#refsXMLID">[XMLID]</a>), then the element has multiple
    identifiers. User agents must use all of an HTML element's
    identifiers (including those that are in error according to their
    relevant specification) for the purposes of ID matching.</p>

   </dd>

   <dt><dfn title="attr-title"><code>title</code></dfn></dt>

   <dd>

    <p>Advisory information for the element, such as would be
    appropriate for a tooltip. On a link, this could be the title or a
    description of the target resource; on an image, it could be the
    caption or a description of the image; on a paragraph, it could be
    a footnote or commentary on the text; on a citation, it could be
    further information about the source; and so forth. The value is
    text.</p>

    <p>If this attribute is omitted from an element, then it implies
    that the <code title="attr-title">title</code> attribute of the
    nearest ancestor with a <code title="attr-title">title</code>
    attribute set is also relevant to this element. Setting the
    attribute overrides this, explicitly stating that the advisory
    information of any ancestors is not relevant to this element.
    Setting the attribute to the empty string indicates that the
    element has no advisory information.</p>

    <p>Some elements, such as <code>link</code> and <code>dfn</code>,
    define additional semantics for the <code
    title="attr-title">title</code> attribute beyond the semantics
    described above.</p>

   </dd>

   <dt><dfn><code>lang</code></dfn> (HTML only) and <dfn><code>xml:lang</code></dfn> (XML only)</dt>

   <dd>

    <p>The primary language for the element's contents and for any of
    the element's attributes that contain text. The value must be a
    valid RFC 3066 language code, or the empty string. <a
    href="#refsRFC3066">RFC3066</a></p>

    <p>If this attribute is omitted from an element, then it implies
    that the language of this element is the same as the language of
    the parent element. Setting the attribute to the empty string
    indicates that the primary language is unknown.</p>

    <p>The <code>lang</code> attribute only applies to HTML documents.
    Authors must not use the <code>lang</code> attribute in XML
    documents. Authors must instead use the <code>xml:lang</code>
    attribute, defined in XML. <a href="#refsXML">[XML]</a></p> <!--
    XXX -->

    <p>To determine the language of a node, user agents must look at
    the nearest ancestor element (including the element itself if the
    node is an element) that has a <code>lang</code> or
    <code>xml:lang</code> attribute set. That specifies the language
    of the node.</p>

    <p>If both the <code>xml:lang</code> attribute and the
    <code>lang</code> attribute are set, user agents must use the
    <code>xml:lang</code> attribute, and the <code>lang</code>
    attribute must be ignored for the purposes of determining the
    element's language.</p>

    <p>If no explicit language is given for the <span>root
    element</span>, then language information from a higher-level
    protocol (such as HTTP), if any, must be used as the final
    fallback language. In the absence of any language information, the
    default value is unknown (the empty string).</p>

    <p>User agents may use the element's language to determine proper
    processing or rendering (e.g. in the selection of appropriate
    fonts or pronounciations, or for dictionary selection). <!--User
    agents must not use the element's language to determine text
    directionality. (commented out because text directionality is a
    rendering-level concern.)--></p>

   </dd>

   <dt><dfn><code>dir</code></dfn></dt>

   <dd>

    <p>The element's text directionality. The attribute, if specified,
    must have either the literal value <code>ltr</code> or the literal
    value <code>rtl</code>.</p>

    <p>If the attribute has the literal value <code>ltr</code>, the
    element's directionality is left-to-right. If the attribute has
    the literal value <code>rtl</code>, the element's directionality
    is right-to-left. If the attribute is omitted or has another
    value, then the directionality is unchanged.</p>

    <p>The processing of this attribute depends on the presentation
    layer. For example, CSS 2.1 defines a mapping from this attribute
    to the CSS 'direction' and 'unicode-bidi' properties, and defines
    rendering in terms of those property.</p>

   </dd>

   <dt><dfn><code>class</code</dfn></dt>

   <dd>

    <p>The element's classes. The value must be a list of zero or more
    words (consisting of one or more non-space characters) separated
    by one or more spaces.</p> <!-- XXX doesn't really say how class="
    X " is handled -->

    <p>User agents must assign all the given classes to the element,
    for the purposes of class matching (e.g. for selectors in CSS or
    for the <code
    title="dom-document-getElementsByClassName">getElementsByClassName()</code>
    method in the DOM).</p>

    <p>Unless defined by one of the URIs given in the
    <code>profile</code> attribute, classes are opaque strings.
    Particular meanings must not be derived from undefined values in
    the <code>class</code> attribute.</p>

    <p>Authors should bear in mind that using the <code>class</code>
    attribute does not convey any additional meaning to the element
    (unless using classes defined by a <code>profile</code>). There is
    no semantic difference between an element <em>with</em> a class
    attribute and one <em>without</em>. Authors that use classes that
    are not defined in a <code>profile</code> should make sure,
    therefore, that their documents make as much sense once all
    <code>class</code> attributes have been removed as they do with
    the attributes present.</p>

   </dd>


   <dt><dfn title="attr-contextmenu"><code>contextmenu</code</dfn></dt>

   <dd>

    <p>The element's <span title="context menus">context
    menu</span>. The value must be the ID of a <code>menu</code>
    element in the DOM. If the node that would be obtained by the
    invoking the <code>getElementById()</code> method using the
    attribute's value as the only argument is null or not a
    <code>menu</code> element, then the element has no assigned
    context menu. Otherwise, the element's assigned context menu is
    the element so identified.</p>

   </dd>


   <!-- XXX event handler attributes -->

  </dl>

  <p class="big-issue">Event handler attributes aren't handled yet.</p>

  <p>The following DOM interface, common to elements in the HTML
  namespace, provides scripts with convenient access to the content
  attributes listed above:</p>

  <pre class="idl">interface <dfn>HTMLElement</dfn> : <span>Element</span> {
           attribute DOMString <span title="dom-id">id</span>;
           attribute DOMString <span title="dom-title">title</span>;
           attribute DOMString <span title="dom-lang">lang</span>;
           attribute DOMString <span title="dom-dir">dir</span>;
           attribute DOMString <span title="dom-className">className</span>;
<!-- XXX event handler attributes -->
  NodeList <span title="dom-htmlelement-getElementsByClassName">getElementsByClassName</span>(in DOMString className1 [, in DOMString className2, ...] );
<!-- XXX innerHTML -->};</pre>

  <p>The <dfn title="dom-id"><code>id</code></dfn> attribute must
  <span>reflect</span> the content <code title="attr-id">id</code>
  attribute.</p>

  <p>The <dfn title="dom-title"><code>title</code></dfn> attribute
  must <span>reflect</span> the content <code
  title="attr-title">title</code> attribute.</p>

  <p>The <dfn title="dom-lang"><code>lang</code></dfn> attribute must
  <span>reflect</span> the content <code>lang</code> attribute.</p>

  <p>The <dfn title="dom-dir"><code>dir</code></dfn> attribute must
  <span>reflect</span> the content <code>dir</code> attribute.</p>

  <p>The <dfn title="dom-className"><code>className</code></dfn>
  attribute must <span>reflect</span> the content <code>class</code>
  attribute.</p>

  <p class="big-issue"><!-- XXX DOMTokenString change -->should also
  introduce a DOMTokenString accessor for the class attribute</p>

  <p>The <dfn
  title="dom-htmlelement-getElementsByClassName"><code>getElementsByClassName()</code></dfn>
  method must return the nodes that the <code>HTMLDocument</code>
  <code
  title="dom-document-getElementsByClassName">getElementsByClassName()</code>
  method would return, excluding any elements that are not descendants
  of the <code>HTMLElement</code> on which the method was invoked.</p>

<!-- XXX
click() https://bugzilla.mozilla.org/attachment.cgi?id=176950
also focus(), blur(), innerHTML, etc.
should the click, focus, blur methods be recursible?
-->


  <h4>The <dfn><code>html</code></dfn> element</h4>

  <!-- no category -->

  <dl class="element">
   <dt>Contexts in which this element may be used:</dt>
   <dd>As the root element of a document.</dd>
   <dd>Wherever a subdocument fragment is allowed in a compound document.</dd>
   <dt>Content model:</dt>
   <dd>A <code>head</code> element followed by a <code>body</code> element.</dd>
<!--XXX
Steven Pemberton was as always, a remarkable speaker, but his answer
to my question leaves me a very bad taste. Basically, I asked him why
XHTML2 preserves the useless head and body element. The answer was in
substance "because this is a compromise". Ah. So XHTML2 preserves two
useless elements that add potential dangers to the interpretation and
styling of documents because it's a compromise. Getting rid of head
would allow to attach directly the document's metadata to the root
element of the document, making much more sense than a head element.
Having a head element also preserves the ridiculous
engraved-in-the-marble "head contents are not rendered". Body is
dangerous because it's another box between the document and the
contents; you all have written a blog template with a <div
class="main"> or <div class="content">. Why do we also need a body?
 - http://www.glazman.org/weblog/dotclear/index.php?2005/05/27/1055-adam-2
-->
   <dt>Element-specific attributes:</dt>
   <dd>None.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>html</code> element represents the root of an HTML
  document.</p>


  <h3>Document metadata</h3>

  <p>Document metadata is represented by <dfn>metadata elements</dfn>
  in the document's <code>head</code> element.</p>

  <h4>The <dfn><code>head</code></dfn> element</h4>

  <!-- no category -->

  <dl class="element">
   <dt>Contexts in which this element may be used:</dt>
   <dd>As the first element in an <code>html</code> element.</dd>
   <dt>Content model:</dt>
   <dd>In any order, exactly one <code>title</code> element,
   optionally one <code>base</code> element (HTML only), and zero or
   more other <span>metadata elements</span> (in particular,
   <code>link</code>, <code>meta</code>, <code>style</code>, and
   <code>script</code>).</dd>
   <dt>Element-specific attributes:</dt>
   <dd><code>profile</code></dd>
   <dt>DOM interface:</dt>
   <dd>
<pre class="idl">interface <dfn>HTMLHeadElement</dfn> : <span>HTMLElement</span> {
           attribute DOMString <span title="dom-profile">profile</span>;
};</pre>
   </dd>
  </dl>

  <p>The <code>head</code> element collects the document's
  metadata.</p>

  <p>The <dfn><code>profile</code></dfn> attribute must, if specified,
  contain a list of zero or more URIs (or IRIs) representing
  definitions of classes, metadata names, and link relations. These
  URIs are opaque strings, like namespaces; user agents are not
  expected to determine any useful information from the resources that
  they reference.</p>

  <p>Each time a class, metadata, or link relationship name that is
  not defined by this specification is found in a document, the UA
  must check whether any of the URIs in the <code>profile</code>
  attribute are known (to the UA) to define that name. The class,
  metadata, or link relationship shall then be interpreted using the
  semantics given by the first URI that is known to define the name.
  If the name is not defined by this specification and none of the
  specified URIs defines the name either, then the class, metadata, or
  link relationship is meaningless and the UA must not assign special
  meaning to that name.</p>

  <p>If two profiles define the same name, then the semantic is given
  by the first URI specified in the <code>profile</code> attribute.
  There is no way to use the names from both profiles in one
  document.</p>

  <p>User agents must ignore all the URIs given in the
  <code>profile</code> attribute that follow a URI that the UA does
  not recognise. (Otherwise, if a name is defined in two profiles, UAs
  would assign meanings to the document differently based on which
  profiles they supported.)</p>

  <p class="note">If a profile's definition introduces new definitions
  over time, documents that use multiple profiles can change defined
  meaning over time. So as to avoid this problem, authors are
  encouraged to avoid using multiple profiles.</p>

  <p>The <dfn title="dom-profile"><code>profile</code></dfn> DOM
  attribute must <span>reflect</span> the <code>profile</code> content
  attribute on getting and setting.</p>


  <h4>The <dfn><code>title</code></dfn> element</h4>

  <p><span title="metadata elements">Metadata element</span>.</p>

  <dl class="element">
   <dt>Contexts in which this element may be used:</dt>
   <dd>In a <code>head</code> element containing no other <code>title</code> elements.</dd>
   <dt>Content model:</dt>
   <dd>Text (for details, see prose).</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>title</code> element represents the document's title or
  name. Authors should use titles that identify their documents even
  when they are used out of context, for example in a user's history
  or bookmarks, or in search results. The document's title is often
  different from its first header, since the first header does not
  have to stand alone when taken out of context.</p>

  <div class="example">

   <p>Here are some examples of appropriate titles, contrasted with
   the top-level headers that might be used on those same pages.</p>

   <pre>  &lt;title>Introduction to The Mating Rituals of Bees&lt;/title>
    ...
  &lt;h1>Introduction&lt;/h1>
  &lt;p>This companion guide to the highly successful
  &lt;cite>Introduction to Medieval Bee-Keeping&lt;/cite> book is...
</pre>

   <p>The next page might be a part of the same site. Note how the
   title describes the subject matter unambiguously, while the first
   header assumes the reader knowns what the context is and therefore
   won't wonder if the dances are Salsa or Waltz:</p>

   <pre>  &lt;title>Dances used during bee mating rituals&lt;/title>
    ...
  &lt;h1>The Dances&lt;/h1></pre>

  </div>

  <p>In HTML (as opposed to XHTML), the <code>title</code> element
  must not contain content other than text and entities; user agents
  parse the element so that entities are recognised and
  processed, but all other markup is interpreted as literal text.</p>
  <!-- XXX ensure that this is indeed defined in the parsing section -->

  <p>In XHTML, the <code>title</code> element must not contain any
  elements.</p>

  <p>User agents must concatenate the contents of all the text nodes
  and CDATA nodes that are direct children of the <code>title</code>
  element (ignoring any other nodes such as comments or elements), in
  tree order, to get the string to use as the document's title. User
  agents should use the document's title when referring to the
  document in their user interface.</p> <!-- XXX this doesn't handle
  character entity references; make sure to use the text I used for
  XBL2 to define this. -->

  <h4>The <dfn><code>base</code></dfn> element</h4>

  <p><span title="metadata elements">Metadata element</span>.</p>

  <dl class="element">
   <dt>Contexts in which this element may be used:</dt>
   <dd>In a <code>head</code> element, before any elements that use
   relative URIs, and only if there are no other <code>base</code>
   elements anywhere in the document. Only in HTML documents (never in
   XML documents).</dd>
   <dt>Content model:</dt>
   <dd>Empty.</dd>
   <dt>Element-specific attributes:</dt>
   <dd><code title="attr-base-href">href</code></dd>
   <dt>DOM interface:</dt>
   <dd>
<pre class="idl">interface <dfn>HTMLBaseElement</dfn> : <span>HTMLElement</span> {
           attribute DOMString <span title="dom-base-href">href</span>;
};</pre>
   </dd>
  </dl>

  <p>The <code>base</code> element allows authors to specify the
  document's base URI for the purposes of resolving relative URIs.</p>

  <p>The <dfn title="attr-base-href"><code>href</code></dfn> content
  attribute, if specified, must contain a URI (or IRI).</p>

  <p>User agents must use the value of the <code
  title="att-base-href">href</code> attribute on the first
  <code>base</code> element in the document as the document entity's
  base URI for the purposes of section 5.1.1 of RFC 2396
  ("Establishing a Base URI": "Base URI within Document Content"). <a
  href="#refsRFC2396">[RFC2396]</a> Note that this base URI from RFC
  2396 is referred to by the algorithm given in XML Base, which <a
  href="#xmlBase">is a normative part of this specification</a>.</p>

  <p>If the base URI given by this attribute is a relative URI, it
  must be resolved relative to the higher-level base URIs (i.e. the
  base URI from the encapsulating entity or the URI used to retrieve
  the entity) to obtain an absolute base URI.</p>

  <p>The <code title="attr-base-href">href</code> content attribute
  must be reflected by the DOM <dfn
  title="dom-base-href"><code>href</code></dfn> attribute.</p>

  <p>Authors must not use the <code>base</code> element in XML
  documents. Authors should instead use the <code>xml:base</code>
  attribute. <a href="#refsXMLBASE">[XMLBASE]</a></p>


  <h4>The <dfn><code>link</code></dfn> element</h4>

  <p><span title="metadata elements">Metadata element</span>.</p>

  <dl class="element">
   <dt>Contexts in which this element may be used:</dt>
   <dd>In a <code>head</code> element.</dd>
   <dt>Content model:</dt>
   <dd>Empty.</dd>
   <dt>Element-specific attributes:</dt>
   <dd><code title="attr-link-href">href</code></dd>
   <dd><code title="attr-link-rel">rel</code></dd>
   <dd><code title="attr-link-media">media</code></dd>
   <dd><code title="attr-link-hreflang">hreflang</code></dd>
   <dd><code title="attr-link-type">type</code></dd>
   <dd>Also, the <code title="attr-link-title">title</code> attribute has special semantics on this element.</dd>
   <dt>DOM interface:</dt>
   <dd>
<pre class="idl">interface <dfn>HTMLLinkElement</dfn> : <span>HTMLElement</span> {
           attribute boolean <span title="dom-link-disabled">disabled</span>;
           attribute DOMString <span title="dom-link-href">href</span>;
           attribute DOMString <span title="dom-link-rel">rel</span>;
           attribute DOMString <span title="dom-link-media">media</span>;
           attribute DOMString <span title="dom-link-hreflang">hreflang</span>;
           attribute DOMString <span title="dom-link-type">type</span>;
};</pre>
    <p>The <a
    href="http://www.w3.org/TR/DOM-Level-2-Style/stylesheets.html#StyleSheets-LinkStyle"><code>LinkStyle</code></a>
    interface defined in DOM2 Style must also be implemented by this
    element. <a href="#refsDOM2STYLE">[DOM2STYLE]</a></p>
   </dd>
  </dl>

  <p>The <code>link</code> element allows authors to indicate explicit
  relationships between their document and other resources.</p>

  <p>The destination of the link is given by the <dfn
  title="attr-link-href"><code>href</code></dfn> attribute, which must
  be a URI (or IRI). If the <code title="attr-link-href">href</code>
  attribute is absent, then the element does not define a link.</p>

  <p>The type of link indicated (the relationship) is given by the
  value of the <dfn title="attr-link-rel"><code>rel</code></dfn>
  attribute. The <a href="#linkTypes">allowed values and their
  meanings</a> are defined in a later section. If the <code
  title="attr-link-rel">rel</code> attribute is absent, or if the
  value used is not allowed according to the definitions in this
  specification, then the element does not define a link.</p>

  <p>Two categories of links can be created using the
  <code>link</code> element. <dfn title="external resource link">Links
  to external resources</dfn> are links to resources that are to be
  used to augment the current document, and <dfn title="hyperlink
  link">hyperlinks</dfn> are links to other documents. The <a
  href="#linkTypes">link types section</a> defines whether a
  particular link type is an external resource or a hyperlink. One
  element can create multiple links (of which some might be external
  resource links and some might be hyperlinks). User agents should
  process the links on a per-link basis, not a per-element basis.</p>

  <p>The exact behaviour for links to external resources depends on
  the exact relationship, as defined for the relevant link type. Some
  of the attributes control whether or not the external resource is to
  be applied (as defined below). For external resources that are
  represented in the DOM (for example, style sheets), the DOM
  representation must be made available even if the resource is not
  applied. (However, user agents may opt to only fetch such resources
  when they are needed, instead of pro-actively downloading all the
  external resources that are not applied.)</p>

  <p>Interactive user agents should provide users with a means to
  <span title="following hyperlinks">follow the hyperlinks</span> <!-- XXX check crossref -->
  created using the <code>link</code> element, somewhere within their
  user interface. The exact interface is not defined by this
  specification, but it should include the following information
  (obtained from the element's attributes, again as defined below), in
  some form or another (possibly simplified), for each hyperlink
  created with each <code>link</code> element in the document:</p>

  <ul> <!-- the order here is the order that makes most sense for a UI -->

   <li>The relationship between this document and the resource (given
   by the <code title="attr-link-rel">rel</code> attribute)</li>

   <li>The title of the resource (given by the <code
   title="attr-link-title">title</code> attribute).</li>

   <li>The URI of the resource (given by the <code
   title="attr-link-href">href</code> attribute).</li>

   <li>The language of the resource (given by the <code
   title="attr-link-hreflang">hreflang</code> attribute).</li>

   <li>The optimum media for the resource (given by the <code
   title="attr-link-media">media</code> attribute).</li>

  </ul>

  <p>User agents may also include other information, such as the type
  of the resource (as given by the <code
  title="attr-link-type">type</code> attribute).</p>

  <p>The <dfn title="attr-link-media"><code>media</code></dfn>
  attribute says which media the resource applies to. The value must
  be a valid media query. <a href="#refsMQ">[MQ]</a></p>

  <p>If the link is a <span title="hyperlink link">hyperlink</span>
  then the <code title="attr-link-media">media</code> attribute is
  purely advisory, and describes for which media the document in
  question was designed.</p>

  <p>However, if the link is an <span>external resource link</span>,
  then the <code title="attr-link-media">media</code> attribute is
  prescriptive. The user agent must only apply the external resource
  to <a href="#views">views</a> while their state match the listed
  media.</p>

  <p id="default-media">The default, if the <code
  title="attr-link-media">media</code> attribute is omitted, is
  <code>all</code>, meaning that by default links apply to all
  media.</p>

  <p>The <dfn title="attr-link-hreflang"><code>hreflang</code></dfn>
  attribute gives the language of the linked resource. It is purely
  advisory. The value must be a valid RFC 3066 language code. <a
  href="#refsRFC3066">RFC3066</a> User agents must not consider this
  attribute authoritative &mdash; upon fetching the resource, user
  agents must only use language information associated with the
  resource to determine its language, not metadata included in the
  link to the resource.</p>

  <p>The <dfn title="attr-link-type"><code>type</code></dfn> attribute
  gives the MIME type of the linked resource. It is purely advisory.
  The value must be a valid MIME type, optionally with parameters. <a
  href="#refsRFC2046">[RFC2046]</a></p>

  <p>For <span title="external resource link">external resource
  links</span>, user agents may use the type given in this attribute
  to decide whether or not to consider using the resource at all. If
  the UA does not support the given MIME type for the given link
  relationship, then the UA may opt not to download and apply the
  resource.</p>

  <p>User agents must not consider the <code
  title="attr-link-type">type</code> attribute authoritative &mdash;
  upon fetching the resource, user agents must only use the
  Content-Type information associated with the resource to determine
  its type, not metadata included in the link to the resource.</p>

  <p>If the attribute is omitted, then the UA must fetch the resource
  to determine its type and thus determine if it supports (and can
  apply) that external resource.</p>

  <div class="example">

   <p>If a document contains three style sheet links labelled as
   follows:</p>

   <pre>&lt;link rel="stylesheet" href="A" type="text/css"&gt;
&lt;link rel="stylesheet" href="B" type="text/plain"&gt;
&lt;link rel="stylesheet" href="C"&gt;</pre>

   <p>...then a compliant UA that supported only CSS style sheets
   would fetch the A and C files, and skip the B file (since
   <code>text/plain</code> is not the MIME type for CSS style sheets).
   For these two files, it would then check the actual types returned
   by the UA. For those that are sent as <code>text/css</code>, it
   would apply the styles, but for those labelled as
   <code>text/plain</code>, or any other type, it would not.</p>

  </div>

<!--(to be deleted) (charset dropped)
  <p>The <dfn title="attr-link-charset"><code>charset</code></dfn>
  attribute gives the character encoding of the linked resource. It is
  purely advisory. The value must be a valid character encoding name.
  <a href="#refsIANACHARSET">[IANACHARSET]</a></p>

  <p>For <span title="external resource link">external resource
  links</span>, user agents may use the character encoding given in
  this attribute to decide whether or not to consider using the
  resource at all. If the UA does not support the given encoding for
  the given link relationship, then the UA may opt not to download and
  apply the resource.</p>

  <p>However, once the resource has been fetched, user agents must
  follow the rules for that resource type when determining the actual
  character encoding.</p>
-->

  <p>The <dfn title="attr-link-title"><code>title</code></dfn>
  attribute gives the title of the link. With one exception, it is
  purely advisory. The value is text. The exception is for style sheet
  links, where the <code title="attr-link-title">title</code>
  attribute defines <a href="#stylesheetTitle">alternate style sheet
  sets</a>.</p><!-- XXX xref -->

  <p class="note">The <code title="attr-link-title">title</code>
  attribute on <code>link</code> elements differs from the global
  <code title="attr-title">title</code> attribute of most other
  elements in that a link without a title does not inherit the title
  of the parent element: it merely has no title.</p>

  <p>Some versions of HTTP defined a <code title="">Link:</code>
  header, to be processed like a series of <code>link</code> elements.
  When processing links, those must be taken into consideration as
  well. For the purposes of ordering, links defined by HTTP headers
  must be assumed to come before any links in the document, in the
  order that they were given in the HTTP entity header. Relative URIs
  in these headers must be resolved according to the rules given in
  HTTP, not relative to base URIs set by the document (e.g. using a
  <code>base</code> element or <code>xml:base</code> attributes). <a
  href="#refsRFC2616">[RFC2616]</a> <a
  href="#refsRFC2068">[RFC2068]</a></p>

  <p>The DOM attributes <dfn
  title="dom-link-href"><code>href</code></dfn>, <dfn
  title="dom-link-rel"><code>rel</code></dfn>, <dfn
  title="dom-link-media"><code>media</code></dfn>, <dfn
  title="dom-link-hreflang"><code>hreflang</code></dfn>, and <dfn
  title="dom-link-type"><code>type</code></dfn> each
  <span>reflect</span> the respective content attributes of the same
  name.</p>

  <p>The DOM attribute <dfn
  title="dom-link-disabled"><code>disabled</code></dfn> only applies
  to style sheet links. When the <code>link</code> element defines a
  style sheet link, then the <code
  title="dom-link-disabled">disabled</code> attribute behaves as
  defined <a href="#stylesheetDisabled">for the alternate style sheets
  DOM</a>. For all other <code>link</code> elements it must always
  return false and must do nothing on setting.</p> <!-- XXX xref -->

  <h4>The <dfn><code>meta</code></dfn> element</h4>

  <p><span title="metadata elements">Metadata element</span>.</p>

  <dl class="element">
   <dt>Contexts in which this element may be used:</dt>
   <dd>In a <code>head</code> element.</dd>
   <dt>Content model:</dt>
   <dd>Empty.</dd>
   <dt>Element-specific attributes:</dt>
   <dd><code title="attr-meta-name">name</code></dd>
   <dd><code title="attr-meta-http-equiv">http-equiv</code> (HTML only, optional)</dd>
   <dd><code title="attr-meta-content">content</code></dd>
   <dt>DOM interface:</dt>
   <dd>
<pre class="idl">interface <dfn>HTMLMetaElement</dfn> : <span>HTMLElement</span> {
           attribute DOMString <span title="dom-meta-content">content</span>;
           attribute DOMString <span title="dom-meta-name">name</span>;
};</pre>
   </dd>
  </dl>

  <p>The <code>meta</code> element allows authors to specify document
  metadata that cannot be expressed using the <code>title</code>,
  <code>base</code>, <code>link</code>, <code>style</code>, and
  <code>script</code> elements. The metadata is expressed in terms of
  name/value pairs: the <dfn
  title="attr-meta-name"><code>name</code></dfn> attribute on the
  <code>meta</code> element gives the name, and the <dfn
  title="attr-meta-content"><code>content</code></dfn> attribute on
  the same element gives the value.</p>

  <p>To set metadata with <code>meta</code> elements, authors must
  first specify a profile that defines metadata names, using the
  <code>profile</code> attribute. The value of the <code
  title="attr-meta-name">name</code> attribute must be defined by one
  of the profiles, and the value of the <code
  title="attr-meta-content">content</code> attribute must conform to
  the syntax given by the profile.</p>

  <p>How user agents handle metadata set in this way depends on the
  definitions of the profiles involved.</p>

  <p>If a <code>meta</code> element has no <code
  title="attr-meta-name">name</code> attribute, it does not set
  document metadata. If a <code>meta</code> element has no <code
  title="attr-meta-content">content</code> attribute, then the value
  part of the metadata name/value pair is the empty string.</p>

  <p>The DOM attributes <dfn
  title="dom-meta-name"><code>name</code></dfn> and <dfn
  title="dom-meta-content"><code>content</code></dfn>
  <span>reflect</span> the respective content attributes of the same
  name.</p>

  <h5 id="charset">Specifying and establishing the document's
  character encoding</h5>

  <p>The <code>meta</code> element may also be used, in HTML only (not
  in XHTML) to provide UAs with character encoding information for the
  file. To do this, the <code>meta</code> element must be the first
  element in the <code>head</code> element, it must have the <dfn
  title="attr-meta-http-equiv"><code>http-equiv</code></dfn> attribute
  set to the literal value <code>Content-Type</code>, and must have
  the <code title="attr-meta-content">content</code> attribute set to
  the literal value <code>text/html; charset=</code> immediately
  followed by the character encoding, which must be a valid character
  encoding name. <a href="#refsIANACHARSET">[IANACHARSET]</a> <!-- XXX
  http://www.iana.org/assignments/character-sets --> When the
  <code>meta</code> element is used in this way, there must be no
  other attributes set on the element, and the <code>http-equiv</code>
  attribute must be listed first in the source. Other than for giving
  the document's character encoding in this way, the <code
  title="attr-meta-http-equiv">http-equiv</code> attribute must not be
  used.</p>

  <p class="big-issue">We should allow those strings to be
  case-insensitive, and for zero-or-more spaces where we currently
  require just one.</p>


  <p>In XHTML, the XML declaration should be used for inline character
  encoding information, if necessary.</p>

  <p>Authors should avoid including inline character encoding
  information. Character encoding information should instead be
  included at the transport level (e.g. using the HTTP
  <code>Content-Type</code> header).</p> <!-- XXX should we remove
  this paragraph? Experts disagree on this. -->


  <h4>The <dfn><code>style</code></dfn> element</h4>

  <p><span title="metadata elements">Metadata element</span>.</p>

  <dl class="element">
   <dt>Contexts in which this element may be used:</dt>
   <dd>In a <code>head</code> element.</dd>
   <dt>Content model:</dt>
   <dd>Depends on the value of the <code title="attr-style-type">type</code> attribute.</dd>
   <dt>Element-specific attributes:</dt>
   <dd><code title="attr-style-type">type</code></dd>
   <dd><code title="attr-style-media">media</code></dd>
   <dd>Also, the <code title="attr-style-title">title</code> attribute has special semantics on this element.</dd>
   <dt>DOM interface:</dt>
   <dd>
<pre class="idl">interface <dfn>HTMLStyleElement</dfn> : <span>HTMLElement</span> {
           attribute boolean <code title="dom-style-disabled">disabled</code>;
           attribute DOMString <code title="dom-style-media">media</code>;
           attribute DOMString <code title="dom-style-type">type</code>;
};</pre>
    <p>The <a
    href="http://www.w3.org/TR/DOM-Level-2-Style/stylesheets.html#StyleSheets-LinkStyle"><code>LinkStyle</code></a>
    interface defined in DOM2 Style must also be implemented by this
    element. <a href="#refsDOM2STYLE">[DOM2STYLE]</a></p>
   </dd>
  </dl>

  <p>The <code>style</code> element allows authors to embed style
  information in their documents.</p>

  <p>If the <dfn title="attr-style-type"><code>type</code></dfn>
  attribute is given, it must contain a MIME type, optionally with
  parameters, that designates a styling language. <a
  href="#refsRFC2046">[RFC2046]</a> If the attribute is absent, the
  type defaults to <code>text/css</code>. <a
  href="#refsRFC2318">[RFC2138]</a></p>

  <p>If the UA supports the given styling language, then the UA must
  use the given styles as appropriate for that language.</p>

  <!-- XXX this is the second time we have this paragraph here... -->
  <p>When examining types to determine if they support the language,
  user agents must not ignore unknown MIME parameters &mdash; types
  with unknown parameters must be assumed to be unsupported.</p>

  <p>The <dfn title="attr-style-media"><code>media</code></dfn>
  attribute says which media the styles apply to. The value must be a
  valid media query. <a href="#refsMQ">[MQ]</a> User agents must only
  apply the styles to <a href="#views">views</a> while their state
  match the listed media.</p>

  <p id="style-default-media">The default, if the <code
  title="attr-style-media">media</code> attribute is omitted, is
  <code>all</code>, meaning that by default styles apply to all
  media.</p>

  <p id="title-on-style">The <dfn
  title="attr-style-title"><code>title</code></dfn> attribute on
  <code>style</code> elements <a href="#stylesheetTitle">defines
  alternate style sheet sets</a>. If the <code>style</code> element
  has no <code title="attr-style-title">title</code> attribute, then
  it has no title; the <code title="attr-title">title</code> attribute
  of ancestors does not apply to the <code>style</code> element.</p> <!-- XXX xref -->

  <p class="note">The <code title="attr-style-title">title</code>
  attribute on <code>style</code> elements, like the <code
  title="attr-link-title">title</code> attribute on <code>link</code>
  elements, differs from the global <code
  title="attr-title">title</code> attribute in that a
  <code>style</code> block without a title does not inherit the title
  of the parent element: it merely has no title.</p>

  <p>All descendant elements must be processed, according to their
  semantics, before the <code>style</code> element itself is
  evaluated. For styling languages that consist of pure text, user
  agents must evaluate <code>style</code> elements by passing the
  concatenation of the contents of all the text nodes and CDATA nodes
  that are direct children of the <code>style</code> element (not any
  other nodes such as comments or elements), in tree order, to the
  style system. For XML-based styling languages, user agents must pass
  all the children nodes of the <code>style</code> element to the
  style system.</p>

  <p class="note">This specification does not specify a style system,
  but CSS is expected to be supported by most Web browsers. <a
  href="#refsCSS21">[CSS21]</a></p>

  <p>The DOM attributes <dfn
  title="dom-style-media"><code>media</code></dfn> and <dfn
  title="dom-style-type"><code>type</code></dfn> each
  <span>reflect</span> the respective content attributes of the same
  name.</p>

  <p>The DOM <dfn
  title="dom-style-disabled"><code>disabled</code></dfn> attribute
  behaves as defined <a href="#stylesheetDisabled">for the alternate
  style sheets DOM</a>. <!-- XXX xref --> </p>


  <h3>Sections</h3>

  <p><dfn>Sectioning elements</dfn> are elements that divide the page into, for
  lack of a better word, sections. This section describes HTML's
  sectioning elements and elements that support them.</p>

  <p id="applyToSection">Some elements are scoped to their nearest
  ancestor sectioning element. For example, <code>address</code>
  elements apply just to their section. For such elements
  <var title="">x</var>, the elements that apply to a sectioning element
  <var title="">e</var> are all the <var title="">x</var> elements whose nearest
  sectioning element is <var title="">e</var>.</p>

  <h4>The <dfn><code>body</code></dfn> element</h4>

  <p><span title="sectioning elements">Sectioning element</span>.</p>

  <dl class="element">
   <dt>Contexts in which this element may be used:</dt>
   <dd>As the second element in an <code>html</code> element.</dd>
   <dt>Content model:</dt>
   <dd>Zero or more <span>block-level elements</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>body</code> element represents the main content of the
  document.</p>

  <p>The <code>body</code> element potentially has a heading. See the
  section on <span>headings and sections</span> for further
  details.</p>

  <p class="note">Some DOM operations (for example, parts of the
  <span>drag and drop</span> model) are defined in terms of "<span>the
  <code>body</code> element</span>". See the definition of the <code
  title="dom-document-body">document.body</code> DOM attribute for
  details.</p> <!-- XXX define that; check x-refs; ensure "the body
  element" is defined even when document.body is null (possibly by
  being the root element) -->


  <h4>The <dfn><code>section</code></dfn> element</h4>

  <p><span title="sectioning elements">Sectioning</span> <span
  title="block-level elements">block-level element</span>.</p>

  <dl class="element">
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>block-level elements</span> are expected.</dd>
   <dt>Content model:</dt>
   <dd>Zero or more <span>block-level elements</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>section</code> element represents a generic document or
  application section. A section, in this context, is a thematic
  grouping of content, typically with a header, possibly with a
  footer.</p>

  <p class="example">Examples of sections would be chapters, the
  various tabbed pages in a tabbed dialog box, or the numbered
  sections of a thesis. A Web site's home page could be split into
  sections for an introduction, news items, contact information.</p>

  <p>Each <code>section</code> element potentially has a heading. See
  the section on <span>headings and sections</span> for
  further details.</p>


  <h4>The <dfn><code>nav</code></dfn> element</h4>

  <p><span title="sectioning elements">Sectioning</span> <span
  title="block-level elements">block-level element</span>.</p>

  <dl class="element">
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>block-level elements</span> are expected.</dd>
   <dt>Content model:</dt>
   <dd>Zero or more <span>block-level elements</span>, or <span>inline-level content</span> (but not both).</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>nav</code> element represents a section of a page that
  links to other pages or to parts within the page: a section with
  navigation links.</p>

  <p>When <span title="Determining if a particular element contains
  block-level elements or inline-level content">used as an
  inline-level content</span> container, the element represents a
  <span>paragraph</span>.</p>

  <p>Each <code>nav</code> element potentially has a heading.
  See the section on <span>headings and sections</span> for
  further details.</p>


  <h4>The <dfn><code>article</code></dfn> element</h4>

  <p><span title="sectioning elements">Sectioning</span> <span
  title="block-level elements">block-level element</span>.</p>

  <dl class="element">
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>block-level elements</span> are expected.</dd>
   <dt>Content model:</dt>
   <dd>Zero or more <span>block-level elements</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None.</dd>
<!--
XXX attributes to give the date authored, date published
-->
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>article</code> element represents a section of a page
  that consists of a composition that forms an independent part of a
  document, page, or site. This could be a forum post, a magazine or
  newspaper article, a Web log entry, a user-submitted comment, or any
  other independent item of content.</p>

  <p class="note">An <code>article</code> element is "independent" in
  that its contents could stand alone, for example in syndication.
  However, the element is still associated with its ancestors; for
  instance, contact information that <a href="#applyTo">applies</a> to
  a parent <code>body</code> element still covers the
  <code>article</code> as well.</p>

  <p>When <code>article</code> elements are nested, the inner
  <code>article</code> elements represent articles that are in
  principle related to the contents of the outer article. For
  instance, a Web log entry on a site that accepts user-submitted
  comments could represent the comments as <code>article</code>
  elements nested within the <code>article</code> element for the Web
  log entry.</p>

  <p>Author information associated with an <code>article</code>
  element (q.v. the <code>address</code> element) does not apply to
  nested <code>article</code> elements.</p>

  <p>Each <code>article</code> element potentially has a heading. See
  the section on <span>headings and sections</span> for
  further details.</p>


  <h4>The <dfn><code>blockquote</code></dfn> element</h4>

  <p><span title="sectioning elements">Sectioning</span> <span
  title="block-level elements">block-level element</span>, and <span
  title="structured inline-level elements">structured inline-level
  element</span>.</p>

  <dl class="element">
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>block-level elements</span> are expected.</dd>
   <dd>Where <span>structured inline-level elements</span> are allowed.</dd>
   <dt>Content model:</dt>
   <dd>Zero or more <span>block-level elements</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd><code title="attr-blockquote-cite">cite</code></dd>
   <dt>DOM interface:</dt>
   <dd>
<pre class="idl">interface <dfn>HTMLQuoteElement</dfn> : <span>HTMLElement</span> {
           attribute DOMString <span title="dom-quote-cite">cite</span>;
};</pre>
    <p class="note">The <code>HTMLQuoteElement</code> interface is
    also used by the <code>q</code> element.</p>
   </dd>
  </dl>

  <p>The <code>blockquote</code> element represents a section that is
  quoted from another source.</p>

  <p>Content inside a <code>blockquote</code> must be quoted from
  another source, whose URI, if it has one, should be cited in the
  <dfn title="attr-blockquote-cite"><code>cite</code></dfn>
  attribute.</p>

  <p>If the <code title="attr-blockquote-cite">cite</code> attribute
  is present, it must be a URI (or IRI). User agents should allow
  users to follow such citation links.</p>

  <p>Each <code>blockquote</code> element potentially has a heading.
  See the section on <span>headings and sections</span> for
  further details.</p>

  <p>The <dfn title="dom-quote-cite"><code>cite</code></dfn> DOM
  attribute <code>reflects</code> the element's <code
  title="">cite</code> content attribte.

  <div class="example">
   <p>The <code>blockquote</code> element can be used with the
   <code>ol</code> and <code>cite</code> elements to mark up dialogue.
   This example demonstrates this using an extract from Abbot and
   Costello's famous sketch, <cite>Who's on first</cite>:</p>
<pre>&lt;ol>
 &lt;li> &lt;cite>Costello&lt;/cite>
      &lt;blockquote> &lt;p> Look, you gotta first baseman? &lt;/p> &lt;/blockquote>
 &lt;li> &lt;cite>Abbott&lt;/cite>
      &lt;blockquote> &lt;p> Certainly. &lt;/p> &lt;/blockquote>
 &lt;li> &lt;cite>Costello&lt;/cite>
      &lt;blockquote> &lt;p> Who's playing first? &lt;/p> &lt;/blockquote>
 &lt;li> &lt;cite>Abbott&lt;/cite>
      &lt;blockquote> &lt;p> That's right. &lt;/p> &lt;/blockquote>
 &lt;li> &lt;cite>Costello&lt;/cite>
      &lt;blockquote> &lt;p> When you pay off the first baseman every month, who gets the money? &lt;/p> &lt;/blockquote>
 &lt;li> &lt;cite>Abbott&lt;/cite>
      &lt;blockquote> &lt;p> Every dollar of it. &lt;/p> &lt;/blockquote>
&lt;/ol></pre>
  </div>


  <h4>The <dfn><code>aside</code></dfn> element</h4>

  <p><span title="sectioning elements">Sectioning</span> <span
  title="block-level elements">block-level element</span>.</p>

  <dl class="element">
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>block-level elements</span> are expected.</dd>
   <dt>Content model:</dt>
   <dd>Zero or more <span>block-level elements</span>, or <span>inline-level content</span> (but not both).</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>aside</code> element represents a section of a page
  that consists of content that is tangentially related to the content
  around the <code>aside</code> element, and which could be considered
  separate from that content. Such sections are often represented as
  sidebars in printed typography.</p>

  <p>When <span title="Determining if a particular element contains
  block-level elements or inline-level content">used as an
  inline-level content</span> container, the element represents a
  <span>paragraph</span>.</p>

  <p>Each <code>aside</code> element potentially has a heading. See
  the section on <span>headings and sections</span> for
  further details.</p>


  <h4>The <dfn><code>h1</code></dfn>, <dfn><code>h2</code></dfn>,
  <dfn><code>h3</code></dfn>, <dfn><code>h4</code></dfn>,
  <dfn><code>h5</code></dfn>, and <dfn><code>h6</code></dfn>
  elements</h4>

  <p><span>Block-level elements</span>.</p>

  <dl class="element">
   <dt>Contexts in which these elements may be used:</dt>
   <dd>Where <span>block-level elements</span> are expected.</dd>
   <dt>Content model:</dt>
   <dd><span title="significant inline content">Significant</span> <span>strictly inline-level content</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>These elements define headers for their sections.</p>

  <p>The semantics and meaning of these elements are defined in the
  section on <span>headings and sections</span>.</p>

  <p>These elements have a <dfn>rank</dfn> given by the number in
  their name. The <code>h1</code> element is said to have the highest
  rank, the <code>h6</code> element has the lowest rank, and two
  elements with the same name have equal rank.</p>

  <p>These elements must not be <span title="significant inline
  content">empty</span>.</p>


  <h4>The <dfn><code>header</code></dfn> element</h4>

  <p><span title="block-level elements">Block-level element</span>.</p>

  <dl class="element">
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>block-level elements</span> are expected and there
   are no <code>header</code> ancestors.</dd>
   <dt>Content model:</dt>
   <dd>Zero or more <span>block-level elements</span>, including at
   least one descendant <code>h1</code>, <code>h2</code>,
   <code>h3</code>, <code>h4</code>, <code>h5</code>, or
   <code>h6</code> element, but no <span>sectioning element</span>
   descendants, no <code>header</code> element descendants, and no
   <code>footer</code> element descendants.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>header</code> element represents the header of a
  section. Headers may contain more than just the section's heading
  &mdash; for example it would be reasonable for the header to include
  version history information.</p>

  <p><code>header</code> elements must not contain any
  <code>header</code> elements, <code>footer</code> elements, or any
  sectioning elements (such as <code>section</code>) as
  descendants.</p>

  <p><code>header</code> elements must have at least one
  <code>h1</code>, <code>h2</code>, <code>h3</code>, <code>h4</code>,
  <code>h5</code>, or <code>h6</code> element as a descendant.</p>

  <p>For the purposes of document summaries, outlines, and the like,
  <code>header</code> elements are equivalent to the highest <span
  title="rank">ranked</span> <code>h1</code>-<code>h6</code> element
  descendant (the first such element if there are multiple elements
  with that <span>rank</span>).</p>

  <p>Other heading elements indicate subheadings or subtitles.</p>

  <div class="example">

   <p>Here are some examples of valid headers. In each case, the
   emphasised text represents the text that would be used as the
   header in an application extracting header data and ignoring
   subheadings.</p>

   <pre>&lt;header&gt;
 &lt;h1&gt;<strong>The reality dysfunction</strong>&lt;/h1&gt;
 &lt;h2&gt;Space is not the only void&lt;/h2&gt;
&lt;/header&gt;</pre>

   <pre>&lt;header&gt;
 &lt;p&gt;Welcome to...&lt;/p&gt;
 &lt;h1&gt;<strong>Voidwars!</strong>&lt;/h1&gt;
&lt;/header&gt;</pre>

   <pre>&lt;header&gt;
 &lt;h1&gt;<strong>Scalable Vector Graphics (SVG) 1.2</strong>&lt;/h1&gt;
 &lt;h2&gt;W3C Working Draft 27 October 2004&lt;/h2&gt;
 &lt;dl&gt;
  &lt;dt&gt;This version:&lt;/dt&gt;
  &lt;dd&gt;&lt;a href="http://www.w3.org/TR/2004/WD-SVG12-20041027/"&gt;http://www.w3.org/TR/2004/WD-SVG12-20041027/&lt;/a&gt;&lt;/dd&gt;
  &lt;dt&gt;Previous version:&lt;/dt&gt;
  &lt;dd&gt;&lt;a href="http://www.w3.org/TR/2004/WD-SVG12-20040510/"&gt;http://www.w3.org/TR/2004/WD-SVG12-20040510/&lt;/a&gt;&lt;/dd&gt;
  &lt;dt&gt;Latest version of SVG 1.2:&lt;/dt&gt;
  &lt;dd&gt;&lt;a href="http://www.w3.org/TR/SVG12/"&gt;http://www.w3.org/TR/SVG12/&lt;/a&gt;&lt;/dd&gt;
  &lt;dt&gt;Latest SVG Recommendation:&lt;/dt&gt;
  &lt;dd&gt;&lt;a href="http://www.w3.org/TR/SVG/"&gt;http://www.w3.org/TR/SVG/&lt;/a&gt;&lt;/dd&gt;
  &lt;dt&gt;Editor:&lt;/dt&gt;
  &lt;dd&gt;Dean Jackson, W3C, &lt;a href="mailto:dean@w3.org"&gt;dean@w3.org&lt;/a&gt;&gt;&lt;/dd&gt;
  &lt;dt&gt;Authors:&lt;/dt&gt;
  &lt;dd&gt;See &lt;a href="#authors"&gt;Author List&lt;/a&gt;&lt;/dd&gt;
 &lt;/dl&gt;
 &lt;p class="copyright"&gt;&lt;a href="http://www.w3.org/Consortium/Legal/ipr-notic <em>...</em>
&lt;/header&gt;</pre>
  </div>

  <p>The section on <span>headings and sections</span>
  defines how <code>header</code> elements are assigned to individual
  sections.</p>

  <p>The <span>rank</span> of a <code>header</code> element is the
  same as for an <code>h1</code> element (the highest rank).</p>

  <h4>The <dfn><code>footer</code></dfn> element</h4>

  <p><span title="block-level elements">Block-level
  element</span>.</p>

  <dl class="element">
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>block-level elements</span> are expected.</dd>
   <dt>Content model:</dt>
   <dd>Either zero or more <span>block-level elements</span>, but with
   no <code>h1</code>, <code>h2</code>, <code>h3</code>,
   <code>h4</code>, <code>h5</code>, <code>h6</code>,
   <code>header</code>, or <code>footer</code> elements as
   descendants, and with no <span title="sectioning
   elements">sectioning elements</span> as descendants; or,
   <span>inline-level content</span> (but not both).</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>footer</code> element represents the footer for the
  section it <a href="#applyToSection">applies</a> to. A footer
  typically contains information about its section such as who wrote
  it, links to related documents, copyright data, and the like.</p>

  <p><code>footer</code> elements must not contain any
  <code>footer</code>, <code>header</code>, <code>h1</code>,
  <code>h2</code>, <code>h3</code>, <code>h4</code>, <code>h5</code>,
  or <code>h6</code> elements, or any of the sectioning elements (such
  as <code>section</code>), as descendants.</p>

  <p>When <span title="Determining if a particular element contains
  block-level elements or inline-level content">used as an
  inline-level content</span> container, the element represents a
  <span>paragraph</span>.</p>

  <p>Contact information for the section given in a
  <code>footer</code> should be marked up using the
  <code>address</code> element.</p>

<!-- XXX examples needed -->

  <h4>The <dfn><code>address</code></dfn> element</h4>

  <p><span title="block-level elements">Block-level
  element</span>.</p>

  <dl class="element">
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>block-level elements</span> are expected.</dd>
   <dt>Content model:</dt>
   <dd><span>Inline-level content</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>address</code> element represents a
  <span>paragraph</span> of contact information for the section it <a
  href="#applyToSection">applies</a> to.</p>

  <div class="example">
   <p>For example, a page at the W3C Web site related to HTML might
   include the following contact information:</p>
   <pre>&lt;ADDRESS>
 &lt;A href="../People/Raggett/">Dave Raggett&lt;/A>, 
 &lt;A href="../People/Arnaud/">Arnaud Le Hors&lt;/A>, 
 contact persons for the &lt;A href="Activity">W3C HTML Activity&lt;/A>
&lt;/ADDRESS></pre>
  </div>

  <p>The <code>address</code> element must not be used to represent
  arbitrary addresses (e.g. postal addresses), unless those addresses
  are contact information for the section. (The <code>p</code> element
  is the appropriate element for marking up such addresses.)</p>

  <p>The <code>address</code> element must not contain information
  other than contact information.</p>

  <div class="example">
   <p>For example, the following is non-conforming use of the
   <code>address</code> element:</p>
   <pre>&lt;ADDRESS>Last Modified: 1999/12/24 23:37:50&lt;/ADDRESS></pre>
  </div>

  <p>Typically, the <code>address</code> element would be included
  with other information in a <code>footer</code> element.</p>

  <p>To determine the contact information for a sectioning element
  (such as the <code>body</code> element, which would give the contact
  information for the page), UAs must collect all the
  <code>address</code> elements that <a
  href="#applyToSection">apply</a> to that sectioning element and its
  ancestor sectioning elements. The contact information is the
  collection of all the information given by those elements.</p>

  <p class="note">Contact information for one sectioning element, e.g.
  a <code>aside</code> element, does not apply to its ancestor
  elements, e.g. the page's <code>body</code>.</p>


  <h4><dfn>Headings and sections</dfn></h4>

  <p>The <code>h1</code>-<code>h6</code> elements and the
  <code>header</code> element are headings.</p>

  <p>The first heading in a sectioning element gives the header for
  that section. Subsequent headers of equal or higher
  <span>rank</span> start new (implied) sections, headers of lower
  <span>rank</span> start subsections that are part of the previous
  one.</p>

  <p>Sectioning elements other than <code>blockquote</code> are always
  considered subsections of their nearest ancestor sectioning element,
  regardless of what implied sections other headings may have created.
  However, <code>blockquote</code> elements <em>are</em> associated
  with implied sections. Effectively, <code>blockquote</code> elements
  act like sections on the inside, and act opaquely on the
  outside.</p>

  <div class="example">

   <p>For the following fragment:</p>
   <pre>&lt;body&gt;
 &lt;h1&gt;Foo&lt;/h1&gt;
 &lt;h2&gt;Bar&lt;/h2&gt;
 &lt;blockquote&gt;
  &lt;h3&gt;Bla&lt;/h3&gt;
 &lt;/blockquote&gt;
 &lt;p&gt;Baz&lt;/p&gt;
 &lt;h2&gt;Quux&lt;/h2&gt;
 &lt;section&gt;
  &lt;h3&gt;Thud&lt;/h3&gt;
 &lt;/section&gt;
 &lt;p&gt;Grunt&lt;/p&gt;
&lt;/body&gt;</pre>
   <p>...the structure would be:</p>
   <ol>
    <li>
     Foo (heading of explicit <code>body</code> section)
     <ol>
      <li>
       Bar (heading starting implied section)
       <ol>
        <li>
         Bla (heading of explicit <code>blockquote</code> section)
        </li>
       </ol>
       Baz (paragraph)
      </li>
      <li>
       Quux (heading starting implied section)
      </li>
      <li>
       Thud (heading of explicit <code>section</code> section)
      </li>
     </ol>
     Grunt (paragraph)
    </li>
   </ol>
   <p>Notice how the <code>blockquote</code> nests inside an implicit
   section while the <code>section</code> does not (and in fact, ends
   the earlier implicit section so that a later paragraph is back at
   the top level).</p>
  </div>

  <p>Sections may contain headers of any <span>rank</span>, but
  authors are strongly encouraged to either use only <code>h1</code>
  elements, or to use elements of the appropriate <span>rank</span>
  for the section's nesting level.</p>

  <p>Authors are also encouraged to explictly wrap sections in
  sectioning elements, instead of relying on the implicit sections
  generated by having multiple heading in one sectioning element.</p>

  <div class="example">
   <p>For example, the following is correct:</p>

   <pre>&lt;body&gt;
 &lt;h4&gt;Apples&lt;/h4&gt;
 &lt;p&gt;Apples are fruit.&lt;/p&gt;
 &lt;section&gt;
  &lt;h2&gt;Taste&lt;/h2&gt;
  &lt;p&gt;They taste lovely.&lt;/p&gt;
  &lt;h6&gt;Sweet&lt;/h6&gt;
  &lt;p&gt;Red apples are sweeter than green ones.&lt;/p&gt;
  &lt;h1&gt;Colour&lt;/h1&gt;
  &lt;p&gt;Apples come in various colours.&lt;/p&gt;
 &lt;/section&gt;
&lt;/body&gt;</pre>

   <p>However, the same document would be more clearly expressed
   as:</p>

   <pre>&lt;body&gt;
 &lt;h1&gt;Apples&lt;/h1&gt;
 &lt;p&gt;Apples are fruit.&lt;/p&gt;
 &lt;section&gt;
  &lt;h2&gt;Taste&lt;/h2&gt;
  &lt;p&gt;They taste lovely.&lt;/p&gt;
  &lt;section&gt;
   &lt;h3&gt;Sweet&lt;/h3&gt;
   &lt;p&gt;Red apples are sweeter than green ones.&lt;/p&gt;
  &lt;/section&gt;
 &lt;/section&gt;
 &lt;section&gt;
  &lt;h2&gt;Colour&lt;/h2&gt;
  &lt;p&gt;Apples come in various colours.&lt;/p&gt;
 &lt;/section&gt;
&lt;/body&gt;</pre>

   <p>Both of the documents above are semantically identical and would
   produce the same outline in compliant user agents.</p>

  </div>

  <h5 id="outlines">Creating an outline</h5>

  <p>HTML documents can be viewed as a tree of sections, which defines
  how each element in the tree is semantically related to the others,
  in terms of the overall section structure. This tree is related to
  the document tree, but there is not a one-to-one relationship
  between elements in the DOM and the document's sections.</p>

  <p>The tree of sections should be used when generating document
  outlines, for example when generating tables of contents.</p>

  <p>To derive the tree of sections from the document tree, a
  hypothetical tree is used, consisting of a view of the document tree
  containing only the <code>h1</code>-<code>h6</code> and
  <code>header</code> elements, and the sectioning elements other than
  <code>blockquote</code>. Descendants of
  <code>h1</code>-<code>h6</code>, <code>header</code>, and
  <code>blockquote</code> elements must be removed from this view.</p>

  <p>The hypothetical tree must be rooted at the <span>root
  element</span> or at a sectioning element. In particular, while the
  sections inside <code>blockquote</code>s do not contribute to the
  document's tree of sections, <code>blockquote</code>s can have
  outlines of their own.</p>

  <p>UAs must take this hypothetical tree (which will become the
  outline) and mutate it by walking it depth first in tree order and,
  for each <code>h1</code>-<code>h6</code> or <code>header</code>
  element that is not the first element of its parent sectioning
  element, inserting a new sectioning element, as follows:</p>

  <dl class="switch">

   <dt>If the element is a <code>header</code> element, or if it is an
   <code>h1</code>-<code>h6</code> node of <span>rank</span> equal to
   or higher than the first element in the parent sectioning element
   (assuming that is also an <code>h1</code>-<code>h6</code> node), or
   if the first element of the parent sectioning element is a
   sectioning element:</dt>

   <dd>Insert the new sectioning element as the immediately following
   sibling of the parent sectioning element, and move all the elements
   from the current heading element up to the end of the parent
   sectioning element into the new sectioning element.</dd>

   <dt>Otherwise:</dt>

   <dd>Move the current heading element, and all subsequent siblings
   up to but excluding the next sectioning element,
   <code>header</code> element, or <code>h1</code>-<code>h6</code> of
   equal or higher <span>rank</span>, whichever comes first, into the
   new sectioning element, then insert the new sectioning element
   where the current header was.</dd>

  </dl>

  <p>The outline is then the resulting hypothetical tree. The
  <span>rank</span>s of the headers become irrelevant at this point:
  each sectioning element in the hypothetical tree contains either no
  or one heading element child. If there is one, then it gives the
  section's heading, of there isn't, the section has no heading.</p>

  <p>Sections are nested as in the hypothetical tree. If a sectioning
  element is a child of another, that means it is a subsection of that
  other section.</p>

  <p>When creating an interactive table of contents, entries should
  jump the user to the relevant section element, if it was a real
  element in the original document, or to the heading, if the section
  element was one of those created during the above process.</p>

  <p class="example">Selecting the first section of the document
  therefore always takes the user to the top of the document,
  regardless of where the first header in the <code>body</code> is to
  be found.</p> <!-- XXX assuming there is a body, anyway -->

  <div class="note">

   <p>The hypothetical tree (before mutations) could be generated by
   creating a <code>TreeWalker</code> with the following <a
   href="http://www.w3.org/TR/DOM-Level-2-Traversal-Range/traversal.html#Traversal-NodeFilter"><code>NodeFilter</code></a>
   (described here as an anonymous ECMAScript function). <a
   href="#refsDOMTR">[DOMTR]</a> <a
   href="#refsECMA262">[ECMA262]</a></p>

   <pre>function (n) {
  // This implementation only knows about HTML elements.
  // An implementation that supports other languages might be
  // different.

  // Reject anything that isn't an element.
  if (n.nodeType != Node.ELEMENT_NODE)
    return NodeFilter.FILTER_REJECT;

  // Skip any descendants of headings.
  if (n.parentNode && n.parentNode.namespaceURI == 'http://www.w3.org/1999/xhtml') &&
      (n.parentNode.localName == 'h1' || n.parentNode.localName == 'h2' ||
       n.parentNode.localName == 'h3' || n.parentNode.localName == 'h4' ||
       n.parentNode.localName == 'h5' || n.parentNode.localName == 'h6' ||
       n.parentNode.localName == 'header')
    return NodeFilter.FILTER_REJECT;

  // Skip any blockquotes.
  if (n.namespaceURI == 'http://www.w3.org/1999/xhtml') &&
      (n.localName == 'blockquote'))
    return NodeFilter.FILTER_REJECT;

  // Accept HTML elements in the list given in the prose above.
  if ((n.namespaceURI == 'http://www.w3.org/1999/xhtml') &&
      (n.localName == 'body' || /*n.localName == 'blockquote' ||*/
       n.localName == 'section' || n.localName == 'nav' ||
       n.localName == 'article' || n.localName == 'aside' ||
       n.localName == 'h1' || n.localName == 'h2' ||
       n.localName == 'h3' || n.localName == 'h4' ||
       n.localName == 'h5' || n.localName == 'h6' ||
       n.localName == 'header'))
    return NodeFilter.FILTER_ACCEPT;

  // Skip the rest.
  return NodeFilter.FILTER_SKIP;
}</pre>
  </div>

  <h5>Determining which heading and section applies to a particular
  node</h5>

  <p>Given a particular node, user agents must use the following
  algorithm, <em>in the given order</em>, to determine which heading
  and section the node is most closely associated with. The processing
  of this algorithm must stop as soon as the associated section and
  heading are established (even if they are established to be
  nothing).</p>

  <ol>

   <li>If the node has an ancestor that is a <code>header</code>
   element, then the associated heading is the most distant such
   ancestor. The associated section is that <code>header</code>'s
   associated section (i.e. repeat this algorithm for that
   <code>header</code>).</li>

   <li>If the node has an ancestor that is an
   <code>h1</code>-<code>h6</code> element, then the associated
   heading is the most distant such ancestor. The associated section
   is that heading's section (i.e. repeat this algorithm for that
   heading element).</li>

   <li>If the node is an <code>h1</code>-<code>h6</code> element or a
   <code>header</code> element, then the associated heading is the
   element itself. The UA must then generate the <a
   href="#outlines">hypothetical section tree</a> described in the
   previous section, rooted at the nearest section ancestor (or the
   <span>root element</span> if there is no such ancestor). If the
   parent of the heading in that hypothetical tree is an element in
   the real document tree, then that element is the associated
   section. Otherwise, there is no associated section element.</li>

   <li>If the node is a sectioning element, then the associated
   section is itself. The UA must then generate the <a
   href="#outlines">hypothetical section tree</a> described in the
   previous section, rooted at the section itself. If the section
   element, in that hypothetical tree, has a child element that is an
   <code>h1</code>-<code>h6</code> element or a <code>header</code>
   element, then that element is the associated heading. Otherwise,
   there is no associated heading element.</li>

   <li>If the node is a <code>footer</code> or <code>address</code>
   element, then the associated section is the nearest ancestor
   sectioning element, if there is one. The node's associated heading
   is the same as that sectioning element's associated heading (i.e.
   repeat this algorithm for that sectioning element). If there is no
   ancestor sectioning element, the element has no associated section
   nor an associated heading.</li>

   <li>Otherwise, the node is just a normal node, and the document has
   to be examined more closely to determine its section and heading.
   Create a view rooted at the nearest ancestor sectioning element (or
   the <span>root element</span> if there is none) that has just
   <code>h1</code>-<code>h6</code> elements, <code>header</code>
   elements, the node itself, and sectioning elements other than
   <code>blockquote</code> elements. (Descendants of any of the nodes
   in this view can be ignored, as can any node later in the tree than
   the node in question, as the algorithm below merely walks backwards
   up this view.)</li>

   <li>Let <var title="">n</var> be an iterator for this view, initialised at
   the node in question.</li>

   <li>Let <var title="">c</var> be the current best candidate heading,
   initially null, and initially not used. It is used when top-level
   heading candidates are to be searched for (see below).</li>

   <li>Repeat these steps (which effectively goes backwards through
   the node's previous siblings) until an answer is found:

    <ol>

     <li>If <var title="">n</var> points to a node with no previous sibling,
     and <var title="">c</var> is null, then return the node's parent node as
     the answer. If the node has no parent node, return null as the
     answer.</li>

     <li>Otherwise, if <var title="">n</var> points to a node with no
     previous sibling, return <var title="">c</var> as the answer.</li>

     <li>Adjust <var title="">n</var> so that it points to the previous sibling
     of the current position.</li>

     <li>If <var title="">n</var> is pointing at an <code>h1</code> or
     <code>header</code> element, then return that element as the
     answer.</li>

     <li>If <var title="">n</var> is pointing at an
     <code>h2</code>-<code>h6</code> element, and heading candidates
     are not being searched for, then return that element as the
     answer.</li>

     <li>Otherwise, if <var title="">n</var> is pointing at an
     <code>h2</code>-<code>h6</code> element, and either <var title="">c</var>
     is still null, or <var title="">c</var> is a heading of lower
     <span>rank</span> than this one, then set <var title="">c</var> to be this
     element, and continue going backwards through the previous
     siblings.</li>

     <li>If <var title="">n</var> is pointing at a sectioning element, then
     from this point on top-level heading candidates are being
     searched for. (Specifically, we are looking for the nearest
     top-level header for the current section.) Continue going
     backwards through the previous siblings.</li>

    </ol>

   </li>

   <li>If the answer from the previous step (the loop) is null, which
   can only happen if the node has no preceeding headings and is not
   contained in a sectioning element, then there is no associated
   heading and no associated section.</li>

   <li>Otherwise, if the answer from the earlier loop step is a
   sectioning element, then the associated section is that element and
   the associated heading is that sectioning element's associated
   heading (i.e. repeat this algorithm for that section).</li>

   <li>Otherwise, if the answer from that same earlier step is an
   <code>h1</code>-<code>h6</code> element or a <code>header</code>
   element, then the associated heading is that element and the
   associated section is that heading element's associated
   section (i.e. repeat this algorithm for that heading).</li>

  </ol>

  <p class="note">Not all nodes have an associated header or section.
  For example, if a section is implied, as when multiple headers are
  found in one sectioning element, then a node in that section has an
  anonymous associated section (its section is not represented by a
  real element), and the algorithm above does not associate that node
  with any particular sectioning element.</p>

  <div class="example">
   <p>For the following fragment:</p>
   <pre>&lt;body&gt;
 &lt;h1&gt;X&lt;/h1&gt;
 &lt;h2&gt;X&lt;/h2&gt;
 &lt;blockquote&gt;
  &lt;h3&gt;X&lt;/h3&gt;
 &lt;/blockquote&gt;
 &lt;p id="a"&gt;X&lt;/p&gt;
 &lt;h4&gt;Text Node A&lt;/h4&gt;
 &lt;section&gt;
  &lt;h5&gt;X&lt;/h5&gt;
 &lt;/section&gt;
 &lt;p&gt;Text Node B&lt;/p&gt;
&lt;/body&gt;</pre>
   <p>The associations are as follows (not all associations are shown):</p>
   <table>
    <thead>
     <tr>
      <th>Node</th> <th>Associated heading</th> <th>Associated section</th>
     </tr>
    </thead>
    <tbody>
     <tr> <td><code>&lt;body&gt;</code></td> <td><code>&lt;h1&gt;</code></td> <td><code>&lt;body&gt;</code></td> </tr>
     <tr> <td><code>&lt;h1&gt;</code></td> <td><code>&lt;h1&gt;</code></td> <td><code>&lt;body&gt;</code></td> </tr>
     <tr> <td><code>&lt;h2&gt;</code></td> <td><code>&lt;h2&gt;</code></td> <td>None.</td> </tr>
     <tr> <td><code>&lt;blockquote&gt;</code></td> <td><code>&lt;h2&gt;</code></td> <td>None.</td> </tr>
     <tr> <td><code>&lt;h3&gt;</code></td> <td><code>&lt;h3&gt;</code></td> <td><code>&lt;blockquote&gt;</code></td> </tr>
     <tr> <td><code>&lt;p id="a"&gt;</code></td> <td><code>&lt;h2&gt;</code></td> <td>None.</td> </tr>
     <tr> <td><code>Text Node A</code></td> <td><code>&lt;h4&gt;</code></td> <td>None.</td> </tr>
     <tr> <td><code>Text Node B</code></td> <td><code>&lt;h1&gt;</code></td> <td><code>&lt;body&gt;</code></td> </tr>
    </tbody>
   </table>
  </div>

  <h3>Paragraphs</h3>

  <p>A <dfn>paragraph</dfn> is typically a block of text with one or
  more sentences that discuss a particular topic, as in typography,
  but can also be used for more general thematic grouping. For
  instance, an address is also a paragraph, as is a part of a form, a
  byline, or a stanza in a poem.</p>

  <p>Paragraphs can be represented by several elements. The
  <code>address</code> element always represents a paragraph of
  contact information for its section, the <code>aside</code>,
  <code>nav</code>, <code>footer</code>, <code>li</code>, and
  <code>dd</code> elements represent paragraphs with various specific
  semantics when they are <span title="Determining if a particular
  element contains block-level elements or inline-level content">used
  as inline-level content containers</span>, and the <code>p</code>
  element represents all the other kinds of paragraphs, for which
  there are no dedicated elements.</p>

  <h4>The <dfn><code>p</code></dfn> element</h4>

  <p><span title="block-level elements">Block-level
  element</span>.</p>

  <dl class="element">
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>block-level elements</span> are expected.</dd>
   <dt>Content model:</dt>
   <dd><span title="significant inline content">Significant</span>
   <span>inline-level content</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>p</code> element represents a
  <span>paragraph</span>.</p>

  <p><code>p</code> elements can contain a mixture of <span>strictly
  inline-level content</span>, such as text, images, hyperlinks, etc,
  and <span>structured inline-level elements</span>, such as lists,
  tables, and block quotes. <code>p</code> elements must not be <span
  title="significant inline content">empty</span>.</p>

  <div class="example">
   <p>The following examples are conforming HTML fragments:</p>
   <pre>&lt;p&gt;The little kitten gently seated himself on a piece of
carpet. Later in his life, this would be referred to as the time the
cat sat on the mat.&lt;/p&gt;</pre>
   <pre>&lt;fieldset&gt;
 &lt;legend&gt;Personal information&lt;/legend&gt;
 &lt;p&gt;
   &lt;label&gt;Name: &lt;input name="n"&gt;&lt;/label&gt;
   &lt;label&gt;&lt;input name="anon" type="checkbox"&gt; Hide from other users&lt;/label&gt;
 &lt;/p&gt;
 &lt;p&gt;&lt;label&gt;Address: &lt;textarea name="a"&gt;&lt;/textarea&gt;&lt;/label&gt;&lt;/p&gt;
&lt;/fieldset&gt;</pre>
   <pre>&lt;p&gt;There was once an example from Femley,&lt;br&gt;
Whose markup was of dubious quality.&lt;br&gt;
The validator complained,&lt;br&gt;
So the author was pained,&lt;br&gt;
To move the error from the markup to the rhyming.&lt;/p&gt;</pre>
  </div>

  <p>The <code>p</code> element should not be used when a more
  specific element is more appropriate.</p>

  <div class="example">

   <p>The following example is technically correct:</p>

<pre>&lt;section&gt;
 &lt;!-- ... --&gt;
 &lt;p&gt;Last modified: 2001-04-23&lt;/p&gt;
 &lt;p&gt;Author: fred@example.com&lt;/p&gt;
&lt;/section&gt;</pre>

   <p>However, it would be better marked-up as:</p>

<pre>&lt;section&gt;
 &lt;!-- ... --&gt;
 &lt;footer&gt;Last modified: 2001-04-23&lt;/footer&gt;
 &lt;address&gt;Author: fred@example.com&lt;/address&gt;
&lt;/section&gt;</pre>

   <p>Or:</p>

<pre>&lt;section&gt;
 &lt;!-- ... --&gt;
 &lt;footer&gt;
  &lt;p&gt;Last modified: 2001-04-23&lt;/p&gt;
  &lt;address&gt;Author: fred@example.com&lt;/address&gt;
 &lt;/footer&gt;
&lt;/section&gt;</pre>

  </div>


  <h4>The <dfn><code>hr</code></dfn> element <span title="TBW">[TBW]</span></h4>

  <p class="big-issue">thematic separator. break. transition. hinge
  realignment. reconstruction, refinement, remodeling, reversal,
  revision, revolution. Maybe an 'html respite' or a 'hypertext rest'?
  <!-- danbri for the last two -->.</p>


  <h3>Preformatted text</h3>

  <h4>The <dfn><code>pre</code></dfn> element</h4>

  <p><span title="block-level elements">Block-level element</span>,
  and <span title="structured inline-level elements">structured
  inline-level element</span>.</p>

  <dl class="element">
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>block-level elements</span> are expected.</dd>
   <dd>Where <span>structured inline-level elements</span> are allowed.</dd>
   <dt>Content model:</dt>
   <dd><span>Strictly inline-level content</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>pre</code> element represents a block of preformatted
  text, in which structure is represented by typographic conventions
  rather than by elements.</p>

  <p>Some examples of cases where the <code>pre</code> element could
  be used:</p>

  <ul>

   <li>Including an e-mail, with paragraphs indicated by blank lines,
   lists indicated by lines prefixed with a bullet, and so on.</li>

   <li>Including fragments of computer code, with structure indicated
   according to the conventions of that language.</li>

   <li>Displaying ASCII art.</li> <!-- XXX need a note about non-visual UAs -->

  </ul>

  <p>If, ignoring text nodes consisting only of white space, the only
  child of a <code>pre</code> is a <code>code</code> element, then the
  <code>pre</code> element represents a block of computer code.</p>

  <p>If, ignoring text nodes consisting only of white space, the only
  child of a <code>pre</code> is a <code>samp</code> element, then the
  <code>pre</code> element represents a block of computer output.</p>

  <!-- XXX examples -->


  <h3>Lists</h3>

  <h4>The <dfn><code>ol</code></dfn> element</h4>

  <p><span title="block-level elements">Block-level element</span>,
  and <span title="structured inline-level elements">structured
  inline-level element</span>.</p>

  <dl class="element">
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>block-level elements</span> are expected.</dd>
   <dd>Where <span>structured inline-level elements</span> are allowed.</dd>
   <dt>Content model:</dt>
   <dd>Zero or more <code>li</code> elements.</dd>
   <dt>Element-specific attributes:</dt>
   <dd><code>start</code></dd>
   <dt>DOM interface:</dt>
   <dd>
<pre class="idl">interface <dfn>HTMLOListElement</dfn> : <span>HTMLElement</span> {
           attribute long <span title="dom-start">start</span>;
};</pre>
   </dd>
  </dl>

  <p>The <code>ol</code> element represents an ordered list of items
  (which are represented by <code>li</code> elements).</p>

  <p>The <dfn><code>start</code></dfn> attribute, if present, must
  have a value that consists of an optional U+002D HYPHEN-MINUS
  followed by one or more digits (U+0030 to U+0039) expressing a base
  ten integer giving the ordinal value of the first list item.</p>

  <p>If the <code>start</code> attribute is present, user agents must
  <a href="#toNumber">convert the value to a numeric type</a>,
  truncating any fractional part, in order to determine the
  attribute's value. The default value, used if the attribute is
  missing or if the value cannot be converted to a number according to
  the referenced algorithm, is 1.</p>

  <p>The items of the list are the <code>li</code> element child nodes
  of the <code>ol</code> element, in tree order.</p>

  <p>The first item in the list has the ordinal value given by the
  <code>ol</code> element's <code>start</code> attribute (unless it is
  further overridden by that <code>li</code> element's
  <code>value</code> attribute).</p>

  <p>Each subsequent item in the list has the ordinal value given by
  its <code>value</code> attribute, if it has one, or, if it doesn't,
  the ordinal value of the previous item, plus one.</p>

  <p>The <dfn title="dom-start"><code>start</code></dfn> DOM attribute
  must <span>reflect</span> the value of the <code>start</code>
  content attribute.</p>

<!-- XXX resuming numbering of lists from previous lists? -->
<!-- XXX counting up and down? -->
<!-- XXX reverse-counted lists? -->

  <h4>The <dfn><code>ul</code></dfn> element</h4>

  <p><span title="block-level elements">Block-level element</span>,
  and <span title="structured inline-level elements">structured
  inline-level element</span>.</p>

  <dl class="element">
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>block-level elements</span> are expected.</dd>
   <dd>Where <span>structured inline-level elements</span> are allowed.</dd>
   <dt>Content model:</dt>
   <dd>Zero or more <code>li</code> elements.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>ul</code> element represents an unordered list of items
  (which are represented by <code>li</code> elements).</p>

  <p>The items of the list are the <code>li</code> element child nodes
  of the <code>ul</code> element.</p>

  <h4>The <dfn><code>li</code></dfn> element</h4>

  <!-- no category -->

  <dl class="element">
   <dt>Contexts in which this element may be used:</dt>
   <dd>Inside <code>ol</code> elements.</dd>
   <dd>Inside <code>ul</code> elements.</dd>
   <dd>Inside <code>menu</code> elements.</dd>
   <dt>Content model:</dt>
   <dd>When the element is a child of an <code>ol</code> or
   <code>ul</code> element and the grandchild of an element that is
   <span title="Determining if a particular element contains
   block-level elements or inline-level content">being used as an
   inline-level content container</span>, or, when the element is a
   child of a <code>menu</code> element:
   <span>inline-level content</span>.</dd>
   <dd>Otherwise: zero or more <span>block-level elements</span>, or
   <span>inline-level content</span> (but not both).</dd>
   <dt>Element-specific attributes:</dt>
   <dd>If the element is a child of an <code>ol</code> element: <code>value</code></dd>
   <dd>If the element is not the child of an <code>ol</code> element: None.</dd>
   <dt>DOM interface:</dt>
   <dd>
<pre class="idl">interface <dfn>HTMLLIElement</dfn> : <span>HTMLElement</span> {
           attribute long <span title="dom-li-value">value</span>;
};</pre>
   </dd>
  </dl>

  <p>The <code>li</code> element represents a list item. If its parent
  element is an <code>ol</code>, <code>ul</code>, or <code>menu</code>
  element, then the element is an item of the parent element's list,
  as defined for those elements. Otherwise, the list item has no
  defined list-related relationship to any other <code>li</code>
  element.</p>

  <p>When the list item is the child of an <code>ol</code> or
  <code>ul</code> element, the content model of the item depends on
  the way that parent element was used. If it was used as structured
  inline content (i.e. if <em>that</em> element's parent was <span
  title="Determining if a particular element contains block-level
  elements or inline-level content">used as an inline-level
  content</span> container), then the <code>li</code> element must
  only contain <span>inline-level content</span>. Otherwise, the
  element may be used either for <span title="inline-level
  content">inline content</span> or <span>block-level
  elements</span>.</p>

  <p>When the list item is the child of a <code>menu</code> element,
  the <code>li</code> element must contain only <span>inline-level
  content</span>.</p>

  <p>When the list item is not the child of an <code>ol</code>,
  <code>ul</code>, or <code>menu</code> element, e.g. because it is an
  orphaned node not in the document, it may contain either for <span
  title="inline-level content">inline content</span> or
  <span>block-level elements</span>.

  <p>When <span title="Determining if a particular element contains
  block-level elements or inline-level content">used as an
  inline-level content</span> container, the list item represents a
  single <span>paragraph</span>.</p>

  <!-- XXX instead refer to microsyntaxes -->
  <p>The <dfn><code>value</code></dfn> attribute, if present, must
  have a value that consists of an optional U+002D HYPHEN-MINUS
  followed by one or more digits (U+0030 to U+0039) expressing a base
  ten integer giving the ordinal value of the first list item.</p>

  <p>If the <code>value</code> attribute is present, user agents must
  <a href="#toNumber">convert the value to a numeric type</a>,
  truncating any fractional part, in order to determine the
  attribute's value. If the attribute's value cannot be converted to a
  number, it is treated as if the attribute was absent. The attribute
  has no default value.</p>

  <p>The <code>value</code> attribute is processed relative to the
  element's parent <code>ol</code> element, if there is one. If there
  is not, the attribute has no effect.</p>

  <p>The <dfn title="dom-li-value"><code>value</code></dfn> DOM
  attribute must <span>reflect</span> the value of the
  <code>value</code> content attribute.</p>


  <h4>The <dfn><code>dl</code></dfn> element</h4>
<!-- XXX
| I do think that the suggestion of simply renaming "definition list" to "description list" is a good one. 
 - http://www.w3.org/mid/Pine.GSO.4.62.0505270914210.19375@en.ifi.uio.no
-->
  <p><span title="block-level elements">Block-level element</span>,
  and <span title="structured inline-level elements">structured
  inline-level element</span>.</p>

  <dl class="element">
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>block-level elements</span> are expected.</dd>
   <dd>Where <span>structured inline-level elements</span> are allowed.</dd>
   <dt>Content model:</dt>
   <dd>Zero or more groups each consisting of one or more
   <code>dt</code> elements followed by one or mode <code>dd</code>
   elements.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>dl</code> element introduces an unordered association
  list consisting of zero or more name-value groups. Each group must
  consist of one or more names (<code>dt</code> elements) followed by
  one or more values (<code>dd</code> elements).</p>

  <p>Name-value groups may be terms and definitions, metadata topics
  and values, or any other groups of name-value data.</p>

  <div class="example">
   <p>The following are all conforming HTML fragments.</p>
   <p>In the following example, one entry ("Authors") is linked to two
   values ("John" and "Luke").</p>
   <pre>&lt;dl&gt;
 &lt;dt&gt; Authors
 &lt;dd&gt; John
 &lt;dd&gt; Luke
 &lt;dt&gt; Editor
 &lt;dd&gt; Frank
&lt;/dl&gt;</pre>
   <p>In the following example, one definition is linked to two
   terms.</p>
   <pre>&lt;dl&gt;
 &lt;dt lang="en-US"&gt; &lt;dfn>color&lt;/dfn> &lt;/dt&gt;
 &lt;dt lang="en-GB"&gt; &lt;dfn>colour&lt;/dfn> &lt;/dt&gt;
 &lt;dd&gt; A sensation which (in humans) derives from the ability of
 the fine structure of the eye to distinguish three differently
 filtered analyses of a view. &lt;/dd&gt;
&lt;/dl&gt;</pre>
   <p>The following example illustrates the use of the <code>dl</code>
   element to mark up metadata of sorts. At the end of the example,
   one group has two metadata labels ("Authors" and "Editors") and two
   values ("Robert Rothman" and "Daniel Jackson").</p>
   <pre>&lt;dl&gt;
 &lt;dt&gt; Last modified time &lt;/dt&gt;
 &lt;dd&gt; 2004-12-23T23:33Z &lt;/dd&gt;
 &lt;dt&gt; Recommended update interval &lt;/dt&gt;
 &lt;dd&gt; 60s &lt;/dd&gt;
 &lt;dt&gt; Authors &lt;/dt&gt;
 &lt;dt&gt; Editors &lt;/dt&gt;
 &lt;dd&gt; Robert Rothman &lt;/dd&gt;
 &lt;dd&gt; Daniel Jackson &lt;/dd&gt;
&lt;/dl&gt;</pre>
  </div>

  <p>If a <code>dl</code> element is empty, it contains no groups.</p>

  <p>If a <code>dl</code> element contains non-whitespace text nodes,
  or elements other than <code>dt</code> and <code>dd</code>, then
  those elements or text nodes do not form part of any groups in that
  <code>dl</code>, and the document is non-conforming.</p>

  <p>If a <code>dl</code> element contains only <code>dt</code>
  elements, then it consists of one group with names but no values,
  and the document is non-conforming.</p>

  <p>If a <code>dl</code> element contains only <code>dd</code>
  elements, then it consists of one group with values but no names,
  and the document is non-conforming.</p>

  <p class="note">The <code>dl</code> element is inappropriate for
  marking up dialogue, since dialogue is ordered (each speaker/line
  pair comes after the next). For an example of how to mark up
  dialogue, see the <code>blockquote</code> element.</p>


  <h4>The <dfn><code>dt</code></dfn> element</h4>

  <!-- no category -->

  <dl class="element">
   <dt>Contexts in which this element may be used:</dt>
   <dd>Before <code>dd</code> elements inside <code>dl</code> elements.</dd>
   <dt>Content model:</dt>
   <dd><span>Strictly inline-level content</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>dt</code> element represents the term, or name, part of
  a name-value group in a <code>dl</code> element.</p>

  <p class="note">The <code>dt</code> element itself does not indicate
  that its contents are a term being defined, but this can be
  indicated using the <code>dfn</code> element.</p>


  <h4>The <dfn><code>dd</code></dfn> element</h4>

  <!-- no category -->

  <dl class="element">
   <dt>Contexts in which this element may be used:</dt>
   <dd>After <code>dt</code> elements inside <code>dl</code> elements.</dd>
   <dt>Content model:</dt>
   <dd>When the element is a child of a <code>dl</code> element and
   the grandchild of an element that is <span title="Determining if a
   particular element contains block-level elements or inline-level
   content">being used as an inline-level content container</span>:
   <span>inline-level content</span>.</dd>
   <dd>Otherwise: zero or more <span>block-level elements</span>, or
   <span>inline-level content</span> (but not both).</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>dd</code> element represents the definition, or value,
  part of a name-value group in a <code>dl</code> element.</p>

  <p>The content model of a <code>dd</code> element depends on the way
  its parent element is being used. If the parent element is a
  <code>dl</code> element that is being used as structured inline
  content (i.e. if the <code>dl</code> element's parent element is
  being <span title="Determining if a particular element contains
  block-level elements or inline-level content">used as an
  inline-level content</span> container), then the <code>dd</code>
  element must only contain <span>inline-level content</span>.</p>

  <p>Otherwise, the element may be used either for <span
  title="inline-level content">inline content</span> or
  <span>block-level elements</span>.</p>


  <h3>Phrase elements</h3>

  <h4>The <dfn><code>a</code></dfn> element</h4>

  <p><span title="interactive elements">Interactive</span>,
  <span>strictly inline-level content</span>.</p>

  <dl class="element">
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>strictly inline-level content</span> is allowed, if
   there are no ancestor <span>interactive elements</span>.</dd>
   <dt>Content model:</dt>
   <dd>When used in an element whose content model is only
   <span>strictly inline-level content</span>: only <span
   title="significant inline content">significant</span> <span>strictly
   inline-level content</span>, but there must be no <span
   title="interactive elements">interactive</span> descendants.</dd>
   <dd>Otherwise: any <span title="significant inline
   content">significant</span> <span>inline-level content</span>, but
   there must be no <span title="interactive
   elements">interactive</span> descendants.</dd>
   <dt>Element-specific attributes:</dt>
   <dd><code title="attr-a-href">href</code></dd>
   <dd><code title="attr-a-rel">rel</code></dd>
   <dd><code title="attr-a-media">media</code></dd>
   <dd><code title="attr-a-hreflang">hreflang</code></dd>
   <dd><code title="attr-a-type">type</code></dd>
   <dd><code title="attr-a-ping">ping</code></dd>
   <dt>DOM interface:</dt>
   <dd>
<pre class="idl">interface <dfn>HTMLAnchorElement</dfn> : <span>HTMLElement</span> {
           attribute DOMString <span title="dom-a-href">href</span>;
           attribute DOMString <span title="dom-a-rel">rel</span>;
           attribute DOMString <span title="dom-a-media">media</span>;
           attribute DOMString <span title="dom-a-hreflang">hreflang</span>;
           attribute DOMString <span title="dom-a-type">type</span>;
           attribute DOMString <span title="dom-a-ping">ping</span>;
};</pre>
    <p>The <code title="command-ro">Command</code> interface must also be implemented by
    this element.</p>
   </dd>
  </dl>

  <p>If the <code>a</code> element has an <dfn
  title="attr-a-href"><code>href</code></dfn> attribute, then it
  represents a hyperlink.</p>

  <p>If the <code>a</code> element has no <code
  title="attr-a-href">href</code> attribute, then the element is a
  placeholder for where a link might otherwise have been placed, if it
  had been relevant.</p>

  <div class="example">
   <p>If a site uses a consistent navigation toolbar on every page,
   then the link that would normally link to the page itself could be
   marked up using an <code>a</code> element:</p>
   <pre>&lt;nav>
 &lt;ul>
  &lt;li> &lt;a href="/">Home&lt;/a> &lt;/li>
  &lt;li> &lt;a href="/news">News&lt;/a> &lt;/li>
  &lt;li> &lt;a>Examples&lt;/a> &lt;/li>
  &lt;li> &lt;a href="/legal">Legal&lt;/a> &lt;/li>
 &lt;/ul>
&lt;/nav></pre>
  </div>

  <p>The <code title="attr-a-href">href</code> attribute, if
  present, must have a value that is a URI (or IRI).</p>

  <p>The relationship between the document containing the hyperlink
  and the destination resource indicated by the hyperlink is given by
  the value of the <dfn title="attr-a-rel"><code>rel</code></dfn>
  attribute. The <a href="#linkTypes">allowed values and their
  meanings</a> are defined in a later section. The <code
  title="attr-a-rel">rel</code> attribute has no default value. If the
  attribute is omitted or if none of the values in the attribute are
  recognised by the UA, then the document has no particular
  relationship with the destination resource other than there being a
  hyperlink between the two.</p>

  <p>Interactive user agents should allow users to <span
  title="following hyperlinks">follow hyperlinks</span> <!-- XXX check
  crossref --> created using the <code>a</code> element. The <code
  title="attr-a-rel">rel</code>, <code
  title="attr-a-media">media</code>, <code
  title="attr-a-hreflang">hreflang</code>, and <code
  title="attr-a-type">type</code> attributes may be used to indicate
  to the user the likely nature of the target resource.</p>

  <!-- XXX default action of DOMActivate -->

  <p>The <dfn title="attr-a-media"><code>media</code></dfn> attribute
  describes for which media the target document was designed. It is
  purely advisory. The value must be a valid media query. <a
  href="#refsMQ">[MQ]</a> The default, if the <code
  title="attr-a-media">media</code> attribute is omitted or has an
  invalid value, is <code>all</code>.</p>

  <p>The <dfn title="attr-a-hreflang"><code>hreflang</code></dfn>
  attribute, if present, gives the language of the linked resource. It
  is purely advisory. The value must be a valid RFC 3066 language
  code. <a href="#refsRFC3066">RFC3066</a> User agents must not
  consider this attribute authoritative &mdash; upon fetching the
  resource, user agents must only use language information associated
  with the resource to determine its language, not metadata included
  in the link to the resource.</p>

  <p>The <dfn title="attr-a-type"><code>type</code></dfn> attribute,
  if present, gives the MIME type of the linked resource. It is purely
  advisory. The value must be a valid MIME type, optionally with
  parameters. <a href="#refsRFC2046">[RFC2046]</a> User agents must
  not consider the <code title="attr-a-type">type</code> attribute
  authoritative &mdash; upon fetching the resource, user agents must
  only use the Content-Type information associated with the resource
  to determine its type, not metadata included in the link to the
  resource.</p>

  <p>The <dfn id="ping" title="attr-a-ping"><code>ping</code></dfn>
  attribute, if present, gives the URIs of the resources that are
  interested in being notified if the user follows the hyperlink. The
  value must be a space separated list of one or more URIs.</p>

  <p>If the element has an <code title="attr-a-href">href</code>
  attribute and a <code title="attr-a-ping">ping</code> attribute and
  the user follows the hyperlink, the user agent should take the <code
  title="attr-a-ping">ping</code> attribute's value, strip leading and
  trailing spaces (U+0020), split the value on sequences of spaces,
  treat each resulting part as a URI (resolving relative URIs
  according to element's base URI) and then send a request to each of
  the resulting URIs. This may be done in parallel with the primary
  request, and is independent of the result of that request.</p>

  <p>User agents should allow the user to adjust this behaviour, for
  example in conjunction with a setting that disables the sending of
  HTTP Referrer headers. Based on the user's preferences, UAs may
  either ignore the <code title="attr-a-ping">ping</code> attribute
  altogether, or selectively ignore URIs in the list (e.g. ignoring
  any third-party URIs).</p>

  <p>For URIs that are HTTP URIs, the requests must be performed using
  the POST method (with an empty entity body in the request). User
  agents must ignore any entity bodies returned in the responses, but
  must, unless otherwise specified by the user, honour the HTTP
  headers &mdash; in particular, HTTP cookie headers. <a
  href="#refsRFC2965">[RFC2965]</a></p>

  <p class="note">To save bandwidth, implementors might wish to
  consider omitting optional headers such as <code>Accept</code> from
  these requests.</p>

  <p>When the <code title="attr-a-ping">ping</code> attribute is
  present, user agents should clearly indicate to the user that
  following the hyperlink will also cause secondary requests to be
  sent in the background, possibly including listing the actual target
  URIs.</p>

  <div class="note">

   <p>The <code title="attr-a-ping">ping</code> attribute is redundant
   with pre-existing technologies like HTTP redirects and JavaScript
   in allowing Web pages to track which off-site links are most
   popular or allowing advertisers to track click-through rates.</p>

   <p>However, the <code title="attr-a-ping">ping</code> attribute
   provides these advantages to the user over those alternatives:</p>

   <ul>

    <li>It allows the user to see the final target URI
    unobscured.</li>

    <li>It allows the UA to inform the user about the out-of-band
    notifications.</li>

    <li>It allows the paranoid user to disable the notifications
    without losing the underlying link functionality.</li>

    <li>It allows the UA to optimise the use of available network
    bandwidth so that the target page loads faster.</li>

   </ul>
  
   <p>Thus, while it is possible to track users without this feature,
   authors are encouraged to use the <code
   title="attr-a-ping">ping</code> attribute so that the user agent
   can improve <!-- XXX optimise? --> the user experience.</p> <!--
   XXX need a better way to end that sentence. It's what I mean, but
   it sounds kooky. -->

  </div>

  <p>The <code>a</code> element must not be <span title="significant
  inline content">empty</span>.</p>

  <p>The DOM attributes <dfn
  title="dom-a-href"><code>href</code></dfn>, <dfn
  title="dom-a-rel"><code>rel</code></dfn>, <dfn
  title="dom-a-media"><code>media</code></dfn>, <dfn
  title="dom-a-hreflang"><code>hreflang</code></dfn>, <dfn
  title="dom-a-type"><code>type</code></dfn>, and <dfn
  title="dom-a-ping"><code>ping</code></dfn> each <span>reflect</span>
  the respective content attributes of the same name.</p>



  <h4>The <dfn><code>q</code></dfn> element</h4>

  <p><span>Strictly inline-level content</span>.</p>

  <dl class="element">
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>strictly inline-level content</span> is allowed.</dd>
   <dt>Content model:</dt>
   <dd>When used in an element whose content model is only
   <span>strictly inline-level content</span>: only <span>strictly
   inline-level content</span>.</dd>
   <dd>Otherwise: any <span>inline-level content</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd><code title="attr-q-cite">cite</code></dd>
   <dt>DOM interface:</dt>
   <dd>
    The <code>q</code> element uses the <code>HTMLQuoteElement</code> interface.
   </dd>
  </dl>

  <p>The <code>q</code> element represents a part of a paragraph
  quoted from another source.</p>

  <p>Content inside a <code>q</code> element must be quoted from
  another source, whose URI, if it has one, should be cited in the
  <dfn title="attr-q-cite"><code>cite</code></dfn> attribute.</p>

  <p>If the <code title="attr-q-cite">cite</code> attribute is
  present, it must be a URI (or IRI). User agents should allow
  users to follow such citation links.</p>

<!-- XXX need examples -->

  <h4>The <dfn><code>cite</code></dfn> element</h4>

  <p><span>Strictly inline-level content</span>.</p>

  <dl class="element">
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>strictly inline-level content</span> is allowed.</dd>
   <dt>Content model:</dt>
   <dd><span>Strictly inline-level content</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
   <!-- XXX should the cite element have a cite attribute? -->
  </dl>

  <p>The <code>cite</code> element represents a citation: the source,
  or reference, for a quote or statement made in the document.</p>

  <p class="note">A <em>citation</em> is not a <em>quote</em> (for
  which the <code>q</code> element is appropriate).</p>

  <div class="example">

   <p>This is incorrect usage:</p>

   <pre>&lt;p>&lt;cite>This is wrong!&lt;/cite>, said Ian.&lt;/p></pre>

   <p>This is the correct way to do it:</p>

   <pre>&lt;p>&lt;q>This is correct!&lt;/q>, said &lt;cite>Ian&lt;/cite>.&lt;/p></pre>

   <p>This is also wrong, because the title and the name are not
   references or citations:</p>

   <pre>&lt;p>My favourite book is &lt;cite>The Reality Dysfunction&lt;/cite>
by &lt;cite>Peter F. Hamilton&lt;/cite>.&lt;/p></pre>

<!-- XXX
Maybe we should just let ship names be marked up by <i> (it is, after all,
an instance of use of a term, as it were), and say that <cite> can be used
for any reference to a publication, including those that aren't really    
citations ("my favourite book is <cite>...</cite>").
  -->

  </div>


  <h4>The <dfn><code>em</code></dfn> element</h4>

  <p><span>Strictly inline-level content</span>.</p>

  <dl class="element">
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>strictly inline-level content</span> is allowed.</dd>
   <dt>Content model:</dt>
   <dd>When used in an element whose content model is only
   <span>strictly inline-level content</span>: only <span>strictly
   inline-level content</span>.</dd>
   <dd>Otherwise: any <span>inline-level content</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>em</code> element represents stress emphasis of its
  contents.</p>

  <p>The level of emphasis that a particlar piece of content has is
  given by its number of ancestor <code>em</code> elements.</p>

  <p>The placement of emphasis changes the meaning of the sentence.
  The element thus forms an integral part of the content. The precise
  way in which emphasis is used in this way depends on the
  language.</p>

  <div class="example">

   <p>These examples show how changing the emphasis changes the
   meaning. First, a general statement of fact, with no emphasis:</p>

   <pre>&lt;p>Cats are cute animals.&lt;/p></pre>

   <p>By emphasising the first word, the statement implies that the
   kind of animal under discussion is in question (maybe someone is
   asserting that dogs are cute):</p>

   <pre>&lt;p>&lt;em>Cats&lt;/em> are cute animals.&lt;/p></pre>

   <p>Moving the emphasis to the verb, one highlights that the truth
   of the entire sentence is in question (maybe someone is saying cats
   are not cute):</p>

   <pre>&lt;p>Cats &lt;em>are&lt;/em> cute animals.&lt;/p></pre>

   <p>By moving it to the adjective, the exact nature of the the cats
   is reasserted (maybe someone suggested cats were <em>mean</em>
   animals):</p>

   <pre>&lt;p>Cats are &lt;em>cute&lt;/em> animals.&lt;/p></pre>

   <p>Similarly, if someone asserted that cats were vegetables,
   someone correcting this might emphasise the last word:</p>

   <pre>&lt;p>Cats are cute &lt;em>animals&lt;/em>.&lt;/p></pre>

   <p>By emphasising the entire sentence, it becomes clear that the
   speaker is fighting hard to get the point across. This kind of
   emphasis also typically affects the punctuation, hence the
   exclamation mark here.</p>

   <pre>&lt;p>&lt;em>Cats are cute animals!&lt;/em>&lt;/p></pre>

   <p>Anger mixed with emphasising the cuteness could lead to markup
   such as:</p>

   <pre>&lt;p>&lt;em>Cats are &lt;em>cute&lt;/em> animals!&lt;/em>&lt;/p></pre>

  </div>

  <!-- XXX should say it is wrong to use as in:

   <p><em>Note</em>: ...</p>

  -->


  <h4>The <dfn><code>strong</code></dfn> element</h4>

  <p><span>Strictly inline-level content</span>.</p>

  <dl class="element">
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>strictly inline-level content</span> is allowed.</dd>
   <dt>Content model:</dt>
   <dd>When used in an element whose content model is only
   <span>strictly inline-level content</span>: only <span>strictly
   inline-level content</span>.</dd>
   <dd>Otherwise: any <span>inline-level content</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>strong</code> element represents strong importance for
  its contents.</p>

  <p>The relative level of importance of a piece of content is given
  by its number of ancestor <code>strong</code> elements; each
  <code>strong</code> element increases the importance of its
  contents.</p>

  <p>Changing the importance of a piece of text with the
  <code>strong</code> element does not change the meaning of the
  sentence.</p>

  <div class="example">
   <p>Here is an example of a warning notice in a game, with the
   various parts marked up according to how important they are:</p>
   <!-- DO NOT REFLOW THIS EXAMPLE it has been carefully balanced -->
   <pre>&lt;p>&lt;strong>Warning.&lt;/strong> This dungeon is dangerous.
&lt;strong>Avoid the ducks.&lt;/strong> Take any gold you find.
&lt;strong>&lt;strong>Do not take any of the diamonds&lt;/strong>,
they are explosive and &lt;strong>will destroy anything within
ten meters.&lt;/strong>&lt;/strong> You have been warned.&lt;/p></pre>
  </div>

  <h4>The <dfn><code>small</code></dfn> element</h4>

  <p><span>Strictly inline-level content</span>.</p>

  <dl class="element">
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>strictly inline-level content</span> is allowed.</dd>
   <dt>Content model:</dt>
   <dd>When used in an element whose content model is only
   <span>strictly inline-level content</span>: only <span>strictly
   inline-level content</span>.</dd>
   <dd>Otherwise: any <span>inline-level content</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>small</code> element represents small print (part of a
  document often describing legal restrictions, such as copyrights or
  other disadvantages), or other side comments.</p>

  <p class="note">The <code>small</code> element does not
  "de-emphasise" or lower the importance of text emphasised by the
  <code>em</code> element or marked as important with the
  <code>strong</code> element.</p>

  <div class="example">

   <p>In this example the footer contains contact information and a
   copyright.</p>

   <pre>&lt;footer>
 &lt;address>
  For more details, contact
  &lt;a href="mailto:js@example.com">John Smith&lt;/a>.
 &lt;/address>
 &lt;p>&lt;small>&copy; copyright 2038 Example Corp.&lt;/small>&lt;/p>
&lt;/footer></pre>

   <p>In this second example, the <code>small</code> element is used
   for a side comment.</p>

   <pre>&lt;p>Example Corp today announced record profits for the
second quarter &lt;small>(Full Disclosure: Foo News is a subsidiary of
Example Corp)&lt;/small>, leading to speculation about a third quarter
merger with Demo Group.&lt;/p></pre>

   <p>In this last example, the <code>small</code> element is marked
   as being <em>important</em> small print.</p>

   <pre>&lt;p>&lt;strong>&lt;small>Continued use of this service will result in a kiss.&lt;/small>&lt;/strong>&lt;/p></pre>

  </div>

  <h4>The <dfn><code>m</code></dfn> element</h4>

  <p><span>Strictly inline-level content</span>.</p>

  <dl class="element">
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>strictly inline-level content</span> is allowed.</dd>
   <dt>Content model:</dt>
   <dd>When used in an element whose content model is only
   <span>strictly inline-level content</span>: only <span>strictly
   inline-level content</span>.</dd>
   <dd>Otherwise: any <span>inline-level content</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>m</code> element represents a run of text marked or
  highlighted.</p>

  <p class="big-issue">Should we just repurpose <code>u</code> or
  <code>b</code> for this semantic instead? What would they stand
  for?</p>

  <div class="example">

   <p>In the following snippet, a paragraph of text refers to a
   specific part of a code fragment.</p>

   <pre>&lt;p>The highlighted part below is where the error lies:&lt;/p>
&lt;pre>&lt;code>var i: Integer;
begin
   i := &lt;m>1.1&lt;/m>;
end.&lt;/code>&lt;/pre></pre>

   <p>Another example of the <code>m</code> element is highlighting
   parts of a document that are matching some search string. If
   someone looked at a document, and the server knew that the user was
   searching for the word "kitten", then the server might return the
   document with one paragraph modified as follows:</p>

   <pre>&lt;p>I also have some &lt;m>kitten&lt;/m>s who are visiting me
these days. They're really cute. I think they like my garden!&lt;/p></pre>

  </div>



  <h4>The <dfn><code>dfn</code></dfn> element</h4>

  <p><span>Strictly inline-level content</span>.</p>

  <dl class="element">
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>strictly inline-level content</span> is allowed, if
   there are no ancestor <code>dfn</code> elements.</dd>
   <dt>Content model:</dt>
   <dd><span>Strictly inline-level content</span>, but there must be
   no descendant <code>dfn</code> elements.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None, but the <code title="attr-dfn-title">title</code> attribute has special semantics on this element.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>dfn</code> element represents the defining instance of
  a term. The <span>paragraph</span>, <span title="dl">definition list
  group</span>, or <span title="sectioning elements">section</span>
  that contains the <code>dfn</code> element contains the definition
  for the term given by the contents of the <code>dfn</code>
  element.</p>

  <p><code>dfn</code> elements must not be nested.</p>

  <p><dfn>Defining term</dfn>: If the <code>dfn</code> element has a
  <dfn title="attr-dfn-title"><code>title</code></dfn> attribute, then
  the exact value of that attribute is the term being defined.
  Otherwise, if it contains exactly one element child node and no
  child text nodes, and that child element is an <code>abbr</code>
  element with a <code title="attr-abbr-title">title</code> attribute,
  then the exact value of <em>that</em> attribute is the term being
  defined. Otherwise, it is the exact <code>textContent</code> of the
  <code>dfn</code> element that gives the term being defined.</p>

  <!-- XXX that means <dfn>x \n x</dfn> won't match <span>x x</span> -->

  <p>If the <code title="attr-dfn-title">title</code> attribute of the
  <code>dfn</code> element is present, then it must only contain the
  term being defined.</p>

  <p>There must only be one <code>dfn</code> element per document for
  each term defined (i.e. there must not be any duplicate <span
  title="defining term">terms</span>).</p>

  <p class="note">The <code title="attr-title">title</code> attribute
  of ancestor elements does not affect <code>dfn</code> elements.</p>

  <p>The <code>dfn</code> element enables automatic cross-references.
  Specifically, any <code>span</code>, <code>abbr</code>,
  <code>code</code>, <code>var</code>, <code>samp</code>, or
  <code>i</code> element that has a non-empty <code
  title="attr-title">title</code> attribute whose value exactly equals
  the <span title="defining term">term</span> of a <code>dfn</code>
  element in the same document, or which has no <code
  title="attr-title">title</code> attribute but whose
  <code>textContent</code> exactly equals the <span title="defining
  term">term</span> of a <code>dfn</code> element in the document, and
  that has no <span>interactive elements</span> or <code>dfn</code>
  elements either as ancestors or descendants, and has no other
  elements as ancestors that are themselves matching these conditions,
  should be presented in such a way that the user can jump from the
  element to the first <code>dfn</code> element giving the defining
  instance of that term.</p>

  <!-- XXX that means <dfn>x x</dfn> won't match <span>x \n x</span> -->

  <!-- need to mention that <span> is useful for cross-refs that don't
  actually use the term itself -->

  <div class="example">

   <p>In the following fragment, the term "GDO" is first defined in
   the first paragraph, then used in the second. A compliant UA could
   provide a link from the <code>abbr</code> element in the second
   paragraph to the <code>dfn</code> element in the first.</p>

   <pre>&lt;p>The &lt;dfn>&lt;abbr title="Garage Door Opener">GDO&lt;/abbr>&lt;/dfn>
is a device that allows off-world teams to open the iris.&lt;/p>
&lt;!-- ... later in the document: -->
&lt;p>Teal'c activated his &lt;abbr title="Garage Door Opener">GDO&lt;/abbr>
and so Hammond ordered the iris to be opened.&lt;/p></pre>

   <!-- XXX need some examples of nesting where the top element makes
   a crossref but the inner ones don't despite also matching the
   algorithm above -->

   <!-- XXX need some examples of duplicates being bad, of title
   attributes being bad, etc -->

  </div>


  <h4>The <dfn><code>abbr</code></dfn> element</h4>

  <p><span>Strictly inline-level content</span>.</p>

  <dl class="element">
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>strictly inline-level content</span> is allowed.</dd>
   <dt>Content model:</dt>
   <dd><span>Strictly inline-level content</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None, but the <code title="attr-abbr-title">title</code> attribute has special semantics on this element.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>abbr</code> element represents an abbreviation or
  acronym. The <dfn title="attr-abbr-title"><code>title</code></dfn>
  attribute should be used to provide an expansion of the
  abbreviation. If present, the attribute must only contain an
  expansion of the abbreviation.</p>

  <div class="example">
   <p>The paragraph below contains an abbreviation marked up with the
   <code>abbr</code> element.</p>
   <pre>&lt;p>The &lt;abbr title="Web Hypertext Application Technology
Working Group">WHATWG&lt;/abbr> is a loose unofficial collaboration of
Web browser manufacturers and interested parties who wish to develop
new technologies designed to allow authors to write and deploy
Applications over the World Wide Web.&lt;/p></pre>
  </div>

  <p>The <code title="attr-abbr-title">title</code> attribute may be
  omitted if there is a <code>dfn</code> element in the document whose
  <span>defining term</span> is the abbreviation (the
  <code>textContent</code> of the <code>abbr</code> element).</p>

  <div class="example">

   <p>In the example below, the word "Zat" is used as an abbreviation
   in the second paragraph. The abbreviation is defined in the first,
   so the explanatory <code title="attr-abbr-title">title</code>
   attribute has been omitted. Because of the way <code>dfn</code>
   elements are defined, the second <code>abbr</code> element in this
   example would be connected (in some UA-specific way) to the
   first.</p>

   <pre>&lt;p>The &lt;dfn>&lt;abbr>Zat&lt;/abbr>&lt;/dfn>, short for Zat'ni'catel, is a weapon.&lt;/p>
&lt;p>Jack used a &lt;abbr>Zat&lt;/abbr> to make the boxes of evidence disappear.&lt;/p></pre>

  </div>

  <h4>The <dfn><code>i</code></dfn> element</h4>

  <p><span>Strictly inline-level content</span>.</p>

  <dl class="element">
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>strictly inline-level content</span> is allowed.</dd>
   <dt>Content model:</dt>
   <dd><span>Strictly inline-level content</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None, but the <code title="attr-title">title</code> attribute has special semantics on this element when used with the <code>dfn</code> element.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>i</code> element represents an instance of the use of a
  term, such as a taxonomic designation, technical term, an idiomatic
  phrase from another language, or similar.</p>

  <p>Terms in languages different from the main text should be
  annotated with <code>lang</code> attributes (<code>xml:lang</code>
  in XML).</p>

  <div class="example">
   <p>The examples below show uses of the <code>i</code> element:</p>
   <pre>&lt;p>The &lt;i>felis silvestris catus&lt;/i> is cute.&lt;/p>
&lt;p>The &lt;i>block-level elements&lt;/i> are defined above.&lt;/p>
&lt;p>There is a certain &lt;i lang="fr">je ne sais quoi&lt;/i> in the air.&lt;/p></pre>
  </div>

  <p class="note">The <code>i</code> element is not appropriate for
  marking up names (e.g. of people, or of ships).</p> <!-- XXX what is? -->

<!-- XXX
Maybe we should just let ship names be marked up by <i> (it is, after all,
an instance of use of a term, as it were), and say that <cite> can be used
for any reference to a publication, including those that aren't really    
citations ("my favourite book is <cite>...</cite>").
  -->

  <p class="big-issue">actually maybe we shouldn't be stealing
  <code>i</code>'s "semantics", it'll be confusing especially if we
  still let WYSYWIG authoring tools use it to mean italics...</p>



  <h4>The <dfn><code>t</code></dfn> element <span title="WIP">[WIP]</span></h4>

  <p><span>Strictly inline-level content</span>.</p>

  <dl class="element">
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>strictly inline-level content</span> is allowed.</dd>
   <dt>Content model:</dt>
   <dd><span>Strictly inline-level content</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd><code title="attr-t-datetime">datetime</code></dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>t</code> element represents a date and/or a time.</p>

  <p>...</p>

  <p class="big-issue">...</p>

  <!--XXX

    use cases!

  -->



  <h4>The <dfn><code>meter</code></dfn> element</h4>

  <p><span>Strictly inline-level content</span>.</p>

  <dl class="element">
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>strictly inline-level content</span> is allowed.</dd>
   <dt>Content model:</dt>
   <dd><span>Strictly inline-level content</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd><code title="attr-meter-value">value</code></dd>
   <dd><code title="attr-meter-min">min</code></dd>
   <dd><code title="attr-meter-low">low</code></dd>
   <dd><code title="attr-meter-high">high</code></dd>
   <dd><code title="attr-meter-max">max</code></dd>
   <dd><code title="attr-meter-optimum">optimum</code></dd>
   <dt>DOM interface:</dt>
   <dd>
<pre class="idl">interface <dfn>HTMLMeterElement</dfn> : <span>HTMLElement</span> {
           attribute long <span title="dom-meter-value">value</span>;
           attribute long <span title="dom-meter-min">min</span>;
           attribute long <span title="dom-meter-max">max</span>;
           attribute long <span title="dom-meter-low">low</span>;
           attribute long <span title="dom-meter-high">high</span>;
           attribute long <span title="dom-meter-optimum">optimum</span>;
};</pre>
   </dd>
  </dl>

  <p>The <code>meter</code> element represents a scalar measurement
  within a known range, or a fractional value; for example disk usage,
  the relevance of a query result, or the fraction of a voting
  population to have selected a particular candidate.</p>

  <p>This is also known as a gauge.</p>

  <p class="note">The <code>meter</code> element should not be used to
  indicate progress (as in a progress bar). For that role, HTML
  provides a separate <code>progress</code> element.</p>

  <p>There are six attributes that determine the semantics of the
  gauge represented by the element.</p>

  <p>The <dfn title="attr-meter-min"><code>min</code></dfn> attribute
  specifies the lower bound of the range, and the <dfn
  title="attr-meter-max"><code>max</code></dfn> attribute specifies
  the upper bound. The <dfn
  title="attr-meter-value"><code>value</code></dfn> attribute
  specifies the value to have the gauge indicate as the "measured"
  value.</p>

  <p>The other three attributes can be used to segment the gauge's
  range into "low", "medium", and "high" parts, and to indicate which
  part of the gauge is the "optimum" part. The <dfn
  title="attr-meter-low"><code>low</code></dfn> attribute specifies
  the range that is considered to be the "low" part, and the <dfn
  title="attr-meter-high"><code>high</code></dfn> attribute specifies
  the range that is considered to be the "high" part. The <dfn
  title="attr-meter-optimum"><code>optimum</code></dfn> attribute
  gives the position that is "optimum"; if that is higher than the
  "high" value  then this indicates that the higher the value, the
  better; if it's lower than the "low" mark then it indicates that
  lower values are better, and naturally if it is in between then it
  indicates that neither high nor low values are good.</p>

  <p><strong>Authoring requirements</strong>: The recommended way of
  giving the value is to include it as contents of the element, either
  as two numbers (the higher number represents the maximum, the other
  number the current value), or as a percentage or similar (using one
  of the characters such as "%"), or as a fraction.</p>

  <p>The <code title="attr-meter-value">value</code>, <code
  title="attr-meter-min">min</code>, <code
  title="attr-meter-low">low</code>, <code
  title="attr-meter-high">high</code>, <code
  title="attr-meter-max">max</code>, and <code
  title="attr-meter-optimum">optimum</code> attributes are all
  optional. When present, they must have values that are <span
  title="valid floating point number">valid floating point
  numbers</span>.</p>

  <div class="example">

   <p>The following examples all represent a measurement of three
   quarters (of the maximum of whatever is being measured):</p>

   <pre>&lt;meter>75%&lt;/meter>
&lt;meter>750&#x2030;&lt;/meter>
&lt;meter>3/4&lt;/meter>
&lt;meter>6 blocks used (out of 8 total)&lt;/meter>
&lt;meter>max: 100; current: 75&lt;/meter>
&lt;meter>&lt;object data="graph75.png">0.75&lt;/object>&lt;/meter>
&lt;meter min="0" max="100" value="75">&lt;/meter></pre>

  </div>

  <p><strong>User agent requirements</strong>: User agents must parse
  the <code title="attr-meter-min">min</code>, <code
  title="attr-meter-max">max</code>, <code
  title="attr-meter-value">value</code>, <code
  title="attr-meter-low">low</code>, <code
  title="attr-meter-high">high</code>, and <code
  title="attr-meter-optimum">optimum</code> attributes using the
  <span>rules for parsing floating point number values</span>.</p>

  <p>If the <code title="attr-meter-value">value</code> attribute has
  been omitted, the user agent must also process the
  <code>textContent</code> of the element according to the <span>steps
  for finding one or two numbers in a string</span>. These steps will
  return nothing, one number, one number with a denominator
  punctuation character, or two numbers.</p>

  <p>User agents must then use all these numbers to obtain values for
  six points on the gauge, as follows. (The order in which these are
  evaluated is important, as some of the values refer to earlier
  ones.)</p>

  <dl>

   <dt>The minimum value</dt>

   <dd>
    <p>If the <code title="attr-meter-min">min</code> attribute is
    specified and a value could be parsed out of it, then the minimum
    value is that value. Otherwise, the minimum value is zero.</p>
   </dd>

   <dt>The maximum value</dt>

   <dd>

    <p>If the <code title="attr-meter-max">max</code> attribute is
    specified and a value could be parsed out of it, the maximum
    value is that value.</p>

    <p>Otherwise, if the <code title="attr-meter-max">max</code>
    attribute is specified but no value could be parsed out of it, or
    if it was not specified, but either or both of the <code
    title="attr-meter-min">min</code> or <code
    title="attr-meter-value">value</code> attributes <em>were</em>
    specified, then the maximum value is 1.</p>

    <p>Otherwise, none of the <code title="attr-meter-max">max</code>,
    <code title="attr-meter-min">min</code>, and <code
    title="attr-meter-value">value</code> attributes were
    specified. If the result of processing the
    <code>textContent</code> of the element was either nothing or just
    one number with no denominator punctuation character, then the
    maximum value is 1; if the result was one number but it had an
    associated denominator punctuation character, then the maximum
    value is the <span title="values associated with denominator
    punctuation characters">value associated with that denominator
    punctuation character</span>; and finally, if there were two
    numbers parsed out of the <code>textContent</code>, then the
    maximum is the higher of those two numbers.</p>

    <p>If the above machinations result in a maximum value less than
    the minimum value, then the maximum value is actually the same as
    the minimum value.</p>

   </dd>

   <dt>The actual value</dt>

   <dd>

    <p>If the <code title="attr-meter-value">value</code> attribute is
    specified and a value could be parsed out of it, then that value
    is the actual value.</p>

    <p>If the <code title="attr-meter-value">value</code> attribute is
    not specified but the <code title="attr-meter-max">max</code>
    attribute <em>is</em> specified and the result of processing the
    <code>textContent</code> of the element was one number with no
    associated denominator punctuation character, then that number is
    the actual value.</p>

    <p>If neither of the <code title="attr-meter-value">value</code>
    and <code title="attr-meter-max">max</code> attributes are
    specified, then, if the result of processing the
    <code>textContent</code> of the element was one number (with or
    without an associated denominator punctuation character), then
    that is the actual value, and if the result of processing the
    <code>textContent</code> of the element was two numbers, then the
    actual value is the lower of the two numbers found.</p>

    <p>Otherwise, if none of the above apply, the actual value is
    zero.</p>

    <p>If the above procedure results in an actual value less than
    the minimum value, then the actual value is actually the same as
    the minimum value.</p>

    <p>If, on the other hand, the result is an actual value greater
    than the maximum value, then the actual value is the maximum
    value.</p>

   </dd>

   <dt>The low boundary</dt>

   <dd>

    <p>If the <code title="attr-meter-low">low</code> attribute is
    specified and a value could be parsed out of it, then the low
    boundary is that value. Otherwise, the low boundary is the same as
    the minimum value.</p>

    <p>If the above results in a low boundary that is less than the
    minimum value, the low boundary is the minimum value.</p>

   </dd>

   <dt>The high boundary</dt>

   <dd>

    <p>If the <code title="attr-meter-high">high</code> attribute is
    specified and a value could be parsed out of it, then the high
    boundary is that value. Otherwise, the high boundary is the same
    as the maximum value.</p>

    <p>If the above results in a high boundary that is higher than the
    maximum value, the high boundary is the maximum value.</p>

   </dd>

   <dt>The optimum point</dt>

   <dd>

    <p>If the <code title="attr-meter-optimum">optimum</code>
    attribute is specified and a value could be parsed out of it, then
    the optimum point is that value. Otherwise, the optimum point is
    the midpoint between the minimum value and the maximum value.</p>

    <p>If the optimum point is then less than the minimum value, then
    the optimum point is actually the same as the minimum
    value. Similarly, if the optimum point is greater than the maximum
    value, then it is actually the maximum value instead.</p>

   </dd>

  </dl>

  <p>All of which should result in the following inequalities all
  being true:</p>

  <ul class="brief">
   <li>minimum value &le; actual value &le; maximum value</li>
   <li>minimum value &le; low boundary &le; high boundary &le; maximum value</li>
   <li>minimum value &le; optimum point &le; maximum value</li>
  </ul>

  <p><strong>UA requirements for regions of the gauge</strong>: If the
  optimum point is equal to the low boundary or the high boundary, or
  anywhere in between them, then the region between the low and high
  boundaries of the gauge must be treated as the optimum region, and
  the low and high parts, if any, must be treated as
  suboptimal. Otherwise, if the optimum point is less than the low
  boundary, then the region between the minimum value and the low
  boundary must be treated as the optimum region, the region between
  the low boundary and the high boundary must be treated as a
  suboptimal region, and the region between the high boundary and the
  maximum value must be treated as an even less good region. Finally,
  if the optimum point is higher than the high boundary, then the
  situation is reversed; the region between the high boundary and the
  maximum value must be treated as the optimum region, the region
  between the high boundary and the low boundary must be treated as a
  suboptimal region, and the remaining region between the low boundary
  and the minimum value must be treated as an even less good
  region.</p>

  <p><strong>UA requirements for showing the gauge</strong>: When
  representing a <code>meter</code> element to the user, the UA should
  indicate the relative position of the actual value to the minimum
  and maximum values, and the relationship between the actual value
  and the three regions of the gauge.</p>

  <div class="example">
   <p>The following markup:</p>
   <pre>
&lt;h3>Suggested groups&lt;/h3>
&lt;menu type="toolbar">
 &lt;a href="?cmd=hsg" onclick="hideSuggestedGroups()">Hide suggested groups&lt;/a>
&lt;/menu>
&lt;ul>
 &lt;li>
  &lt;p>&lt;a href="/group/comp.infosystems.www.authoring.stylesheets/view">comp.infosystems.www.authoring.stylesheets&lt;/a> -
     &lt;a href="/group/comp.infosystems.www.authoring.stylesheets/subscribe">join&lt;/a>&lt;/p>
  &lt;p>Group description: &lt;strong>Layout/presentation on the WWW.&lt;/strong>&lt;/p>
  &lt;p><strong>&lt;meter value="0.5">Moderate activity,&lt;/meter></strong> Usenet, 618 subscribers&lt;/p>
 &lt;/li>
 &lt;li>
  &lt;p>&lt;a href="/group/netscape.public.mozilla.xpinstall/view">netscape.public.mozilla.xpinstall&lt;/a> -
     &lt;a href="/group/netscape.public.mozilla.xpinstall/subscribe">join&lt;/a>&lt;/p>
  &lt;p>Group description: &lt;strong>Mozilla XPInstall discussion.&lt;/strong>&lt;/p>
  &lt;p><strong>&lt;meter value="0.25">Low activity,&lt;/meter></strong> Usenet, 22 subscribers&lt;/p>
 &lt;/li>
 &lt;li>
  &lt;p>&lt;a href="/group/mozilla.dev.general/view">mozilla.dev.general&lt;/a> -
     &lt;a href="/group/mozilla.dev.general/subscribe">join&lt;/a>&lt;/p>
  &lt;p><strong>&lt;meter value="0.25">Low activity,&lt;/meter></strong> Usenet, 66 subscribers&lt;/p>
 &lt;/li>
&lt;/ul>
</pre>
   <p>Might be rendered as follows:</p>
   <p><img src="sample-meter.png" alt="With the &lt;meter> elements rendered as inline green bars of varying lengths."></p>
  </div>

  <p>The <dfn title="dom-meter-min"><code>min</code></dfn>, <dfn
  title="dom-meter-max"><code>max</code></dfn>, <dfn
  title="dom-meter-value"><code>value</code></dfn>, <dfn
  title="dom-meter-low"><code>low</code></dfn>, <dfn
  title="dom-meter-high"><code>high</code></dfn>, and <dfn
  title="dom-meter-optimum"><code>optimum</code></dfn> DOM attributes
  must reflect the elements' content attributes of the same name. When
  the relevant content attributes are absent, the DOM attributes must
  return zero. The value parsed from the <code>textContent</code>
  never affects the DOM values.</p>

  <p class="big-issue">Would be cool to have the <code
  title="dom-meter-value">value</code> DOM attribute update the
  <code>textContent</code> in-line...</p>

<!-- XXX
should we also look inside the title="" attribute?
   Disk usage: <meter title="985MB of 986MB total" high="980">Full!</meter>
should we make the contents accessible in some way, e.g. as a tooltip?
-->



  <h4>The <dfn><code>progress</code></dfn> element</h4>

  <p><span>Strictly inline-level content</span>.</p>

  <dl class="element">
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>strictly inline-level content</span> is allowed.</dd>
   <dt>Content model:</dt>
   <dd><span>Strictly inline-level content</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd><code title="attr-progress-value">value</code></dd>
   <dd><code title="attr-progress-max">max</code></dd>
   <dt>DOM interface:</dt>
   <dd>
<pre class="idl">interface <dfn>HTMLProgressElement</dfn> : <span>HTMLElement</span> {
           attribute long <span title="dom-progress-value">value</span>;
           attribute long <span title="dom-progress-max">max</span>;
};</pre>
   </dd>
  </dl>

  <p>The <code>progress</code> element represents the completion
  progress of a task. The progress is either indeterminate, indicating
  that progress is being made but that it is not clear how much more
  work remains to be done before the task is complete (e.g. because
  the task is waiting for a remote host to respond), or the progress
  is a number in the range zero to a maximum, giving the fraction of
  work that has so far been completed.</p>

  <p>There are two attributes that determine the current task
  completion represented by the element.</p>

  <p>The <dfn title="attr-progress-value"><code>value</code></dfn>
  attribute specifies how much of the task has been completed, and the
  <dfn title="attr-progress-max"><code>max</code></dfn> attribute
  specifies how much work the task requires in total. The units are
  arbitrary and not specified.</p>

  <p>Instead of using the attributes, authors are recommended to
  simply include the current value and the maximum value inline as
  text inside the element.</p>

  <div class="example">
   <p>Here is a snippet of a Web application that shows the progress
   of some automated task:</p>
   <pre>&lt;section>
 &lt;h2>Task Progress&lt;/h2>
 &lt;p>&lt;label>Progress: &lt;progress>&lt;span id="p">0&lt;/span>%&lt;/progress>&lt;/p>
 &lt;script>
  var progressBar = document.getElementById('p');
  function updateProgress(newValue) {
    progressBar.textContent = newValue;
  }
 <&lt;/script>
&lt;/section>
   <p>(The <code>updateProgress()</code> method in this example would
   be called by some other code on the page to update the actual
   progress bar as the task progressed.)</p>
  </div>

  <p><strong>Author requirements</strong>: The <code
  title="attr-progress-max">max</code> and <code
  title="attr-progress-value">value</code> attributes, when present,
  must have values that are <span title="valid floating point
  number">valid floating point numbers</span>.</p>

  <p><strong>User agent requirements</strong>: User agents must parse
  the <code title="attr-progress-max">max</code> and <code
  title="attr-progress-value">value</code> attributes according to the
  <span>rules for parsing floating point number attribute
  values</span>.</p>

  <p>If the <code title="attr-progress-value">value</code> attribute
  is omitted, then user agents must also parse the
  <code>textContent</code> of the <code>progress</code> element in
  question using the <span>steps for finding one or two numbers in a
  string</span>. These steps will return nothing, one number, one
  number with a denominator punctuation character, or two numbers.</p>

  <p>Using the results of this processing, user agents must determine
  whether the progress bar is an indeterminate progress bar, or
  whether it is a determinate progress bar, and in the latter case,
  what its current and maximum values are, all as follows:</p>

  <ol>

   <li>If the <code title="attr-progress-max">max</code> attribute is
   omitted, and the <code title="attr-progress-value">value</code> is
   omitted, and the results of parsing the <code>textContent</code>
   was nothing, then the progress bar is an indeterminate progress
   bar. Abort these steps.</li>

   <li>Otherwise, it is a determinate progress bar.</li>

   <li>If the <code title="attr-progress-max">max</code> attribute is
   included, then, if a value could be parsed out of it, then the
   maximum value is that value.</li>

   <li>Otherwise, if the <code title="attr-progress-max">max</code>
   attribute is absent but the <code
   title="attr-progress-value">value</code> attribute is present, or,
   if the <code title="attr-progress-max">max</code> attribute is
   present but no value could be parsed from it, then the maximum is
   1.</li>

   <li>Otherwise, if neither attribute is included, then, if the
   <code>textContent</code> contained one number with an associated
   denominator punctuation character, then the maximum value is the
   <span>value associated with that denominator punctuation
   character</span>; otherwise, if the <code>textContent</code>
   contained two numbers, the maximum value is the higher of the two
   values; otherwise, the maximum value is 1.</li>

   <li>If the <code title="attr-progress-value">value</code> attribute
   is present on the element and a value could be parsed out of it,
   that value is the current value of the progress bar. Otherwise, if
   the attribute is present but no value could be parsed from it, the
   current value is zero.</li>

   <li>Otherwise if the <code title="attr-progress-value">value</code>
   attribute is absent and the <code
   title="attr-progress-max">max</code> attribute is present, then, if
   the <code>textContent</code> was parsed and found to contain just
   one number, with no associated denominator punctuation character,
   then the current value is that number. Otherwise, if the <code
   title="attr-progress-value">value</code> attribute is absent and
   the <code title="attr-progress-max">max</code> attribute is present
   then the current value is zero.</li>

   <li>Otherwise, if neither attribute is present, then the current
   value is the lower of the one or two numbers that were found in the
   <code>textContent</code> of the element.</li>

   <li>Finally, if the maximum value is less than zero, then it is
   reset to 1, and if the current value is less than the maximum
   value, then it is reset to the maximum value.</li>

  </ol>

  <p><strong>UA requirements for showing the progress bar</strong>:
  When representing a <code>progress</code> element to the user, the
  UA should indicate whether it is a determinate or indeterminate
  progress bar, and in the former case, should indicate the relative
  position of the current value relative to the  maximum value.</p>

  <p>The <dfn title="dom-progress-max"><code>max</code></dfn> and <dfn
  title="dom-progress-value"><code>value</code></dfn> DOM attributes
  must reflect the elements' content attributes of the same name. When
  the relevant content attributes are absent, the DOM attributes must
  return zero. The value parsed from the <code>textContent</code>
  never affects the DOM values.</p>

  <p class="big-issue">Would be cool to have the <code
  title="dom-progress-value">value</code> DOM attribute update the
  <code>textContent</code> in-line...</p>


  <h4>The <dfn><code>code</code></dfn> element</h4>

  <p><span>Strictly inline-level content</span>.</p>

  <dl class="element">
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>strictly inline-level content</span> is allowed.</dd>
   <dt>Content model:</dt>
   <dd>When used in an element whose content model is only
   <span>strictly inline-level content</span>: only <span>strictly
   inline-level content</span>.</dd>
   <dd>Otherwise: any <span>inline-level content</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None, but the <code title="attr-title">title</code> attribute has special semantics on this element when used with the <code>dfn</code> element.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>code</code> element represents a fragment of computer
  code. This could be an XML element name, a filename, a computer
  program, or any other string that a computer would recognise.</p>

  <p class="note">See the <code>pre</code> element for more detais.</p>

  <div class="example">

   <p>The following example shows how a block of code could be marked
   up using the <code>pre</code> and <code>code</code> elements.</p>

   <pre>&lt;pre>&lt;code>var i: Integer;
begin
   i := 1;
end.&lt;/code>&lt;/pre></pre>

  </div>

  <h4>The <dfn><code>var</code></dfn> element</h4>

  <p><span>Strictly inline-level content</span>.</p>

  <dl class="element">
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>strictly inline-level content</span> is allowed.</dd>
   <dt>Content model:</dt>
   <dd><span>Strictly inline-level content</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None, but the <code title="attr-title">title</code> attribute has special semantics on this element when used with the <code>dfn</code> element.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>var</code> element represents a variable. This could be
  an actual variable in a mathematical expression or programming
  context, or it could just be a term used as a placeholder in
  prose.</p>

  <div class="example">
   <p>In the paragraph below, the letter "n" is being used as a
   variable in prose:</p>
   <pre>&lt;p>If there are &lt;var>n&lt;/var> pipes leading to the ice
cream factory then I expect at &lt;em>least&lt;/em> &lt;var>n&lt;/var>
flavours of ice cream to be available for purchase!&lt;/p></pre>
  </div>

  <h4>The <dfn><code>samp</code></dfn> element</h4>

  <p><span>Strictly inline-level content</span>.</p>

  <dl class="element">
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>strictly inline-level content</span> is allowed.</dd>
   <dt>Content model:</dt>
   <dd>When used in an element whose content model is only
   <span>strictly inline-level content</span>: only <span>strictly
   inline-level content</span>.</dd>
   <dd>Otherwise: any <span>inline-level content</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None, but the <code title="attr-title">title</code> attribute has special semantics on this element when used with the <code>dfn</code> element.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>samp</code> element represents (sample) output from a
  program or computing system.</p>

  <p class="note">See the <code>pre</code> and <code>kbd</code>
  elements for more detais.</p>

  <div class="example">
   <p>This example shows the <code>samp</code> element being used
   inline:</p>
   <pre>&lt;p>The computer said &lt;samp>Too much cheese in tray
two&lt;/samp> but I didn't know what that meant.&lt;/p></pre>

   <p>This second example shows a block of sample output. Nested
   <code>samp</code> and <code>kbd</code> elements allow for the
   styling of specific elements of the sample output using a
   style sheet.</p>

   <!-- XXX should those nested SAMPs be SPANs? -->
   <pre>&lt;pre>&lt;samp>&lt;samp class="prompt">jdoe@mowmow:~$&lt;/samp> &lt;kbd>ssh demo.example.com&lt;/kbd>
Last login: Tue Apr 12 09:10:17 2005 from mowmow.example.com on pts/1
Linux demo 2.6.10-grsec+gg3+e+fhs6b+nfs+gr0501+++p3+c4a+gr2b-reslog-v6.189 #1 SMP Tue Feb 1 11:22:36 PST 2005 i686 unknown

&lt;samp class="prompt">jdoe@demo:~$&lt;/samp> &lt;samp class="cursor">_&lt;/samp>&lt;/samp>&lt;/pre></pre>
  </div>

  <h4>The <dfn><code>kbd</code></dfn> element</h4>

  <p><span>Strictly inline-level content</span>.</p>

  <dl class="element">
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>strictly inline-level content</span> is allowed.</dd>
   <dt>Content model:</dt>
   <dd><span>Strictly inline-level content</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>kbd</code> element represents user input (typically
  keyboard input, although it may also be used to represent other
  input, such as voice commands).</p>

  <p>When the <code>kbd</code> element is nested inside a
  <code>samp</code> element, it represents the input as it was echoed
  by the system.</p>

  <p>When the <code>kbd</code> element <em>contains</em> a
  <code>samp</code> element, it represents input based on system
  output, for example invoking a menu item.</p>

  <p>When the <code>kbd</code> element is nested inside another
  <code>kbd</code> element, it represents an actual key or other
  single unit of input as appropriate for the input mechanism.</p>

  <div class="example">
   <p>Here the <code>kbd</code> element is used to indicate keys to press:</p>
   <pre>&lt;p>To make George eat an apple, press &lt;kbd>&lt;kbd>Shift&lt;/kbd>+&lt;kbd>F3&lt;/kbd>&lt;/kbd>&lt;/p></pre>

   <p>In this second example, the user is told to pick a particular
   menu item. The outer <code>kbd</code> element marks up a block of
   input, with the inner <code>kbd</code> elements representing each
   individual step of the input, and the <code>samp</code> elements
   inside them indicating that the steps are input based on something
   being displayed by the system, in this case menu labels:</p>

   <pre>&lt;p>To make George eat an apple, select
    &lt;kbd>&lt;kbd>&lt;samp>File&lt;/samp>&lt;/kbd>|&lt;kbd>&lt;samp>Eat Apple...&lt;/samp>&lt;/kbd>&lt;/kbd>
&lt;/p></pre>
  </div>

  <h4>The <dfn><code>sup</code></dfn> and <dfn><code>sub</code></dfn> elements</h4>

  <p><span>Strictly inline-level content</span>.</p>

  <dl class="element">
   <dt>Contexts in which these elements may be used:</dt>
   <dd>Where <span>strictly inline-level content</span> is allowed.</dd>
   <dt>Content model:</dt>
   <dd><span>Strictly inline-level content</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>sup</code> element represents a superscript and the
  <code>sub</code> element represents a subscript.</p>

  <p>These elements must only be used to mark up typographical
  conventions with specific meanings, not for typographical
  presentation for presentation's sake. For example, it would be
  inappropriate for the <code>sup</code> and <code>sub</code> elements
  to be used in the name of the LaTeX document preparation system. In
  general, authors should not use these elements if the
  <em>absence</em> of those elements would not change the meaning of
  the content.</p>

  <p>When the <code>sub</code> element is used inside a
  <code>var</code> element, it represents the subscript that
  identifies the variable in a family of variables.</p>

  <div class="example">
   <pre>&lt;p>The coordinate of the &lt;var>i&lt;/var>th point is
(&lt;var>x&lt;sub>&lt;var>i&lt;/var>&lt;/sub>&lt;/var>, &lt;var>y&lt;sub>&lt;var>i&lt;/var>&lt;/sub>&lt;/var>).
For example, the 10th point has coordinate
(&lt;var>x&lt;sub>10&lt;/sub>&lt;/var>, &lt;var>y&lt;sub>10&lt;/sub>&lt;/var>).&lt;/p></pre>
  </div>

  <p>In certain languages, superscripts are part of the typographical
  conventions for some abbreviations.</p>

  <div class="example">
   <pre>&lt;p>The most beautiful women are
&lt;span lang="fr">&lt;abbr>M&lt;sup>lle&lt;/sup>&lt;/abbr> Gwendoline&lt;/span> and 
&lt;span lang="fr">&lt;abbr>M&lt;sup>me&lt;/sup>&lt;/abbr> Denise&lt;/span>.&lt;/p></pre>
  </div>

  <p>Mathematical expressions often use subscripts and superscripts.
  <!--Authors are encouraged to use MathML for marking up mathematics, but
  authors may opt to use <code>sub</code> and <code>sup</code> if
  detailed mathematical markup is not desired. <a
  href="#refsMathML">[MathML]</a>--></p> <!-- XXXX -->

  <div class="example">
   <pre>&lt;var>E&lt;/var>=&lt;var>m&lt;/var>&lt;var>c&lt;/var>&lt;sup>2&lt;/sup></pre>
   <pre>f(&lt;var>x&lt;/var>, &lt;var>n&lt;/var>) = log&lt;sub>4&lt;/sub>&lt;var>x&lt;/var>&lt;sup>&lt;var>n&lt;/var>&lt;/sup></pre>
  </div>


  <h4>The <dfn><code>span</code></dfn> element</h4>

  <p><span>Strictly inline-level content</span>.</p>

  <dl class="element">
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>strictly inline-level content</span> is allowed.</dd>
   <dt>Content model:</dt>
   <dd>When used in an element whose content model is only
   <span>strictly inline-level content</span>: only <span>strictly
   inline-level content</span>.</dd>
   <dd>Otherwise: any <span>inline-level content</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None, but the <code title="attr-title">title</code> attribute has special semantics on this element when used with the <code>dfn</code> element.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>span</code> element doesn't mean anything on its own,
  but can be useful when used together with other attributes, e.g.
  <code>lang</code> or <code>dir</code>, or when used in conjunction
  with the <code>dfn</code> element.</p>

  <p class="big-issue">Now that we have <code>i</code>, do we need
  <code>span</code> to work with <code>dfn</code>?</p>

<!-- XXX need examples -->

  <h4>The <dfn><code>bdo</code></dfn> element</h4>

  <p><span>Strictly inline-level content</span>.</p>

  <dl class="element">
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>strictly inline-level content</span> is allowed.</dd>
   <dt>Content model:</dt>
   <dd><span>Strictly inline-level content</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None, but the <code>dir</code> global attribute is required on this element.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>bdo</code> element allows authors to override the
  Unicode bidi algorithm by explicitly specifying a direction
  override. <a href="#refsBIDI">[BIDI]</a></p>

  <p>Authors must specify the <code>dir</code> attribute on this
  element, with the value <code>ltr</code> to specify a left-to-right
  override and with the value <code>rtl</code> to specify a
  right-to-left override.</p>

  <p>If the element has the <code>dir</code> attribute set to the
  exact value <code>ltr</code>, then for the purposes of the bidi
  algorithm, the user agent must act as if there was a U+202D
  LEFT-TO-RIGHT OVERRIDE character at the start of the element, and a
  U+202C POP DIRECTIONAL FORMATTING at the end of the element.</p>

  <p>If the element has the <code>dir</code> attribute set to the
  exact value <code>rtl</code>, then for the purposes of the bidi
  algorithm, the user agent must act as if there was a U+202E
  RIGHT-TO-LEFT OVERRIDE character at the start of the element, and a
  U+202C POP DIRECTIONAL FORMATTING at the end of the element.</p>

  <p>The requirements on handling the <code>bdo</code> element for the
  bidi algorithm may be implemented indirectly through the style
  layer. For example, an HTML+CSS user agent should implement these
  requirements by implementing the CSS <code>unicode-bidi</code>
  property. <a href="#refsCSS21">[CSS21]</a></p>

<!-- XXX need examples -->

  <h4>The <dfn><code>br</code></dfn> element</h4>

  <p><span>Strictly inline-level content</span>.</p>

  <dl class="element">
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>strictly inline-level content</span> is allowed.</dd>
   <dt>Content model:</dt>
   <dd>Empty.</dd>
   <dt>Element-specific attributes:</dt>
   <dd>None.</dd>
   <dt>DOM interface:</dt>
   <dd>No difference from <code>HTMLElement</code>.</dd>
  </dl>

  <p>The <code>br</code> element represents a line break.</p>

  <p><code>br</code> elements must be empty. Any content inside
  <code>br</code> elements must not be considered part of the
  surrounding text.</p>

  <p><code>br</code> elements must only be used for line breaks that
  are actually part of the content, as in poems or addresses.</p>

  <div class="example">

  <p>The following example is correct usage of the <code>br</code>
  element:</p>

   <pre>&lt;p&gt;P. Sherman&lt;br&gt;
42 Wallaby Way&lt;br&gt;
Sydney&lt;/p&gt;</pre>

  </div>

  <p><code>br</code> elements must not be used for separating thematic
  groups in a paragraph.</p>

  <div class="example">

   <p>The following examples are non-conforming, as they abuse the
   <code>br</code> element:</p>

   <pre>&lt;p&gt;&lt;a ...&gt;34 comments.&lt;/a&gt;&lt;br&gt;
&lt;a ...&gt;Add a comment.&lt;a&gt;&lt;/p&gt;</pre>

   <pre>&lt;p&gt;Name: &lt;input name="name"&gt;&lt;br&gt;
Address: &lt;input name="address"&gt;&lt;/p&gt;</pre>

   <p>Here are alternatives to the above, which are correct:</p>

   <pre>&lt;p&gt;&lt;a ...&gt;34 comments.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a ...&gt;Add a comment.&lt;a&gt;&lt;/p&gt;</pre>

   <pre>&lt;p&gt;Name: &lt;input name="name"&gt;&lt;/p&gt;
&lt;p&gt;Address: &lt;input name="address"&gt;&lt;/p&gt;</pre>

   <!-- XXX should have labels in the examples above -->

  </div>

  <!-- XXXX ruby (delayed until someone can define it with error handling rules) -->

  <!-- XXXX should we have a "name" element? <name type="person">, type="ship"? -->

  <h3>Edits</h3>

  <p>The <code>ins</code> and <code>del</code> elements represent
  edits to the document.</p>

  <h4>The <dfn><code>ins</code></dfn> element</h4>

  <p><span title="block-level elements">Block-level element</span>,
  and <span>strictly inline-level content</span>.</p>

  <dl class="element">
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>block-level elements</span> is expected.</dd>
   <dd>Where <span>strictly inline-level content</span> is allowed.</dd>
   <dt>Content model:</dt>

   <dd>When the element is a child of an element with only one content
   model (i.e. an element that only allows <span>strictly inline-level
   content</span>, or only allows <span>inline-level content</span>,
   or only allows <span>block-level elements</span>): same content
   model as the parent element.</dd>

   <dd>Otherwise, when the element is a child of an element that only
   contains <span>inter-element whitespace</span>, <code>ins</code>
   elements, and <code>del</code> elements: same content model as the
   parent element, with the additional restriction that if the parent
   element allows a choice in content models (e.g. block or inline)
   then if all the children of all the sibling <code>ins</code>
   elements were placed directly in the parent element, the document
   would still be conforming.</dd>

   <dd>Otherwise, when the element is a child of an element that is
   <span title="Determining if a particular element contains
   block-level elements or inline-level content">being used as an
   inline-level content container</span>: <span>inline-level
   content</span>.</dd>

   <dd>Otherwise, when the element is a child of an element that is
   <span title="Determining if a particular element contains
   block-level elements or inline-level content">being used as a
   block-level element container</span>: <span>block-level
   elements</span>.</dd>

   <dd>Otherwise: zero or more <span>block-level elements</span>, or
   <span>inline-level content</span> (but not both).</dd>

   <dt>Element-specific attributes:</dt>
   <dd><code title="attr-mod-cite">cite</code></dd>
   <dd><code title="attr-mod-datetime">datetime</code></dd>

   <dt>DOM interface:</dt>
   <dd>Uses the <code>HTMLModElement</code> interface.</dd>

  </dl>

  <p>The <code>ins</code> element represents an addition to the
  document.</p>

  <p>The <code>ins</code> element must be used only where
  <span>block-level elements</span> or <span>strictly inline-level
  content</span> can be used.</p>

  <p>An <code>ins</code> element must only contain content that would
  still be conformant if all <code>ins</code> elements were replaced
  by their contents.</p>

  <div class="example">

   <p>The following would be syntactically legal:</p>

   <pre>&lt;aside>
 &lt;ins>
  &lt;p>...&lt;/p>
 &lt;/ins>
&lt;/aside></pre>

   <p>As would this:</p>

   <pre>&lt;aside>
 &lt;ins>
  &lt;em>...&lt;/em>
 &lt;/ins>
&lt;/aside></pre>

   <p>However, this last example would be illegal, as <code>em</code>
   and <code>p</code> cannot both be used inside an <code>aside</code>
   element at the same time:</p>

   <pre>&lt;aside>
 &lt;ins>
  &lt;p>...&lt;/p>
 &lt;/ins>
 &lt;ins>
  &lt;em>...&lt;/em>
 &lt;/ins>
&lt;/aside></pre>

  </div>

  <h4>The <dfn><code>del</code></dfn> element</h4>

  <p><span title="block-level elements">Block-level element</span>,
  and <span>strictly inline-level content</span>.</p>

  <dl class="element">
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>block-level elements</span> is expected.</dd>
   <dd>Where <span>strictly inline-level content</span> is allowed.</dd>
   <dt>Content model:</dt>
   <dd>When the element has a parent: same content model as the parent
   element.</dd>
   <dd>Otherwise: zero or more <span>block-level elements</span>, or
   <span>inline-level content</span> (but not both).</dd>
   <dt>Element-specific attributes:</dt>
   <dd><code title="attr-mod-cite">cite</code></dd>
   <dd><code title="attr-mod-datetime">datetime</code></dd>
   <dt>DOM interface:</dt>
   <dd>Uses the <code>HTMLModElement</code> interface.</dd>
  </dl>

  <p>The <code>del</code> element represents a removal from the
  document.</p>

  <p>The <code>del</code> element must only contain content that would
  be allowed inside the parent element (regardless of what the parent
  element actually contains).</p>

  <div class="example">

   <p>The following would be syntactically legal:</p>

   <pre>&lt;aside>
 &lt;del>
  &lt;p>...&lt;/p>
 &lt;/del>
 &lt;ins>
  &lt;em>...&lt;/em>
 &lt;/ins>
&lt;/aside></pre>

   <p>...even though the <code>p</code> and <code>em</code> elements
   would never be allowed side by side in the <code>aside</code>
   element. This is allowed because the <code>del</code> element
   represents content that was removed, and it is quite possible that
   an edit could cause an element to go from being an inline-level
   container to a block-level container, or vice-versa.</p>

  </div>

  <h4>Attributes common to <code>ins</code> and <code>del</code> elements</h4>

  <p>The <dfn title="attr-mod-cite"><code>cite</code></dfn> attribute
  may be used to specify a URI that explains the change. When that
  document is long, for instance the minutes of a meeting, authors are
  encouraged to include a fragment identifier pointing to the specific
  part of that document that discusses the change.</p>

  <p>If the <code title="attr-mod-cite">cite</code> attribute is
  present, it must be a URI (or IRI) that explains the change. User
  agents should allow users to follow such citation links.</p>

  <p>The <dfn title="attr-mod-datetime"><code>datetime</code></dfn>
  attribute may be used to specify the time and date of the change.</p>

  <p class="big-issue">This next bit should be extracted to the "common microsyntaxes" section</p>
  <p>If the <code title="attr-mod-datetime">datetime</code> attribute
  is present, it must have a value consisting of four digits
  representing the year, a literal hyphen, two digits representing the
  month, a literal hyphen, two digits representing the day, a literal
  T, two digits for the hour, a colon, two digits for the minutes,
  another colon, two digits for the seconds, optionally a decimal
  point followed by one or more digits for the fraction of a second,
  and finally either a literal Z, or, a plus sign or a minus sign
  followed by two digits for the hour offset, a colon, and two digits
  for the minute offset.</p>

  <p>In other words:
  <code><var title="">YYYY</var>-<var title="">MM</var>-<var title="">DD</var>T<var title="">hh</var>:<var title="">mm</var>:<var title="">ss</var>.<var title="">s</var><var title="">TZ</var></code></p>

  <p>Digits must be in the range 0-9 (U+0030 to U+0039), interpreted
  in base ten. The hyphen must be U+002D, the T must be U+0054, the
  colon must be U+003A, the Z must be U+005A, the plus must be U+002B,
  and the minus U+002D (same as the hyphen).</p>

  <p>To interpret this value, user agents must first check to see if
  the value matches the pattern described here. If it does, then the
  values must be extracted and interpreted as a date and time with a
  timezone offset, as per ISO 8601. <a
  href="#refsISO8601">[ISO8601]</a></p> <!-- XXX we shouldn't refer to
  ISO8601 for that, we should define it outselves -->

  <p>If the attribute value does not match the format, or, if the date
  or time given is not a valid date and time (e.g. because the month
  is out of range) then the user agent must ignore the attribute (the
  modification has no associated timestamp).</p>

  <p>The <code>ins</code> and <code>del</code> elements must implement
  the <code>HTMLModElement</code> interface:</p>

  <pre class="idl">interface <dfn>HTMLModElement</dfn> : <span>HTMLElement</span> {
           attribute DOMString <span title="dom-mod-cite">cite</span>;
           attribute DOMString <span title="dom-mod-datetime">datetime</span>;
};</pre>

  <p>The <dfn title="dom-mod-cite"><code>cite</code></dfn> and <dfn
  title="dom-mod-datetime"><code>datetime</code></dfn> DOM attributes
  must reflect the elements' content attributes of the same name.</p>


  <h3><dfn>Embedded content</dfn> <span title="TBW">[TBW]</span></h3>

  <!-- XXXX img (bitmap image) embed (plugin) iframe (document) object param (autodetect) map area (image maps) -->

  <!-- iframe: In a web browser, instantiates a browsing context. Otherwise, just has the child document. If no URI specified, use about:blank! -->

  <h4>The <dfn><code>img</code></dfn> element</h4>

  <p><span>Strictly inline-level content</span>.</p>

  <dl class="element">
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>strictly inline-level content</span> is allowed.</dd>
   <dt>Content model:</dt>
   <dd>Empty.</dd>
   <dt>Element-specific attributes:</dt>
   <dd><code title="attr-img-src">src</code> (required)</dd>
   <dd><code title="attr-img-alt">alt</code> (required)</dd>
   <dd><code title="attr-img-height">height</code></dd>
   <dd><code title="attr-img-width">width</code></dd>
   <dd><code title="attr-img-usemap">usemap</code></dd>
   <dd><code title="attr-img-ismap">ismap</code></dd>
   <dt>DOM interface:</dt>
   <dd>
<pre class="idl">interface <dfn>HTMLImageElement</dfn> : <span>HTMLElement</span> {
           attribute DOMString <span title="dom-img-src">src</span>;
           attribute DOMString <span title="dom-img-alt">alt</span>;
           attribute long <span title="dom-img-height">height</span>;
           attribute long <span title="dom-img-width">width</span>;
           attribute boolean <span title="dom-img-isMap">isMap</span>;
           attribute DOMString <span title="dom-img-useMap">useMap</span>;
};</pre>
   </dd>
  </dl>

  <p>The <code>img</code> element represents a piece of text with an
  alternate graphical representation. The text is given by the
  <code>alt</code> attribute, and the URI to the graphical
  representation of that text is given by the <code>src</code>
  attribute.</p>

  <p class="big-issue">This section is (obviously) incomplete.</p>

  <p class="big-issue" id="alt-tooltip">The <code>alt</code> attribute
  on images must not be shown in a tooltip in visual browsers.</p>
  <!-- maybe also mention this in the rendering section? -->


  <h3>Tabular data <span title="TBW">[TBW]</span></h3>
  <!-- XXXX tables -->

  <p class="big-issue">This section will contain definitions of the
  <code>table</code> element and so forth.</p>


  <h3>Forms <span title="TBW">[TBW]</span></h3>
  <!-- XXXX everything in WF2 -->

  <p class="big-issue">This section will contain definitions of the
  <code>form</code> element and so forth.</p>


  <h3>Scripting</h3>

  <h4>The <dfn><code>script</code></dfn> element</h4>

  <p><span title="block-level elements">Block-level element</span>,
  <span>strictly inline-level content</span>, and <span
  title="metadata elements">metadata element</span>.</p>

  <dl class="element">
   <dt>Contexts in which this element may be used:</dt>
   <dd>In a <code>head</code> element.</dd>
   <dd>Where <span>block-level elements</span> are expected.</dd>
   <dd>Where <span>inline-level content</span> is expected.</dd>
   <dt>Content model:</dt>
   <dd>If there is no <code title="attr-script-src">src</code>
   attribute, depends on the value of the <code
   title="attr-script-type">type</code> attribute.</dd>
   <dd>If there <em>is</em> a <code title="attr-script-src">src</code>
   attribute, the element must be empty.</dd>
   <dt>Element-specific attributes:</dt>
   <dd><code title="attr-script-src">src</code></dd>
   <dd><code title="attr-script-type">type</code></dd>
   <dd><code title="attr-script-defer">defer</code> (if the <code title="attr-script-src">src</code> attribute is present)</dd>
   <dd><code title="attr-script-async">async</code> (if the <code title="attr-script-src">src</code> attribute is present)</dd>
   <dt>DOM interface:</dt>
   <dd>
<pre class="idl">interface <dfn>HTMLScriptElement</dfn> : <span>HTMLElement</span> {
           attribute DOMString <code title="dom-script-text">text</code>;
           attribute DOMString <code title="dom-script-src">src</code>;
           attribute DOMString <code title="dom-script-type">type</code>;
           attribute boolean <code title="dom-script-defer">defer</code>;
           attribute boolean <code title="dom-script-async">async</code>;
};</pre>
   </dd>
  </dl>

  <p>The <code>script</code> element allows authors to include dynamic
  script in their documents.</p>

  <p>When the <dfn title="attr-script-src"><code>src</code></dfn>
  attribute is set, the <code>script</code> element refers to an
  external file. The value of the attribute must be a URI.</p>

  <p>If the <code title="attr-script-src">src</code> attribute is not
  set, then the script is given by the contents of the element.</p>

  <p>The language of the script is given by the <dfn
  title="attr-script-type"><code>type</code></dfn> attribute. The
  value must be a valid MIME type, optionally with parameters. <a
  href="#refsRFC2046">[RFC2046]</a></p>

  <p class="big-issue">Define defer/async attributes for authors.</p>

  <p>Changing the <code title="attr-script-src">src</code>, <code
  title="attr-script-type">type</code>, <code
  title="attr-script-defer">defer</code> and <code
  title="attr-script-async">async</code> attributes dynamically has no
  direct effect; these attribute are only used at specific times
  described below (namely, when the element is inserted into the
  document).</p>

  <p><code>script</code> elements have an associated piece of
  metadata, a flag indicating whether or not the script block has been
  <dfn>"already executed"</dfn>. Initially, <code>script</code>
  elements must have this flag unset (script blocks, when created, are
  not "already executed"). When a <code>script</code> element is
  cloned, the "already executed" flag, if set, must be propagated to
  the clone when it is created.</p>

  <p><dfn title="running a script">When script blocks are run</dfn>:
  When a <code>script</code> element whose <span>"already
  executed"</span> flag is not set is <span>inserted into a
  document</span>, the user agent must act as follows:</p>

  <ol>

   <li>

    <p>The user agent must set the element's <span>"already
    executed"</span> flag.</p>

   </li>

   <li>

    <p class="big-issue">How to handle the <code title="">type</code>
    and <code title="">language</code> attributes should be defined
    here, probably with reference to the next section.</p>

   </li>

   <li>

    <p>If the element has a <code title="attr-script-src">src</code>
    attribute, then a load for the specified content must be
    started.</p>

    <p class="note">Later, once the load has completed, the user agent
    will have to complete <span title="when a script completes
    loading">the steps described below</span>.</p>

    <p>For performance reasons, user agents may start loading the
    script as soon as the attribute is set, instead, in the hope that
    the element will be inserted into the document. Either way, once
    the element is inserted into the document, the load must have
    started. If the UA performs such prefetching, but the element is
    never inserted in the document, or the <code
    title="attr-script-src">src</code> attribute is dynamically
    changed, then the user agent will not execute the script, and the
    load will have been effectively wasted.</p>

   </li>

   <li>

    <p>Then, if the document is still being parsed, and the element
    has a <code title="attr-script-defer">defer</code> attribute, then
    the element must be added to the end of the <span>list of scripts
    that will execute when the document has finished
    parsing</span>. Stop going through these steps; start with <span
    title="when a script completes loading">the next set of
    steps</span> when the script is ready.</p>

    <p class="big-issue">This isn't compatible with IE for inline
    deferred scripts, but then what IE does is pretty hard to pin down
    exactly. Do we want to keep this like it is? Be more compatible?</p>
    <!--XXX  
    http://www.websiteoptimization.com/speed/tweak/defer/test/
    internal deferred scripts execute before any external scripts execute, or before the LOAD if there are none
    external deferred scripts execute before the LOAD
    -->

    <p>Otherwise, if the element has a <code
    title="attr-script-async">async</code> attribute, then the element
    must be added to the end of the <span>list of scripts that will
    execute asynchronously</span>. Then, stop going through these
    steps &mdash; if the element has no <code
    title="attr-script-src">src</code> attribute, then jump straight
    to <span title="when a script completes loading">the next set of
    steps</span>, otherwise, start with <span title="when a script
    completes loading">the next set of steps</span> when the script is
    ready.</p>

    <p>Otherwise, if the document has finished being parsed and the
    element has a <code title="attr-script-src">src</code> attribute,
    the element must be added to the end of the <span>list of scripts
    that will execute soon</span>. Stop going through these steps;
    start with <span title="when a script completes loading">the next
    set of steps</span> when the script is ready.</p>

    <p>Otherwise, continue to the next step.</p>

   </li>

   <li>

    <p>If the element has a <code title="attr-script-src">src</code>
    attribute, then the user agent must <span>pause</span> until the
    script has finished loading.</p>

   </li>

   <li>

    <p>Finally, the user agent must <span title="executing a script
    block">execute the script</span>.</p>

   </li>

  </ol>

  <p><dfn title="when a script completes loading">When a script
  completes loading</dfn>: Once a script whose element was added to
  one of the three lists above has completely loaded, the UA must
  behave as follows:</p>

  <dl class="switch">

   <dt>If the script's element was added to the <dfn>list of scripts
   that will execute when the document has finished parsing</dfn>:</dt>

   <dd>

    <ol>

     <li>

      <p>If the script is not the first script in the list, or, if the
      document has not yet finished loading, then do nothing yet. Stop
      going through these steps.</p>

     </li>

     <li>

      <p>Otherwise, <span title="executing a script block">execute the
      script</span> (the script associated with the first element in
      the list).</p>

     </li>

     <li>

      <p>Remove the script from the list (i.e. shift out the first
      entry in the list).</p>

     </li>

     <li>

      <p>If there are any more scripts in the list, and if the script
      associated with the element that is now the first in the list is
      already loaded, then jump back to step two to execute it.</p>

     </li>

    </ol>

   </dd>

   <dt>If the script's element was added to the <dfn>list of scripts
   that will execute asynchronously</dfn>:</dt>

   <dd>

    <ol>

     <li>

      <p>If the script is not the first script in the list, then do
      nothing yet. Stop going through these steps.</p>

     </li>

     <li>

      <p><span title="executing a script block">Execute the
      script</span> (the script associated with the first element in
      the list).</p>

     </li>

     <li>

      <p>Remove the script from the list (i.e. shift out the first
      entry in the list).</p>

     </li>

     <li>

      <p>If there are any more scripts in the list, and the element
      now at the head of the list had no <code
      title="attr-script-src">src</code> attribute when it was added
      to the list, or had one, but its associated script has finished
      loading, then jump back to step two to execute the script
      associated with this element.</p>

     </li>

    </ol>

   </dd>

   <dt>If the script's element was added to the <dfn>list of scripts
   that will execute soon</dfn>:</dt>

   <dd><span title="executing a script block">Execute the
   script</span>. Remove the element with which script is associated
   from the list.</dd>

  </dl>

  <p><dfn title="executing a script block">How to execute a script
  block</dfn>: If the load resulted in an error (for example a DNS
  error, or an HTTP 404 error), then executing the script consists of
  doing nothing. If the load was successful, then the behaviour
  depends on the scripting language. For scripting languages that
  consist of pure text, user agents must use the value of the DOM
  <code title="dom-script-text">text</code> attribute (defined below)
  as the script to execute. For XML-based scripting languages, user
  agents must use all the child nodes of the <code>script</code>
  element as the script.</p>

  <p>In any case, the user agent must execute the script according to
  the semantics of the relevant language specification, as determined
  by the <code title="attr-script-type">type</code> and <code
  title="attr-script-language">language</code> attributes on the
  <code>script</code> element when the element was inserted into the
  document, as described above.</p>

  <p class="note">The element's attributes' values might have changed
  between when the element was inserted into the document and when the
  script has finished loading, as may its other attributes; similarly,
  the element itself might have been taken back out of the DOM, or had
  other changes made. These changes do not in any way affect the above
  steps; only the values of the attributes at the time the
  <code>script</code> element is first inserted into the document
  matter.</p>

  <p class="big-issue">Do we really want this attribute to be called
  async=""? Anyone have a better name?</p>

  <p>The DOM attributes <dfn
  title="dom-script-src"><code>src</code></dfn>, <dfn
  title="dom-script-type"><code>type</code></dfn>, <dfn
  title="dom-script-defer"><code>defer</code></dfn>, <dfn
  title="dom-script-async"><code>async</code></dfn>, each
  <span>reflect</span> the respective content attributes of the same
  name.</p>

  <p>The DOM attribute <dfn
  title="dom-script-text"><code>text</code></dfn> must return a
  concatenation of the contents of all the text nodes and CDATA nodes
  that are direct children of the <code>script</code> element
  (ignoring any other nodes such as comments or elements), in tree
  order. On setting, it must act the same way as the
  <code>textContent</code> DOM attribute.</p>

  <p class="big-issue"><!-- XXX --> need to say, in the part of the
  spec that fires the onload event, that the list above is
  triggered.</p>


  <h5>Script languages</h5>

  <p>The following lists some MIME types and the languages to which
  they refer:</p>

  <dl>

   <dt><code>text/javascript</code></dt>
   <dd>ECMAScript. <a href="#refsECMA262">[ECMA262]</a></dd>

   <dt><code>text/javascript;e4x=1</code></dt>
   <dd>ECMAScript with ECMAScript for XML. <a href="#refsECMA357">[ECMA357]</a></dd>

  </dl>

  <p>User agents may support other MIME types and other languages.</p>

  <p>When examining types to determine if they support the language,
  user agents must not ignore unknown MIME parameters &mdash; types
  with unknown parameters must be assumed to be unsupported.</p>



  <h4>The <dfn><code>noscript</code></dfn> element <span title="TBW">[TBW]</span></h4>
  <!-- XXXX noscript -->

  <p class="big-issue">The <code>noscript</code> element needs to be
  defined too.</p>

  <!-- XXX frame, frameset, noframes, etc -->

  <h3>Other new elements <span title="TBW">[TBW]</span></h3>

  <p class="big-issue"> <!-- XXXX --> all the new things in WA1: menu,
  calendar, card, canvas, switch, datagrid, datatree, switch, etc </p>


  <h3>Notes (draft sections to be moved elsewhere) <span title="TBW">[TBW]</span></h3>

  <h4>Classes</h4> <!-- class names -->

  <p class="big-issue">This section may somehow introduce some
  predefined classes with actual semantic meanings; possibly by
  defining a <span>profile</span>.</p>

  <!--
   issue
   example
   note
   warning
  -->

  <h4>Link types</h4>

  <p class="big-issue">This section might at some future point list a
  small set of link <code>rel</code>ationship types and more exactly
  define their semantics than HTML4. This section (or indeed this
  specification in general) is unlikely to specify anything related to
  the <code>profile</code> attribute and how to extend the link types
  in HTML. Work in this area is currently being done by <a
  href="http://gmpg.org/">GMPG</a> and <a
  href="http://protogenius.com/rel-schemas/draft-scheid-rel-schemas-00.htm">others</a>.</p>

  <!--
  issues for rel="", etc:
   rel="alternate" with hreflang=""
   rel="alternate" with type=""
   rel="alternate" with media=""
   rel="alternate stylesheet"
   rel="up" vs rel="up up" vs rel="up up up top"
   rel="feed" vs rel="alternate" type="application/rss+xml"
   rel="icon"
   rel="script"
   rel="related" // see also
   rel="prefetch"
   rel="help" (Charles McCathieNevile): alternative to help="". give algo for nearest con.-sen. help
    `-> "Nearness" seems in general like a really bad way to guess where the 
      > help is. Do you mean closest in the markup, or in the laid-out
      > rendering? If the link were required to be inside a label in order to be
      > associated with a form control, that might make sense though.
   rev=""
   rel="nofollow" - http://www.google.com/googleblog/2005/01/preventing-comment-spam.html
       Refers to a resource that may be related to the linking
       document, but is not endorsed by the author. This should
       not be counted as a negative rating for the resource,
       however. - http://www.w3.org/mid/41F0E7FA.4060301@iinet.net.au
     - http://radio.weblogs.com/0001011/2005/01/31.html#a9301 (scoble on why it isn't bad)
   which relationship combinations are allowed
   what multiple values might mean (multiple rel="top")
   removal of redundancy
   http://www.euronet.nl/~tekelenb/WWW/LINK/
   http://shift.freezope.org/konq_rellinks/development_html
   http://hixie.ch/specs/html/link/001
   http://hixie.ch/specs/html/link/002
   http://www.hixie.ch/specs/html/metadata

   <nav>
    <p>
     <a href="/" rel="top up up up">Main</a> &gt;
     <a href="/products/" rel="up up">Products</a> &gt;
     <a href="/products/dishwashers" rel="up">Dishwashers</a> &gt;
     Second hand
    </p>
   </nav>

mpt says:
> "As with <a> elements, when <link> elements that use these relationships    
> are present, UAs should render them. As with <a> elements, when <link>
> elements that use these relationships do not exist, UAs should not
> render them. UAs should not make <link> rendering any easier to hide
> than <a> rendering."

   rel="bookmark" gives permalink of nearest sectioning element
   <dd>The first <code>a</code> element with a <code>rel</code>
   attribute having as one of its values the keyword
   <code>bookmark</code> in a depth first search of the
   <code>article</code> element is the article's permalink.

disallow: http://microformats.org/wiki/rel-enclosure

  -->


  <h4>Document sections</h4>

  <p>User agents must support all of the common attributes and event
  handlers on the <code>section</code> element, as well as the
  <code>active</code> attribute (for use with <span>mutually exclusive
  sections</span>).</p>

  <p>In CSS-aware user agents, the default presentation of this
  element should be achieved by including the following rules, or
  their equivalent, in the UA's user agent style sheet:</p>

  <pre>@namespace xh url(http://www.w3.org/1999/xhtml);
xh|section { display: block; margin: 1em 0; }</pre>

  <h4>Section headers</h4>

  <p>For <code>h1</code> elements, CSS-aware visual user agents should
  derive the size of the header from the level of <code>section</code>
  nesting. This effect should be achieved by including the following
  rules, or their equivalent, in the UA's user agent style sheet:</p>

  <pre>@namespace xh url(http://www.w3.org/1999/xhtml);
xh|section xh|h1 { /* same styles as h2 */ }
xh|section xh|section xh|h1 { /* same styles as h4 */ }
xh|section xh|section xh|section xh|h1 { /* same styles as h4 */ }
xh|section xh|section xh|section xh|section xh|h1 { /* same styles as h5 */ }
xh|section xh|section xh|section xh|section xh|section xh|h1 { /* same styles as h6 */ }</pre>

  <p>Authors should use <code>h1</code> elements to denote headers in
  sections. Authors may instead use <code>h2</code> ...
  <code>h6</code> elements, for backwards compatibility with user
  agents that do not support <code>section</code> elements.</p>


  <h4><dfn>Section groups</dfn> (tabs)</h4>

  <p class="issue">This section should probably die.</p>

  <p>A group of related, order-neutral sections may be denoted using
  the <dfn><code>tabbox</code></dfn> element. The default presentation
  in a visual media (as described below) is to render each section as
  a separate tab in a tab box, allowing the user to switch between
  them. Sections can also be represented by links to other documents,
  instead of them being included literally in the markup.</p>

  <p>The <code>tabbox</code> element is a block-level element that
  should only contain <code>section</code>, <code>fieldset</code>, and
  <code>a</code> elements.</p>

  <p>Authors should only use <code>a</code> elements that cause the
  user agent to change the active page to a page with a similar
  structure. Other behaviours are likely to be highly confusing to
  users.</p>

  <p>Each <code>section</code>, <code>fieldset</code>, and
  <code>a</code> child can have a title. If the element is a
  <code>section</code> element, then the title is taken from the <code
  title="attr-title">title</code> attribute of the element, if
  specified, or, if absent, from the <code>textContent</code> DOM
  attribute of the first element child of the <code>section</code>
  element, if that is an <code>h1</code> ... <code>h6</code> element.
  (If it is taken from a header child, then that child is hidden from
  the rendering.) If the element is a <code>fieldset</code> element,
  then the title is taken from the the <code>textContent</code> DOM
  attribute of the first element child of the <code>fieldset</code>
  element, if that is an <code>legend</code> element. If the element
  is an <code>a</code> element, then the title is taken from the
  <code>textContent</code> DOM attribute of the element. (Titles may
  be the empty string.)</p>
  
  <p>The titles obtained in this way, and the <code>section</code>,
  <code>fieldset</code>, and <code>a</code> elements from which they
  were derived, represent the list of sections in the
  <code>tabbox</code>. This list is <em>live</em>, in that dynamic
  changes to the DOM immediately affect the representation of the
  <code>tabbox</code> element.</p>

  <p>All the other child nodes of the <code>tabbox</code> shall be
  ignored for the purposes of rendering the <code>tabbox</code>.
  Authors may use this in order to obtain acceptable renderings even
  in UAs that do not support <code>tabbox</code>.</p>

  <p>In CSS-aware user agents, the default presentation of the
  <code>tabbox</code> element should, in part, be achieved by
  including the following rules, or their equivalent, in the UA's user
  agent style sheet:</p>

  <pre>@namespace xh url(http://www.w3.org/1999/xhtml);
xh|tabbox { display: block; }
xh|tabbox > xh|section:not([title]) > xh|h1:first-child,
xh|tabbox > xh|section:not([title]) > xh|h2:first-child,
xh|tabbox > xh|section:not([title]) > xh|h3:first-child,
xh|tabbox > xh|section:not([title]) > xh|h4:first-child,
xh|tabbox > xh|section:not([title]) > xh|h5:first-child,
xh|tabbox > xh|section:not([title]) > xh|h6:first-child,
xh|tabbox > xh|fieldset > xh|legend:first-child { display: none; }</pre>

  <p>These rules do not come even close to fully describing the full
  behaviour of a <code>tabbox</code> element, however.</p>

  <p>The behaviour of the <code>tabbox</code> should be to provide
  quick access to any of the children of the <code>tabbox</code> that
  have a title (as described above). UAs may keep track of which
  section is the selected section, and report this information to the
  user.</p>

  <p>When the user specifies a section to access, the relevant element
  must have <span title="fire a click event">a <code
  title="">click</code> event dispatched to it</span>, whose default
  action is to further dispatch a <code>DOMActivate</code> event to
  the element.</p> <!-- XXX need to define the dispatching of
  DOMActivate in the same way we define the dispatching of click -->

  <p>For <code>section</code> and <code>fieldset</code> elements, the
  default action of <code>DOMActivate</code> events is to display, or
  jump to, the relevant section. For <code>a</code> elements, the
  default action is the normal default action for <code>a</code>
  elements (activating the link, command, or whatever). In addition to
  these default actions, when a child of a <code>tabbox</code> is
  accessed, it becomes the selected section.</p>

  <p>If the <code>DOMActivate</code> event is canceled (or if the
  <code title="event-click">click</code> event is canceled, causing
  the <code>DOMActivate</code> event to never be fired in the first
  place), then the selected section does not change.</p>

  <p>If an <code>a</code> element has a <code
  title="command-attribute">command</code> attribute, it can be
  disabled. In such cases, the UA should not allow the user to select
  that section.</p>

  <p>The initially selected section shall be the first element from
  the <code>tabbox</code> element's child list that is:</p>
  <ol>
   <li>an <code>a</code> element whose <code>href</code> attribute
   matches the URI of the current document, if there is one,</li>
   <li>otherwise, the first <code>a</code> element whose
   <code>href</code> attribute matches the URI given by the
   <code>href</code> attribute of the first <code>link</code> element
   in the document that has a <code>rel</code> attribute whose value
   contains the keyword <code>up</code> (treating that attribute as a
   space-separated list), if there is one,</li>
   <li>otherwise, the first <code>section</code> or
   <code>fieldset</code> element that has a title, if there is one.</li>
  </ol>
  <p>If no elements match, then initially no section shall be
  selected.</p>

  <p>In the above algorithm, URI comparisons should be done after
  canonicalisation, and should ignore fragment identifiers unless the
  <code>a</code> element in question has one.</p>

  <p>In non-interactive or non-spatial media (such as in print, on
  braille systems, or with speech synthesis) the UA may automatically
  switch the selected section to the next section once the selected
  section has been rendered.</p>

  <p>Which section is selected if the element representing the
  currently selected section is dynamically removed from the document
  is up to the UA.</p>

  <p>In interactive visual media, the <code>tabbox</code> element
  should be rendered as a tab box, with the section titles listed as
  the tabs, and the selected section (if it is a <code>section</code>
  or <code>fieldset</code> element) displayed in the tab panel area.
  When the selected section is an <code>a</code> element, the tab
  panel area should be empty.</p>

  <p>This specification does not describe how CSS properties apply to
  <code>tabbox</code> elements when the UA uses this rendering, but
  the children rendered in the tab panel area must be styled using
  CSS, as if the tab panel area defined a new containing block and new
  block formatting context.</p>

  <p>User agents must support all of the common attributes and event
  handlers on the <code>tabbox</code> element.</p>

  <div class="example">

   <p>Here is an example of a <code>tabbox</code> used to allow the
   user to read three different parts of the document:</p>

   <pre>&lt;tabbox&gt;
 &lt;section&gt;
  &lt;h2&gt;About&lt;/h2&gt;
  &lt;p&gt;&lt;img src="logo" alt=""&gt;&lt;/p&gt;
  &lt;p&gt;The Application.&lt;/p&gt;
  &lt;p&gt;&copy; copyright 2004 by The First Team.&lt;/p&gt;
 &lt;/section&gt;
 &lt;section&gt;
  &lt;h2&gt;Credits&lt;/h2&gt;
  &lt;ul&gt;
   &lt;li&gt;Jack O'Neill&lt;/li&gt;
   &lt;li&gt;Samantha Carter&lt;/li&gt;
   &lt;li&gt;Daniel Jackson&lt;/li&gt;
   &lt;li&gt;Teal'c&lt;/li&gt;
   &lt;li&gt;Jonas Quinn&lt;/li&gt;
  &lt;/ul&gt;
 &lt;/section&gt;
&lt;/tabbox&gt;</pre>

   <p>Next, an example of a form that has been split into little
   groups of controls:</p>

   <pre>&lt;tabbox&gt;
 &lt;fieldset&gt;
  &lt;legend&gt;Identity&lt;/legend&gt;
  &lt;p&gt;&lt;label&gt;First name: &lt;input name="fn"&gt;&lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt;Last name: &lt;input name="ln"&gt;&lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt;Date of Birth: &lt;input name="dob" type="date"&gt;&lt;/label&gt;&lt;/p&gt;
 &lt;/fieldset&gt;
 &lt;fieldset&gt;
  &lt;legend&gt;Food&lt;/legend&gt;
  &lt;p&gt;&lt;label&gt;Favourite appetizer: &lt;input name="fa"&gt;&lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt;Favourite meal: &lt;input name="fm"&gt;&lt;/label&gt;&lt;/p&gt;
  &lt;p&gt;&lt;label&gt;Favourite desert: &lt;input name="fd"&gt;&lt;/label&gt;&lt;/p&gt;
 &lt;/fieldset&gt;
&lt;/tabbox&gt;</pre>

   <p>Finally, an example of a page using a <code>tabbox</code> to
   point to sections outside the document. Note the use of fallback
   content (elements and text in the <code>tabbox</code> element that
   are not <code>fieldset</code>, <code>section</code>, or
   <code>a</code> elements) for backwards compatibility.</p>

   <pre>&lt;div&gt;
 &lt;tabbox&gt;
  &lt;strong&gt;Navigation:&lt;/strong&gt;
  &lt;a href="/"&gt;&lt;span&gt;Home&lt;/span&gt;&lt;/a&gt;,
  &lt;a href="/news/"&gt;&lt;span&gt;News&lt;/span&gt;&lt;/a&gt;,
  &lt;a href="/games/"&gt;&lt;span&gt;Games&lt;/span&gt;&lt;/a&gt;,
  &lt;a href="/help/"&gt;&lt;span&gt;Help&lt;/span&gt;&lt;/a&gt;,
  &lt;a href="/contact/"&gt;&lt;span&gt;Contact&lt;/span&gt;&lt;/a&gt;.
 &lt;/tabbox&gt;
&lt;/div&gt;</pre>

   <p>This would be semantically equivalent to the following:</p>

   <pre>&lt;tabbox&gt;
 &lt;section&gt;&lt;h2&gt;Home&lt;/h2&gt; <em>...content...</em> &lt;/section&gt;
 &lt;section&gt;&lt;h2&gt;News&lt;/h2&gt; <em>...content...</em> &lt;/section&gt;
 &lt;section&gt;&lt;h2&gt;Games&lt;/h2&gt; <em>...content...</em> &lt;/section&gt;
 &lt;section&gt;&lt;h2&gt;Help&lt;/h2&gt; <em>...content...</em> &lt;/section&gt;
 &lt;section&gt;&lt;h2&gt;Contact&lt;/h2&gt; <em>...content...</em> &lt;/section&gt;
&lt;/tabbox&gt;</pre>

  </div>

  <h4><dfn>Mutually exclusive sections</dfn></h4>

  <p>The <dfn><code>switch</code></dfn> element represents a block of
  mutually exclusive sections.</p>

  <p class="example">For example, in an application for an online
  mutiplayer game, there could be four mutually exclusive sections:
  one for the login page, one for the network status page displayed
  while the user is logging in, one for a "lobby" where players get
  together to organise a game, and one for the actual game. The
  different sections are the various states that the application can
  reach.</p>

  <p>The <code>switch</code> element must contain only <span>block-level
  elements</span>. User agents must support all of the common attributes and
  event handlers on the <code>switch</code> element.</p>

  <p>All child elements of a <code>switch</code> element shall be
  hidden except those that have <code>active</code> attributes (or,
  for non-XHTML elements, <code>active</code> attributes in the XHTML
  namespace).</p>

  <p>In CSS-aware user agents, the default presentation of this
  element should be achieved by including the following rules, or
  their equivalent, in the UA's user agent style sheet:</p>

  <pre>@namespace xh url(http://www.w3.org/1999/xhtml);
xh|switch { display: block; }
xh|switch xh|*:not([active]) { display: none; }
xh|switch *:not([xh|active]) { display: none; }</pre>

  <h4>Using <code>switch</code> and <code>section</code></h4>

  <pre class="idl">interface <dfn>HTMLSwitchElement</dfn> : <span>HTMLElement</span> {
  readonly attribute Element           activeElement;
  void setActive(in Element element);
};

interface <dfn>HTMLSectionElement</dfn> : <span>HTMLElement</span> {
  readonly attribute boolean           active;
  void setActive();
};</pre>

  <p>...</p>

  <p>When an element is added to a <code>switch</code> element as a
  child (whether during parsing, or later), the element is examined.
  If the element has an <code>active</code> attribute (or, if it is a
  non-XHTML element, if it has an <code>active</code> attribute in the
  XHTML namespace), or, if the <code>switch</code> element's
  <code>activeElement</code> DOM attribute is null, then the
  <code>switch</code> element's <code>setActive</code> method is
  called with that element as the argument. This causes the element to
  be made the active element for the switch, and causes any other
  elements to be deactivated if needed.</p>

  <p>A side-effect of this definition is that the first element in a
  <code>switch</code> element is the default element if none have been
  explicitly marked as active.</p>


  <h3><span title="SCS">[SCS]</span> Calendars: event data <span title="TBW">[TBW]</span></h3>

  <p>The <dfn><code>calendar</code></dfn> element may be used for
  indicating hCalendar fragments that should be processed and
  rendered, e.g. as inline calendars.</p>

  <p>The <code>calendar</code> element is a block-level element whose
  content model is any <span>block-level elements</span>. User agents must support
  all the common attributes and event handlers on
  <code>calendar</code> elements.</p>

  <p>Web browsers should render the <code>calendar</code> element by
  replacing the element by a representation of the calendar data
  contained within it.</p>

  <h4>Intepreting calendar data</h4>

  <p>UAs must process the contents of <code>calendar</code> data as
  described in the hCalendar specification. <a
  href="#refsHCALENDAR">[HCALENDAR]</a></p>

  <!-- HCALENDAR http://developers.technorati.com/wiki/hCalendar -->

  <h4>Rendering examples</h4>

  <div class="example">

   <p class="issue">These examples will need updating to track
   hCalendar as it evolves.</p>

   <p>The following fragment:</p>

   <pre>&lt;calendar&gt;
 &lt;div class="vcalendar"&gt;
  &lt;span class="prodid"&gt;-//hCalendar//EN&lt;/span&gt;
  &lt;span class="version"&gt;2.0&lt;/span&gt; 
  &lt;p class="vevent"&gt;
   &lt;a href="http://www.web2con.com/"&gt;
    &lt;span class="dtstart"&gt;20041005&lt;/span&gt;-
    &lt;span class="dtend"&gt;20041007&lt;/span&gt; 
    &lt;span class="summary"&gt;Web 2.0 Conference&lt;/span&gt;
   &lt;/a&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/calendar&gt;</pre>

   <p>...might render as the following:</p>

   <p><img src="sample-calendar.png" alt="A calendar control with the 5th of October being a link."></p>

  </div>

  <h3><span title="SCS">[SCS]</span> Business cards: personal data <span title="TBW">[TBW]</span></h3>

  <p>The <dfn><code>card</code></dfn> element may be used for
  indicating hCard fragments that should be processed and rendered,
  e.g. as inline business cards.</p>

  <p>The <code>card</code> element is a block-level element whose
  content model is any <span>block-level elements</span>. User agents must support
  all the common attributes and event handlers on <code>card</code>
  elements.</p>

  <p>Web browsers should render the <code>card</code> element by
  replacing the element by a representation of the personal data
  contained within it.</p>

  <h4>Intepreting card data</h4>

  <p>UAs must process the contents of <code>card</code> data as
  described in the hCard specification. <a
  href="#refsHCARD">[HCARD]</a></p>

  <!-- HCARD http://developers.technorati.com/wiki/hCard -->

  <h4>Rendering examples</h4>

  <div class="example">

   <p class="issue">These examples will need updating to track hCard
   as it evolves.</p>

   <p>The following fragment:</p>

   <pre>&lt;card&gt;
 &lt;p class="vcard"&gt; 
  &lt;a class="fn n" href="http://tantek.com/"&gt;
   &lt;span class="Given-Name"&gt;Tantek&lt;/span&gt; 
   &lt;span class="Family-Name"&gt;&Ccedil;elik&lt;/span&gt;
  &lt;/a&gt;
 &lt;/p&gt;
&lt;/card&gt;</pre>

   <p>...might render as the following:</p>

   <p><img src="sample-card.png" alt="A business card with contact information for Tantek &Ccedil;elik."></p>

  </div>




  <h3>Interactive elements</h3>



  <h4>Disclosure widgets: the <dfn><code>details</code></dfn> element <span title="TBW">[TBW]</span></h4>

  <p><span title="interactive elements">Interactive</span>,
     <span title="block-level elements">block-level element</span>.</p>

  <dl class="element">
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>block-level elements</span> are expected.</dd>
   <dt>Content model:</dt>
   <dd>One <code>legend</code> element followed by either zero or more
   <span>block-level elements</span> or <span>inline-level
   content</span> (but not both).</dd>
   <dt>Element-specific attributes:</dt>
   <dd><code title="attr-details-open">open</code></dd>
   <dt>DOM interface:</dt>
   <dd>
<pre class="idl">interface <dfn>HTMLDetailsElement</dfn> : <span>HTMLElement</span> {
  attribute boolean <span title="dom-details-open">open</span>;
};</pre>
   </dd>
  </dl>

  <p>The <code>details</code> element represents additional
  information or controls which the user can obtain on demand.</p>

  <p>The first element child of a <code>details</code> element, if it
  is a <code>legend</code> element, represents the summary of the
  details.</p>

  <p>If the first element is not a <code>legend</code> element, the
  UA should provide its own legend (e.g. "Details").</p>

  <p>The <dfn title="attr-details-open"><code>open</code></dfn>
  content attribute, if present, indicates that the details should be
  shown to the user. The default, which applies if the attribute is
  absent, is that the details not be shown. If the attribute is
  present, its value must be the literal value <code
  title="">open</code>.</p>

  <p>If the attribute is removed, then the details should be
  hidden. If the attribute is added, the details should be shown.</p>

  <p>The user should be able to request that the details be shown or
  hidden.</p>

  <p>The <dfn title="dom-details-open"><code>open</code></dfn>
  attribute must <span>reflect</span> the <code
  title="attr-details-open">open</code> content attribute.</p>

<!--
http://mail.gnome.org/archives/usability/2006-June/msg00015.html
http://developer.apple.com/documentation/UserExperience/Conceptual/OSXHIGuidelines/XHIGControls/chapter_18_section_7.html
https://www.google.com/base/settings
-->

  <p class="big-issue">Rendering will be described in the Rendering
  section in due course. Basically CSS :open and :closed match the
  element, it's a block-level element by default, and when it matches
  :closed it renders as if it had an XBL binding attached to it whose
  template was just <code>&lt;template>&#x25B6;&lt;content
  includes="legend:first-child"&gt;Details&lt;/content>&lt;/template></code>,
  and when it's :open it acts as if it had an XBL binding attached to
  it whose template was just <code>&lt;template>&#x25BC;&lt;content
  includes="legend:first-child"&gt;Details&lt;/content>&lt;content/>&lt;/template></code>
  or some such.</p>

  <p class="big-issue">Clicking the legend would make it open/close
  (and would change the content attribute). Question: Do we want the
  content attribute to reflect the actual state like this? I think we
  do, the DOM not reflecting state has been a pain in the neck
  before. But is it semantically ok?</p>


  <h4><span title="SCS">[SCS]</span> The <dfn><code>datagrid</code></dfn> element</h4>

  <p class="big-issue">It has been suggested that instead of this
  flattened-row API, we should have all the "row" arguments in the API
  below be arrays of integers, and instead of getParentRow(), we would
  have getRowCount() get the number of children that a row had. A
  future version of this specification will make this change, along
  with adding a way to detect when a row/selection has been deleted,
  activated, etc.</p>

  <p class="big-issue">This element is defined as interactive, which
  means it can't contain other interactive elements, despite the fact
  that we expect it to work with other interactive elements e.g.
  checkboxes and input fields. It should be called something like a
  Leaf Interactive Element or something, which counts for ancestors
  looking in and not descendants looking out.</p>

  <p><span title="interactive elements">Interactive</span>,
  <span title="block-level elements">block-level element</span>.</p>

  <dl class="element">
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>block-level elements</span> are expected, if
   there are no ancestor <span>interactive elements</span>.</dd>
   <dt>Content model:</dt>
   <dd>Zero or more <span>block-level elements</span>.</dd>
   <dt>Element-specific attributes:</dt>
   <dd><code title="attr-datagrid-multiple">multiple</code></dd>
   <dd><code title="attr-datagrid-disabled">disabled</code></dd>
   <dt>DOM interface:</dt>
   <dd>
<pre class="idl">interface <dfn>HTMLDataGridElement</dfn> : <span>HTMLElement</span> {
        attribute <span>DataGridDataProvider</span> <span title="dom-datagrid-data">data</span>;
        attribute <span>SelectedRowRanges</span> <span title="dom-datagrid-selection">selection</span>;
        attribute boolean <span title="dom-datagrid-multiple">multiple</span>;
        attribute boolean <span title="dom-datagrid-disabled">disabled</span>;
  void <span title="dom-datagrid-updateEverything">updateEverything</span>();
  void <span title="dom-datagrid-updateRowsChanged">updateRowsChanged</span>(in long row, in long count);
  void <span title="dom-datagrid-updateRowsInserted">updateRowsInserted</span>(in long row, in long count);
  void <span title="dom-datagrid-updateRowsRemoved">updateRowsRemoved</span>(in long row, in long count);
  void <span title="dom-datagrid-updateRowChanged">updateRowChanged</span>(in long row);
  void <span title="dom-datagrid-updateColumnChanged">updateColumnChanged</span>(in long column);
  void <span title="dom-datagrid-updateCellChanged">updateCellChanged</span>(in long row, in long column);
};</pre>
   </dd>
  </dl>

  <p>The <code>datagrid</code> element represents an interactive
  representation of tree, list, or tabular data.</p>

  <p>The data being presented can come either from the content, as
  elements given as children of the <code>datagrid</code> element, or
  from a scripted data provider given by the <code
  title="dom-datagrid-data">data</code> DOM attribute.</p>

  <p>The <code title="attr-datagrid-multiple">multiple</code>
  attribute, if present, must be either empty or have the literal
  value <code title="">multiple</code>. Similarly, the <code
  title="attr-datagrid-disabled">disabled</code> attribute, if
  present, must be either empty or have the literal value <code
  title="">disabled</code>. (The actual values do not have any effect
  on how these attributes are processed, only the presence or absence
  of the attributes is important.)</p>

  <p>The <dfn
  title="dom-datagrid-multiple"><code>multiple</code></dfn> and <dfn
  title="dom-datagrid-disabled"><code>disabled</code></dfn> DOM
  attributes <span>reflect</span> the <code
  title="attr-datagrid-multiple">multiple</code> and <code
  title="attr-datagrid-disabled">disabled</code> content attributes
  respectively.</p>


  <h5>The <code>datagrid</code> data model</h5>

  <p><em>This section is non-normative.</em></p>

  <p>In the <code>datagrid</code> data model, data is structured as a
  set of rows representing a tree, each row being split into a number
  of columns. The columns are always present in the data model,
  although individual columns may be hidden in the presentation.</p>

  <p>Each row can have a parent row. If a row <var title="">r</var>
  has a parent row <var title="">p</var>, then all the rows between it
  and its parent will also have a parent row, and for each row <var
  title="">i</var> between <var title="">p</var> and <var
  title="">r</var> the parent row of <var title="">i</var> will be
  either <var title="">p</var> or another row between <var
  title="">p</var> and <var title="">i</var>.</p>

  <p>Rows that have other rows claiming them as their parent row are
  open. Rows can be closed, hiding all the data that would form child
  rows, but when a row is closed its child data does not appear in the
  data model.</p>

  <p>The columns can have captions. Those captions are not considered
  a row in their own right, they are obtained separately.</p>

  <p>Selection of data in a <code>datagrid</code> operates at the row
  level. If the <code title="attr-datagrid-multiple">multiple</code>
  attribute is present, multiple rows can be selected at once,
  otherwise the user can only select one row at a time.</p>

  <p>The <code>datagrid</code> element can be disabled entirely by
  setting the <code title="attr-datagrid-disabled">disabled</code>
  attribute.</p>
<!--XXXDND
  <p class="big-issue">selection draggable [normative definitions are
  in the interactive part below]</p>
-->

  <p>Columns, rows, and cells can each have specific flags, known as
  classes, applied to them by the data provider. These classes <a
  href="#datagridClassSummary">affect the functionality</a> of the
  <code>datagrid</code> element, and are also <a
  href="#datagridPseudos">passed to the style system</a>. They are
  similar in concept to the <code title="attr-class">class</code>
  attribute, except that they are not specified on elements but are
  given by scripted data providers.</p> <!-- XXX check xrefs -->

  <h5>The data provider interface</h5>

  <p><em>The conformance criteria in this section apply to any
  implementation of the <code>DataGridDataProvider</code>, including
  (and most commonly) the content author's implementation(s).</em></p>

  <pre class="idl">// To be implemented by Web authors as a JS object
interface <dfn>DataGridDataProvider</dfn> {
  void <span title="dom-provider-initialize">initialize</span>(in HTMLDataGridElement datagrid);
  long <span title="dom-provider-getRowCount">getRowCount</span>();
  long <span title="dom-provider-getColumnCount">getColumnCount</span>();
  DOMString <span title="dom-provider-getCaptionText">getCaptionText</span>(in long column);
  void <span title="dom-provider-getCaptionClasses">getCaptionClasses</span>(in long column, in DOMTokenString classes);
  long <span title="dom-provider-getRowParent">getRowParent</span>(in long row);
  DOMString <span title="dom-provider-getRowImage">getRowImage</span>(in long row);
  HTMLMenuElement <span title="dom-provider-getRowMenu">getRowMenu</span>(in long row);
  void <span title="dom-provider-getRowClasses">getRowClasses</span>(in long row, in DOMTokenString classes);
  DOMString <span title="dom-provider-getCellData">getCellData</span>(in long row, in long column);
  void <span title="dom-provider-getCellClasses">getCellClasses</span>(in long row, in long column, in DOMTokenString classes);
<!--XXXDND
  boolean <span title="dom-provider-canDrop">canDrop</span>(in long row, int position, data);
  boolean <span title="dom-provider-dropped">dropped</span>(in long row, int position, data);
-->  void <span title="dom-provider-toggleRowOpenState">toggleRowOpenState</span>(in long row);
  void <span title="dom-provider-toggleColumnSortState">toggleColumnSortState</span>(in long column);
  void <span title="dom-provider-setCellCheckedState">setCellCheckedState</span>(in long row, in long column, in int state);
  void <span title="dom-provider-cycleCell">cycleCell</span>(in long row, in long column);
  void <span title="dom-provider-editCell">editCell</span>(in long row, in long column, in DOMString data);
<!--XXXPA
  void <span title="dom-provider-performAction">performAction</span>(in DOMString action); // required if .performAction() is ever invoked on the datagrid
  void <span title="dom-provider-performActionOnRow">performActionOnRow</span>(in long row, in DOMString action); // required if getRowClasses ever includes 'deletable' or if <span title="dom-provider-.performActionOnRow">.performActionOnRow</span>() is ever invoked on the datagrid
  void <span title="dom-provider-performActionOnCell">performActionOnCell</span>(in long row, in long column, in DOMString action); // required if .performActionOnCell() is ever invoked on the datagrid
-->};</pre>
<!-- based on http://lxr.mozilla.org/seamonkey/source/layout/xul/base/src/tree/public/nsITreeView.idl -->

  <p>The <code>DataGridDataProvider</code> interface represents the
  interface that objects must implement to be used as custom data
  views for <code>datagrid</code> elements.</p>

  <p>Not all the methods are required. The minimum number of methods
  that must be implemented in a useful view is two: the <code
  title="dom-provider-getRowCount">getRowCount()</code> and <code
  title="dom-provider-getCellData">getCellData()</code> methods.</p>

  <p>Once the object is written, it must be hooked up to the
  <code>datagrid</code> using the <dfn
  title="dom-datagrid-data"><code>data</code></dfn> DOM attribute.</p>

  <p>The following methods may be usefully implemented:</p>

  <dl>

   <dt><dfn title="dom-provider-initialize"><code>initialize(<var title="">datagrid</var>)</code></dfn></dt>

   <dd>Called by the <code>datagrid</code> element (the one given by
   the <var title="">datagrid</var> argument) after it has first
   populated itself. This would typically be used to set the initial
   selection of the <code>datagrid</code> element when it is first
   loaded. The data provider could also use this method call to
   register a <code title="event-select">select</code> event handler
   on the <code>datagrid</code> in order to monitor selection
   changes.</dd>

   <dt><dfn title="dom-provider-getRowCount"><code>getRowCount()</code></dfn></dt>

   <dd>Must return the number of rows currently in the data model,
   including rows that are off-screen. If the value that this method
   would return changes, the relevant update methods on the
   <code>datagrid</code> must be called first. Otherwise, this method
   must always return the same number.</dd>

   <dt><dfn title="dom-provider-getColumnCount"><code>getColumnCount()</code></dfn></dt>

   <dd>Must return the number of columns currently in the data model
   (including columns that might be hidden). May be omitted if there
   is only one column. If the value that this method would return
   changes, the <code>datagrid</code>'s <code
   title="dom-datagrid-updateEverything">updateEverything()</code>
   method must be called.</dd>

   <dt><dfn title="dom-provider-getCaptionText"><code>getCaptionText(<var title="">column</var>)</code></dfn></dt>

   <dd>Must return the caption, or label, for column <var
   title="">column</var>. May be omitted if the columns have no
   captions. If the value that this method would return changes, the
   <code>datagrid</code>'s <code
   title="dom-datagrid-updateColumnChanged">updateColumnChanged()</code>
   method must be called with the appropriate column index.</dd>

   <dt><dfn title="dom-provider-getCaptionClasses"><code>getCaptionClasses(<var title="">column</var>, <var title="">classes</var>)</code></dfn></dt>

   <dd>Must add the classes that apply to column <var
   title="">column</var> to the <var title="">classes</var> object.
   May be omitted if the columns have no special classes. If the
   classes that this method would add changes, the
   <code>datagrid</code>'s <code
   title="dom-datagrid-updateColumnChanged">updateColumnChanged()</code>
   method must be called with the appropriate column index. Some
   classes have <a href="#datagridClassSummary">predefined
   meanings</a>.</dd>

   <dt><dfn title="dom-provider-getRowParent"><code>getRowParent(<var title="">row</var>)</code></dfn></dt>

   <dd>Must return the index to the row that is the parent of row <var
   title="">row</var>, or a negative number if this is a top-level
   row. If, for a row <var title="">r</var>, this method returns the
   index of parent row <var title="">p</var>, then for each row <var
   title="">i</var> between <var title="">p</var> and <var
   title="">r</var> the method must return either <var
   title="">p</var> or another row between <var title="">p</var> and
   <var title="">i</var>. May be omitted if the <code>datagrid</code>
   is a list and not a tree. If the value that this method would
   return changes, the <code>datagrid</code>'s update methods must be
   called to update all the rows in the range that covers the old
   parent, the new parent, and the row in question.</dd>

   <dt><dfn title="dom-provider-getRowImage"><code>getRowImage(<var title="">row</var>)</code></dfn></dt>

   <dd>Must return a URI to an image that represents row <var
   title="">row</var>, or the empty string if there is no applicable
   image. May be omitted if no rows have associated images. If the
   value that this method would return changes, the
   <code>datagrid</code>'s update methods must be called to update the
   row in question.</dd>

   <dt><dfn title="dom-provider-getRowMenu"><code>getRowMenu(<var title="">row</var>)</code></dfn></dt>

   <dd>Must return an <code>HTMLMenuElement</code> object that is to
   be used as a context menu for row <var title="">row</var>, or null
   if there is no particular context menu. May be omitted if none of
   the rows have a special context menu. As this method is called
   immediately before showing the menu in question, no precautions
   need to be taken if the return value of this method changes.</dd>

   <dt><dfn title="dom-provider-getRowClasses"><code>getRowClasses(<var title="">row</var>, <var title="">classes</var>)</code></dfn></dt>

   <dd>Must add the classes that apply to row <var title="">row</var>
   to the <var title="">classes</var> object. May be omitted if the
   rows have no special classes. If the classes that this method would
   add changes, the <code>datagrid</code>'s update methods must be
   called to update the row in question. Some classes have <a
   href="#datagridClassSummary">predefined meanings</a>.</dd>

   <dt><dfn title="dom-provider-getCellData"><code>getCellData(<var title="">row</var>, <var title="">column</var>)</code></dfn></dt>

   <dd>Must return the value of the cell on row <var
   title="">row</var> in column <var title="">column</var>. For text
   cells, this must be the text to show for that cell. For <span
   title="datagrid-cell-class-progress">progress bar cells</span>,
   this must be either a floating point number in the range 0.0 to 1.0
   (converted to a string representation<!-- XXX this isn't
   technically enough to define what the author must be doing here,
   but let's let that slide until someone notices -->), indicating the
   fraction of the progress bar to show as full (1.0 meaning
   complete), or the empty string, indicating an indeterminate
   progress bar. If the value that this method would return changes,
   the <code>datagrid</code>'s update methods must be called to update
   the rows that changed. If only one cell changed, the <code
   title="dom-datagrid-updateCellChanged">updateCellChanged()</code>
   method may be used.</dd>

   <dt><dfn title="dom-provider-getCellClasses"><code>getCellClasses(<var title="">row</var>, <var title="">column</var>, <var title="">classes</var>)</code></dfn></dt>

   <dd>Must add the classes that apply to cell on row <var
   title="">row</var> in column <var title="">column</var> to the <var
   title="">classes</var> object. May be omitted if the cells have no
   special classes. If the classes that this method would add changes,
   the <code>datagrid</code>'s update methods must be called to update
   the rows or cells in question. Some classes have <a
   href="#datagridClassSummary">predefined meanings</a>.</dd>

   <dt><dfn title="dom-provider-toggleRowOpenState"><code>toggleRowOpenState(<var title="">row</var>)</code></dfn></dt>

   <dd>Called by the <code>datagrid</code> when the user tries to open
   or close a row. When it is called on a closed row, the data
   provider must update its state so that the rows now include the
   child rows, and must call the <code
   title="dom-datagrid-updateRowsInserted">updateRowsInserted()</code>
   method appropriately. Similarly, when it is called on an open row,
   the data provider must update its state so that the rows that were
   shown under the row in question are now removed from the data
   model, and must then call the <code
   title="dom-datagrid-updateRowsRemoved">updateRowsRemoved()</code>
   method appropriately. There is no need to tell the
   <code>datagrid</code> that the row itself has changed (as it
   should; in particular its classes should change to reflect the new
   open/closed state), as the <code>datagrid</code> automatically
   assumes that the row will need updating.</dd>

   <dt><dfn title="dom-provider-toggleColumnSortState"><code>toggleColumnSortState(<var title="">column</var>)</code></dfn></dt>

   <dd>

    <p>Called by the <code>datagrid</code> when the user tries to sort
    the data using a particular column <var title="">column</var>. The
    data provider must update its state so that the rows are in the
    new order, and update the classes of the columns to represent the
    new sort status. There is no need to tell the
    <code>datagrid</code> that it the data has changed, as the
    <code>datagrid</code> automatically assumes that the entire data
    model will need updating.</p>

    <p>It is the data provider's responsibility to ensure that the
    user's selection persists through a sort. Typically this will
    involve taking a note of which rows were selected before the sort
    (using the <code
    title="dom-SelectedRowRanges-getRangeStart">getRangeStart()</code>
    and <code
    title="dom-SelectedRowRanges-getRangeLength">getRangeLength()</code>
    methods of the <code
    title="dom-datagrid-selection">selection</code> DOM attribute, for
    instance), and then <span
    title="dom-SelectedRowRanges-clear">clearing</span> the selection
    and reselecting all the rows in their new positions (e.g. using
    the <code title="dom-SelectedRowRanges-addRange">addRange()</code>
    method).</p>

   </dd>

   <dt><dfn title="dom-provider-setCellCheckedState"><code>setCellCheckedState(<var title="">row</var>, <var title="">column</var>, <var title="">state</var>)</code></dfn></dt>

   <dd>Called by the <code>datagrid</code> when the user changes the
   state of a checkbox cell on row <var title="">row</var>, column
   <var title="">column</var>. The checkbox should be toggled to the
   state given by <var title="">state</var>, which is a positive
   integer (1) if the checkbox is to be checked, zero (0) if it is to
   be unchecked, and a negative number (-1) if it is to be set to the
   indeterminate state. There is no need to tell the
   <code>datagrid</code> that the cell has changed, as the
   <code>datagrid</code> automatically assumes that the given cell
   will need updating.</dd>

   <dt><dfn title="dom-provider-cycleCell"><code>cycleCell(<var title="">row</var>, <var title="">column</var>)</code></dfn></dt>

   <dd>Called by the <code>datagrid</code> when the user changes the
   state of a cyclable cell on row <var title="">row</var>, column
   <var title="">column</var>. The data provider should change the
   state of the cell to the new state, as appropriate. There is no
   need to tell the <code>datagrid</code> that the cell has
   changed, as the <code>datagrid</code> automatically assumes that
   the given cell will need updating.</dd>

   <dt><dfn title="dom-provider-editCell"><code>editCell(<var title="">row</var>, <var title="">column</var>, <var title="">data</var>)</code></dfn></dt>

   <dd>Called by the <code>datagrid</code> when the user edits the
   cell on row <var title="">row</var>, column <var
   title="">column</var>. The new value of the cell is given by <var
   title="">data</var>. The data provider should update the cell
   accordingly. There is no need to tell the <code>datagrid</code>
   that the cell has changed, as the <code>datagrid</code>
   automatically assumes that the given cell will need updating.</dd>

<!--XXXPA
  void performAction(in DOMString action); // required if .performAction() is ever invoked on the datagrid
  void performActionOnRow(in long row, in DOMString action); // required if getRowClasses ever includes 'deletable' or if .performActionOnRow() is ever invoked on the datagrid
  void performActionOnCell(in long row, in long column, in DOMString action); // required if .performActionOnCell() is ever invoked on the datagrid
-->

  </dl>

  <p>The following classes (for rows, columns, and cells) may be
  usefully used in conjunction with this interface:</p>

  <table id="datagridClassSummary">
   <tr>
    <th>Class name</th>
    <th>Applies to</th>
    <th>Description</th>
   </tr>

   <tr>
    <td><!--checked--><dfn title="datagrid-cell-class-checked"><code>checked</code></dfn></td>
    <td>Cells</td>
    <td>The cell has a checkbox and it is checked. (The <code
    title="datagrid-cell-class-cyclable">cyclable</code> and <code
    title="datagrid-cell-class-progress">progress</code> classes
    override this, though.)</td>
   </tr>

   <tr>
    <td><!--closed--><dfn title="datagrid-row-class-closed"><code>closed</code></dfn></td>
    <td>Rows</td>
    <td>The row can be opened and closed, and, unless the <code
    title="datagrid-row-class-open">open</code> class is also present,
    the row is currently closed.</td>
   </tr>

   <tr>
    <td><!--cyclable--><dfn title="datagrid-cell-class-cyclable"><code>cyclable</code></dfn></td>
    <td>Cells</td>
    <td>The cell can be cycled through multiple values. (The <code
    title="datagrid-cell-class-progress">progress</code> class
    overrides this, though.)</td>
   </tr>

   <tr>
    <td><!--editable--><dfn title="datagrid-cell-class-editable"><code>editable</code></dfn></td>
    <td>Cells</td>
    <td>The cell can be edited. (The <code
    title="datagrid-cell-class-cyclable">cyclable</code>, <code
    title="datagrid-cell-class-progress">progress</code>, <code
    title="datagrid-cell-class-checked">checked</code>, <code
    title="datagrid-cell-class-checked">unchecked</code> and <code
    title="datagrid-cell-class-checked">indeterminate</code> classes
    override this, though.)</td>
   </tr>

   <tr>
    <td><!--header--><dfn title="datagrid-row-class-header"><code>header</code></dfn></td>
    <td>Rows</td>
    <td>The row is a heading, not a data row.</td>
   </tr>

   <tr>
    <td><!--indeterminate--><dfn title="datagrid-cell-class-indeterminate"><code>indeterminate</code></dfn></td>
    <td>Cells</td>
    <td>The cell has a checkbox, and it can be set to an indeterminate
    state. If neither the <code
    title="datagrid-cell-class-checked">checked</code> nor <code
    title="datagrid-cell-class-checked">unchecked</code> classes are
    present, then the checkbox is in that state, too. (The <code
    title="datagrid-cell-class-cyclable">cyclable</code> and <code
    title="datagrid-cell-class-progress">progress</code> classes
    override this, though.)</td>
   </tr>

   <tr>
    <td><!--initially-hidden--><dfn title="datagrid-column-class-initially-hidden"><code>initially-hidden</code></dfn></td>
    <td>Columns</td>
    <td>The column will not be shown when the <code>datagrid</code> is
    initially rendered.</td>
   </tr>

   <tr>
    <td><!--open--><dfn title="datagrid-row-class-open"><code>open</code></dfn></td>
    <td>Rows</td>
    <td>The row can be opened and closed, and is currently open.</td>
   </tr>

   <tr>
    <td><!--progress--><dfn title="datagrid-cell-class-progress"><code>progress</code></dfn></td>
    <td>Cells</td>
    <td>The cell is a progress bar.</td>
   </tr>

   <tr>
    <td><!--reversed--><dfn title="datagrid-column-class-reversed"><code>reversed</code></dfn></td>
    <td>Columns</td>
    <td>If the cell is sorted, the sort direction is descending,
    instead of ascending.</td>
   </tr>

   <tr>
    <td><!--selectable-separator--><dfn title="datagrid-row-class-selectable-separator"><code>selectable-separator</code></dfn></td>
    <td>Rows</td>
    <td>The row is a normal, selectable, data row, except that instead
    of having data, it only has a separator. (The <code
    title="datagrid-row-class-header">header</code> and <code
    title="datagrid-row-class-separator">separator</code> classes
    override this, though.)</td>
   </tr>

   <tr>
    <td><!--separator--><dfn title="datagrid-row-class-separator"><code>separator</code></dfn></td>
    <td>Rows</td>
    <td>The row is a separator row, not a data row. (The <code
    title="datagrid-row-class-header">header</code> class
    overrides this, though.)</td>
   </tr>

   <tr>
    <td><!--sortable--><dfn title="datagrid-column-class-sortable"><code>sortable</code></dfn></td>
    <td>Columns</td>
    <td>The data can be sorted by this column.</td>
   </tr>

   <tr>
    <td><!--sorted--><dfn title="datagrid-column-class-sorted"><code>sorted</code></dfn></td>
    <td>Columns</td>
    <td>The data is sorted by this column. Unless the <code
    title="datagrid-column-class-reversed">reversed</code> class is
    also present, the sort direction is ascending.</td>
   </tr>

   <tr>
    <td><!--unchecked--><dfn title="datagrid-cell-class-unchecked"><code>unchecked</code></dfn></td>
    <td>Cells</td>
    <td>The cell has a checkbox and, unless the <code
    title="datagrid-cell-class-checked">checked</code> class is
    present as well, it is unchecked. (The <code
    title="datagrid-cell-class-cyclable">cyclable</code> and <code
    title="datagrid-cell-class-progress">progress</code> classes
    override this, though.)</td>
   </tr>

<!--XXXPA
   <tr>
    <td><!- -deletable- -><dfn title="datagrid-row-class-deletable"><code>deletable</code></dfn></td>
    <td>Rows</td>
    <td></td>
   </tr>
-->

  </table>

  <h5>The default data provider</h5>

  <p>The user agent must supply a default data provider for the case
  where the <code>datagrid</code>'s <code
  title="dom-datagrid-data">data</code> attribute is null. It must act
  as described in this section.</p>

  <p>The behaviour of the default data provider depends on the nature
  of the first element child of the <code>datagrid</code>.</p>

  <dl class="switch">

   <dt>While the first element child is a <code>table</code></dt>

   <dd>

    <p><strong><code
    title="dom-provider-getRowCount">getRowCount()</code></strong>:
    The number of rows returned by the default data provider must be
    the number of <code>tr</code> elements that are children of
    <code>tbody</code> elements that are children of the
    <code>table</code>, if there are any such child <code>tbody</code>
    elements. If there are no such <code>tbody</code> elements then
    the number of rows returned must be the number of <code>tr</code>
    elements that are children of the <code>table</code>.</p>

    <p class="note">Rows in <code>thead</code> elements do not
    contribute to the number of rows returned, although they do affect
    the columns and column captions. Rows in <code>tfoot</code>
    elements are ignored completely by this algorithm.</p>

    <p><strong><code
    title="dom-provider-getColumnCount">getColumnCount()</code></strong>:
    The number of columns returned must be the number of
    <code>td</code> element children in the first <code>tr</code>
    element child of the first <code>tbody</code> element child of the
    <code>table</code>, if there are any such <code>tbody</code>
    elements. If there are no such <code>tbody</code> elements, then
    it must be the number of <code>td</code> element children in the
    first <code>tr</code> element child of the <code>table</code>, if
    any, or otherwise 1. If the number that would be returned by these
    rules is 0, then 1 must be returned instead.</p>

    <p><strong><code
    title="dom-provider-getCaptionText">getCaptionText(<var
    title="">i</var>)</code></strong>: If the <code>table</code> has
    no <code>thead</code> element child, or if its first
    <code>thead</code> element child has no <code>tr</code> element
    child, the default data provider must return the empty string for
    all captions. Otherwise, the value of the <code>textContent</code>
    attribute of the <var title="">i</var>th <code>th</code> element
    child of the first <code>tr</code> element child of the first
    <code>thead</code> element child of the <code>table</code> element
    must be returned. If there is no such <code>th</code> element, the
    empty string must be returned.</p>

    <p><strong><code
    title="dom-provider-getCaptionClasses">getCaptionClasses(<var
    title="">i</var>, <var title="">classes</var>)</code></strong>: If
    the <code>table</code> has no <code>thead</code> element child, or
    if its first <code>thead</code> element child has no
    <code>tr</code> element child, the default data provider must not
    add any classes for any of the captions. Otherwise, each class
    in the <code title="attr-class">class</code> attribute of the <var
    title="">i</var>th <code>th</code> element child of the first
    <code>tr</code> element child of the first <code>thead</code>
    element child of the <code>table</code> element must be added to
    the <var title="">classes</var>. If there is no such
    <code>th</code> element, no classes must be added. The user agent
    must then:</p>

    <ol>

     <li>Remove the <code
     title="datagrid-column-class-sorted">sorted</code> and <code
     title="datagrid-column-class-reversed">reversed</code>
     classes.</li>

     <li>If the <code>table</code> element has a <code
     title="attr-class">class</code> attribute that includes the <code
     title="">sortable</code> class, add the <code
     title="datagrid-column-class-sortable">sortable</code>
     class.</li>

     <li>If the column is the one currently being used to
     sort the data, add the <code
     title="datagrid-column-class-sorted">sorted</code> class.</li>

     <li>If the column is the one currently being used to sort the
     data, and it is sorted in descending order, add the <code
     title="datagrid-column-class-reversed">reversed</code> class as
     well.</li>

    </ol>

    <p>The various row- and cell- related methods operate relative to
    a particular element, the element of the row or cell specified by
    their arguments.</p>

    <p><strong>For rows</strong>: Since the view of the data can be
    sorted, the positions of the rows in the data model might not be
    the same as the positions of the real rows in the DOM. When the
    data is sorted, the row given by the method's argument has to be
    mapped to the real row. Initially, the mapping is the identity
    transform, but <a href="#defaultDataProviderTableSort">the mapping
    can be changed</a> if the user sorts the rows.</p>

    <p>Once the method's argument has been translated into an index
    for the real row, the row's element is found as follows. If the
    <code>table</code> has <code>tbody</code> element children, the
    element for the <var title="">i</var>th real row is the <var
    title="">i</var>th <code>tr</code> element that is a child of a
    <code>tbody</code> element that is a child of the
    <code>table</code> element. If the <code>table</code> does not
    have <code>tbody</code> element children, then the element for the
    <var title="">i</var>th real row is the <var title="">i</var>th
    <code>tr</code> element that is a child of the <code>table</code>
    element.</p>

    <p><strong>For cells</strong>: Given a row and its element, the
    row's <var title="">i</var>th cell's element is the <var
    title="">i</var>th <code>td</code> element child of the row
    element.</p>

    <p class="note">The <code>colspan</code> and <code>rowspan</code>
    attributes are ignored by this algorithm.</p>

    <p><strong><code title="dom-provider-getRowParent">getRowParent(<var
    title="">i</var>)</code></strong>: The default data provider must
    always return -1 as the parent row of any row.</p>

    <p class="note">The <code>table</code>-based default data provider
    cannot represent a tree.</p>

    <p><strong><code title="dom-provider-getRowImage">getRowImage(<var
    title="">i</var>)</code></strong>: If the row's first cell's
    element has an <code>img</code> element child, then the URI of the
    row's image is the URI of the first <code>img</code> element child
    of the row's first cell's element. Otherwise, the URI of the row's
    image is the empty string.</p><!-- XXX well. that sentence could
    have gone better, that's for sure. -->

    <p><strong><code title="dom-provider-getRowMenu">getRowMenu(<var
    title="">i</var>)</code></strong>: If the row's first cell's
    element has a <code>menu</code> element child, then the row's menu
    is the first <code>menu</code> element child of the row's first
    cell's element. Otherwise, the row has no menu.</p>

    <p><strong><code
    title="dom-provider-getRowClasses">getRowClasses(<var
    title="">i</var>, <var title="">classes</var>)</code></strong>:
    The default data provider must never add a class to the row's
    classes.</p>

    <p id="defaultDataProviderTableSort"><strong><code
    title="dom-provider-toggleColumnSortState">toggleColumnSortState(<var
    title="">i</var>)</code></strong>: If the data is already being
    sorted on the given column, then the user agent must change the
    current sort mapping to be the inverse of the current sort
    mapping; if the sort order was ascending before, it is now
    descending, otherwise it is now ascending. Otherwise, if the
    current sort column is another column, or the data model is
    currently not sorted, the user agent must create a new mapping,
    which maps rows in the data model to rows in the DOM so that the
    rows in the data model are sorted by the specified column, in
    ascending order. (Which sort comparison operator to use is left up
    to the UA to decide.)</p>

    <p><strong><code title="dom-provider-getCellData">getCellData(<var
    title="">i</var>, <var title="">j</var>)</code>, <code
    title="dom-provider-getCellClasses">getCellClasses(<var
    title="">i</var>, <var title="">j</var>, <var
    title="">classes</var>)</code>, <code
    title="dom-provider-setCellCheckedState">getCellCheckedState(<var
    title="">i</var>, <var title="">j</var>, <var
    title="">state</var>)</code>, <code
    title="dom-provider-cycleCell">cycleCell(<var title="">i</var>,
    <var title="">j</var>)</code>, and <code
    title="dom-provider-editCell">editCell(<var title="">i</var>,
    <var title="">j</var>, <var title="">data</var>)</code></strong>:
    See <a href="#commonDefaultDataGridMethodDefinitions">the common
    definitions below</a>.</p>

    <p>The data provider must call the <code>datagrid</code>'s update
    methods appropriately whenever the descendants of the
    <code>datagrid</code> mutate. For example, if a <code>tr</code> is
    removed, then the <code
    title="dom-datagrid-updateRowsRemoved">updateRowsRemoved()</code>
    methods would probably need to be invoked, and any change to a
    cell or its descendants must cause the cell to be updated. If the
    <code>table</code> element stops being the first child of the
    <code>datagrid</code>, then the data provider must call the <code
    title="dom-datagrid-updateEverything">updateEverything()</code>
    method on the <code>datagrid</code>. Any change to a cell that is
    in the column that the data provider is currently using as its
    sort column must also cause the sort to be reperformed, with a
    call to <code
    title="dom-datagrid-updateEverything">updateEverything()</code> if
    the change did affect the sort order.</p>

   </dd>


   <dt>While the first element child is a <code>select</code></dt>

   <dd>

    <p>The default data provider must return 1 for the column count,
    the empty string for the column's caption, and must not add any
    classes to the column's classes.</p>

    <p>For the rows, assume the existence of a linear node iterator
    view of the children of the first <code>select</code> element
    child of the <code>datagrid</code> element, that skips all nodes
    other than <code>optgroup</code> and <code>option</code> elements,
    as well as any descendents of any <code>option</code> elements,
    and descendants of <code>optgroup</code> elements with the <code
    title="">closed</code> token in their <code
    title="attr-class">class</code> attribute.</p>

    <p>Given this view, each element in the view represents a row in
    the data model: the <var title="">i</var>th element in the view is
    the <var title="">i</var>th row's element. The row of a particular
    method call is the row given by its arguments.</p>

    <p><code title="dom-provider-getRowCount">getRowCount()</code>
    must return the number of elements in this view.</p>

    <p><code title="dom-provider-getRowParent">getRowParent(<var
    title="">i</var>)</code> must return the index in the view of the
    nearest ancestor <code>optgroup</code> element of the row's
    element, -1 if there is no such ancestor.</p>

    <p><code title="dom-provider-getRowImage">getRowImage(<var
    title="">i</var>)</code> must return the empty string, <code
    title="dom-provider-getRowMenu">getRowMenu(<var
    title="">i</var>)</code> must return null.</p>

    <p><code title="dom-provider-getRowClasses">getRowClasses(<var
    title="">i</var>, <var title="">classes</var>)</code> must add the
    classes from the following list to <var title="">classes</var>
    when their condition is met:</p>

    <ul>

     <li>If the row's element contains other elements that are also in
     the view, and the element's <code title="attr-class">class</code>
     attribute contains the <code title="">closed</code> class: <code
     title="datagrid-row-class-closed">closed</code></li>

     <li>If the row's element contains other elements that are also in
     the view, and the element's <code title="attr-class">class</code>
     attribute doesn't contain the <code title="">closed</code> class:
     <code title="datagrid-row-class-open">open</code></li>

    </ul>

    <p>The <code
    title="dom-provider-toggleRowOpenState">toggleRowOpenState(<var
    title="">i</var>)</code> method must add a <code
    title="">closed</code> class to that row's element's <code
    title="attr-class">class</code> attribute and remove any <code
    title="">open</code> class, unless it already has a <code
    title="">closed</code> class and has no <code title="">open</code>
    class, in which case it must instead remove the <code
    title="">closed</code> class and add an <code title="">open</code>
    class. It must then invoke the appropriate update methods to
    inform the <code>datagrid</code> of the newly added or removed
    rows.</p>

    <p>The <code title="dom-provider-getCellData">getCellData(<var
    title="">i</var>, <var title="">j</var>)</code> method must return
    the value of the <code title="attr-optgroup-label">label</code>
    attribute if the row's element is an <code>optgroup</code>
    element, otherwise, if the row's element is an
    <code>option</code>element, its <code
    title="attr-option-label">label</code> attribute if it has one,
    otherwise the value of its <code>textContent</code> DOM
    attribute.</p>

    <p>The <code
    title="dom-provider-getCellClasses">getCellClasses(<var
    title="">i</var>, <var title="">j</var>, <var
    title="">classes</var>)</code> method must add no classes.</p>

    <!--XXX select-provider-selection: autoselect some rows when
    initialised, reflect the selection in the select, reflect the
    multiple attribute somehow. -->

    <p>The data provider must call the <code>datagrid</code>'s update
    methods appropriately whenever the descendants of the
    <code>datagrid</code> mutate.</p>

   </dd>


   <dt>While the first element child is another element</dt>

   <dd>

    <p>The default data provider must return 1 for the column count,
    the empty string for the column's caption, and must not add any
    classes to the column's classes.</p>

    <p>For the rows, assume the existence of a linear node iterator
    view of the children of the <code>datagrid</code> that skips all
    nodes other than <code>li</code>, <code>h1</code>-<code>h6</code>,
    and <code>hr</code> elements, and skips all elements that are
    descendants of elements with the <code title="">closed</code>
    token in their <code title="attr-class">class</code> attribute,
    and any descendants of <code>menu</code> elements.</p>

    <p>Given this view, each element in the view represents a row in
    the data model: the <var title="">i</var>th element in the view is
    the <var title="">i</var>th row's element. The row of a particular
    method call is the row given by its arguments.</p>

    <p><code title="dom-provider-getRowCount">getRowCount()</code>
    must return the number of elements in this view.</p>

    <p><code title="dom-provider-getRowParent">getRowParent(<var
    title="">i</var>)</code> must return the index in the view of
    the nearest ancestor (in the real DOM) of the row's element that
    is also in the view, -1 if there is no such ancestor.</p>

    <div class="example">
     <p>In the following example, the row numbered 2 returns 1 as its
     parent, and the other rows return -1:</p>
     <pre>&lt;datagrid>
 &lt;ol>
  &lt;li> row 0 &lt;/li>
  &lt;li> row 1
   &lt;ol>
    &lt;li> row 2 &lt;/li>
   &lt;/ol>
  &lt;/li>
  &lt;li> row 3 &lt;/li>
 &lt;/ol>
&lt;/datagrid></pre>
    </div>

    <p><code title="dom-provider-getRowImage">getRowImage(<var
    title="">i</var>)</code> must return the URI of the image given by
    the first <code>img</code> element descendant (in the real DOM) of
    the row's element, that is not also a descendant of another
    element that has a later position in the view.</p>

    <div class="example">
     <p>In the following example, the row numbered 2 returns "http://example.com/a" as its
     image URI, and the other rows (including row 1) return the empty string:</p>
     <pre>&lt;datagrid>
 &lt;ol>
  &lt;li> row 0 &lt;/li>
  &lt;li> row 1
   &lt;ol>
    &lt;li> row 2 &lt;img src="http://example.com/a" alt=""> &lt;/li>
   &lt;/ol>
  &lt;/li>
  &lt;li> row 3 &lt;/li>
 &lt;/ol>
&lt;/datagrid></pre>
    </div>

    <p><code title="dom-provider-getRowMenu">getRowMenu(<var
    title="">i</var>)</code> must return the first <code>menu</code>
    element descendant (in the real DOM) of the row's element, that is
    not also a descendant of another element that has a later position
    in the view. (This is analogous to the image case above.)</p>

    <p><code title="dom-provider-getRowClasses">getRowClasses(<var
    title="">i</var>, <var title="">classes</var>)</code> must add the
    classes from the following list to <var title="">classes</var>
    when their condition is met:</p>

    <ul>

     <li>If the row's element contains other elements that are also in
     the view, and the element's <code title="attr-class">class</code>
     attribute contains the <code title="">closed</code> class: <code
     title="datagrid-row-class-closed">closed</code></li>

     <li>If the row's element contains other elements that are also in
     the view, and the element's <code title="attr-class">class</code>
     attribute doesn't contain the <code title="">closed</code> class:
     <code title="datagrid-row-class-open">open</code></li>

     <li>If the row's element is an <code>h1</code>-<code>h6</code>
     element: <code
     title="datagrid-row-class-header">header</code></li>

     <li>If the row's element is an <code>hr</code> element: <code
     title="datagrid-row-class-separator">separator</code></li> <!--
     XXX no way to get selectable-separator -->

    </ul>

    <p>The <code
    title="dom-provider-toggleRowOpenState">toggleRowOpenState(<var
    title="">i</var>)</code> method must add a <code
    title="">closed</code> class to that row's element's <code
    title="attr-class">class</code> attribute and remove any <code
    title="">open</code> class, unless it already has a <code
    title="">closed</code> class and has no <code title="">open</code>
    class, in which case it must instead remove the <code
    title="">closed</code> class and add an <code title="">open</code>
    class. It must then invoke the appropriate update methods to
    inform the <code>datagrid</code> of the newly added or removed
    rows.</p>

    <p>The <code title="dom-provider-getCellData">getCellData(<var
    title="">i</var>, <var title="">j</var>)</code>, <code
    title="dom-provider-getCellClasses">getCellClasses(<var
    title="">i</var>, <var title="">j</var>, <var
    title="">classes</var>)</code>, <code
    title="dom-provider-setCellCheckedState">getCellCheckedState(<var
    title="">i</var>, <var title="">j</var>, <var
    title="">state</var>)</code>, <code
    title="dom-provider-cycleCell">cycleCell(<var title="">i</var>,
    <var title="">j</var>)</code>, and <code
    title="dom-provider-editCell">editCell(<var title="">i</var>, <var
    title="">j</var>, <var title="">data</var>)</code> methods must
    act as described in <a
    href="#commonDefaultDataGridMethodDefinitions">the common
    definitions below</a>, treating the row's element as being the
    cell's element.</p>

    <p>The data provider must call the <code>datagrid</code>'s update
    methods appropriately whenever the descendants of the
    <code>datagrid</code> mutate.</p>

   </dd>


   <dt>Otherwise, while there is no element child</dt>

   <dd>

    <p>The data provider must return 0 for the number of rows, 1 for
    the number of columns, the empty string for the first column's
    caption, and must add no classes when asked for that column's
    classes. If the <code>datagrid</code>'s child list changes such
    that the first element child is one of the above, then the data
    provider must call the <code
    title="dom-datagrid-updateEverything">updateEverything()</code>
    method on the <code>datagrid</code>.</p>

   </dd>

  </dl>

  <h6 id="commonDefaultDataGridMethodDefinitions">Common default data
  provider method definitions for cells</h6>

  <p>These definitions are used for the cell-specific methods of the
  default data providers (other than in the <code>select</code> case).
  How they behave is based on the contents of an element that
  represents the cell given by their first two arguments (which are
  the row and column indices respectively). Which element that is is
  defined in the previous section.</p>

  <dl>

   <dt>Cyclable cells</dt>

   <dd>

    <p>If the first element child of a cell's element is a
    <code>select</code> element that has a no <code
    title="attr-select-multiple">multiple</code> attribute and has at
    least one <code>option</code> element descendent, then the cell
    acts as a cyclable cell.</p>

    <p>The "current" <code>option</code> element is the selected
    <code>option</code> element, or the first <code>option</code>
    element if none is selected.</p>

    <p>The <code title="dom-provider-getCellData">getCellData()</code>
    method must return the <code>textContent</code> of the current
    <code>option</code> element (the <code
    title="attr-option-label">label</code> attribute is ignored in
    this context as the <code>optgroup</code>s are not displayed).</p>

    <p>The <code
    title="dom-provider-getCellClasses">getCellClasses()</code> method
    must add the <code
    title="datagrid-cell-class-cyclable">cyclable</code> class and
    then all the classes of the current <code>option</code>
    element.</p>

    <p>The <code title="dom-provider-cycleCell">cycleCell()</code>
    method must change the selection of the <code>select</code>
    element such that the next <code>option</code> element after the
    current <code>option</code> element is the only one that is
    selected (in tree order). If the current <code>option</code>
    element is the last <code>option</code> element descendent of the
    <code>select</code>, then the first <code>option</code> element
    descendent must be selected instead.</p>

    <p>The <code
    title="dom-provider-setCellCheckedState">setCellCheckedState()</code>
    and <code title="dom-provider-editCell">editCell()</code> methods
    must do nothing.</p>

   </dd>

   <dt>Progress bar cells</dt>

   <dd>

    <p>If the first element child of a cell's element is a
    <code>progress</code> element, then the cell acts as a progress
    bar cell.</p>

    <p>The <code title="dom-provider-getCellData">getCellData()</code>
    method must return the value returned by the <code>progress</code>
    element's <code title="dom-progress-position">position</code> DOM
    attribute.</p>

    <p>The <code
    title="dom-provider-getCellClasses">getCellClasses()</code> method
    must add the <code
    title="datagrid-cell-class-cyclable">progress</code> class.</p>

    <p>The <code
    title="dom-provider-setCellCheckedState">setCellCheckedState()</code>,
    <code title="dom-provider-cycleCell">cycleCell()</code>, and
    <code title="dom-provider-editCell">editCell()</code> methods must
    do nothing.</p>

   </dd>

   <dt>Checkbox cells</dt>

   <dd>

    <p>If the first element child of a cell's element is an
    <code>input</code> element that has a <code
    title="attr-input-type">type</code> attribute with the value <code
    title="">checkbox</code>, then the cell acts as a check box
    cell.</p>

    <p>The <code title="dom-provider-getCellData">getCellData()</code>
    method must return the <code>textContent</code> of the cell
    element.</p>

    <p>The <code
    title="dom-provider-getCellClasses">getCellClasses()</code> method
    must add the <code
    title="datagrid-cell-class-checked">checked</code> class if the
    <code>input</code> element is <span
    title="dom-input-checked">checked</span>, and the <code
    title="datagrid-cell-class-unchecked">unchecked</code> class
    otherwise.</p>

    <p>The <code
    title="dom-provider-setCellCheckedState">setCellCheckedState()</code>
    method must set the <code>input</code> element's checkbox <span
    title="dom-input-checked">state</span> to checked if the method's
    third argument is 1, and to unchecked otherwise.</p>

    <p>The <code title="dom-provider-cycleCell">cycleCell()</code> and
    <code title="dom-provider-editCell">editCell()</code> methods must
    do nothing.</p>

   </dd>

   <dt>Editable cells</dt>

   <dd>

    <p>If the first element child of a cell's element is an
    <code>input</code> element that has a <code
    title="attr-input-type">type</code> attribute with the value <code
    title="">text</code> or that has no <code
    title="attr-input-type">type</code> attribute at all, then the
    cell acts as an editable cell.</p>

    <p>The <code title="dom-provider-getCellData">getCellData()</code>
    method must return the <code title="dom-input-value">value</code>
    of the <code>input</code> element.</p>

    <p>The <code
    title="dom-provider-getCellClasses">getCellClasses()</code> method
    must add the <code
    title="datagrid-cell-class-editable">editable</code> class.</p>

    <p>The <code title="dom-provider-editCell">editCell()</code>
    method must set the <code>input</code> element's <code
    title="dom-input-value">value</code> DOM attribute to the value of
    the third argument to the method.</p>

    <p>The <code
    title="dom-provider-setCellCheckedState">setCellCheckedState()</code>
    and <code title="dom-provider-cycleCell">cycleCell()</code>
    methods must do nothing.</p>

   </dd>

  </dl>

  <!-- XXX Calculated cells, like in spreadsheets? -->

  <h5>Populating the <code>datagrid</code> element</h5>

  <p>A <code>datagrid</code> must be disabled until its end tag has
  been parsed (in the case of a <code>datagrid</code> element in the
  original document markup) or until it has been inserted into the
  document (in the case of a dynamically created element). After that
  point, the element must fire a single <code
  title="event-load">load</code> event at itself, which doesn't bubble
  and cannot be canceled.</p>

  <p>The <code>datagrid</code> must then populate itself using the
  data provided by the data provider assigned to the <code
  title="dom-datagrid-data">data</code> DOM attribute. After the view
  is populated (using the methods described below), the
  <code>datagrid</code> must invoke the <code
  title="dom-provider-initialize">initialize()</code> method on the
  data provider specified by the <code
  title="dom-datagrid-data">data</code> attribute, passing itself (the
  <code>HTMLDataGridElement</code> object) as the only argument.</p>

  <p>When the <code title="dom-datagrid-data">data</code> attribute is
  null, the <code>datagrid</code> must use the default data provider
  described in the previous section.</p>

  <p>To obtain data from the data provider, the element must invoke
  methods on the data provider object in the following ways:</p>

  <dl>

   <dt>To determine the total number of rows</dt>

   <dd>Invoke the <code
   title="dom-provider-getRowCount">getRowCount()</code> method with
   no arguments. The return value is the number of rows. If the return
   value is negative, not an integer, or simply not a numeric type, or
   if the method is not defined, then zero must be used instead.</dd>

   <dt>To determine the total number of columns</dt>

   <dd>Invoke the <code
   title="dom-provider-getColumnCount">getColumnCount()</code> method
   with no arguments. The return value is the number of columns. If
   the return value is zero or negative, not an integer, or simply not
   a numeric type, or if the method is not defined, then 1 must be
   used instead.</dd>

   <dt>To get the captions to use for the columns</dt>

   <dd>Invoke the <code
   title="dom-provider-getCaptionText">getCaptionText()</code> method
   with the index of the column in question. The index <var
   title="">i</var> must be in the range 0 &le; <var title="">i</var>
   &lt; <var title="">N</var>, where <var title="">N</var> is the
   total number of columns. The return value is the string to use when
   referring to that column. If the method returns null or the empty
   string, the column has no caption. If the method is not defined,
   then none of the columns have any captions.</dd>

   <dt>To establish what classes apply to a column</dt>

   <dd>Invoke the <code
   title="dom-provider-getCaptionClasses">getCaptionClasses()</code>
   method with the index of the column in question, and an object
   implementing the <code>DOMTokenString</code> interface, initialised
   to empty. The index <var title="">i</var> must be in the range 0
   &le; <var title="">i</var> &lt; <var title="">N</var>, where <var
   title="">N</var> is the total number of columns. The values
   contained in the <code>DOMTokenString</code> object when the method
   returns represent the classes that apply to the given column. If
   the method is not defined, no classes apply to the column.</dd>

   <dt>To establish whether a column should be initially included in
   the visible columns</dt>

   <dd>Check whether the <code
   title="datagrid-column-class-initially-hidden">initially-hidden</code>
   class applies to the column. If it does, then the column should not
   be initially included; if it does not, then the column should be
   initially included.</dd>

   <dt id="columnType2">To establish whether the data can be sorted
   relative to a particular column</dt>

   <dd>Check whether the <code
   title="datagrid-column-class-sortable">sortable</code> class
   applies to the column. If it does, then the user should be able to
   ask the UA to display the data sorted by that column; if it does
   not, then the user agent must not allow the user to ask for the
   data to be sorted by that column.</dd>

   <dt>To establish if a column is a sorted column</dt>

   <dd>If the user agent can handle multiple columns being marked as
   sorted simultaneously: Check whether the <code
   title="datagrid-column-class-sorted">sorted</code> class applies to
   the column. If it does, then that column is the sorted column,
   otherwise it is not.</dd>

   <dd>If the user agent can only handle one column being marked as
   sorted at a time: Check each column in turn, starting with the
   first one, to see whether the <code
   title="datagrid-column-class-sorted">sorted</code> class applies to
   that column. The first column that has that class, if any, is the
   sorted column. If none of the columns have that class, there is no
   sorted column.</dd>

   <dt>To establish the sort direction of a sorted column</dt>

   <dd>Check whether the <code
   title="datagrid-column-class-reversed">reversed</code> class
   applies to the column. If it does, then the sort direction is
   descending (down; first rows have the highest values), otherwise it
   is ascending (up; first rows have the lowest values).</dd>

   <dt>To establish a row's parent row</dt>

   <dd>

    <p>Invoke the <code
    title="dom-provider-getRowParent">getRowParent()</code> method
    with the index of the row in question. The index <var
    title="">i</var> must be in the range 0 &le; <var title="">i</var>
    &lt; <var title="">N</var>, where <var title="">N</var> is the
    total number of rows. The return value <var title="">p</var> is
    the index of the parent row. If the method returns a number
    outside the range 0 &le; <var title="">p</var> &lt; <var
    title="">i</var>, or if the returned value is non-numeric, or if
    the method is not defined, then the row has no parent row (it is
    an unparented top-level row).</p>

    <p>If a row <var title="">r</var> has a parent row <var
    title="">p</var>, but not all the rows between it and its parent
    also have a parent row, or if there is a row <var title="">i</var>
    between <var title="">p</var> and <var title="">r</var> the parent
    of which is neither <var title="">p</var> nor another row between
    <var title="">p</var> and <var title="">i</var>, then the user
    agent may present the tree structure in an inconsistent way
    instead of attempting to render the actual described tree
    structure.</p>

   </dd>

   <dt>To obtain a URI to an image representing a row</dt>

   <dd>Invoke the <code
   title="dom-provider-getRowImage">getRowImage()</code> method with
   the index of the row in question. The index <var title="">i</var>
   must be in the range 0 &le; <var title="">i</var> &lt; <var
   title="">N</var>, where <var title="">N</var> is the total number
   of rows. The return value is a string representing a URI or IRI to
   an image. Relative URIs must be interpreted relative to the
   <code>datagrid</code>'s base URI. If the method returns the empty
   string, null, or if the method is not defined, then the row has no
   associated image.</dd>

   <dt>To obtain a context menu appropriate for a particular row</dt>

   <dd>Invoke the <code
   title="dom-provider-getRowMenu">getRowMenu()</code> method with the
   index of the row in question. The index <var title="">i</var> must
   be in the range 0 &le; <var title="">i</var> &lt; <var
   title="">N</var>, where <var title="">N</var> is the total number
   of rows. The return value is a reference to an object implementing
   the <code>HTMLMenuElement</code> interface, i.e. a
   <code>menu</code> element DOM node. (This element must then be
   interpreted as described in the section on context menus to obtain
   the actual context menu to use.<!-- XXXX update once menu section
   works; with xrefs -->) If the method returns something that is not
   an <code>HTMLMenuElement</code>, or if the method is not defined,
   then the row has no associated context menu. User agents may
   provide their own default context menu, and may add items to the
   author-provided context menu. For example, such a menu could allow
   the user to change the presentation of the <code>datagrid</code>
   element.</dd>

   <dt>To establish what classes apply to a row</dt>

   <dd>Invoke the <code
   title="dom-provider-getRowClasses">getRowClasses()</code> method
   with the index of the row in question, and an object implementing
   the <code>DOMTokenString</code> interface, initialised to empty.
   The index <var title="">i</var> must be in the range 0 &le; <var
   title="">i</var> &lt; <var title="">N</var>, where <var
   title="">N</var> is the total number of rows. The values contained
   in the <code>DOMTokenString</code> object when the method returns
   represent the classes that apply to the row in question. If the
   method is not defined, no classes apply to the row.</dd>

   <dt>To establish whether a row is a data row or a special row</dt>

   <dd>Examine the classes that apply to the row. If the <code
   title="datagrid-row-class-header">header</code> class applies to
   the row, then it is not a data row, it is a subheading. The data
   from the first cell of the row is the text of the subheading, the
   rest of the cells must be ignored. Otherwise, if the <code
   title="datagrid-row-class-separator">separator</code> class applies
   to the row, then in the place of the row, a separator should be
   shown. Otherwise, if the <code
   title="datagrid-row-class-selectable-separator">selectable-separator</code>
   class applies to the row, then the row should be a data row, but
   represented as a separator. (The difference between a <code
   title="datagrid-row-class-separator">separator</code> and a <code
   title="datagrid-row-class-selectable-separator">selectable-separator</code>
   is that the former is not an item that can be actually selected,
   whereas the second can be selected and thus has a context menu that
   applies to it, and so forth.) For both kinds of separator rows, the
   data of the rows' cells must all be ignored. If none of those three
   classes apply then the row is a simple data row.</dd>

   <dt id="rowType1">To establish whether a row is openable</dt>

   <dd>Check whether one of the <code
   title="datagrid-row-class-open">open</code> or <code
   title="datagrid-row-class-closed">closed</code> classes applies to
   the row. If one (or both) of these are present, then the row can be
   opened and closed, otherwise neither are present and the row cannot
   be opened or closed. (It might still have rows that consider this
   row a parent, however.)</dd>

   <dt>To establish whether an openable row is open or closed</dt>

   <dd>Check whether the <code
   title="datagrid-row-class-open">open</code> class applies to the
   row. If it does, the row is open. Otherwise, the row is closed. The
   <code title="datagrid-row-class-closed">closed</code> class is not
   examined to make this determination (although either it or the
   <code title="datagrid-row-class-open">open</code> class must be
   present to make the row openable in the first place). If a closed
   row has rows that consider it a parent, those rows must still be
   included in the rendering.</dd>
<!-- XXXPA
   <dt>To establish whether a row is deletable</dt>

   <dd>Check whether the <code
   title="datagrid-row-class-deletable">deletable</code> class applies
   to the row. If it does, the row is deletable, and interactive user
   agents should provide a way for the user to request that the row be
   deleted. (See the <code
   title="dom-provider-performActionOnRow">performActionOnRow()</code>
   method for more details.) Otherwise, the user agent should not
   provide the user with a method for requesting that the row be
   deleted.</dd>
-->
   <dt>To establish the value of a particular cell</dt>

   <dd>Invoke the <code
   title="dom-provider-getCellData">getCellData()</code> method with
   the first argument being the index of the cell's row and the second
   argument being the index of its column. The two arguments must be
   zero or positive integers less than the total number of rows and
   columns respectively. The return value is the value of the cell. If
   the return value is null or the empty string, or if the method is
   not defined, then the cell has no data. (For progress bar cells,
   the cell's value must be further interpreted, as described
   below.)</dd>

   <dt>To establish what classes apply to a cell</dt>

   <dd>Invoke the <code
   title="dom-provider-getCellClasses">getCellClasses()</code> method
   with the first argument being the index of the cell's row, the
   second argument being the index of its column, and the third being
   an object implementing the <code>DOMTokenString</code> interface,
   initialised to empty. The first two arguments must be zero or
   positive integers less than the total number of rows and columns
   respectively. The values contained in the
   <code>DOMTokenString</code> object when the method returns
   represent the classes that apply to that cell. If the method is not
   defined, no classes apply to the cell.</dd>

   <dt id="cellType1">To establish how the type of a cell</dt>

   <dd>Examine the classes that apply to the cell. If the <code
   title="datagrid-cell-class-progress">progress</code> class applies
   to the cell, it is a progress bar. Otherwise, if the <code
   title="datagrid-cell-class-cyclable">cyclable</code> class applies
   to the cell, it is a cycling cell whose value can be cycled between
   multiple states. Otherwise, none of these classes apply, and the
   cell is a simple text cell.</dd>

   <dt>To establish the value of a progress bar cell</dt>

   <dd>If the value <var title="">x</var> of the cell is a string that
   can be <a href="#toNumber">converted to a floating point number</a>
   in the range 0.0 &le; <var title="">x</var> &le; 1.0, then the
   progress bar has that value (0.0 means no progress, 1.0 means
   complete). Otherwise, the progress bar is an indeterminate progress
   bar.</dd>

   <dt id="cellType2">To establish how a simple text cell should be presented</dt>

   <dd>Check whether one of the <code
   title="datagrid-cell-class-checked">checked</code>, <code
   title="datagrid-cell-class-unchecked">unchecked</code>, or <code
   title="datagrid-cell-class-indeterminate">indeterminate</code>
   classes applies to the cell. If any of these are present, then the
   cell has a checkbox, otherwise none are present and the cell does
   not have a checkbox. If the cell has no checkbox, check whether the
   <code title="datagrid-cell-class-editable">editable</code> class
   applies to the cell. If it does, then the cell value is editable,
   otherwise the cell value is static.</dd>

   <dt>To establish the state of a cell's checkbox, if it has one</dt>

   <dd>Check whether the <code
   title="datagrid-cell-class-checked">checked</code> class applies to
   the cell. If it does, the cell is checked. Otherwise, check whether
   the <code title="datagrid-cell-class-unchecked">unchecked</code>
   class applies to the cell. If it does, the cell is unchecked.
   Otherwise, the <code
   title="datagrid-cell-class-indeterminate">indeterminate</code>
   class appplies to the cell and the cell's checkbox is in an
   indeterminate state. When the <code
   title="datagrid-cell-class-indeterminate">indeterminate</code>
   class appplies to the cell, the checkbox is a tristate checkbox,
   and the user can set it to the indeterminate state. Otherwise, only
   the <code title="datagrid-cell-class-checked">checked</code> and/or
   <code title="datagrid-cell-class-unchecked">unchecked</code>
   classes apply to the cell, and the cell can only be toggled betwen
   those two states.</dd>

  </dl>

  <p>If the data provider ever raises an exception while the
  <code>datagrid</code> is invoking one of its methods, the
  <code>datagrid</code> must act, for the purposes of that particular
  method call, as if the relevant method had not been defined.</p>

  <p>The data model is considered stable: user agents may assume that
  subsequent calls to the data provider methods will return the same
  data, until one of the update methods is called on the
  <code>datagrid</code> element. If a user agent is returned
  inconsistent data, for example if the number of rows returned by
  <code title="dom-provider-getRowCount">getRowCount()</code> varies
  in ways that do not match the calls made to the update methods, the
  user agent may disable the <code>datagrid</code>. User agents that
  do not disable the <code>datagrid</code> in inconsistent cases must
  honour the most recently returned values.</p>

  <p>User agents may cache returned values so that the data provider
  is never asked for data that could contradict earlier data. User
  agents must not cache the return value of the <code
  title="dom-provider-getRowMenu">getRowMenu</code> method.</p>

  <p>The exact algorithm used to populate the data grid is not defined
  here, since it will differ based on the presentation used. However,
  the behaviour of user agents must be consistent with the
  descriptions above. For example, it would be non-conformant for a
  user agent to make cells have both a checkbox and be editable, as
  the descriptions above state that cells that have a checkbox cannot
  be edited.</p> <!-- XXX speaking of which, do we actually want that
  limitation? -->


  <h5>Updating the <code>datagrid</code></h5>

  <p>Whenever the <code title="dom-datagrid-data">data</code>
  attribute is set to a new value, the <code>datagrid</code> must
  clear the current selection, remove all the displayed rows, and plan
  to repopulate itself using the information from the new data
  provider at the earliest opportunity.</p>

  <p>There are a number of update methods that can be invoked on the
  <code>datagrid</code> element to cause it to refresh itself in
  slightly less drastic ways:</p>

  <p>When the <dfn
  title="dom-datagrid-updateEverything"><code>updateEverything()</code></dfn>
  method is called, the user agent must repopulate the entire
  <code>datagrid</code>. If the number of rows decreased, the
  selection must be updated appropriately. If the number of rows
  increased, the new rows should be left unselected.</p>

  <p>When the <dfn
  title="dom-datagrid-updateRowsChanged"><code>updateRowsChanged(<var
  title="">row</var>, <var title="">count</var>)</code></dfn> method
  is called, the user agent must refresh the rendering of the rows in
  the range from row <var title="">row</var> to row <var
  title="">row</var>+<var title="">count</var>-1.</p>

  <p>When the <dfn
  title="dom-datagrid-updateRowsInserted"><code>updateRowsInserted(<var
  title="">row</var>, <var title="">count</var>)</code></dfn> method
  is called, the user agent must assume that <var title="">count</var>
  new rows have been inserted between what used to be row <var
  title="">row</var>-1 and row <var title="">row</var>. The user agent
  must update its rendering and the selection accordingly. The new
  rows should not be selected.</p>

  <p>When the <dfn
  title="dom-datagrid-updateRowsRemoved"><code>updateRowsRemoved(<var
  title="">row</var>, <var title="">count</var>)</code></dfn> method
  is called, the user agent must assume that <var title="">count</var>
  rows have been removed starting from row <var title="">row</var>.
  The user agent must update its rendering and the selection
  accordingly.</p>

  <p>The <dfn
  title="dom-datagrid-updateRowChanged"><code>updateRowChanged(<var
  title="">row</var>)</code></dfn> method must be exactly equivalent
  to calling <code
  title="dom-datagrid-updateRowsChanged">updateRowsChanged(<var
  title="">row</var>, 1)</code>.</p>

  <p>When the <dfn
  title="dom-datagrid-updateColumnChanged"><code>updateColumnChanged(<var
  title="">column</var>)</code></dfn> method is called, the user agent
  must refresh the rendering of the specified column <var
  title="">column</var>, for all rows.</p>

  <p>When the <dfn
  title="dom-datagrid-updateCellChanged"><code>updateCellChanged(<var
  title="">row</var>, <var title="">column</var>)</code></dfn> method
  is called, the user agent must refresh the rendering of the cell on
  row <var title="">row</var>, in column <var
  title="">column</var>.</p>

  <p>Any effects the update methods have on the
  <code>datagrid</code>'s selection is not considered a change to the
  selection, and must therefore not fire the <code
  title="event-select">select</code> event.</p>

  <p>These update methods should only be called by the data provider,
  or code acting on behalf of the data provider. In particular,
  calling the <code
  title="dom-datagrid-updateRowsInserted">updateRowsInserted()</code>
  and <code
  title="dom-datagrid-updateRowsRemoved">updateRowsRemoved()</code>
  methods without actually inserting or removing rows from the data
  provider is likely to result in inconsistent renderings.</p>


  <h5>Requirements for interactive user agents</h5>

  <p><em>This section only applies to interactive user agents.</em></p>

  <p>If the <code>datagrid</code> element has a <dfn
  title="attr-datagrid-disabled"><code>disabled</code></dfn>
  attribute, then the user agent must disable the
  <code>datagrid</code>, preventing the user from interacting with it.
  The <code>datagrid</code> element should still continue to update
  itself when the data provider signals changes to the data, though.
  Obviously, conformance requirements stating that
  <code>datagrid</code> elements must react to users in particular
  ways do not apply when one is disabled.</p>

  <p>If <a href="#rowType1">a row is openable</a>, then the user must
  be able to toggle its open/closed state. When the user does so, then
  the <code>datagrid</code> must invoke the data provider's <code
  title="dom-provider-toggleRowOpenState">toggleRowOpenState()</code>
  method, with the row's index as the only argument. The
  <code>datagrid</code> must <em>then</em> act as if the
  <code>datagrid</code>'s <code
  title="dom-datagrid-updateRowChanged">updateRowChanged()</code>
  method had been invoked with that row's index immediately before the
  provider's method was invoked.</p>

  <p>If a cell is a cell whose value <a href="#cellType1">can be
  cycled between multiple states</a>, then the user must be able to
  activate the cell to cycle its value. When the user activates this
  "cycling" behaviour of a cell, then the <code>datagrid</code> must
  invoke the data provider's <code
  title="dom-provider-cycleCell">cycleCell()</code> method, with the
  cell's row index as the first argument and its column index as the
  second. The <code>datagrid</code> must then act as if the
  <code>datagrid</code>'s <code
  title="dom-datagrid-updateCellChanged">updateCellChanged()</code>
  method had been invoked with those same arguments immediately before
  the provider's method was invoked.</p>

  <p>When a cell <a href="#cellType2">has a checkbox</a>, the user
  must be able to set the checkbox's state. When the user changes the
  state of a checkbox in such a cell, the <code>datagrid</code> must
  invoke the data provider's <code
  title="dom-provider-setCellCheckedState">setCellCheckedState()</code>
  method, with the cell's row index as the first argument, its column
  index as the second, and the checkbox's new state as the third. The
  state should be represented by the number 1 if the new state is
  checked, 0 if the new state is unchecked, and -1 if the new state is
  indeterminate (which must only be possible if the cell has the <code
  title="datagrid-cell-class-indeterminate">indeterminate</code> class
  set). The <code>datagrid</code> must then act as if the
  <code>datagrid</code>'s <code
  title="dom-datagrid-updateCellChanged">updateCellChanged()</code>
  method had been invoked, specifying the same cell, immediately
  before the provider's method was invoked.</p>

  <p>If a cell <a href="#cellType2">is editable</a>, the user must be
  able to edit the data for that cell, and doing so must cause the
  user agent to invoke the <code
  title="dom-provider-editCell">editCell()</code> method of the data
  provider with three arguments: the row number and column number of
  the cell, and the new text entered by the user. The user agent must
  then act as if the <code
  title="dom-datagrid-updateCellChanged">updateCellChanged()</code>
  method had been invoked, with the same row and column specified.</p>

  <!-- XXXPA <p class="big-issue">define actions (performAction(), etc)</p> -->

  <h5>The selection</h5>

  <p><em>This section only applies to interactive user agents. For
  other user agents, the <code
  title="dom-datagrid-selection">selection</code> attribute must
  return null.</em></p>

  <pre class="idl">interface <dfn>SelectedRowRanges</dfn> {
  readonly attribute long <span title="dom-SelectedRowRanges-count">count</span>;
  long <span title="dom-SelectedRowRanges-getRangeStart">getRangeStart</span>(in long index);
  long <span title="dom-SelectedRowRanges-getRangeLength">getRangeLength</span>(in long index);
  void <span title="dom-SelectedRowRanges-addRange">addRange</span>(in long start, in long count);
  void <span title="dom-SelectedRowRanges-removeRange">removeRange</span>(in long index);
  void <span title="dom-SelectedRowRanges-setSelected">setSelected</span>(in long row, in boolean selected);
  boolean <span title="dom-SelectedRowRanges-isSelected">isSelected</span>(in long row);
  void <span title="dom-SelectedRowRanges-selectAll">selectAll</span>();
  void <span title="dom-SelectedRowRanges-invert">invert</span>();
  void <span title="dom-SelectedRowRanges-clear">clear</span>();
};</pre>

  <p>Each <code>datagrid</code> element must keep track of which rows
  are currently selected. Initially no rows are selected, but this can
  be changed via the methods described in this section. <!--XXX
  select-provider-selection The default data provider, for instance,
  changes which rows are selected when it is first initialised.--></p>

  <p>The selection of a <code>datagrid</code> is represented by its
  <dfn title="dom-datagrid-selection"><code>selection</code></dfn> DOM
  attribute, which must be a <code>SelectedRowRanges</code> object.</p>

  <p>The <code>SelectedRowRanges</code> object represents the selection
  using ranges. Each range has a starting index and a length. The
  starting index is relative to the first row (index 0) of the
  <code>datagrid</code>. The length states how many of the rows are
  selected, starting from the starting index. A range of length one
  implies that only the row indicated by its starting index is
  selected.</p>

  <p>The ranges in a selection must not overlap. Ranges may be
  adjacent (e.g. one range starting at index zero with length two, and
  a second range starting at index two) but user agents should
  coalesce adjacent ranges.</p>

  <p>The start index of a range must not be negative, and must not be
  greater than the index of the last row. The length of a range must
  not be such that the range's start index plus its length yields a
  value greater than the number of rows.</p>

  <p>The <dfn
  title="dom-SelectedRowRanges-count"><code>count</code></dfn> attribute
  must return the number of ranges currently present in the selection.
  The <dfn
  title="dom-SelectedRowRanges-getRangeStart"><code>getRangeStart()</code></dfn>
  and <dfn
  title="dom-SelectedRowRanges-getRangeLength"><code>getRangeLength()</code</dfn>
  methods must return the starting index and length (respectively) of
  the range specified by their argument. If the argument is out of
  range (less than zero or greater than the number of ranges minus
  one), then they must raise an <code>INDEX_SIZE_ERR</code>
  exception. <a href="#refsDOM3CORE">[DOM3CORE]</a></p>

  <p>The ranges must be returned in ascending numerical order. That
  is, the value returned by the <code
  title="dom-SelectedRowRanges-getRangeStart">getRangeStart()</code>
  method for an index <var title="">x</var> must always be greater than
  the value it returns for any index less than <var
  title="">x</var>.</p>

  <p>The <dfn
  title="dom-SelectedRowRanges-addRange"><code>addRange()</code></dfn>
  method takes two arguments, an index and a length, specifying a
  range of rows to select. If the specified range is invalid or would
  contain rows outside the <code>datagrid</code> (e.g. the starting
  index is negative, or the length would take the selection beyond the
  end of the <code>datagrid</code>), then the method must raise an
  <code>INDEX_SIZE_ERR</code> exception. Otherwise, the specified
  range must be added to the selection. If the range overlaps, grows,
  or joins existing selections, the user agent must adjust the ranges
  so that no two ranges overlap, and should adjust them so that no two
  ranges are adjacent. Thus, calling
  <code title="dom-SelectedRowRanges-addRange">addRange()</code> may
  actually reduce the total number of ranges in the selection.</p>

  <p>The <dfn
  title="dom-SelectedRowRanges-removeRange"><code>removeRange()</code></dfn>
  method takes two arguments, an index and a length, specifying a
  range of rows to unselect. If the specified range is invalid or
  would contain rows outside the <code>datagrid</code> (e.g. the
  starting index is negative, or the length would take the selection
  beyond the end of the <code>datagrid</code>), then the method must
  raise an <code>INDEX_SIZE_ERR</code> exception. Otherwise, the
  specified rows must be removed from the selection. Calling
  <code title="dom-SelectedRowRanges-removeRange">removeRange()</code>
  may actually increase the total number of ranges in the selection,
  e.g. if a range had to be split in order to unselect a row in the
  middle.</p>

  <p>The <dfn
  title="dom-SelectedRowRanges-setSelected"><code>setSelected()</code></dfn>
  method takes two arguments, <var title="">row</var> and <var
  title="">selected</var>. When invoked, it must set the selection
  state of row <var title="">row</var> to selected if <var
  title="">selected</var> is true, and unselected if it is false, by
  adjusting the selection's ranges accordingly. If <var
  title="">row</var> is less than zero or greater than the index of
  the last row then the method must raise an
  <code>INDEX_SIZE_ERR</code> exception.</p>

  <p>The <dfn
  title="dom-SelectedRowRanges-isSelected"><code>isSelected()</code></dfn>
  method must return the selected state of the row specified by its
  argument. If the specified row exists and is in one of the ranges of
  the selection, it must return true, otherwise it must return
  false.</p>

  <p>The <dfn
  title="dom-SelectedRowRanges-selectAll"><code>selectAll()</code></dfn>
  method must replace all the current ranges in the selection with a
  single selection range having index zero and a length equal to the
  number of rows in the <code>datagrid</code>. If there are no rows in
  the <code>datagrid</code> then this method must instead only remove
  all the current ranges. (In a compliant UA, there would not be any
  ranges to remove.)</p>

  <p>The <dfn
  title="dom-SelectedRowRanges-invert"><code>invert()</code></dfn> method
  must adjust the selections such that the selection is inverted. That
  is, the ranges must be adjusted such that only the rows that were
  previously not a part of the selection must be made a part of the
  new selection.</p>

  <p>The <dfn
  title="dom-SelectedRowRanges-clear"><code>clear()</code></dfn> method
  must remove all the ranges in the selection.</p>

  <p>If the <code>datagrid</code> element has a <dfn
  title="attr-datagrid-multiple"><code>multiple</code></dfn>
  attribute, then the user must be able to select any number of rows
  (zero or more). If the attribute is not present, then the user must
  only be able to select a single row at a time, and selecting another
  one must unselect all the other rows.</p>

  <p class="note">This only applies to the user. Scripts can select
  multiple rows even when the <code
  title="attr-datagrid-multiple">multiple</code> attribute is
  absent.</p>

  <p>Whenever the selection of a <code>datagrid</code> changes,
  whether due to the user interacting with the element, or as a result
  of calls to methods of the <code
  title="dom-datagrid-selection">selection</code> object, a <dfn
  title="event-select"><code>select</code></dfn><!-- XXX check if we
  really should be DFNing this here. It's a DOM3 Core event. What's
  our story going to be regarding events and defining them? --> event
  that bubbles but is not cancelable must be fired on the
  <code>datagrid</code> element. If multiple changes are made to the
  selection via calls to the object's methods during a single
  execution of a script<!-- XXX should xref to a better explanation
  -->, then the <code title="event-select">select</code> events should
  be coalesced into one (which later <!--XXX xref again--> fires once
  the script execution has completed).</p>

  <p class="note">The <code>SelectedRowRanges</code> interface has no
  relation to the <code>Selection</code> and <code>Range</code>
  interfaces.</p>


  <h5>Columns and captions</h5>

  <p><em>This section only applies to interactive user agents.</em></p>

  <p>Each <code>datagrid</code> element must keep track of which
  columns are currently being rendered. User agents should initially
  show all the columns except those with the <code
  title="datagrid-column-class-initially-hidden">initially-hidden</code>
  class, but may allow users to hide or show columns. User agents
  should initially display the columns in the order given by the data
  provider, but may allow this order to be changed by the user.</p>

  <p>If columns are not being used, as might be the case if the data
  grid is being presented in an icon view, or if an overview of data
  is being read in an aural context, then the text of the first column
  of each row should be used to represent the row.</p>

  <p>If none of the columns have any captions (i.e. if the data
  provider does not provide a <code
  title="dom-provider-getCaptionText">getCaptionText()</code> method),
  then user agents may avoid showing the column headers at all. This
  may prevent the user from performing actions on the columns (such as
  reordering them, changing the sort column, and so on).</p>

  <p class="note">Whatever the order used for rendering, and
  irrespective of what columns are being shown or hidden, the "first
  column" as referred to in this specification is always the column
  with index zero, and the "last column" is always the column with the
  index one less than the value returned by the <code
  title="dom-provider-getcolumnCount">getColumnCount()</code> method
  of the data provider.</p>

  <p>If <a href="#columnType2">a column is sortable</a>, then the user
  must be able to invoke it to sort the data. When the user does so,
  then the <code>datagrid</code> must invoke the data provider's <code
  title="dom-provider-toggleColumnSortState">toggleColumnSortState()</code>
  method, with the column's index as the only argument. The
  <code>datagrid</code> must <em>then</em> act as if the
  <code>datagrid</code>'s <code
  title="dom-datagrid-updateEverything">updateEverything()</code>
  method had been invoked.</p>

<!--XXXDND
  <h5>Drag and drop in <code>datagrid</code>s</h5>

  <p><em>This section only applies to interactive user agents.</p>

  <p class="big-issue">define drag and drop in datagrids; selectiondraggable, etc.</p>
-->

  <h4>The <dfn><code>command</code></dfn> element</h4>

  <p><span title="metadata elements">Metadata element</span>, and
  <span>strictly inline-level content</span>.</p> <!-- XXX we sure we
  want it to be metadata? -->

  <dl class="element">
   <dt>Contexts in which this element may be used:</dt>
   <dd>In a <code>head</code> element.</dd>
   <dd>Where <span>strictly inline-level content</span> is allowed.</dd>
   <dt>Content model:</dt>
   <dd>Empty.</dd>
   <dt>Element-specific attributes:</dt>
   <dd><code title="attr-command-type">type</code></dd>
   <dd><code title="attr-command-label">label</code></dd>
   <dd><code title="attr-command-icon">icon</code></dd>
   <dd><code title="attr-command-hidden">hidden</code></dd>
   <dd><code title="attr-command-disabled">disabled</code></dd>
   <dd><code title="attr-command-checked">checked</code></dd>
   <dd><code title="attr-command-radiogroup">radiogroup</code></dd>
   <dd><code title="attr-command-default">default</code></dd>
   <dd>Also, the <code title="attr-command-title">title</code> attribute has special semantics on this element.</dd>
   <dt>DOM interface:</dt>
   <dd>
<pre class="idl">interface <dfn>HTMLCommandElement</dfn> : <span>HTMLElement</span> {
           attribute DOMString <span title="dom-command-type">type</span>;
           attribute DOMString <span title="dom-command-label">label</span>;
           attribute DOMString <span title="dom-command-icon">icon</span>;
           attribute boolean <span title="dom-command-hidden">hidden</span>;
           attribute boolean <span title="dom-command-disabled">disabled</span>;
           attribute boolean <span title="dom-command-checked">checked</span>;
           attribute DOMString <span title="dom-command-radiogroup">radiogroup</span>;
           attribute boolean <span title="dom-command-default">default</span>;
 void <span title="dom-command-click">click</span>();
};</pre>
    <p>The <code title="command-ro">Command</code> interface must also be implemented by
    this element.</p>
   </dd>
  </dl>

  <p>The <code>command</code> element represents a command that the user
  can invoke.</p>

  <p>The <dfn title="attr-command-type"><code>type</code></dfn>
  attribute indicates the kind of command: either a normal command
  with an associated action, or a state or option that can be toggled,
  or a selection of one item from a list of items.</p>

  <p>The attribute's value must be either "<code
  title="">command</code>", "<code title="">checkbox</code>", or
  "<code title="">radio</code>", denoting each of these three types of
  commands respectively. The attribute may also be omitted if the
  element is to represent the first of these types, a simple
  command.</p>

  <p>The <dfn title="attr-command-label"><code>label</code></dfn>
  attribute gives the name of the command, as shown to the user.</p>

  <p>The <dfn title="attr-command-title"><code>title</code></dfn>
  attribute gives a hint describing the command, which might be shown
  to the user to help him.</p>

  <p>The <dfn title="attr-command-icon"><code>icon</code></dfn>
  attribute gives a picture that represents the command. If the
  attribute is specified, the attribute's value must contain a
  URI.</p>

  <p>The <dfn title="attr-command-hidden"><code>hidden</code></dfn>
  attribute indicates, if present, that the command is not relevant
  and is to be hidden. If present, the attribute must have the exact
  value <code title="">hidden</code>.</p>

  <p>The <dfn
  title="attr-command-disabled"><code>disabled</code></dfn> attribute
  indicates, if present, that the command is not available in the
  current state. If present, the attribute must have the exact value
  <code title="">disabled</code>.</p>

  <p class="note">The distinction between <span
  title="command-facet-DisabledState">Disabled State</span> and <span
  title="command-facet-HiddenState">Hidden State</span> is subtle. A
  command should be Disabled if, in the same context, it could be
  enabled if only certain aspects of the situation were changed. A
  command should be marked as Hidden if, in that situation, the
  command will never be enabled. For example, in the context menu for
  a water faucet, the command "open" might be Disabled if the faucet
  is already open, but the command "eat" would be marked Hidden since
  the faucet could never be eaten.</p>

  <p>The <dfn title="attr-command-checked"><code>checked</code></dfn>
  attribute indicates, if present, that the command is selected. If
  present, the attribute must have the exact value <code
  title="">checked</code>.</p>

  <p>The <dfn
  title="attr-command-radiogroup"><code>radiogroup</code></dfn>
  attribute gives the name of the group of commands that will be
  toggled when the command itself is toggled, for commands whose <code
  title="attr-command-type">type</code> attribute has the value "<code
  title="">radio</code>". The scope of the name is the child list of
  the parent element.</p>

  <p>If the <code>command</code> element is used when <span
  title="menu generation">generating</span> a <span>context
  menu</span>, then the <dfn
  title="attr-command-default"><code>default</code></dfn> attribute
  indicates, if present, that the command is the one that would have
  been invoked if the user had directly activated the menu's subject
  instead of using its context menu.</p>

  <div class="example">

   <p class="big-issue">Need an example that shows an element that, if
   double-clicked, invokes an action, but that also has a context
   menu, showing the various <code>command</code> attributes off, and
   that has a default command.</p>

  </div>

  <p>The <dfn title="dom-command-type"><code>type</code></dfn>, <dfn
  title="dom-command-label"><code>label</code></dfn>, <dfn
  title="dom-command-icon"><code>icon</code></dfn>, <dfn
  title="dom-command-hidden"><code>hidden</code></dfn>, <dfn
  title="dom-command-disabled"><code>disabled</code></dfn>, <dfn
  title="dom-command-checked"><code>checked</code></dfn>, <dfn
  title="dom-command-radiogroup"><code>radiogroup</code></dfn>, and  <dfn
  title="dom-command-default"><code>default</code></dfn> DOM
  attributes must <span>reflect</span> their respective namesake
  content attributes.</p>

  <p>The <dfn title="dom-command-click"><code>click()</code></dfn>
  method's behaviour depends on the value of the <code
  title="attr-command-type">type</code> attribute of the element, as
  follows:</p>

  <dl class="switch">

   <dt>If the <code title="attr-command-type">type</code> attribute
   has the value <code title="">checkbox</code></dt>

   <dd><p>If the element has a <code
   title="attr-command-checked">checked</code> attribute, the UA must
   remove that attribute. Otherwise, the UA must add a <code
   title="attr-command-checked">checked</code> attribute, with the
   literal value <code title="">checked</code>. The UA must then
   <span>fire a <code title="">click</code> event</span> at the
   element.</p></dd>


   <dt>If the <code title="attr-command-type">type</code> attribute
   has the value <code title="">radio</code></dt>

   <dd><p>If the element has a parent, then the UA must walk the list
   of child nodes of that parent element, and for each node that is a
   <code>command</code> element, if that element has a <code
   title="attr-command-radiogroup">radiogroup</code> attribute whose
   value exactly matches the current element's (treating missing <code
   title="attr-command-radiogroup">radiogroup</code> attributes as if
   they were the empty string), and has a <code
   title="attr-command-checked">checked</code> attribute, must remove
   that attribute and <span>fire a <code title="">click</code>
   event</span> at the element.</p>

   <p>Then, the element's <code
   title="attr-command-checked">checked</code> attribute attribute
   must be set to the literal value <code title="">checked</code> and
   a <span title="file a click event"><code title="">click</code>
   event must be fired</span> at the element.</p></dd>


   <dt>Otherwise</dt>

   <dd><p>The UA must <span>fire a <code title="">click</code>
   event</span> at the element.</p></dd>

  </dl>

  <p class="note">Firing a synthetic <code
  title="event-click">click</code> event at the element does not cause
  any of the actions described above to happen.</p>

  <p class="big-issue">Need to define the command="" attribute</p>

  <p class="note"><code>command</code> elements are not rendered
  unless they <a href="#menus">form part of a menu</a>.</p>


  <h4>The <dfn><code>menu</code></dfn> element</h4>

  <p><span title="block-level elements">Block-level element</span>,
  and <span title="structured inline-level elements">structured
  inline-level element</span>.</p>

  <dl class="element">
   <dt>Contexts in which this element may be used:</dt>
   <dd>Where <span>block-level elements</span> are expected.</dd>
   <dd>Where <span>structured inline-level elements</span> are allowed.</dd>
   <dt>Content model:</dt>
   <dd>Zero or more <code>li</code> elements, or
   <span>inline-level content</span> (but not both).</dd>
   <dt>Element-specific attributes:</dt>
   <dd><code title="attr-menu-type">type</code></dd>
   <dd><code title="attr-menu-label">label</code></dd>
   <dd><code title="attr-menu-autosubmit">autosubmit</code></dd>
   <dt>DOM interface:</dt>
   <dd>
<pre class="idl">interface <dfn>HTMLCommandElement</dfn> : <span>HTMLElement</span> {
           attribute DOMString <span title="dom-menu-type">type</span>;
           attribute DOMString <span title="dom-menu-label">label</span>;
           attribute boolean <span title="dom-menu-autosubmit">autosubmit</span>;
};</pre>
  </dl>

  <p>The <code>menu</code> element represents a list of commands.</p>

  <p>The <dfn title="attr-menu-type"><code>type</code></dfn> attribute
  indicates the kind of menu. It must have either the value <code
  title="">popup</code> (to declare a context menu) or the value <code
  title="">toolbar</code> (to define a tool bar). The attribute may
  also be omitted, to indicate that the element is merely a list of
  commands that is neither declaring a context menu nor defining a
  tool bar.</p>

  <p>If a <code>menu</code> element has a <code
  title="attr-menu-type">type</code> attribute with the value <code
  title="">popup</code>, then it represents the commands of a context
  menu, and the user can only interact with the commands if that
  context menu is activated.</p>

  <p>If a <code>menu</code> element has a <code
  title="attr-menu-type">type</code> attribute with the value <code
  title="">toolbar</code>, then it represents a list of active
  commands that the user can immediately interact with.</p>

  <p>Otherwise, if a <code>menu</code> element has no <code
  title="attr-menu-type">type</code> attribute, or if has a <code
  title="attr-menu-type">type</code> attribute with a value other than
  <code title="">popup</code> or <code title="">toolbar</code>, then
  it either represents an unordered list of items (each represented by
  an <code>li</code> element), each of which represents a command that
  the user may perform or activate, or, if the element has no
  <code>li</code> element children, a <span>paragraph</span>
  describing available commands.</p>

  <p>The <dfn title="attr-menu-label"><code>label</code></dfn>
  attribute gives the label of the menu. It is used by user agents to
  display nested menus in the UI. For example, a context menu
  containing another menu would use the nested menu's <code
  title="attr-menu-label">label</code> attribute for the submenu's
  menu label.</p>

  <p>The <dfn
  title="attr-menu-autosubmit"><code>autosubmit</code></dfn> attribute
  indicates whether selections made to form controls in this menu
  should result in the control's form being immediately submitted. If
  the attribute is present, its value must be <code
  title="">autosubmit</code>.</p>

  <p>If a <code title="event-change">change</code> event bubbles
  through a <code>menu</code> element, then, in addition to any other
  default action that that event might have, the UA must act as if the
  following was an additional default action for that event: if (when
  it comes time to execute the default action) the <code>menu</code>
  element has an <code title="attr-menu-autosubmit">autosubmit</code>
  attribute, and the target of the event is an <code>input</code>
  element, and that element has a <code
  title="attr-input-type">type</code> attribute whose value is either
  <code title="">radio</code> or <code title="">checkbox</code>, and
  the <code>input</code> element in question has a non-null <code
  title="dom-input-form">form</code> DOM attribute, then the UA must
  invoke the <code title="dom-form-submit">submit()</code> method of
  the <code>form</code> element indicated by that DOM attribute.</p>

  <p>The <a href="#menus">processing model</a> for menus is described
  in the next section.</p>



  <h2>Processing models</h2>



  <h3>Navigating across documents</h3>

  <p class="big-issue">This section will end up defining what the UA
  should do when the user clicks a link. This will probably involve
  being honest about the fact that UAs typically content sniff for
  RSS/Atom feeds at this point. It should also reference the <code
  title="dom-navigator-registerProtocolHandler">registerProtocolHandler</code>
  and <code
  title="dom-navigator-registerContentHandler">registerContentHandler</code>
  methods and their stuff.</p>

<!--
   XXX HTTP Content-Type handling?
   http://www.25hoursaday.com/weblog/
   http://www.alvestrand.no/pipermail/ietf-types/2006-April/001707.html
   http://ln.hixie.ch/?start=1144794177&count=1
   http://www.intertwingly.net/blog/2006/04/13/Dont-throw-charset-out-with-the-bathwater
-->


  <h3>Scripting</h3>

  <h4><span title="SCS">[SCS]</span> Runtime script errors</h4>

  <p>Whenever a runtime script error occurs in one of the scripts
  associated with the document, the value of the
  <dfn><code>onerror</code></dfn> attribute of the <code>window</code>
  object (defined on the <code>WindowHTML</code> interface of that
  object), must be processed, as follows:</p>

  <dl class="switch">

   <dt>If the value is a function</dt>

   <dd>

    <p>The function referenced by the <code>onerror</code> attribute
    must be invoked with three arguments, before notifying the user of
    the error.</p>

    <p>The three arguments passed to the function are all
    <code>DOMString</code>s; the first must give the message that the
    UA is considering reporting, the second must give the URI to the
    resource in which the error occured, and the third must give the
    line number in that resource on which the error occured.</p>

    <p>If the function returns false, then the error should not be
    reported to the user. Otherwise, if the function returns another
    value (or does not return at all), the error should be reported to
    the user.</p>

    <p>Any exceptions thrown or errors caused by this function must be
    reported to the user immediately after the error that the function
    was called for, without calling the function again.</p>

   </dd>

   <dt>If the value is <code>null</code></dt>

   <dd>

    <p>The error should not reported to the user.</p>

   </dd>

   <dt>If the value is anything else</dt>

   <dd>

    <p>The error should be reported to the user.</p>

   </dd>

  </dl>

  <p>The initial value of <code>onerror</code> must be
  <code>undefined</code>.</p>


  <h3>Commands</h3>

  <p>A <dfn title="concept-command">command</dfn> is the abstraction
  behind menu items, buttons, and links. Once a command is defined,
  other parts of the interface can refer to the same command, allowing
  many access points to a single feature to share aspects such as the
  disabled state.</p>

  <p id="facets">Commands are defined to have the following
  <em>facets</em>:</p>

  <dl>

   <dt><dfn title="command-facet-Type">Type</dfn></dt>

   <dd>The kind of command: "command", meaning it is a normal command;
   "radio", meaning that triggering the command will, amongst other
   things, set the <span title="command-facet-CheckedState">Checked
   State</span> to true (and probably uncheck some other commands); or
   "checkbox", meaning that triggering the command will, amongst other
   things, toggle the value of the <span
   title="command-facet-CheckedState">Checked State</span>.</dd>

   <dt><dfn title="command-facet-ID">ID</dfn></dt>

   <dd>The name of the command, for referring to the command from the
   markup or from script. If a command has no ID, it is an
   <dfn>anonymous command</dfn>.</dd>

   <dt><dfn title="command-facet-Label">Label</dfn></dt>

   <dd>The name of the command as seen by the user.</dd>

   <dt><dfn title="command-facet-Hint">Hint</dfn></dt>

   <dd>A helpful or descriptive string that can be shown to the
   user.</dd>

   <dt><dfn title="command-facet-Icon">Icon</dfn></dt>

   <dd>A graphical image that represents the action.</dd>

   <dt><dfn title="command-facet-HiddenState">Hidden State</dfn></dt>

   <dd>Whether the command is hidden or not (basically, whether it
   should be shown in menus).</dd>

   <dt><dfn title="command-facet-DisabledState">Disabled State</dfn></dt>

   <dd>Whether the command can be triggered or not. If the <span
   title="command-facet-HiddenState">Hidden State</span> is true
   (hidden) then the <span
   title="command-facet-DisabledState">Disabled State</span> will be
   true (disabled) regardless. <span class="issue">We could make this
   into a string value that acts as a Hint for why the command is
   disabled.</span></dd>

   <dt><dfn title="command-facet-CheckedState">Checked State</dfn></dt>

   <dd>Whether the command is checked or not.</dd>

   <dt><dfn title="command-facet-Action">Action</dfn></dt>

   <dd>The actual effect that triggering the command will have. This
   could be a scripted event handler, a URI to which to navigate, or a
   form submission.</dd>

   <dt><dfn title="command-facet-Triggers">Triggers</dfn></dt>

   <dd>The list of elements that can trigger the command. The element
   defining a command is always in the list of elements that can
   trigger the command. For anonymous commands, only the element
   defining the command is on the list, since other elements have no
   way to refer to it.</dd>

  </dl>

  <p>Commands are represented by elements in the DOM. Any element that
  can define a command also implements the <code title="command-ro">Command</code>
  interface:</p>

  <pre class="idl">interface <dfn title="command-ro">Command</dfn> {<!--
 NOTE: to avoid clashing with the HTMLCommandElement interface's names,
       the members of this interface use cross-references with the title
       dom-command-ro-foo (note the "ro", which stands for "readonly").
-->
  readonly attribute DOMString <span title="dom-command-ro-commandType">commandType</span>;          
  readonly attribute DOMString <span title="dom-command-ro-id">id</span>;
  readonly attribute DOMString <span title="dom-command-ro-label">label</span>;
  readonly attribute DOMString <span title="dom-command-ro-title">title</span>;
  readonly attribute DOMString <span title="dom-command-ro-icon">icon</span>;
  readonly attribute boolean <span title="dom-command-ro-hidden">hidden</span>;
  readonly attribute boolean <span title="dom-command-ro-disabled">disabled</span>;              
  readonly attribute boolean <span title="dom-command-ro-checked">checked</span>;              
  void <span title="dom-command-ro-click">click</span>();
  readonly attribute HTMLCollection <span title="dom-command-ro-triggers">triggers</span>;
  readonly attribute <span>Command</span> <span title="dom-command-ro-command">command</span>;
};</pre>

  <p>The <code title="command-ro">Command</code> interface is implemented by any element
  capable of defining a command. (If an element can define a command,
  its definition will list this interface explicitly.) All the
  attributes of the <code title="command-ro">Command</code> interface are
  read-only. Elements implementing this interface may implement other
  interfaces that have attributes with identical names but that are
  mutable; in bindings that simply flatten all supported interfaces on
  the object, the mutable attributes must shadow the readonly
  attributes defined in the <code title="command-ro">Command</code> interface.</p>

  <p>The <dfn
  title="dom-command-ro-commandType"><code>commandType</code></dfn>
  attribute must return a string whose value is either "<code
  title="">command</code>", "<code title="">radio</code>", or "<code
  title="">checked</code>", depending on whether the <span
  title="command-facet-Type">Type</span> of the command defined by the
  element is "command", "radio", or "checked" respectively. If the
  element does not define a command, it must return null.</p>

  <p>The <dfn title="dom-command-ro-id"><code>id</code></dfn> attribute
  must return the command's <span title="command-facet-ID">ID</span>,
  or null if the element does not define a command or defines an
  <span>anonymous command</span>. This attribute will be shadowed by
  the <code title="dom-id">id</code> DOM attribute on the
  <code>HTMLElement</code> interface.</p>

  <p>The <dfn title="dom-command-ro-label"><code>label</code></dfn>
  attribute must return the command's <span
  title="command-facet-Label">Label</span>, or null if the element
  does not define a command or does not specify a <span
  title="command-facet-Label">Label</span>. This attribute will be
  shadowed by the <code title="">label</code> DOM attribute on
  <code>option</code> and <code>command</code> elements.</p>

  <p>The <dfn title="dom-command-ro-title"><code>title</code></dfn>
  attribute must return the command's <span
  title="command-facet-Hint">Hint</span>, or null if the element does
  not define a command or does not specify a <span
  title="command-facet-Hint">Hint</span>. This attribute will be
  shadowed by the <code title="dom-title">title</code> DOM attribute
  on the <code>HTMLElement</code> interface.</p>

  <p>The <dfn title="dom-command-ro-icon"><code>icon</code></dfn>
  attribute must return an absolute URI to the command's <span
  title="command-facet-Icon">Icon</span>. If the element does not
  specify an icon, or if the element does not define a command, then
  the attribute must return null. This attribute will be shadowed by
  the <code title="dom-command-icon">icon</code> DOM attribute on
  <code>command</code> elements.</p>

  <p>The <dfn title="dom-command-ro-hidden"><code>hidden</code></dfn>
  attribute must return true if the command's <span
  title="command-facet-HiddenState">Hidden State</span> is that the
  command is hidden, and false if it is that the command is not
  hidden. If the element does not define a command, the attribute must
  return false. This attribute will be shadowed by the <code
  title="dom-command-hidden">hidden</code> DOM attribute on
  <code>command</code> elements.</p>

  <p>The <dfn
  title="dom-command-ro-disabled"><code>disabled</code></dfn>
  attribute must return true if the command's <span
  title="command-facet-DisabledState">Disabled State</span> is that
  the command is disabled, and false if the command is not
  disabled. This attribute is not affected by the command's <span
  title="command-facet-HiddenState">Hidden State</span>. If the
  element does not define a command, the attribute must return
  false. This attribute will be shadowed by the <code
  title="">disabled</code> attribute on <code>button</code>,
  <code>input</code>, <code>option</code>, and <code>command</code>
  elements.</p>

  <p>The <dfn
  title="dom-command-ro-checked"><code>checked</code></dfn> attribute
  must return true if the command's <span
  title="command-facet-CheckedState">Checked State</span> is that the
  command is checked, and false if it is that the command is not
  checked. If the element does not define a command, the attribute
  must return false. This attribute will be shadowed by the <code
  title="">checked</code> attribute on <code>input</code> and
  <code>command</code> elements.</p>

  <p>The <dfn title="dom-command-ro-click"><code>click()</code></dfn>
  method must trigger the <span
  title="command-facet-Action">Action</span> for the command. If the
  element does not define a command, this method must do nothing. This
  method will be shadowed by the <code title="">click()</code> method
  on <code>button</code>, <code>input</code>, and <code>command</code>
  elements.</p>

  <p>The <dfn
  title="dom-command-ro-triggers"><code>triggers</code></dfn>
  attribute must return a list containing the elements that can
  trigger the command (the command's <span
  title="command-facet-Triggers">Triggers</span>). The list must be
  <span>live</span>. While the element does not define a command, the
  list must be empty.</p>

  <p>All the commands that have IDs must be in the list returned by
  the <dfn title="dom-document-commands"><code>commands</code></dfn>
  attribute of the document's <code>HTMLDocument</code>
  interface. The collection represented by this attribute is
  <span>live</span>; as commands are defined in or removed from the
  document, the attribute is updated.</p>

  <p>The following elements may define commands: <code
  title="a-command">a</code>, <code
  title="button-command">button</code>, <code
  title="input-command">input</code>, <code
  title="option-command">option</code>, <code
  title="command-element">command</code>.</p>


  <h4><dfn title="a-command">Using the <code>a</code> element to define a command</dfn></h4>

  <p>An <code>a</code> element with an <code
  title="attr-a-href">href</code> attribute <span
  title="concept-command">defines a command</span>.</p>

  <p>The <span title="command-facet-Type">Type</span> of the command
  is "command".</p>

  <p>The <span title="command-facet-ID">ID</span> of the command is
  the value of the <code title="attr-id">id</code> attribute of the
  element, if the attribute is present and not empty. Otherwise the
  command is an <span>anonymous command</span>.</p>

  <p>The <span title="command-facet-Label">Label</span> of the command
  is the string given by the element's <code>textContent</code> DOM
  attribute.</p>

  <p>The <span title="command-facet-Hint">Hint</span> of the command
  is the value of the <code title="attr-title">title</code> attribute
  of the <code>a</code> element. If the attribute is not present, the
  <span title="command-facet-Hint">Hint</span> is the empty
  string.</p>

  <p>The <span title="command-facet-Icon">Icon</span> of the command
  is the absolute URI of the first image in the element. Specifically,
  in a depth-first search of the children of the element, the first
  element that is <!--either an--> <code>img</code> element with a
  <code>src</code> attribute<!--, or an <code>object</code> element
  with a <code>data</code> attribute, or, if the UA supports SVG, an
  <code>svg</code> element in the SVG namespace with a valid <code
  title="">id</code> attribute,--> is the one that is used as the
  image. <!--If it is an <code>img</code> element then--> The URI must
  be taken from the element's <code>src</code> attribute. <!--If it is
  an <code>object</code> element then the URI is taken from the
  <code>data</code> attribute. --> Relative URIs must be resolved
  relative to the base URI of the image element. <!-- If it is an
  <code>svg</code> element then the URI is formed by taking the URI of
  the document and appending a "#" (U+0023 NUMBER SIGN) and the ID of
  the element.--> If no image is found, then the Icon facet is left
  blank.</p>

  <p>The <span title="command-facet-HiddenState">Hidden State</span>
  and <span title="command-facet-DisabledState">Disabled State</span>
  facets of the command are always false. (The command is always
  enabled.)</p>

  <p>The <span title="command-facet-CheckedState">Checked State</span>
  of the command is always false. (The command is never checked.)</p>

  <p>The <span title="command-facet-Action">Action</span> of the
  command is to <span title="fire a click event">fire a <code
  title="">click</code> event</span> at the element.</p>


  <h4><dfn title="button-command">Using the <code>button</code> element to define a command</dfn></h4>

  <p>A <code>button</code> element always <span
  title="concept-command">defines a command</span>.</p>

  <p>The <span title="command-facet-Type">Type</span>, <span
  title="command-facet-ID">ID</span>, <span
  title="command-facet-Label">Label</span>, <span
  title="command-facet-Hint">Hint</span>, <span
  title="command-facet-Icon">Icon</span>, <span
  title="command-facet-HiddenState">Hidden State</span>, <span
  title="command-facet-CheckedState">Checked State</span>, and <span
  title="command-facet-Action">Action</span> facets of the command are
  determined <span title="a-command">as for <code>a</code>
  elements</span> (see the previous section).</p>

  <p>The <span title="command-facet-DisabledState">Disabled
  State</span> of the command mirrors the disabled state of the
  button. Typically this is given by the element's <code
  title="attr-button-disabled">disabled</code> attribute, but certain
  button types become disabled at other times too (for example, the
  <code>move-up</code> button type is disabled when it would have no
  effect).</p>


  <h4><dfn title="input-command">Using the <code>input</code> element to define a command</dfn></h4>

  <p>An <code>input</code> element whose <code
  title="attr-input-type">type</code> attribute is one of
  <code>submit</code>, <code>reset</code>, <code>button</code>,
  <code>radio</code>, <code>checkbox</code>, <code>move-up</code>,
  <code>move-down</code>, <code>add</code>, and <code>remove</code>
  <span title="concept-command">defines a command</span>.</p>

  <p>The <span title="command-facet-Type">Type</span> of the command
  is "radio" if the <code title="attr-input-type">type</code>
  attribute has the value <code>radio</code>, "checkbox" if the
  <code>type</code> attribute has the value <code>checkbox</code>, and
  "command" otherwise.</p>

  <p>The <span title="command-facet-ID">ID</span> of the command is
  the value of the <code title="attr-id">id</code> attribute of the
  element, if the attribute is present and not empty. Otherwise the
  command is an <span>anonymous command</span>.</p>

  <p>The <span title="command-facet-Label">Label</span> of the command
  depends on the Type of the command:</p>

  <p>If the <span title="command-facet-Type">Type</span> is "command",
  then it is the string given by the <code
  title="attr-input-value">value</code> attribute, if any, and a
  <span>UA-dependent value</span><!-- XXX xref--> that the UA uses to
  label the button itself if the attribute is absent.</p>

  <p>Otherwise, the <span title="command-facet-Type">Type</span> is
  "radio" or "checkbox". If the element has a <code>label</code>
  element associated with it, the <code>textContent</code> of the
  first such element is the <span
  title="command-facet-Label">Label</span> (in DOM terms, this the
  string given by
  <code><var>element</var>.labels[0].textContent</code>).  Otherwise,
  the value of the <code>value</code> attribute, if present, is the
  <span title="command-facet-Label">Label</span>. Otherwise, the <span
  title="command-facet-Label">Label</span> is the empty string.</p>

  <p>The <span title="command-facet-Hint">Hint</span> of the command
  is the value of the <code title="attr-title">title</code> attribute
  of the <code>input</code> element. If the attribute is not present, the
  <span title="command-facet-Hint">Hint</span> is the empty
  string.</p>

  <p>There is no <span title="command-facet-Icon">Icon</span> for the
  command.</p>

  <p>The <span title="command-facet-HiddenState">Hidden State</span>
  of the command is always false. (The command is never hidden.)</p>

  <p>The <span title="command-facet-DisabledState">Disabled
  State</span> of the command mirrors the disabled state of the
  control. Typically this is given by the element's <code
  title="attr-input-disabled">disabled</code> attribute, but certain
  input types become disabled at other times too (for example, the
  <code>move-up</code> input type is disabled when it would have no
  effect).</p>

  <p>The <span title="command-facet-CheckedState">Checked State</span>
  of the command is true if the command is of <span
  title="command-facet-Type">Type</span> "radio" or "checkbox" and the
  element has a <code title="attr-input-checked">checked</code>
  attribute, and false otherwise.</p>

  <p>The <span title="command-facet-Action">Action</span> of the
  command is to <span title="fire a click event">fire a <code
  title="">click</code> event</span> at the element.</p> <!-- XXX this
  is probably wrong for radio and checkbox types, depending on how we
  define <input>. -->


  <h4><dfn title="option-command">Using the <code>option</code> element to define a command</dfn></h4>

  <p>An <code>option</code> element with an ancestor
  <code>select</code> element and either no <code>value</code>
  attribute or a <code>value</code> attribute that is not the empty
  string <span title="concept-command">defines a command</span>.</p>

  <p>The <span title="command-facet-Type">Type</span> of the command
  is "radio" if the <code>option</code>'s nearest ancestor
  <code>select</code> element has no <code
  title="attr-select-multiple">multiple</code> attribute, and
  "checkbox" if it does.</p>

  <p>The <span title="command-facet-ID">ID</span> of the command is
  the value of the <code title="attr-id">id</code> attribute of the
  element, if the attribute is present and not empty. Otherwise the
  command is an <span>anonymous command</span>.</p>

  <p>The <span title="command-facet-Label">Label</span> of the command
  is the value of the <code>option</code> element's <code
  title="attr-option-label">label</code> attribute, if there is one,
  or the value of the <code>option</code> element's
  <code>textContent</code> DOM attribute if it doesn't.</p>

  <p>The <span title="command-facet-Hint">Hint</span> of the command
  is the string given by the element's <code
  title="attr-title">title</code> attribute, if any, and the empty
  string if the attribute is absent.</p>

  <p>There is no <span title="command-facet-Icon">Icon</span> for the
  command.</p>

  <p>The <span title="command-facet-HiddenState">Hidden State</span>
  of the command is always false. (The command is never hidden.)</p>

  <p>The <span title="command-facet-DisabledState">Disabled
  State</span> of the command is true (disabled) if the element has a
  <code title="attr-option-disabled">disabled</code> attribute, and
  false otherwise.</p>

  <p>The <span title="command-facet-CheckedState">Checked State</span>
  of the command is true (checked) if the element's <code
  title="dom-option-selected">selected</code> DOM attribute is true,
  and false otherwise.</p>

  <p>The <span title="command-facet-Action">Action</span> of the
  command depends on its <span
  title="command-facet-Type">Type</span>. If the command is of <span
  title="command-facet-Type">Type</span> "radio" then this must set
  the <code title="dom-option-selected">selected</code> DOM attribute
  of the <code>option</code> element to true, otherwise it must toggle
  the state of the <code title="dom-option-selected">selected</code>
  DOM attribute (set it to true if it is false and vice versa). Then
  <span title="fire a change event">a <code title="">change</code>
  event must be fired</span> on the <code>option</code> element's
  nearest ancestor <code>select</code> element (if there is one), as
  if the selection had been changed directly.</p>


  <h4>Using the <dfn
  title="command-element"><code>command</code></dfn> element to define
  a command</h4>

  <p>A <code>command</code> element <span
  title="concept-command">defines a command</span>.</p>

  <p>The <span title="command-facet-Type">Type</span> of the command
  is "radio" if the <code>command</code>'s <code
  title="attr-command-type">type</code> attribute is
  "<code>radio</code>", "checkbox" if the attribute's value is
  "<code>checkbox</code>", and "command" otherwise.</p>

  <p>The <span title="command-facet-ID">ID</span> of the command is
  the value of the <code title="attr-id">id</code> attribute of the
  element, if the attribute is present and not empty. Otherwise the
  command is an <span>anonymous command</span>.</p>

  <p>The <span title="command-facet-Label">Label</span> of the command
  is the value of the element's <code
  title="attr-command-label">label</code> attribute, if there is one,
  or the empty string if it doesn't.</p>

  <p>The <span title="command-facet-Hint">Hint</span> of the command
  is the string given by the element's <code
  title="attr-command-title">title</code> attribute, if any, and the
  empty string if the attribute is absent.</p>

  <p>The <span title="command-facet-Icon">Icon</span> for the command
  is the absolute URI resulting from resolving the value of the
  element's <code title="attr-command-icon">icon</code> attribute as a
  URI relative to the element's base URI. If the element has no <code
  title="attr-command-icon">icon</code> attribute then the command has
  no <span title="command-facet-Icon">Icon</span>.</p>

  <p>The <span title="command-facet-HiddenState">Hidden State</span>
  of the command is true (hidden) if the element has a <code
  title="attr-command-hidden">hidden</code> attribute, and false
  otherwise.</p>

  <p>The <span title="command-facet-DisabledState">Disabled
  State</span> of the command is true (disabled) if the element has
  either a <code title="attr-command-disabled">disabled</code>
  attribute or a <code title="attr-command-hidden">hidden</code>
  attribute (or both), and false otherwise.</p>

  <p>The <span title="command-facet-CheckedState">Checked State</span>
  of the command is true (checked) if the element has a <code
  title="attr-command-checked">checked</code> attribute, and false
  otherwise.</p>

  <p>The <span title="command-facet-Action">Action</span> of the
  command is to invoke the behaviour described in the definition of
  the <code title="dom-command-click">click()</code> method of the
  <code>HTMLCommandElement</code> interface.</p>


  <h3>Forms <span title="TBW">[TBW]</span></h3>

  <p class="big-issue">See <a href="http://whatwg.org/specs/web-forms/current-work/#extend-form-controls">WF2</a> for now</p>

  <h4>Form submission <span title="TBW">[TBW]</span></h4>

  <p class="big-issue">See <a href="http://whatwg.org/specs/web-forms/current-work/#form-submission">WF2</a> for now</p>

  <h3 id="menus">Menus</h3>

  <h4>Introduction <span title="TBW">[TBW]</span></h4>

  <p class="big-issue">...</p>

<!--


  <pre>&lt;menu type="commands"&gt;
 &lt;li&gt;
  &lt;menu label="File"&gt;
   &lt;button type="button" onclick="fnew()"&gt;New...&lt;/button&gt;
   &lt;button type="button" onclick="fopen()"&gt;Open...&lt;/button&gt;
   &lt;button type="button" onclick="fsave()" id="save"&gt;Save&lt;/button&gt;
   &lt;button type="button" onclick="fsaveas()"&gt;Save as...&lt;/button&gt;
  &lt;/menu&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;menu label="Edit"&gt;
   &lt;button type="button" onclick="ecopy()"&gt;Copy&lt;/button&gt;
   &lt;button type="button" onclick="ecut()"&gt;Cut&lt;/button&gt;
   &lt;button type="button" onclick="epaste()"&gt;Paste&lt;/button&gt;
  &lt;/menu&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;menu label="Help"&gt;
   &lt;li&gt;&lt;a href="help.html"&gt;Help&lt;/a&gt;&lt;/li&gt;
   &lt;li&gt;&lt;a href="about.html"&gt;About&lt;/a&gt;&lt;/li&gt;
  &lt;/menu&gt;
 &lt;/li&gt;
&lt;/menubar&gt;

...

&lt;input command="save"/&gt; &lt;!- - This will act exactly like the
                             Save button above, including reflecting
                             its <code>disabled</code> state dynamically - -&gt;

</pre>

  <p>Here's some markup that falls back on the traditional abuse of
  the <code>select</code> element as a navigation menu, but which is
  implemented as a semi-correct menu using the new techniques of this
  document:</p>

<pre>&lt;form action="redirect.cgi"&gt;
 &lt;menu type="commands"&gt;
  &lt;label for="goto"&gt;Go to...&lt;/label&gt;
  &lt;menu label="Go"&gt;
   &lt;select id="goto"
           onchange="if (this.options[this.selectedIndex].value)
                     window.location = this.options[this.selectedIndex].value"&gt;
    &lt;option value="" selected="selected"&gt; Select site: &lt;/option&gt;
    &lt;option value="http://www.apple.com/"&gt; Apple &lt;/option&gt;
    &lt;option value="http://www.mozilla.org/"&gt; Mozilla &lt;/option&gt;
    &lt;option value="http://www.opera.com/"&gt; Opera &lt;/option&gt;
   &lt;/select&gt;
   &lt;span&gt;&lt;input type="submit" value="Go"&gt;&lt;/span&gt;
  &lt;/menu&gt;
 &lt;/menubar&gt;
&lt;/form&gt;</pre>

<form ...>
 <menu type="toolbar" autosubmit>
  <li>
   <select name="foo" onchange="form.submit()">
     ...
   </select>
   <button>Go</button>
  </li>
  <li>
   <select name="bar" onchange="form.submit()">
     ...
   </select>
   <button>Go</button>
  </li>
 </menu>
</form>

<form ...>
 <menu type="toolbar" autosubmit>
  <menu label="Foo">
   <select name="foo" onchange="form.submit()">
     ...
   </select>
   <button>Go</button>
  </menu>
  <menu label="Bar">
   <select name="bar" onchange="form.submit()">
     ...
   </select>
   <button>Go</button>
  </menu>
 </menu>
</form>

-->


  <h4><dfn>Building menus</dfn></h4>

  <p>A menu consists of a list of zero or more of the following
  components:</p>

  <ul class="brief">
   <li><span title="concept-command">Commands</span>, which can be marked as default commands</li>
   <li>Separators</li>
   <li>Other menus (which allows the list to be nested)</li>
  </ul>

  <p>The list corresponding to a particular element is built by
  iterating over its child nodes.</p>

  <p>For each child node in document order, the required behaviour
  depends on what the node is, as follows:</p>

  <dl class="switch">

   <dt>An element that <span title="concept-command">defines a command</span></dt>

   <dd>Append the command to the menu. If the element is a
   <code>command</code> element with a <code
   title="attr-command-default">default</code> attribute, mark the
   command as being a default command.</dd>


   <dt>An <code>hr</code> element</dt>
   <dt>An <code>option</code> element that has a <code
   title="attr-option-value">value</code> attribute set to the empty
   string, and has a <code
   title="attr-option-disabled">disabled</code> attribute, and whose
   <code>textContent</code> consists of a string of one or more
   hyphens (U+002D HYPHEN-MINUS)</dt>

   <dd>Append a separator to the menu.</dd>


   <dt>An <code>li</code> element</dt>

   <dd>Iterate over the children of the <code>li</code> element.</dd>


   <dt>A <code>menu</code> element with no <code title="attr-menu-label">label</code> attribute</dt>
   <dt>A <code>select</code> element</dt>

   <dd>Append a separator to the menu, then iterate over the children
   of the <code>menu</code> or <code>select</code> element, then
   append another separator.</dd>


   <dt>A <code>menu</code> element with a <code title="attr-menu-label">label</code> attribute</dt>
   <dt>An <code>optgroup</code> element</dt>

   <dd>Append a submenu to the menu, using the value of the element's
   <code title="">label</code> attribute as the label of the menu. The
   submenu must be constructed by taking the element and creating a
   new menu for it using the complete process described in this
   section.</dd>


   <dt>Any other node</dt>

   <dd>Ignore the node.</dd>

  </dl>

  <p>Once all the nodes have been processed as described above, the
  user agent must the post-process the menu as follows:</p>

  <ol>

   <li>Any menu item with no label, or whose label is the empty string, must be removed.</li>

   <li>Any sequence of two or more separators in a row must be collapsed to a single separator.</li>

   <li>Any separator at the start or end of the menu must be removed.</li>

  </ol>


  <h4><dfn>Context menus</dfn></h4>

  <p>The <code title="attr-contextmenu">contextmenu</code> attribute
  associates an element with a <code>menu</code> element.</p>

  <p>When an element's context menu is requested (e.g. by the user
  right-clicking the element, or pressing a context menu key), the UA
  must <span>fire a <code title="">contextmenu</code> event</span> on
  the element for which the menu was requested.</p>

  <p class="note">Typically, therefore, the firing of the <code
  title="event-contextmenu">contextmenu</code> event will be the
  default action of a <code title="mouseup">mouseup</code> or <code
  title="event-keyup">keyup</code> event. The exact sequence of events
  is UA-dependent, as it will vary based on platform conventions.</p>

  <p>The default action of the <code
  title="event-contextmenu">contextmenu</code> event depends on
  whether the element has a context menu assigned (using the <code
  title="attr-contextmenu">contextmenu</code> attribute) or not. If it
  does not, the default action must be for the user agent to show its
  default context menu, if it has one.</p>

  <p>If the element <em>does</em> have a context menu assigned, then
  the user agent must <span>fire a <code title="">show</code>
  event</span> on the relevant <code>menu</code> element.</p>

  <p>The default action of <em>this</em> event is that the user agent
  must show a context menu <span title="building menus">built</span>
  from the <code>menu</code> element.</p>

  <p>The user agent may also provide access to its default context
  menu, if any, with the context menu shown. For example, it could
  merge the menu items from the two menus together, or provide the
  page's context menu as a submenu of the default menu.</p>

  <p>If the user dismisses the menu without making a selection,
  nothing in particular happens.</p>

  <p>If the user selects a menu item that represents a <span
  title="concept-commands">command</span>, then the UA must invoke
  that command's <span title="command-facet-Action">Action</span>, as
  defined above.</p>

  <p>Context menus must not, while being shown, reflect changes in the
  DOM; they are constructed as the default action of the <code
  title="event-show">show</code> event and must remain like that until
  dismissed.</p>

  <p>User agents may provide means for bypassing the context menu
  processing model, ensuring that the user can always access the UA's
  default context menus. For example, the user agent could handle
  right-clicks that have the Shift key depressed in such a way that it
  does not fire the <code title="event-contextmenu">contextmenu</code>
  event and instead always shows the default context menu.</p>


  <h4><dfn>Toolbars</dfn></h4>

  <p>Toolbars are a kind of menu that is always visible.</p>

  <p>When a <code>menu</code> element has a <code
  title="attr-menu-type">type</code> attribute with the value <code
  title="">toolbar</code>, then the user agent must <span
  title="building menus">build</span> the menu for that
  <code>menu</code> element and <span
  title="render-toolbar">render</span><!-- XXX xref --> it in the
  document in a position appropriate for that <code>menu</code>
  element.</p>

  <p>The user agent must reflect changes made to the
  <code>menu</code>'s DOM immediately in the UI.</p>


  <h3>Repetition templates <span title="TBW">[TBW]</span></h3>

  <p class="big-issue">See <a href="http://whatwg.org/specs/web-forms/current-work/#repeatingFormControls">WF2</a> for now</p>





  <h2>The browser environment</h2>

  <p>This section describes a set of APIs that allow authors to make
  their documents and applications interact with the user agent,
  integrating with native features such as the navigation history,
  drag-and-drop, undo/redo, and selections.</p>

  <p>Many of the APIs are part of the <code>WindowHTML</code>
  interface. The <code>WindowHTML</code> interface must be obtainable
  from the <code>Window</code> object using binding-specific casting
  methods. <a href="#refsWINDOW">[WINDOW]</a></p>

  <pre class="idl">interface <dfn>WindowHTML</dfn> {

  // defined in this section
  readonly attribute <span>History</span> <span title="dom-history">history</span>;
  readonly attribute <span>ClientInformation</span> <span title="dom-navigator">navigator</span>; <!-- XXX IE6 also has window.clientInformation pointing to this same object -->
  readonly attribute <span>UndoManager</span> <span title="dom-undoManager">undoManager</span>;
  <span>Selection</span> <span title="dom-getSelection">getSelection</span>();
  readonly attribute <span>Storage</span> <span title="dom-sessionStorage">sessionStorage</span>;
  readonly attribute <span>StorageList</span> <span title="dom-globalStorage">globalStorage</span>;

  // defined in other sections
           attribute <span>Object</span> <span>onerror</span>;

};</pre>

 <!-- XXX XMLHttpRequest, Image, Audio, confirm, prompt, alert, ...
          http://msdn.microsoft.com/workshop/author/dhtml/reference/objects/obj_window.asp
          http://www.mozilla.org/docs/dom/domref/dom_window_ref.html
          http://lxr.mozilla.org/mozilla/source/dom/public/idl/base/nsIDOMWindow.idl
   -->


  <h3><span title="SCS">[SCS]</span> Session history and navigation</h3>

  <h4>The <dfn>session history</dfn> of browsing contexts</h4>

  <p><code>History</code> objects provide a representation of the
  pages in the session history of their <code>Window</code> object's
  <span>browsing context</span>. Each browsing context
  (<code>frame</code>, <code>iframe</code>, etc) has a distinct
  session history.</p> <!-- conf crit for that last statement is in
  the bit that defines browsing context -->

  <p>Each <code>DocumentUI</code> object in a browsing context's
  session history is associated with a unique instance of the
  <code>History</code> object, although they all must model the same
  underlying session history.</p>

  <p>The <dfn title="dom-history"><code>history</code></dfn> attribute
  of the <code>Window</code> interface must return the object
  implementing the <code>History</code> interface for that
  <code>Window</code> object's associated <code>DocumentUI</code>
  object.</p>

  <p><code>History</code> objects represent their <span>browsing
  context</span>'s session history as a flat list of URIs and
  <span title="state object">state objects</span>. (This does not imply
  that the UI need be linear. See the <a href="#history-notes">notes
  below</a>.)

  <p>Typically, the history list will consist of only URIs. However, a
  page can <span title="dom-history-pushState">add</span> <dfn
  title="state object">state objects</dfn> between its entry in the
  session history and the next ("forward") entry. These are then <span
  title="event-popstate">returned to the script</span> when the user
  (or script) goes back in the history, thus enabling authors to use
  the "navigation" metaphor even in one-page applications.</p>

  <p>Entries that consist of <span title="state object">state
  objects</span> share the same <code>DocumentUI</code> as the
  entry for the URI itself. Contiguous entries that differ just by
  fragment identifier must also share the same
  <code>DocumentUI</code>.</p>

  <p class="note">All entries that share the same
  <code>DocumentUI</code> (and that are therefore merely different
  states of one particular document) are contiguous by definition.</p>

  <p>At any point, one of the entries in the session history is the
  <dfn>current entry</dfn>. This is the entry representing the page in
  this <span>browsing context</span> that is considered the "current"
  page by the UA. The <span>current entry</span> is usually an entry
  for the <span title="dom-location-href">location</span> of the
  <code>DocumentUI</code>. However, it can also be one of the
  entries for <span title="state object">state objects</span> added to
  the history by that document.</p>

  <p>When the browser's navigation model differs significantly from
  the sequential model represented by the <code>History</code>
  interface, for example if separate <code>DocumentUI</code>
  objects in the session history are all simulatenously displayed and
  active, then the <span>current entry</span> could even be an entry
  unrelated to the <code>History</code> object's own
  <code>DocumentUI</code> object. If, when a method is invoked on
  a <code>History</code> object, the <span>current entry</span> for
  that <span>browsing context</span>'s session history has a different
  <code>DocumentUI</code> object than the <code>History</code>
  object's own <code>DocumentUI</code> object, then the user agent
  must raise a <code>NO_MODIFICATION_ALLOWED_ERR</code> DOM exception.
  (This can only happen if scripts are allowed to run in documents
  that are not the current document. Typically, however, user agents
  only allow scripts from the <span>current entry</span> to
  execute.)</p>

  <p>User agents may <dfn>discard</dfn> the DOMs of entries other than
  the <span>current entry</span>, reloading the pages afresh when the
  user or script navigates back to such pages. This specification does
  not specify when user agents should discard pages' DOMs and when
  they should cache them. See the section on the <code
  title="event-load">load</code> and <code
  title="event-unload">unload</code> events for more details.</p> <!--
  XXX crossref! -->

  <p>Entries that have had their DOM discarded must, for the purposes
  of the algorithms given below, act as if they had not. When the user
  or script navigates back or forwards to a page which has no
  in-memory DOM objects, any other entries that shared the same
  <code>DocumentUI</code> object with it must share the new object
  as well.</p>

  <p>When a user agent discards the DOM from an entry in the session
  history, it must also discard all the entries from the first state
  object entry for that <code>DocumentUI</code> object up to and
  including the last entry for that <code>DocumentUI</code> object
  (including any non-state-object entries in that range, such as
  entries where the user navigated using fragment identifiers). These
  entries are not recreated if the user or script navigates back to
  the page. If there are no state object entries for that
  <code>DocumentUI</code> object then no entries are removed.</p>

  <h4>The <code>History</code> interface</h4>

  <pre class="idl">interface <dfn>History</dfn> {
  readonly attribute long <span title="dom-history-length">length</span>;
<!--  DOMString <span title="dom-history-item">item</span>(in unsigned long index);
  readonly attribute DOMString <span title="dom-history-current">current</span>;
  readonly attribute DOMString <span title="dom-history-previous">previous</span>;
  readonly attribute DOMString <span title="dom-history-next">next</span>;
-->  void <span title="dom-history-go">go</span>(in long delta);
  void <span title="dom-history-go-0">go</span>();
  void <span title="dom-history-back">back</span>();
  void <span title="dom-history-forward">forward</span>();
  void <span title="dom-history-pushState">pushState</span>(in DOMObject data);
  void <span title="dom-history-clearState">clearState</span>();
};</pre>

  <p>The <dfn title="dom-history-length"><code>length</code></dfn>
  attribute of the <code>History</code> interface must return the
  number of entries in this session history.</p>

  <p>The actual entries are not accessible from script.</p>

<!--
  <p>The <dfn
  title="dom-history-item"><code>item(<var title="">index</var>)</code></dfn>
  function must raise a <span>security exception</span>.</p>

  <p>In the ECMAScript DOM binding, objects implementing this interface
  must support being dereferenced using square bracket notation (e.g.
  <code>history[1]</code>). Dereferencing with an integer index must
  be treated as equivalent to invoking the <code>item()</code> method
  with that index.</p>
-->

  <p>The <dfn
  title="dom-history-go"><code>go(<var title="">delta</var>)</code></dfn>
  method causes the UA to move the number of steps specified by
  <var title="">delta</var> in the session history.</p>

  <p>If the index of the <span>current entry</span> plus
  <var title="">delta</var> is less than zero or greater than or equal to the
  <span title="dom-history-length">number of items in the session
  history</span>, then the user agent must do nothing.</p>

  <p>If the <var title="">delta</var> is zero, then the user agent must act as
  if the <code title="dom-location-reload">location.reload()</code>
  method was called instead.</p>

  <p>Otherwise, the user agent must cause the current <span>browsing
  context</span> to navigate to the specified entry, as described
  below. The specified entry is the one whose index equals the index
  of the <span>current entry</span> plus <var title="">delta</var>.</p>

  <p>If there are any entries with state objects between the current
  entry and the specified entry (not inclusive), then the user agent
  must iterate through every entry between the current entry and the
  specified entry, starting with the entry closest to the current
  entry, and ending with the one closest to the specified entry. For
  each entry, if the entry is a state object, the user agent must
  <span>activate the state object</span>.</p>

  <p>If the specified entry has a different
  <code>DocumentUI</code> object than the <span>current
  entry</span> then the user agent must make that
  <code>DocumentUI</code> object the user's "current" one for that
  <span>browsing context</span>.</p>

  <p>If the specified entry is a state object, the user agent must
  <span title="activate the state object">activate that state
  object</span>. Otherwise, the user agent must update the current
  <span title="dom-location">location</span> object to the new
  location.</p>

  <p>User agents may also update other aspects of the document view
  when the location changes in this way, for instance the scroll
  position, values of form fields, etc.</p>

  <p>When the user navigates through a <span>browsing context</span>,
  e.g. using a browser's back and forward buttons, the user agent must
  translate this action into the equivalent invocations of the <code
  title="dom-history-go">history.go(<var title="">delta</var>)</code> method on
  the various affected <code title="dom-window">window</code>
  objects.</p>

  <p>Some of the other members of the <code>History</code> interface
  are defined in terms of the <code
  title="dom-history-go">go()</code><!-- and <code
  title="dom-history-item">item()</code>--> method<!--s-->, as
  follows:</p>

  <table>
   <tr>
    <th>Member</th>
    <th>Definition</th>
   </tr>
<!--
   <tr>
    <td><dfn title="dom-history-current"><code>current</code></dfn></td>
    <td>Must return the same as <code title="dom-history-item">item(<var>current entry</var>)</code></td>
   </tr>
   <tr>
    <td><dfn title="dom-history-previous"><code>previous</code></dfn></td>
    <td>Must return the same as <code title="dom-history-item">item(<var>current entry</var>-1)</code></td>
   </tr>
   <tr>
    <td><dfn title="dom-history-next"><code>next</code></dfn></td>
    <td>Must return the same as <code title="dom-history-item">item(<var>current entry</var>+1)</code></td>
   </tr>
-->
   <tr>
    <td><dfn title="dom-history-go-0"><code>go()</code></dfn></td>
    <td>Must do the same as <code title="dom-history-go">go(0)</code></td>
   </tr>
   <tr>
    <td><dfn title="dom-history-back"><code>back()</code></dfn></td>
    <td>Must do the same as <code title="dom-history-go">go(-1)</code></td>
   </tr>
   <tr>
    <td><dfn title="dom-history-forward"><code>forward()</code></dfn></td>
    <td>Must do the same as <code title="dom-history-go">go(1)</code></td>
   </tr>
  </table>
 
  <p>The <dfn
  title="dom-history-pushState"><code>pushState(<var title="">data</var>)</code></dfn>
  method adds a state object to the history.</p>

  <p>When this method is invoked, the user agent must first remove
  from the session history any entries for that
  <code>DocumentUI</code> from the entry after the <span>current
  entry</span> up to the last entry in the session history that
  references the same <code>DocumentUI</code> object, if any. If
  the <span>current entry</span> is the last entry in the session
  history, or if there are no entries after the <span>current
  entry</span> that reference the same <code>DocumentUI</code>
  object, then no entries are removed.</p>

  <p>Then, the user agent must add a state object entry to the session
  history, after the <span>current entry</span>, with the specified
  <var title="">data</var> as the state object.</p>

  <p>Finally, the user agent must update the <span>current
  entry</span> to be the this newly added entry.</p>

  <p class="big-issue">There has been a suggestion that pushState()
  should take a URI and a string; the URI to allow for the page to be
  bookmarked, and the string to allow the UA to give the page a
  meaningful title in the history state, if it shows history
  state.</p> <!-- XXX could have four variants of pushState to allow
  with/without URI and with/without title. Or maybe URI only makes
  sense if there is a title. -->

  <p>User agents may limit the number of state objects added to the
  session history per page. If a page hits the UA-defined limit, user
  agents must remove the entry immediately after the first entry for
  that <code>DocumentUI</code> object in the session history after
  having added the new entry. (Thus the state history acts as a FIFO
  buffer for eviction, but as a LIFO buffer for navigation.)</p>

  <p>The <dfn
  title="dom-history-clearState"><code>clearState()</code></dfn>
  method removes all the state objects for the
  <code>DocumentUI</code> object from the session history.</p>

  <p>When this method is invoked, the user agent must remove from the
  session history all the entries from the first state object entry
  for that <code>DocumentUI</code> object up to the last entry
  that references that same <code>DocumentUI</code> object, if
  any.</p>

  <p>Then, if the <span>current entry</span> was removed in the
  previous step, the <span>current entry</span> must be set to the
  last entry for that <code>DocumentUI</code> object in the
  session history.</p>

  <h4><dfn title="activate the state object">Activating state objects</dfn></h4>

  <p>When a state object in the session history is activated (which
  happens in the cases described above), the user agent must fire a
  <dfn title="event-popstate"><code>popstate</code></dfn> event in the
  <code>http://www.w3.org/2001/xml-events</code> namespace on the
  <span>the <code>body</code> element</span> using the
  <code>PopStateEvent</code> interface, with the state object in the
  <code title="dom-PopStateEvent-state">state</code> attribute. This
  event bubbles but is not cancelable and has no default action.</p>

  <p>If there is no "<span>the <code>body</code> element</span>" then
  the event must be fired on the document's <code>Document</code>
  object instead.</p>

  <!-- XXX onpopstate should be defined somewhere -->

  <pre class="idl">interface <dfn>PopStateEvent</dfn> : Event {
  readonly attribute DOMObject <span title="dom-PopStateEvent-state">state</span>;
  void               <span>initPopStateEvent</span>(in DOMString typeArg, 
                                       in boolean canBubbleArg, 
                                       in boolean cancelableArg, 
                                       in DOMObject statetArg);
  void               <span>initPopStateEventNS</span>(in DOMString namespaceURIArg,
                                         in DOMString typeArg, 
                                         in boolean canBubbleArg, 
                                         in boolean cancelableArg, 
                                         in DOMObject stateArg);
};</pre>

  <p>The <dfn><code>initPopStateEvent()</code></dfn> and
  <dfn><code>initPopStateEventNS()</code></dfn> methods must
  initialise the event in a manner analogous to the similarly-named
  methods in the DOM3 Events interfaces. <a
  href="#DOM3Events">[DOM3EVENTS]</a></p>

  <p>The <dfn title="dom-PopStateEvent-state"><code>state</code></dfn>
  attribute represents the context information for the event.</p>


  <h4>The <code>Location</code> interface</h4>

  <p>The <dfn title="dom-location"><code>location</code></dfn>
  attribute of the <code>Window</code> interface must return
  an object implementing the <code>Location</code> interface.</p>

  <p>For historical reasons, the <dfn
  title="dom-document-location"><code>location</code></dfn> attribute
  of the <code>DocumentUI</code> interface must return the same
  object as the <code title="dom-location">location</code> attribute
  on its associated <code>Window</code> object.</p>

  <p><code>Location</code> objects provide a representation of the URI
  of their document, and allow the <span>current entry</span> of the
  <span>browsing context</span>'s session history to be changed, by
  adding or replacing entries in the <code
  title="dom-history">history</code> object.</p>

  <pre class="idl">interface <dfn>Location</dfn> {
  readonly attribute DOMString <span title="dom-location-hash">hash</span>;
  readonly attribute DOMString <span title="dom-location-host">host</span>;
  readonly attribute DOMString <span title="dom-location-hostname">hostname</span>;
  readonly attribute DOMString <span title="dom-location-href">href</span>;
  readonly attribute DOMString <span title="dom-location-pathname">pathname</span>;
  readonly attribute DOMString <span title="dom-location-port">port</span>;
  readonly attribute DOMString <span title="dom-location-protocol">protocol</span>;
  readonly attribute DOMString <span title="dom-location-search">search</span>; <!-- blame brendan for these "innovative" names -->
  void <span title="dom-location-assign">assign</span>(in DOMString url);
  void <span title="dom-location-replace">replace</span>(in DOMString url);
  void <span title="dom-location-reload">reload</span>();
};</pre>

  <p>In the ECMAScript DOM binding, objects implementing this
  interface must stringify to the same value as the <code
  title="dom-location-href">href</code> attribute.</p>

  <p id="settingLocation">In the ECMAScript DOM binding, the <code
  title="">location</code> members of the <code>DocumentUI</code>
  and <code>Window</code> interfaces behave as if they had a setter:
  user agents must treats attempts to set these <code
  title="">location</code> attribute as attempts at setting the <code
  title="dom-location-href">href</code> attribute of the relevant
  <code>Location</code> object instead.</p>

  <p>The <dfn title="dom-location-href"><code>href</code></dfn>
  attribute returns the address of the page represented by the
  associated <code>DocumentUI</code> object, as an absolute IRI
  reference.</p>

  <p>On setting, <!--XXX Mozilla does this, but IE doesn't. What
  should we do?: the behaviour depends on the context in which the
  script that set the attribute is running. If the script ran as the
  direct result of the execution of a <code>script</code> element in
  the document represented by the <code>Location</code> object's
  associated <code>DocumentUI</code> object, then the user agent
  must act as if the <code
  title="dom-location-replace">replace()</code> method had been called
  with the new value as its argument. Otherwise,--> the user agent
  must act as if the <code title="dom-location-assign">assign()</code>
  method had been called with the new value as its argument.</p>

  <p>When the <dfn
  title="dom-location-assign"><code>assign(<var title="">url</var>)</code></dfn>
  method is invoked, the UA must remove all the entries after the
  <span>current entry</span> in its <code>DocumentUI</code>'s
  <code>History</code> object, add a new entry, with the given
  <var title="">url</var>, at the end of the list (asynchronously loading the
  new page if necessary), and then advance to that page as if the
  <code title="dom-history-forward">history.forward()</code> method
  had been invoked.</p>

  <p>When the <dfn
  title="dom-location-replace"><code>replace(<var title="">url</var>)</code></dfn>
  method is invoked, the UA must act as if the <code
  title="dom-location-assign">assign()</code> method had been invoked,
  but with the additional step of removing the entry that was the
  <span>current entry</span> before the method call after the above
  steps (thus simply causing the current page to be replaced by the
  new one).</p>

  <p>In both cases, if the location before the method call would
  differ from the location after the method only in terms of the
  fragment identifier, then the user agent must use the same
  <code>DocumentUI</code> object, updating only the scroll
  position in the document's view(s) appropriately.</p>

  <p>Relative <var title="">url</var> arguments for <code
  title="dom-location-assign">assign()</code> and <code
  title="dom-location-replace">replace()</code> must be resolved
  relative to the base URI of the script that made the method
  call.</p> <!-- XXX what about if the base URI is data: or
  javascript: or about: or something else without a way to resolve
  base URIs? -->

  <p class="big-issue">The component parts and .reload() are yet to be
  defined. If anyone can come up with a decent definition, let me
  know.</p>

<!--
  http://www.hixie.ch/tests/adhoc/dom/level0/location/components/
  http://lxr.mozilla.org/seamonkey/source/dom/src/base/nsLocation.cpp
  http://wp.netscape.com/eng/mozilla/3.0/handbook/javascript/ref_h-l.htm#84722
  <dfn title="dom-location-protocol"><code>protocol</code></dfn>
  <dfn title="dom-location-host"><code>host</code></dfn> ( host name and port )
  <dfn title="dom-location-port"><code>port</code></dfn> ( just port )
  <dfn title="dom-location-hostname"><code>hostname</code></dfn> ( just host name )
  <dfn title="dom-location-pathname"><code>pathname</code></dfn>
  <dfn title="dom-location-search"><code>search</code></dfn>
  <dfn title="dom-location-hash"><code>hash</code></dfn>
-->

<!--
  <dfn title="dom-location-reload"><code>reload()</code></dfn>
  reload during resize event:
  redisplay the current page (without reloading it). This
  theoretically would have no effect but in practice can be useful to
  work around rendering bugs.

reload on shared DocumentUI updates all of them

user reload must be equivalent to .reload()
-->


  <h4 id="history-notes">Implementation notes for session history</h4>

  <p><em>This section is non-normative.</em></p>

  <p>The <code>History</code> interface is not meant to place
  restrictions on how implementations represent the session history to
  the user.</p>

  <p>For example, session history could be implemented in a tree-like
  manner, with each page having multiple "forward" pages. This
  specification doesn't define how the linear list of pages in the
  <code title="dom-history">history</code> object are derived from the
  actual session history as seen from the user's perspective.</p>

  <p>Similarly, a page containing two <code>iframe</code>s has a <code
  title="dom-history">history</code> object distinct from the
  <code>iframe</code>s' <code title="dom-history">history</code>
  objects, despite the fact that typical Web browsers present the user
  with just one "Back" button, with a session history that interleaves
  the navigation of the two inner frames and the outer page.</p>

  <p><strong>Security:</strong> It is suggested that to avoid letting
  a page "hijack" the history navigation facilities of a UA by abusing
  <code title="dom-history-pushState">pushState()</code>, the UA
  provide the user with a way to jump back to the previous page
  (rather than just going back to the previous state). For example,
  the back button could have a drop down showing just the pages in the
  session history, and not showing any of the states. Similarly, an
  aural browser could have two "back" commands, one that goes back to
  the previous state, and one that jumps straight back to the previous
  page.</p>

  <p>In addition, a user agent could ignore calls to <code
  title="dom-history-pushState">pushState()</code> that are invoked on
  a timer, or from event handlers that do not represent a clear user
  action, or that are invoked in rapid succession.</p>



  <h3>Browser state</h3>

  <p>The <dfn title="dom-navigator"><code>navigator</code></dfn>
  attribute of the <code>Window</code> interface must return an
  instance of the <code>ClientInformation</code> interface, which
  represents the identity and state of the user agent (the client),
  and allows Web pages to register themselves as potential protocol
  and content handlers:</p>

  <pre class="idl">interface <dfn>ClientInformation</dfn> {
  readonly attribute boolean <span title="dom-navigator-onLine">onLine</span>;
  void <span title="dom-navigator-registerProtocolHandler">registerProtocolHandler</span>(in DOMString protocol, in DOMString uri, in DOMString title);
  void <span title="dom-navigator-registerContentHandler">registerContentHandler</span>(in DOMString mimeType, in DOMString uri, in DOMString title);
<!-- XXX there are other attributes! -->};</pre>

  <h4><span title="SCS">[SCS]</span> Offline Web applications</h4>

  <p>The <dfn
  title="dom-navigator-onLine"><code>navigator.onLine</code></dfn>
  attribute must return false if the user agent will not contact the
  network when the user follows links or when a script requests a
  remote page (or knows that such an attempt would fail), and must
  return true otherwise.</p>

  <p>The <dfn title="event-offline"><code>offline</code></dfn> event
  must be fired when the value of the <code
  title="dom-navigator-onLine">navigator.onLine</code> attribute of the
  <code>Window</code> changes from true to false.</p>

  <p>The <dfn title="event-online"><code>online</code></dfn> event
  must be fired when the value of the <code
  title="dom-navigator-onLine">navigator.onLine</code> attribute of the
  <code>Window</code> changes from false to true.</p>

  <p>These events are in the
  <code>http://www.w3.org/2001/xml-events</code> namespace, do bubble,
  are not cancelable, have no default action, and use the normal
  <code>Event</code> interface. They must be fired on <span>the
  <code>body</code> element</span>, or, if there isn't a "<span>the
  <code>body</code> element</span>", on the
  <code>HTMLDocument</code> object. (As the events bubble, they will
  reach the <code>Window</code> object.)</p>

  <!-- XXX ononline onoffline need to be defined -->

  <h4 id="custom-handlers"><span title="SCS">[SCS]</span> Custom protocol and content handlers</h4>

  <p>The <dfn
  title="dom-navigator-registerProtocolHandler"><code>registerProtocolHandler()</code></dfn>
  method allows Web sites to register themselves as possible handlers
  for particular protocols. For example, an online fax service could
  register itself as a handler of the <code>fax:</code> protocol (<a
  href="#refsRFC2806">[RFC2806]</a>), so that if the user clicks on
  such a link, he is given the opportunity to use that Web
  site. Analogously, the <dfn
  title="dom-navigator-registerContentHandler"><code>registerContentHandler()</code></dfn>
  method allows Web sites to register themselves as possible handlers
  for content in a particular MIME type. For example, the same online
  fax service could register itself as a handler for
  <code>image/g3fax</code> files (<a
  href="#refsRFC1494">[RFC1494]</a>), so that if the user has no
  native application capable of handling G3 Facsimile byte streams,
  his Web browser can instead suggest he use that site to view the
  image.</a>

  <p>User agents may, within the constraints described in this
  section, do whatever they like when the methods are called. A UA
  could, for instance, prompt the user and offer the user the
  opportunity to add the site to a shortlist of handlers, or make the
  handlers his default, or cancel the request. UAs could provide such
  a UI through modal UI or through a non-modal transient notification
  interface. UAs could also simply silently collect the information,
  providing it only when relevant to the user.</p>

  <p>There is <a href="#sample-handler-impl">an example of how these
  methods could be presented to the user</a> below.</p>

  <p>The arguments to the methods have the following meanings:</p>

  <dl>

   <dt><var title="">protocol</var> (<code title="dom-navigator-registerProtocolHandler">registerProtocolHandler()</code> only)</dt>

   <dd>

    <p>A scheme, such as <code>ftp</code> or <code>fax</code>. The
    scheme must be treated case-insensitively by user agents for the
    purposes of comparing with the scheme part of URIs that they
    consider against the list of registered handlers.</p>

    <p>The <var title="">protocol</var> value, if it contains a colon (as in
    "<code>ftp:</code>"), will never match anything, since schemes
    don't contain colons.</p>

   </dd>

   <dt><var title="">mimeType</var> (<code title="dom-navigator-registerContentHandler">registerContentHandler()</code> only)</dt>

   <dd>

    <p>A MIME type, such as <code>model/vrml</code> or
    <code>text/richtext</code>. The MIME type must be treated
    case-insensitively by user agents for the purposes of comparing
    with MIME types of documents that they consider against the list
    of registered handlers.</p>

    <p>User agents must compare the given values only to the MIME
    type/subtype parts of content types, not to the complete type
    including parameters. Thus, if <var title="">mimeType</var> values
    passed to this method include characters such as commas or
    whitespace, or include MIME parameters, then the handler being
    registered will never be used.</p>

   </dd>

   <dt><var title="">uri</var></dt>

   <dd>

    <p>The URI of the page that will handle the requests. When the
    user agent uses this URI, it must replace the first occurrence of
    the exact literal string "<code>%s</code>" with an escaped version
    of the URI of the content in question (as defined below), and then
    fetch the resulting URI using the GET method (or equivalent for
    non-HTTP URIs).</p>

    <p>To get the escaped version of the URI, first, the domain part
    of the URI (if any) must be converted to its punycode
    representation, and then, every character in the URI that is not
    in the ranges given in the next paragraph must be replaced by its
    UTF-8 byte representation, each byte being represented by a U+0025
    (%) character and two digits in the range U+0030 (0) to U+0039 (9)
    and U+0041 (A) to U+0046 (F) giving the hexadecimal representation
    of the byte.</p>

    <p>The ranges of characters that must not be escaped are: U+002D
    (-), U+002E (.), U+0030 (0) to U+0039 (9), U+0041 (A) to U+005A
    (Z), U+005F (_), U+0061 (a) to U+007A (z), and U+007E (~).</p>

    <!-- XXX move that to a common algorithms section if any other
    part of the spec needs it -->

    <div class="example">

     <p>If the user had visited a site that made the following call:</p>

     <pre>navigator.registerContentHandler('application/x-soup', 'http://example.com/soup?url=%s', 'SoupWeb&trade;')</pre>

     <p>...and then clicked on a link such as:</p>

     <pre>&lt;a href="http://www.example.net/chickenk&#xEF;wi.soup">Download our Chicken Kiwi soup!&lt;/a></pre>

     <p>...then, assuming this <code>chickenkiwi.soup</code> file was
     served with the MIME type <code>application/x-soup</code>, the UA
     might instead navigate to the following URI:</p>

     <pre>http://example.com/soup?url=http%3A%2F%2Fwww.example.net%2Fchickenk%C3%AFwi.soup</pre>

     <p>This site could then fetch the <code>chickenkiwi.soup</code>
     file and do whatever it is that it does with soup (synthesise it
     and ship it to the user, or whatever).</p>

    </div>

   </dd>

   <dt><var title="">title</var></dt>

   <dd>

    <p>A descriptive title of the handler, which the UA might use to
    remind the user what the site in question is.</p>

   </dd>

  </dl>

  <p>User agents should raise <span title="security
  exception">security exceptions</span> if the methods are called with
  <var title="">protocol</var> or <var title="">mimeType</var> values
  that the UA deems to be "privileged". For example, a site attempting
  to register a handler for <code>http</code> URIs or
  <code>text/html</code> content in a Web browser would likely cause
  an exception to be raised.</p>

  <p>User agents must raise a <code>SYNTAX_ERR</code> exception if the
  <var title="">uri</var> argument passed to one of these methods does
  not contain the exact literal string "<code>%s</code>".</p>

  <p>User agents must not raise any other exceptions (other than
  binding-specific exceptions, such as for an incorrect number of
  arguments in an ECMAScript implementation).</p>

  <p>This section does not define how the pages registered by these
  methods are used, beyond the requirements on how to process the
  <var>uri</var> value (see above). To some extent, the <span
  title="navigating across documents">processing model for navigating
  across documents</span> defines some cases where these methods are
  relevant, but in general UAs may use this information wherever they
  would otherwise consider handing content to native plugins or helper
  applications.</p>

  <p>UAs must not use registered content handlers to handle content
  that was returned as part of a non-GET transaction (or rather, as
  part of any non-idempotent transaction), as the remote site would
  not be able to fetch the same data.</p>


  <h5>Security and privacy</h5>

  <p>These mechanisms can introduce a number of concerns, in
  particular privacy concerns.</p>

  <p><strong>Hijacking all Web usage.</strong> User agents should not
  allow protocols that are key to its normal operation, such as
  <code>http</code> or <code>https</code>, to be rerouted through
  third-party sites. This would allow a user's activities to be
  trivially tracked, and would allow user information, even in secure
  connections, to be collected.</p>

  <p><strong>Hijacking defaults.</strong> It is strongly recommended
  that user agents do not automatically change any defaults, as this
  could lead the user to send data to remote hosts that the user is
  not expecting. New handlers registering themselves should never
  automatically cause those sites to be used.</p>

  <p><strong>Registration spamming.</strong> User agents should
  consider the possibility that a site will attempt to register a
  large number of handlers, possibly from multiple domains (e.g. by
  redirecting through a series of pages each on a different domain,
  and each registering a handler for <code>video/mpeg</code> &mdash;
  analogous practices abusing other Web browser features have been
  used by pornography Web sites for many years). User agents should
  gracefully handle such hostile attempts, protecting the user.</p>

  <p><strong>Misleading titles.</strong> User agents should not rely
  wholy on the <var>title</var> argument to the methods when
  presenting the registered handlers to the user, since sites could
  easily lie. For example, a site <code>hostile.example.net</code>
  could claim that it was registering the "Cuddly Bear Happy Content
  Handler". User agents should therefore use the handler's domain in
  any UI along with any title.</p>

  <p><strong>Hostile handler metadata.</strong> User agents should
  protect against typical attacks against strings embedded in their
  interface, for example ensuring that markup or escape characters in
  such strings are not executed, that null bytes are properly handled,
  that over-long strings do not cause crashes or buffer overruns, and
  so forth.</p>

  <p><strong>Leaking Intranet URIs.</strong> The mechanism described
  in this section can result in secret Intranet URIs being leaked, in
  the following manner:</p>

  <ol>

   <li>The user registers a third-party content handler as the default
   handler for a content type.</li>

   <li>The user then browses his corporate Intranet site and accesses
   a document that uses that content type.</li>

   <li>The user agent contacts the third party and hands the third
   party the URI to the Intranet content.</li>

  </ol>

  <p>No actual confidential file data is leaked in this manner, but
  the URIs themselves could contain confidential information. For
  example, the URI could be
  <code>https://www.corp.example.com/upcoming-aquisitions/samples.egf</code>,
  which might tell the third party that Example Corporation is
  intending to merge with Samples LLC. Implementors might wish to
  consider allowing administrators to disable this feature for certain
  subdomains, content types, or protocols.</p>

  <p><strong>Leaking secure URIs.</strong> User agents should not send
  HTTPS URIs to third party sites registered as content handlers, in
  the same way that user agents do not send <code>Referer</code>
  headers from secure sites to third party sites.</p>

  <p><strong>Leaking credentials.</strong> User agents must never send
  username or password information in the URIs that are escaped and
  included sent to the handler sites. User agents may even avoid
  attempting to pass to Web-based handlers the URIs of resources
  that are known to require authentication to access, as such sites
  would be unable to access the resources in question without
  prompting the user for credentials themselves (a practice that would
  require the user to know whether to trust the third party handler, a
  decision many users are unable to make or even understand).</p>


  <h5 id="sample-handler-impl">Sample user interface</h5>

  <p><em>This section is non-normative.</em></p>

  <p>A simple implementation of this feature for a desktop Web browser
  might work as follows.</p>

  <p>The <code
  title="dom-navigator-registerProtocolHandler">registerProtocolHandler()</code>
  method could display a modal dialog box:</p>

  <pre>||[ Protocol Handler Registration ]|||||||||||||||||||||||||||
|                                                            |
| This Web page:                                             |
|                                                            |
|    Kittens at work                                         |
|    http://kittens.example.org/                             |
|                                                            |
| ...would like permission to handle the protocol "x-meow:"  |
| using the following Web-based application:                 |
|                                                            |
|    Kittens-at-work displayer                               |
|    http://kittens.example.org/?show=%s                     |
|                                                            |
| Do you trust the administrators of the "kittens.example.   |
| org" domain?                                               |
|                                                            |
|              ( Trust kittens.example.org )  (( Cancel ))   |
|____________________________________________________________|</pre>

  <p>...where "Kittens at work" is the title of the page that invoked
  the method, "http://kittens.example.org/" is the URI of that page,
  "x-meow" is the string that was passed to the <code
  title="dom-navigator-registerProtocolHandler">registerProtocolHandler()</code>
  method as its first argument (<var title="">protocol</var>),
  "http://kittens.example.org/?show=%s" was the second argument (<var
  title="">uri</var>), and "Kittens-at-work displayer" was the third
  argument (<var title="">title</var>).</p>

  <p>If the user clicks the Cancel button, then nothing further
  happens. If the user clicks the "Trust" button, then the handler is
  remembered.</p>

  <p>When the user then attempts to fetch a URI that uses the
  "x-meow:" scheme, then it might display a dialog as follows:</p>

  <pre>||[ Unknown Protocol ]||||||||||||||||||||||||||||||||||||||||
|                                                            |
| You have attempted to access:                              |
|                                                            |
|    x-meow:S2l0dGVucyBhcmUgdGhlIGN1dGVzdCE%3D               |
|                                                            |
| How would you like FerretBrowser to handle this resource?  |
|                                                            |
|  (o) Contact the FerretBrowser plugin registry to see if   |
|      there is an official way to handle this resource.     |
|                                                            |
|  ( ) Pass this URI to a local application:                 |
|      [ /no application selected/             ] ( Choose )  |
|                                                            |
|  ( ) Pass this URI to the "Kittens-at-work displayer"      |
|      application at "kittens.example.org".                 |
|                                                            |
|  [ ] Always do this for resources using the "x-meow"       |
|      protocol in future.                                   |
|                                                            |
|                                     ( Ok )  (( Cancel ))   |
|____________________________________________________________|</pre>

  <p>...where the third option is the one that was primed by the site
  registering itself earlier.</p>

  <p>If the user does select that option, then the browser, in
  accordance with the requirements described in the previous two
  sections, will redirect the user to
  "http://kittens.example.org/?show=x-meow%3AS2l0dGVucyBhcmUgdGhlIGN1dGVzdCE%253D".</p>

  <p>The <code
  title="dom-navigator-registerContentHandler">registerContentHandler()</code>
  method would work equivalently, but for unknown MIME types instead
  of unknown protocols.</p>



  <h3><span title="SCS">[SCS]</span>The <code>contenteditable</code> attribute</h3>

  <p>The <dfn><code>contenteditable</code></dfn> attribute is a common
  attribute. User agents must support this attribute on all HTML
  elements.</p> <!-- XXX define it in the appropriate place then -->

  <p>If an HTML element has a <code>contenteditable</code> attribute
  set to the empty string or the value <code>true</code> (by
  <span>case-insensitive match</span><!--XXX xref-->), or if its
  nearest ancestor with the <code>contenteditable</code> attribute set
  has its attribute set to the empty string or the value
  <code>true</code> (by <span>case-insensitive match</span><!--XXX
  xref-->), then the UA must treat the element as <dfn>editable</dfn>
  (as described below).</p> <!-- XXX case-sensitivity in HTML -->

  <p>If an HTML element has a <code>contenteditable</code> attribute
  set but the value of the attribute is not the empty string or the
  literal value <code>true</code>, or if its nearest ancestor with the
  <code>contenteditable</code> attribute set is not <em>editable</em>,
  or if it has no ancestor with the <code>contenteditable</code>
  attribute set, then the element is not editable.</p>

  <p>Authors must only use the exact literal values <code>true</code>
  and <code>false</code> with the <code>contenteditable</code>
  attribute.</p>

  <p>If an element is <span>editable</span> and its parent element is
  not, then the element is an <dfn>editing host</dfn>. Editable
  elements can be nested. User agents must make editing hosts
  focusable (which typicially means they enter the <span
  title="tabindex">tab order</span>). An editing host can contain
  non-editable sections, these are handled as described below. An
  editing host can contain non-editable sections that contain further
  editing hosts.</p>

  <p>When an editing host has focus, it must have a <dfn>caret
  position</dfn> that specifies where the current editing position
  is. It may also have a <span title="the selection">selection</span>.</p> <!--- XXX xref to later section -->

  <p class="note">How the caret and selection are represented depends
  entirely on the UA.</p>

  <!-- XXX rendering requirement: The current caret should affect the
  line-height (i.e. it acts at least like an empty inline element) -->

<!-- XXX document.designMode attribute -->


  <h4>User editing actions</h4>

  <p>There are several actions that the user agent should allow the
  user to perform while the user is interacting with an editing
  host. How exactly each action is triggered is not defined for every
  action, but when it is not defined, suggested key bindings are
  provided to guide implementors.</p>

  <dl>

   <dt>Move the caret</dt>

   <dd><p>User agents must allow users to move the caret to any
   position within an editing host, even into nested editable
   elements. This could be triggered as the default action of <code
   title="event-keydown">keydown</code> events with various key
   identifiers and as the default action of <code
   title="event-mousedown">mouseydown</code> events.</p></dd>


   <dt>Change the selection</dt>

   <dd><p>User agents must allow users to change <span>the
   selection</span> within an editing host, even into nested editable
   elements. This could be triggered as the default action of <code
   title="event-keydown">keydown</code> events with various key
   identifiers and as the default action of <code
   title="event-mousedown">mouseydown</code> events.</p></dd>


   <dt id="contenteditable-insertText">Insert text</dt>

   <dd><p>This action must be triggered as the default action of a
   <code title="event-textInput">textInput</code> event, and may be
   triggered by other commands as well. It must cause the user agent
   to insert the specified text (given by the event object's <code
   title="">data</code> attribute in the case of the <code
   title="event-textInput">textInput</code> event) at the caret.</p>

   <p>If the caret is positioned somewhere where <span>inline-level
   content</span> is not allowed (e.g. because the element accepts
   "both block-level and inline-level content but not both", and the
   element already contains block-level content), then the user agent
   must not insert the text directly at the caret position. In such
   cases the behaviour is UA-dependent, but user agents must not, in
   response to a request to insert text, generate a DOM that is less
   conformant than the DOM prior to the request.</p>

   <p>User agents should allow users to insert new paragraphs into
   elements that only contain block-level content.</p>

   <div class="example">
    <p>For example, given the markup:</p>
    <pre>&lt;section&gt;
 &lt;dl&gt;
  &lt;dt&gt; Ben &lt;/dt&gt;
  &lt;dd&gt; Goat &lt;/dd&gt;
 &lt;/dl&gt;
&lt;/section&gt;</pre>
    <p>...the user agent should allow the user to insert
    <code>p</code> elements before and after the <code>dl</code>
    element, as children of the <code>section</code> element.</p>
   </div>

   </dd>


   <dt id="contenteditable-breakBlock">Break block</dt>

   <dd><p>UAs should offer a way for the user to request that the
   current block be broken at the caret, e.g. as the default action of
   a <code title="event-keydown">keydown</code> event whose identifier
   is the "Enter" key and that has no modifiers set.</p>

   <p>The exact behaviour is UA-dependent, but user agents must not,
   in response to a request to break a block, generate a DOM that is
   less conformant than the DOM prior to the request.</p></dd>


   <dt id="contenteditable-br">Insert a line separator</dt>

   <dd><p>UAs should offer a way for the user to request an explicit
   line break at the caret position without breaking the block, for
   example as in a poem verse or an address. To insert a line break,
   the user agent must insert a <code>br</code> element.</p>

   <p>If the caret is positioned somewhere where <span>inline-level
   content</span> is not allowed (e.g. because the element accepts
   "both block-level and inline-level content but not both", and the
   element already contains block-level content), then the user agent
   must not insert the <code>br</code> element directly at the caret
   position. In such cases the behaviour is UA-dependent, but user
   agents must not, in response to a request to insert a line
   separator, generate a DOM that is less conformant than the DOM
   prior to the request.</p></dd>


   <dt id="contenteditable-delete">Delete</dt>

   <dd><p>UAs should offer a way for the user to delete text and
   elements, e.g. as the default action of <code
   title="event-keydown">keydown</code> events whose identifiers are
   "U+0008" or "U+007F".</p>

   <p>Five edge cases in particular need to be considered carefully
   when implementing this feature: backspacing at the start of an
   element, backspacing when the caret is immediately after an
   element, forward-deleting at the end of an element,
   forward-deleting when the caret is immediately before an element,
   and deleting a <span title="the selection">selection</span> whose
   start and end points do not share a common parent node.</p>

   <p>In any case, the exact behaviour is UA-dependent, but user
   agents must not, in response to a request to delete text or an
   element, generate a DOM that is less conformant than the DOM prior
   to the request.</p></dd>


   <dt id="contenteditable-wrapSemantic">Insert, and wrap text in,
   semantic elements</dt>

   <dd><p>UAs should offer a way for the user to mark text as having
   <span title="em">stress emphasis</span> and as being <span
   title="strong">important</span>, and may offer the user the ability
   to mark text and blocks with other semantics.</p>

   <p>UAs should similarly offer a way for the user to insert empty
   semantic elements (such as, again, <code>em</code>,
   <code>strong</code>, and others) to subsequently fill by entering
   text manually.</p>

   <p>UAs should also offer a way to remove those semantics from
   marked up text, and to remove empty semantic element that have been
   inserted.</p>

   <p>The exact behaviour is UA-dependent, but user agents must not,
   in response to a request to wrap semantics around some text or to
   insert or remove a semantic element, generate a DOM that is less
   conformant than the DOM prior to the request.</p></dd>


   <dt>Select and move non-editable elements nested inside editing hosts</dt>

   <dd><p>UAs should offer a way for the user to move images and other
   non-editable parts around the content within an editing host. This
   may be done using the <span>drag and drop</span> mechanism. User
   agents must not, in response to a request to move non-editable
   elements nested inside editing hosts, generate a DOM that is less
   conformant than the DOM prior to the request.</p></dd>


   <dt>Edit form controls nested inside editing hosts</dt>

   <dd><p>When an <span>editable</span> form control is edited, the
   changes must be reflected in both its current value <em>and</em>
   its default value. For <code>input</code> elements this means
   updating the <code
   title="dom-input-defaultValue">defaultValue</code> DOM attribute as
   well as the <code title="dom-input-value">value</code> DOM
   attribute; for <code>select</code> elements it means updating the
   <code>option</code> elements' <code
   title="dom-option-defaultSelected">defaultSelected</code> DOM
   attribute as well as the <code
   title="dom-option-selected">selected</code> DOM attribute; for
   <code>textarea</code> elements this means updating the <code
   title="dom-textarea-defaultValue">defaultValue</code> DOM attribute
   as well as the <code title="dom-textarea-value">value</code> DOM
   attribute. (Updating the <code title="">default*</code> DOM
   attributes causes content attributs to be updated as well.)</p></dd>

   <!-- XXX something about not supporting resizing? -->

  </dl>

  <!-- XXX each action performed should be added to the undo history -->

  <p>User agents may perform several commands per user request; for
  example if the user selects a block of text and hits
  <kbd><kbd>Enter</kbd></kbd>, the UA might interpret that as a
  request to delete the content of <span>the selection</span> followed
  by a request to break the block at that position.</p>




  <h3>Focus <span title="WIP">[WIP]</span></h3>

  <p class="big-issue">This entire section will be merged with earlier
  sections in due course.</p>

  <p>When an element is focused, key events are targetted at that
  element instead of at the document's root element.</p>

  <h4>The <dfn><code>tabindex</code></dfn> Attribute</h4>

  <p class="issue">This section on the <code>tabindex</code> attribute
  needs to be checked for backwards-compatibility.</p>

  <p>The <code>tabindex</code> attribute defined in HTML4 is extended
  to apply to all HTML elements by defining it as a common
  attribute.</p>

  <p>The <code>tabindex</code> attribute specifies the relative order
  of elements for the purposes of sequential focus navigation. The
  name "tab index" comes from the common use of the "tab" key to
  navigate through the focusable elements. The term "tabbing" refers
  to moving forward through the focusable elements.</p>

  <p>The <code>tabindex</code> attribute can take any integer (an
  optional U+002D HYPHEN-MINUS representing negativity followed by one
  or more digits in the range 0-9, U+0030 to U+0039, interpreted as
  base ten).</p>

  <p>A positive integer (including zero) specifies the index of the
  element in the current scope's tab order. Elements with the same
  index are sorted in document order for the purposes of tabbing.</p>

  <p id="negative-tabindex">A negative integer specifies that the
  element should be removed from the tab order. If the element does
  normally take focus, it may still be focused using other means (e.g.
  it could be focussed by a click).</p>

  <p>Other values are ignored, as if the attribute was absent. Certain
  elements may default absent <code>tabindex</code> attributes to
  zero, at the user agent's discretion. (In other words, some elements
  are focusable by default, and they are assumed to have tab index 0.
  Text fields will typically be in the tab order by default, for
  instance.)</p>

  <p>When an element that does not normally take focus has the
  <code>tabindex</code> attribute specified with a positive value,
  then it is added to the tab order and is made focusable. When
  focused, the element matches the CSS <code>:focus</code>
  pseudo-class and key events are dispatched on that element when
  appropriate, just like focusing a link.</p>

  <p>Since all HTML elements can thus be focused and unfocusd, the
  <code>onfocus</code> and <code>onblur</code> attributes shall also
  apply to all HTML elements.</p>

  <h4>The <dfn><code>ElementFocus</code></dfn> interface</h4>

  <p>The <code>ElementFocus</code> interface contains methods for
  moving focus to and from an element. It can be obtained from objects
  that implement the <code>Element</code> interface using
  binding-specific casting methods.</p>

  <pre class="idl">interface <dfn>ElementFocus</dfn> {
           attribute long                    tabIndex;
  void focus();
  void blur();
};</pre>

  <p>The <code>tabIndex</code> DOM attribute reflects the value of the
  related content attribute. If the attribute is not present (or has
  an invalid value) then the DOM attribute should return the UA's
  default value for that element, typically either 0 (for elements in
  the tab order) or -1 (for elements not in the tab order).</p>

  <p>The <dfn><code>focus()</code></dfn> and
  <dfn><code>blur()</code></dfn> methods focus and unfocus the element
  respectively, if the element is focusable.</p>

  <h4>The <dfn><code>DocumentFocus</code></dfn> interface</h4>

  <p>The <code>DocumentFocus</code> interface contains methods for
  moving focus around the document. It can be obtained from objects
  that implement the <code>Document</code> interface using
  binding-specific casting methods.</p>

  <pre class="idl">interface <dfn>DocumentFocus</dfn> {
  readonly attribute Element                 currentFocus;
  void moveFocusForward();
  void moveFocusBackward();
  void moveFocusUp();
  void moveFocusRight();
  void moveFocusDown();
  void moveFocusLeft();
};</pre>

  <p>The <dfn><code>currentFocus</code></dfn> attribute returns the
  element to which key events will be sent when the document receives
  key events.</p>

  <p>The <dfn><code>moveFocusForward</code></dfn> method uses the
  <code>'nav-index'</code> property and the <code>tabindex</code>
  attribute to find the next focusable element and focuses it.</p>

  <p>The <dfn><code>moveFocusBackward</code></dfn> method uses the
  <code>'nav-index'</code> property and the <code>tabindex</code>
  attribute to find the previous focusable element and focuses
  it.</p>

  <p>The <dfn><code>moveFocusUp</code></dfn> method uses the
  <code>'nav-up'</code> property and the <code>tabindex</code>
  attribute to find an appropriate focusable element and focuses
  it.</p>

  <p>In a similar manner, the <dfn><code>moveFocusRight</code></dfn>,
  <dfn><code>moveFocusDown</code></dfn>, and
  <dfn><code>moveFocusLeft</code></dfn> methods use the
  <code>'nav-right'</code>, <code>'nav-down'</code>, and
  <code>'nav-left'</code> properties (respectively), and the
  <code>tabindex</code> attribute, to find an appropriate focusable
  element and focus it.</p>

  <p>The <code>'nav-index'</code>, <code>'nav-up'</code>,
  <code>'nav-right'</code>, <code>'nav-down'</code>, and
  <code>'nav-left'</code> properties are defined in <a
  href="#refsCSS3UI">[CSS3UI]</a>.</p>

<!--XXXX
Other things to look at are IE's focus APIs (document.activeElement,
HTMLElement.setActive(), onBeforeActivate, onActivate,
onBeforeDeactivate, onDeactivate, document.hasFocus):
   https://bugzilla.mozilla.org/show_bug.cgi?id=296471
   https://bugzilla.mozilla.org/show_bug.cgi?id=296469
-->




  <h3><span title="SCS">[SCS]</span> <dfn>Drag and drop</dfn></h3>

<!--

http://msdn.microsoft.com/workshop/author/datatransfer/overview.asp
http://msdn.microsoft.com/workshop/author/dhtml/reference/objects/clipboarddata.asp

So to summarise, you want a way to make a drag operation initiated on one 
element cause a number of elements to simultaneously be dragged.
  
I see the use for that. As far as the mail case goes, I would imagine that
would be done via a <datagrid> which would support dragging natively, so  
that would be a different problem. But I could see it being possible for  
groups of DOM nodes as well.
  
My proposal for doing that would be to have a way in ondragstart to say   
"...and by the way, also drag all these elements at the same time".
  
As in:
  
   function dragStartHandler(e) {
      e.dataTransfer.addElement(e.target.nextSibling.nextSibling);
   }
    
...or something.


On Thu, 5 May 2005, Kornel Lesinski wrote:
>
> As a web developer I'd like:
>
> - enabling/disabling dragging for each DOM element:
  
Ok, so that votes for having an attribute on each draggable element.


> To implement this with simple interface I've proposed, events should be
> handled either by existing elements (like list items that compare their size
> and position of dragged element to decide whether element should be dropped
> before or after) or handled by container that would probably need to calculate
> positions of it's children and create new element to show drop target. Smooth
> Mac-like drag'n'drop can be implemented by animating drop target's
> padding/margin. So that's quite a bit of code that's going to be reinvented
> each time someone implements reordering.



<hyatt> :droptarget
<hyatt> or something
<hyatt> we don't support a pseudo-class for the drop target but that's a great idea
<Hixie_> yeah, thinking about that too
<Hixie_> :drop-target, :drop-target(above), :drop-target(below) and having ondragover be able to say "not on me, but next to me maybe"

http://msdn.microsoft.com/workshop/author/dhtml/reference/events/ondragstart.asp
http://msdn.microsoft.com/workshop/author/dhtml/reference/events/ondrag.asp
http://msdn.microsoft.com/workshop/author/dhtml/reference/events/ondragend.asp
http://msdn.microsoft.com/workshop/author/dhtml/reference/objects/obj_datatransfer.asp
http://developer.apple.com/documentation/AppleApplications/Conceptual/SafariJSProgTopics/Tasks/DragAndDrop.html
-->

  <p>This section defines an event-based drag-and-drop mechanism.</p>

  <p>This specification does not define exactly what a <em>drag and
  drop operation</em> actually is.</p>

  <p>On a visual medium with a pointing device, a drag operation could
  be the default action of a <code
  title="event-mousedown">mousedown</code> event that is followed by a
  series of <code title="event-mousemove">mousemove</code> events, and
  the drop could be triggered by the mouse being released.</p>

  <p>On media without a pointing device, the user would probably have
  to explicitly indicate his intention to perform a drag-and-drop
  operation, stating what he wishes to drag and what he wishes to
  drop, respectively.</p>

  <p>However it is implemented, drag and drop operations must have a
  starting point (e.g. where the mouse was clicked, or the start of
  <span>the selection</span> or element that was selected for the
  drag), may have any number of intermediate steps (elements that the
  mouse moves over during a drag, or elements that the user picks as
  possible drop points as he cycles through possibilities), and must
  either have an end point (the element above which the mouse button
  was released, or the element that was finally selected), or be
  canceled. The end point must be the last element selected as a
  possible drop point before the drop occurs (so if the operation is
  not canceled, there must be at least one element in the middle
  step).</p>

  <h4>Drag-and-drop processing model</h4>

  <p>There are two processing models for drag-and-drop: one for when a
  drag is initiated within the document, and one for when a drag is
  initiated in another (DOM-based) document or another application
  altogether, but the user has selected a node in the document as a
  drop target.</p>

  <h5>For drags initiated within the document</h5>

  <p>When the user attempts to begin a drag operation, the user agent
  must first determine what is being dragged. If the drag operation
  was invoked on a selection, then it is the selection that is being
  dragged. Otherwise, it is the first element, going up the ancestor
  chain, starting at the node that the user tried to drag, that has
  the DOM attribute <code title="dom-draggable">draggable</code> set
  to true. If there is no such element, then nothing is being dragged,
  the drag-and-drop operation is never started, and the user agent
  must not continue with this algorithm.</p>

  <!-- need to define IMG and A HREF nodes as having that set to true
  XXX -->

  <p>If the user agent determines that something can be dragged, a
  <code title="event-dragstart">dragstart</code> event must then be
  fired.</p>

  <p>If it is a selection that is being dragged, then this event must
  be fired on the node that the user started the drag on (typically
  the text node that the user originally clicked). If the user did not
  specify a particular node, for example if the user just told the
  user agent to begin a drag of "the selection", then the event must
  be fired on the deepest node that is a common ancestor of all parts
  of the selection.</p>

  <p>If it is not a selection that is being dragged, then the event
  must be fired on the element that is being dragged.</p>

  <p>The node on which the event is fired is the <dfn>source
  node</dfn>. Multiple events are fired on this node during the course
  of the drag-and-drop operation.</p>

  <p>The <code title="dom-dataTransfer">dataTransfer</code> member of
  the event must initially <span
  title="dom-dataTransfer-addElement">contain</span> no nodes if a
  selection is being dragged, and just the <span>source node</span>
  otherwise.</p>

  <p>If the event is canceled, then the drag and drop operation must
  not occur; the user agent must not continue with this algorithm.</p>

  <p>If it is not canceled, then the drag and drop operation must be
  initiated.</p>

  <p class="note">Since events with no event handlers registered are,
  almost by definition, never canceled, drag and drop is always
  available to the user if the author does not specifically prevent
  it.</p>

  <p>The drag-and-drop feedback must be generated from the selection
  if the user is dragging a selection, or from <span
  title="dom-dataTransfer-addElement">the nodes that were in the
  <code>dataTransfer</code> object's list after the event has been
  handled</span> otherwise. In visual media, <span
  title="dom-dataTransfer-setDragImage">if an image was
  specified</span>, then that image must be used instead.</p> <!-- XXX
  also link to the section that explains how to render drag-and-drop,
  :drag, :drop, etc. -->

  <p>The user agent must take a note of <span
  title="dom-dataTransfer-setData">the data that was placed</span> in
  the <code title="dom-dataTransfer">dataTransfer</code> object.</p>

  <p>From this point until the end of the drag-and-drop operation,
  mouse and key events must be suppressed. In addition, the user agent
  must track all DOM changes made during the drag-and-drop operation,
  and add them to its <a href="#undo">undo history</a> as one atomic
  operation once the drag-and-drop operation has ended.</p>

  <p>During the drag operation, the element directly indicated by the
  user as the drop target is called the <dfn>immediate user
  selection</dfn>. (Only elements can be selected by the user; other
  nodes must not be made available as drop targets.)</p>

  <p>However, the <span>immediate user selection</span> is not
  necessarily the element the <dfn>current target element</dfn>, the
  element currently selected for the drop part of the drag-and-drop
  operation.</p>

  <p>The <span>immediate user selection</span> changes as the user
  selects different elements (either by pointing at them with a
  pointing device, or by selecting them in some other way). The
  <span>current target element</span> changes when the <span>immediate
  user selection</span> changes, based on the results of event
  handlers in the document, as described below.</p>

  <p>Both the <span>current target element</span> and the
  <span>immediate user selection</span> can be null, which means no
  target element is selected. They can also both be elements in other
  (DOM-based) documents, or other (non-Web) programs altogether. (For
  example, a user could drag text to a word-processor.) The
  <span>current target element</span> is initially null.</p>

  <p>In addition, there is also a <dfn>current drag operation</dfn>,
  which can take on the values "none", "copy", "link", and "move".
  Initially it has the value "none". It is updated by the user agent
  as described in the steps below.</p>

  <p>User agents must, every 350ms (&#xB1;200ms), perform the
  following steps in sequence. (If the user agent is still performing
  the previous iteration of the sequence when the next iteration
  becomes due, the user agent must not execute the overdue iteration,
  effectively "skipping missed frames" of the drag and drop
  operation.)</p>

  <ol>

   <li>

    <p>First, the user agent must fire a <code
    title="event-drag">drag</code> event at the <span>source
    node</span>.</p>

   </li>

   <li>

    <p>Next, if the <code title="event-drag">drag</code> event was not
    canceled and the user has not ended the drag-and-drop operation,
    the user agent must check the state of the drag-and-drop
    operation, as follows:</p>

    <ol>

     <li>

      <p>First, if the user is indicating a different <span>immediate
      user selection</span> than during the last iteration (or if this
      is the first iteration), and if this <span>immediate user
      selection</span> is not the same as the <span>current target
      element</span>, then the <span>current target element</span> must
      be updated, as follows:</p>

      <ol>

       <li>

        <p>If the new <span>immediate user selection</span> is null, or
        is in a non-DOM document or application, then set the
        <span>current target element</span> to the same value.</p>

       <li>

        <p>Otherwise, the user agent must fire a <code
        title="event-dragenter">dragenter</code> event at the
        <span>immediate user selection</span>.</p>

       </li>

       <li>

        <p>If the event is canceled, then the <span>current target
        element</span> must be set to the <span>immediate user
        selection</span>.</p>

       </li>

       <li>

        <p>Otherwise, if the <span>current target element</span> is not
        <span>the <code>body</code> element</span>, the user agent must
        fire a <code title="event-dragenter">dragenter</code> event at
        <span>the <code>body</code> element</span>, and the
        <span>current target element</span> must be set to <span>the
        <code>body</code> element</span>, regardless of whether the
        event was canceled or not.</p>

       </li>

      </ol>

     </li>

     <li>

      <p>If the previous step caused the <span>current target
      element</span> to change, and if the previous target element was
      not null or a part of a non-DOM document, the user agent must fire
      a <code title="event-dragleave">dragleave</code> event at the
      previous target element.</p>

     </li>

     <li>

      <p>If the <span>current target element</span> is a DOM element,
      the user agent must fire a <code
      title="event-dragover">dragover</code> event at this <span>current
      target element</span>.</p>

      <p>If the <code title="event-dragover">dragover</code> event is
      not canceled, the <code>dataTransfer</code> object's
      <code>dropEffect</code> attribute must then be reset to the value
      it was given when the event was fired.</p>

      <p>Then, regardless of whether the event was canceled or not, the
      drag feedback (e.g. the mouse cursor) must be updated to match the
      kind of drag-and-drop operation indicated by the event's <code
      title="dom-dataTransfer">dataTransfer</code> object's <code
      title="dom-dataTransfer-dropEffect">dropEffect</code> attribute,
      as follows:</p>

      <table>
       <thead>
        <tr>
         <th><code title="dom-dataTransfer-dropEffect">dropEffect</code></th>
         <th>Drag operation</th>
        </tr>
       </thead>
       <tr>
        <td><code title="">none</code></td>
        <td>No operation allowed.</td>
       </tr>
       <tr>
        <td><code title="">copy</code></td>
        <td>Data will be copied.</td>
       </tr>
       <tr>
        <td><code title="">link</code></td>
        <td>Data will be linked.</td>
       </tr>
       <tr>
        <td><code title="">move</code></td>
        <td>Data will be moved.</td>
       </tr>
      </table>

      <p>The drag operation in question is the new <em>current drag
      operation</em>.</p>

     </li>

     <li>

      <p>Otherwise, if the <span>current target element</span> is not a
      DOM element, the user agent must use platform-specific mechanisms
      to determine what drag operation is being performed (none, copy,
      link, or move). This sets the <em>current drag operation</em>.</p>

     </li>

    </ol>

   </li>

   <li>

    <p>Otherwise, if the user ended the drag and drop operation (e.g.
    by releasing the mouse button in a mouse-driven drag-and-drop
    interface), then this will be the last iteration. The user agent
    should follow the following steps, then stop looping.</p>

    <ol>

     <li>

      <p>If the <span>current drag operation</span> is none (no drag
      operation), or, if the user ended the drag-and-drop operation by
      canceling it (e.g. by hitting the <kbd>Escape</kbd> key), or if
      the <span>current target element</span> is null, then the drag
      operation failed. If the <span>current target element</span> is
      a DOM element, the user agent must fire a <code
      title="event-dragleave">dragleave</code> event at it; otherwise,
      if it is not null, it must use platform-specific conventions for
      drag cancellation.</p>

     </li>

     <li>

      <p>Otherwise, the drag operation was as success. If the
      <span>current target element</span> is a DOM element, the user
      agent must fire a <code title="event-drop">drop</code> event at
      it; otherwise, it must use platform-specific conventions for
      indicating a drop.</p>

      <p>When the target is a DOM element, the <code
      title="dom-dataTransfer-dropEffect">dropEffect</code> attribute
      of the event's <code
      title="dom-dataTransfer">dataTransfer</code> object must be
      given the value representing the <span>current drag
      operation</span> (<code title="">copy</code>, <code
      title="">link</code>, or <code title="">move</code>), and the
      object must be set up so that the <code
      title="dom-dataTransfer-getData">getData()</code> method will
      return the data that was added during the <code
      title="event-dragstart">dragstart</code> event.</p>

      <p class="big-issue">Some elements have a default behaviour for
      "drop", e.g. textarea receives new text. Cancelable.</p>

     </li>

     <li>

      <p>Finally, the user agent must fire a <code
      title="event-dragend">dragend</code> event at the <span>source
      node</span>.</p>

      <p class="big-issue">Some elements have a default behaviour for
      "dragend", e.g. textarea deletes source text in a move. NOT
      cancelable.</p>

<!-- XXX http://ln.hixie.ch/?start=1115899732&count=1 -->

     </li>

    </ol>

   </li>

  </ol>

  <p>The events must be fired as described above, even if the nodes
  are in different documents (assuming those are DOM-based). User
  agents should handle cases where the target is not in a DOM-based
  document according to the platform conventions.</p>

  <h5>For drags initiated in other documents or applications <span title="TBW">[TBW]</span></h5>

  <p class="big-issue">...</p>

<!-- XXX
from application to web browser - key events? mouse events?
-->

  <h4>The <dfn title="attr-draggable"><code>draggable</code></dfn> attribute <span title="TBW">[TBW]</span></h4>

  <p>...</p>

  <p>The <dfn title="dom-draggable"><code>draggable</code></dfn> DOM
  attribute reflects the <code title="attr-draggable">draggable</code>
  content attribute. However, the default value varies based on the
  element type For <code>img</code> elements, the default is true. For
  <code>a</code> elements, the default is true if the element has an
  <code title="attr-a-href">href</code> content attribute, and false
  otherwise. For all other elements, the default is false.</p>

  <h4>The <code>DragEvent</code> interface and the <dfn
  title="dom-dataTransfer"><code>dataTransfer</code></dfn> object <span title="WIP">[WIP]</span></h4>

  <p class="big-issue">Need to define DragEvent interface.</p>

  <pre class="idl">interface <dfn>DataTransfer</dfn> {
           attribute DOMString <span>dropEffect</span>;
           attribute DOMString <span>effectAllowed</span>;
  void <span>clearData</span>(in DOMString format);
  void <span>setData</span>(in DOMString format, in DOMString data);
  DOMString <span>getData</span>(in DOMString format);

<span class="big-issue">// XXX addElement, dragImage, etc</span>
};
</pre>

  <p class="big-issue">Need to define DataTransfer members</p>

  <p>When a <code>DragEvent</code> event object is initialised by the
  user agent for the purposes of the drag-and-drop model described
  above (as opposed to when a custom <code>DragEvent</code> event
  object is created by author script), the object must be initialised
  as follows.</p>

  <ul>

   <li>Its <code title="dom-dataTransfer">dataTransfer</code>
   member must be initialised to a new instance of a
   <code>DataTransfer</code> object.</li>

   <li>That object must initially contain no elements and have no
   associated image.</li>

   <li>The <code title="dom-dataTransfer">dataTransfer</code> object's
   <code title="dom-dataTransfer-effectAllowed">effectAllowed</code>
   attribute must be set to "<code title="">uninitialized</code>" for
   <code title="event-dragstart">dragstart</code> events, and to
   whatever value the field had after the last drag-and-drop event was
   fired for all other events (only counting events fired by the user
   agent for the purposes of the drag-and-drop model described
   above).</li>

   <li>The <code title="dom-dataTransfer-dropEffect">dropEffect</code>
   attribute must be set to "<code title="">none</code>" for <code
   title="event-dragstart">dragstart</code>, <code
   title="event-drag">drag</code>, <code
   title="event-dragleave">dragleave</code>, and <code
   title="event-dragend">dragend</code> events (except when stated
   otherwise in the algorithms given in the earlier sections), and to
   a value based on the <code
   title="dom-dataTransfer-effectAllowed">effectAllowed</code>
   attribute's value and to the drag-and-drop source, as given by the
   following table, for other events:

    <table id="dropEffect-initialisation">
     <thead>
      <tr>
       <th><code title="dom-dataTransfer-effectAllowed">effectAllowed</code></th>
       <th><code title="dom-dataTransfer-dropEffect">dropEffect</code></th>
      </tr>
     </thead>
     <tr>
      <td><code title="">none</code></td>
      <td><code title="">none</code></td>
     </tr>
     <tr>
      <td><code title="">copy</code>, <code title="">copyLink</code>, <code title="">copyMove</code>, <code title="">all</code></td>
      <td><code title="">copy</code></td>
     </tr>
     <tr>
      <td><code title="">link</code>, <code title="">linkMove</code></td>
      <td><code title="">link</code></td>
     </tr>
     <tr>
      <td><code title="">move</code></td>
      <td><code title="">move</code></td>
     </tr>
     <tr>
      <td><code title="">uninitialised</code> when what is being dragged is a selection from a text field</td>
      <td><code title="">move</code></td>
     </tr>
     <tr>
      <td><code title="">uninitialised</code> when what is being dragged is a selection</td>
      <td><code title="">copy</code></td>
     </tr>
     <tr>
      <td><code title="">uninitialised</code> when what is being dragged is an <code>a</code> element with an <code>href</code> attribute</td>
      <td><code title="">link</code></td>
     </tr>
     <tr>
      <td>Any other case</td>
      <td><code title="">copy</code></td>
     </tr>
    </table>
   </li>
  </ul>

  <h4>Events fired during a drag-and-drop action</h4>

  <p><em>This section is non-normative. It merely summarises the
  preceeding sections.</em></p>

  <p>The following events are involved in the drag-and-drop model.
  They all use the <code>DragEvent</code> interface.</p>

  <table>

   <thead>
    <tr>
     <th> Event Name </th>
     <th> Target </th>
     <th> Bubbles? </th>
     <th> Cancelable? </th>
     <th> <code title="dom-dataTransfer-addElement">dataTransfer</code> </th>
     <th> <code title="dom-dataTransfer-effectAllowed">effectAllowed</code> </th>
     <th> <code title="dom-dataTransfer-dropEffect">dropEffect</code> </th>
     <th> Default Action </th>
    </tr>
   </thead>

   <tbody>

    <tr>
     <td><dfn title="event-dragstart"><code>dragstart</code></dfn></td>
     <td><span>Source node</span></td>
     <td>&#x2713; Bubbles</td>
     <td>&#x2713; Cancelable</td>
     <td>Contains <span>source node</span> unless a selection is being dragged, in which case it is empty</td>
     <td><code title="">uninitialized</code></td>
     <td><code title="">none</code></td>
     <td>Initiate the drag-and-drop operation</td>
    </tr>

    <tr>
     <td><dfn title="event-drag"><code>drag</code></dfn></td>
     <td><span>Source node</span></td>
     <td>&#x2713; Bubbles</td>
     <td>&#x2713; Cancelable</td>
     <td>&mdash;</td>
     <td>Same as last event</td>
     <td><code title="">none</code></td>
     <td>Continue the drag-and-drop operation</td>
    </tr>

    <tr>
     <td><dfn title="event-dragenter"><code>dragenter</code></dfn></td>
     <td><span>Immediate user selection</span> or <span>the <code>body</code> element</span></td>
     <td>&#x2713; Bubbles</td>
     <td>&#x2713; Cancelable</td>
     <td>&mdash;</td>
     <td>Same as last event</td>
     <td><a href="#dropEffect-initialisation">Based on <code>effectAllowed</code> value</a></td>
     <td>Reject <span>immediate user selection</span> as potential <span title="current target element">target element</span></td>
    </tr>

    <tr>
     <td><dfn title="event-dragleave"><code>dragleave</code></dfn></td>
     <td><span title="current target element">Previous target element</span></td>
     <td>&#x2713; Bubbles</td>
     <td>&mdash;</td>
     <td>&mdash;</td>
     <td>Same as last event</td>
     <td><code title="">none</code></td>
     <td>None</td>
    </tr>

    <tr>
     <td><dfn title="event-dragover"><code>dragover</code></dfn></td>
     <td><span>Current target element</span></td>
     <td>&#x2713; Bubbles</td>
     <td>&#x2713; Cancelable</td>
     <td>&mdash;</td>
     <td>Same as last event</td>
     <td><a href="#dropEffect-initialisation">Based on <code>effectAllowed</code> value</a></td>
     <td>Reset <code title="dom-dataTransfer-dropEffect">dropEffect</code> <a href="#dropEffect-initialisation">based on <code>effectAllowed</code> value</a></td>
    </tr>

    <tr>
     <td><dfn title="event-drop"><code>drop</code></dfn></td>
     <td><span>Current target element</span></td>
     <td>&#x2713; Bubbles</td>
     <td>&#x2713; Cancelable</td>
     <td><code>getData()</code> returns data set in <code title="dom-dragstart">dragstart</code> event</td>
     <td>Same as last event</td>
     <td><span>Current drag operation</span></td>
     <td>Varies</td>
    </tr>

    <tr>
     <td><dfn title="event-dragend"><code>dragend</code></dfn></td>
     <td><span>Source node</span></td>
     <td>&#x2713; Bubbles</td>
     <td>&#x2713; Cancelable</td>
     <td>&mdash;</td>
     <td>Same as last event</td>
     <td><code title="">none</code></td>
     <td>Varies</td>
    </tr>

   </tbody>

  </table>



  <h3 id="undo"><span title="SCS">[SCS]</span> <dfn>Undo history</dfn></h3>

  <p class="big-issue">There has got to be a better way of doing this, surely.</p>

  <p>The user agent must associate an <dfn>undo transaction
  history</dfn> with each <code>HTMLDocument</code> object.</p>

  <p>The <span>undo transaction history</span> is a list of
  entries. The entries are of two type: <span>DOM changes</span> and
  <span title="undo object">undo objects</span>.</p>

  <p>Each <dfn>DOM changes</dfn> entry in the <span>undo transaction
  history</span> consists of batches of one or more of the
  following:</p>

  <ul>

   <li>Changes to the <span>content attributes</span> of an
   <code>Element</code> node.</li>

   <li>Changes to the <span>DOM attributes</span> of a
   <code>Node</code>.</li> <!-- XXX uh, these change on their own, so
   clearly this isn't going to fly. Which DOM attributes, exactly? -->

   <li>Changes to the DOM hierarchy of nodes that are descendants of
   the <code>HTMLDocument</code> object (<code>parentNode</code>,
   <code>childNodes</code>).</li>

  </ul>

  <p><dfn>Undo object</dfn> entries consist of objects representing
  state that scripts running in the document are managing. For
  example, a Web mail application could use an <span>undo
  object</span> to keep track of the fact that a user has moved an
  e-mail to a particular folder, so that the user can undo the
  action and have the e-mail return to its former location.</p>

  <p>Broadly speaking, <span>DOM changes</span> entries are handled by
  the UA in response to user edits of form controls and <span>editing
  hosts</span> on the page, and <span>undo object</span> entries are
  handled by script in response to higher-level user actions (such as
  interactions with server-side state, or in the implementation of a
  drawing tool).</p>

  <h4>The <code>UndoManager</code> interface</h4>

  <div class="big-issue">

   <p>This API sucks. Seriously. It's a terrible API. Really bad. I
   hate it. Here are the requirements:</p>

   <ul>

    <li>Has to cope with cases where the server has undo state already
    when the page is loaded, that can be stuffed into the undo buffer
    onload.</li>

    <li>Has to support undo/redo.</li>

    <li>Has to cope with the "undo" action being "contact the server
    and tell it to undo", rather than it being the opposite of the
    "redo" action.</li>

    <li>Has to cope with some undo states expiring from the undo
    history (e.g. server can only remember one undelete action) but
    other states not expiring (e.g. client can undo arbitrary amounts
    of local edits).</li>

   </ul>

  </div>

  <p>To manage <span>undo object</span> entries in the <span>undo
  transaction history</span>, the <code>UndoManager</code>
  interface can be used:</p>

  <pre class="idl">interface <dfn>UndoManager</dfn> {
  unsigned long <span title="dom-UndoManager-add">add</span>(in DOMObject data, in DOMStrong title);
  void <span title="dom-UndoManager-remove">remove</span>(in unsigned long index);
  void <span title="dom-UndoManager-clearUndo">clearUndo</span>();
  void <span title="dom-UndoManager-clearRedo">clearRedo</span>();
  DOMObject <span title="dom-UndoManager-item">item</span>(in unsigned long index);
  readonly attribute unsigned long <span title="dom-UndoManager-length">length</span>;
  readonly attribute unsigned long <span title="dom-UndoManager-position">position</span>;
};</pre>

  <p>The <code title="dom-undoManager">undoManager</code> attribute of
  the <code>Window</code> interface must return the object
  implementing the <code>UndoManager</code> interface for that
  <code>Window</code> object's associated <code>HTMLDocument</code>
  object.</p>

  <p>In the ECMAScript binding, objects implementing this interface
  must also support being dereferenced using the square bracket
  notation, such that dereferencing with an integer index is
  equivalent to invoking the <code
  title="dom-UndoManager-item">item()</code> method with that index
  (e.g. <code title="">undoManager[1]</code> returns the same as <code
  title="">undoManager.item(1)</code>).</p>

  <p><code>UndoManager</code> objects represent their document's
  <span>undo transaction history</span>. Only <span>undo object</span>
  entries are visible with this API, but this does not mean that
  <span>DOM changes</span> entries are absent from the <span>undo
  transaction history</span>.</p>

  <p>The <dfn title="dom-UndoManager-length"><code>length</code></dfn>
  attribute must return the number of <span>undo object</span> entries
  in the <span>undo transaction history</span>.</p>

  <p>The <dfn title="dom-UndoManager-item"><code>item(<var
  title="">n</var>)</code></dfn> method must return the <var
  title="">n</var>th <span>undo object</span> entry in the <span>undo
  transaction history</span>.</p>

  <p>The <span>undo transaction history</span> has a <dfn title="undo
  position">current position</dfn>. This is the position between two
  entries in the <span>undo transaction history</span>'s list where
  the previous entry represents what needs to happen if the user
  invokes the "undo" command (the "undo" side, lower numbers), and the
  next entry represents what needs to happen if the user invokes the
  "redo" command (the "redo" side, higher numbers).</p>

  <p>The <dfn
  title="dom-UndoManager-position"><code>position</code></dfn>
  attribute must return the index of the <span>undo object</span>
  entry nearest to the <span>undo position</span>, on the "redo"
  side. If there are no <span>undo object</span> entries on the "redo"
  side, then the attribute must return the same as the <code
  title="dom-UndoManager-length">length</code> attribute. If there are
  no <span>undo object</span> entries on the "undo" side of the
  <span>undo position</span>, the <code
  title="dom-UndoManager-position">position</code> attribute returns
  zero.</p>

  <p class="note">Since the <span>undo transaction history</span>
  contains both <span>undo object</span> entries and <span>DOM
  changes</span> entries, but the <code
  title="dom-UndoManager-position">position</code> attribute only
  returns indices relative to <span>undo object</span> entries, it is
  possible for several "undo" or "redo" actions to be performed
  without the value of the <code
  title="dom-UndoManager-position">position</code> attribute
  changing.</p>

  <p>The <dfn title="dom-UndoManager-add"><code>add(<var title="">data</var>,
  <var title="">title</var>)</code></dfn> method's behaviour depends on the
  current state. Normally, it must insert the <var title="">data</var> object
  passed as an argument into the <span>undo transaction history</span>
  immediately before the <span>undo position</span>, optionally
  remembering the given <var title="">title</var> to use in the UI. If the
  method is called <span title="do-undo">during an undo
  operation</span>, however, the object must instead be added
  immediately <em>after</em> the <span>undo position</span>.</p>

  <p>If the method is called and there is neither <span
  title="do-undo">an undo operation in progress</span> nor <span
  title="do-redo">a redo operation in progress</span> then any entries
  in the <span>undo transaction history</span> after the <span>undo
  position</span> must be removed (as if <code
  title="dom-UndoManager-clearRedo">clearRedo()</code> had been
  called).</p>

  <p class="big-issue">We could fire events when someone adds
  something to the undo history -- one event per undo object entry
  before the position (or after, during redo addition), allowing the
  script to decide if that entry should remain or not. Or
  something. Would make it potentially easier to expire server-held
  state when the server limitations come into play.</p>

  <!-- XXX note on expiring undo in case server can only do one level undo -->

  <p>The <dfn title="dom-UndoManager-remove"><code>remove(<var
  title="">index</var>)</code></dfn> method must remove the <span>undo
  object</span> entry with the specified <var title="">index</var>. If
  the index is less than zero or greater than or equal to <code
  title="dom-UndoManager-length">length</code> then the method must
  raise an <code>INDEX_SIZE_ERR</code> exception. <span>DOM
  changes</span> entries are unaffected by this method.</p>

  <p>The <dfn
  title="dom-UndoManager-clearUndo"><code>clearUndo()</code></dfn>
  method must remove all entries in the <span>undo transaction
  history</span> before the <span>undo position</span>, be they
  <span>DOM changes</span> entries or <span>undo object</span>
  entries.</p>

  <p>The <dfn
  title="dom-UndoManager-clearRedo"><code>clearRedo()</code></dfn>
  method must remove all entries in the <span>undo transaction
  history</span> after the <span>undo position</span>, be they
  <span>DOM changes</span> entries or <span>undo object</span>
  entries.</p>

  <p class="big-issue">Another idea is to have a way for scripts to
  say "startBatchingDOMChangesForUndo()" and after that the changes to
  the DOM go in as if the user had done them.</p>

  <h4><dfn title="do-undo">Undo: moving back in the undo transaction history</dfn></h4>

  <p>When the user invokes an undo operation, or when the <code
  title="dom-document-execCommand">execCommand()</code> method is
  called with the <code title="command-undo">undo</code> command, the
  user agent must perform an undo operation.</p>

  <p>If the <span>undo position</span> is at the start of the
  <span>undo transaction history</span>, then the user agent must do
  nothing.</p>

  <p>If the entry immediately before the <span>undo position</span> is
  a <span>DOM changes</span> entry, then the user agent must remove
  that <span>DOM changes</span> entry, reverse the DOM changes that
  were listed in that entry, and, if the changes were reversed with no
  problems, add a new <span>DOM changes</span> entry (consisting of
  the opposite of those DOM changes) to the <span>undo transaction
  history</span> on the other side of the <span>undo
  position</span>.</p>

  <p>If the DOM changes cannot be undone (e.g. because the DOM state
  is no longer consistent with the changes represented in the entry),
  then the user agent must simply remove the <span>DOM changes</span>
  entry, without doing anything else.</p>

  <p>If the entry immediately before the <span>undo position</span> is
  an <span>undo object</span> entry, then the user agent must first
  remove that <span>undo object</span> entry from the <span>undo
  transaction history</span>, and then must fire an <code
  title="event-undo">undo</code> event on the <code>Document</code>
  object, using the <span>undo object</span> entry's associated undo
  object as the event's data.</p>

  <p>Any calls to <code title="dom-undoManager-add">add()</code> while
  the event is being handled will be used to populate the redo
  history, and will then be used if the user invokes the "redo"
  command to undo his undo.</p>

  <h4><dfn title="do-redo">Redo: moving forward in the undo transaction history</dfn></h4>

  <p>When the user invokes a redo operation, or when the <code
  title="dom-document-execCommand">execCommand()</code> method is
  called with the <code title="command-redo">redo</code> command, the
  user agent must perform a redo operation.</p>

  <p>This is mostly the opposite of an <span title="do-undo">undo
  operation</span>, but the full definition is included here for
  completeness.</p>

  <p>If the <span>undo position</span> is at the end of the <span>undo
  transaction history</span>, then the user agent must do nothing.</p>

  <p>If the entry immediately after the <span>undo position</span> is
  a <span>DOM changes</span> entry, then the user agent must remove
  that <span>DOM changes</span> entry, reverse the DOM changes that
  were listed in that entry, and, if the changes were reversed with no
  problems, add a new <span>DOM changes</span> entry (consisting of
  the opposite of those DOM changes) to the <span>undo transaction
  history</span> on the other side of the <span>undo
  position</span>.</p>

  <p>If the DOM changes cannot be redone (e.g. because the DOM state
  is no longer consistent with the changes represented in the entry),
  then the user agent must simply remove the <span>DOM changes</span>
  entry, without doing anything else.</p>

  <p>If the entry immediately after the <span>undo position</span> is
  an <span>undo object</span> entry, then the user agent must first
  remove that <span>undo object</span> entry from the <span>undo
  transaction history</span>, and then must fire a <code
  title="event-undo">redo</code> event on the <code>Document</code>
  object, using the <span>undo object</span> entry's associated undo
  object as the event's data.</p>

  <h4>The <code>UndoManagerEvent</code> interface and the <code title="event-undo">undo</code> and <code title="event-redo">redo</code> events</h4>

  <pre class="idl">interface <dfn>UndoManagerEvent</dfn> : Event {
  readonly attribute DOMObject <span title="dom-UndoManagerEvent-data">data</span>;
  void               <span>initUndoManagerEvent</span>(in DOMString typeArg, 
                                          in boolean canBubbleArg, 
                                          in boolean cancelableArg, 
                                          in DOMObject dataArg);
  void               <span>initUndoManagerEventNS</span>(in DOMString namespaceURIArg,
                                            in DOMString typeArg, 
                                            in boolean canBubbleArg, 
                                            in boolean cancelableArg, 
                                            in DOMObject dataArg);
};</pre>

  <p>The <dfn><code>initUndoManagerEvent()</code></dfn> and
  <dfn><code>initUndoManagerEventNS()</code></dfn> methods must
  initialise the event in a manner analogous to the similarly-named
  methods in the DOM3 Events interfaces. <a
  href="#DOM3Events">[DOM3EVENTS]</a></p>

  <p>The <dfn title="dom-UndoManagerEvent-data"><code>data</code></dfn>
  attribute represents the <span>undo object</span> for the event.</p>

  <p>The <dfn title="event-undo"><code>undo</code></dfn> and <dfn
  title="event-redo"><code>redo</code></dfn> events do not bubble,
  cannot be canceled, and have no default action. When the user agent
  fires one of these events it must use the
  <code>UndoManagerEvent</code> interface, with the <code
  title="dom-UndoManagerEvent-data">data</code> field containing the
  relevant <span>undo object</span>.</p>

  <h4>Implementation notes</h4>

  <p>How user agents present the above conceptual model to the user is
  not defined. The undo interface could be a filtered view of the
  <span>undo transaction history</span>, it could manipulate the
  <span>undo transaction history</span> in ways not described above,
  and so forth. For example, it is possible to design a UA that
  appears to have separate <span title="undo transaction history">undo
  transaction histories</span> for each form control; similarly, it is
  possible to design systems where the user has access to more undo
  information than is present in the offical (as described above)
  <span>undo transaction history</span> (such as providing a
  tree-based approach to document state). Such UI models should be
  based upon the single <span>undo transaction history</span>
  described in this section, however, such that to a script there is
  no detectable difference.</p>


  <h3><span title="SCS">[SCS]</span> Command APIs</h3>

  <p>The <dfn title="dom-document-execCommand"><code>execCommand(<var
  title="">commandID</var>, <var title="">doShowUI</var>, <var
  title="">value</var>)</code></dfn> method on the
  <code>HTMLDocument</code> interface allows scripts to perform
  actions on the <span title="the selection">current selection</span>
  or at the current caret position. Generally, these commands would be
  used to implement editor UI, for example having a "delete" button on
  a toolbar.</p>

  <p>There are three variants to this method, with one, two, and three
  arguments respectively.  The <var title="">doShowUI</var> and <var
  title="">value</var> parameters, even if specified, are ignored
  unless otherwise stated.</p>

  <p class="note">In this specification, in fact, the <var
  title="">doShowUI</var> parameter is always ignored, regardless of
  its value. It is included for historical reasons only.</p>

  <p>When any of these methods are invoked, user agents must act as
  described in the list below.</p>

  <p>For actions marked "<dfn>editing hosts only</dfn>", if the
  selection is not entirely within an <span>editing host</span>, of if
  there is no selection and the caret is not inside an <span>editing
  host</span>, then the user agent must do nothing.</p>

  <dl>

   <dt>If the <var title="">commandID</var> is <dfn title="command-undo"><code>undo</code></dfn></dt>

   <dd>The user agent must <span title="do-undo">move back one
   step</span> in its <span>undo transaction history</span>, restoring
   the associated state. If there is no further undo information the
   user agent must do nothing. See the <span>undo history</span>.</dd>

   <dt>If the <var title="">commandID</var> is <dfn title="command-redo"><code>redo</code></dfn></dt>

   <dd>The user agent must <span title="do-redo">move forward one
   step</span> in its <span>undo transaction history</span>, restoring
   the associated state. If there is no further undo (well, "redo")
   information the user agent must do nothing. See the <span>undo
   history</span>.</dd>

   <dt>If the <var title="">commandID</var> is <dfn title="command-selectAll"><code>selectAll</code></dfn></dt>

   <dd>The user agent must change the selection so that all the
   content in the currently focused <span>editing host</span> is
   selected. If no <span>editing host</span> is focused, then the
   content of the entire document must be selected.</dd>

   <dt>If the <var title="">commandID</var> is <dfn title="command-unselect"><code>unselect</code></dfn></dt>

   <dd><p>The user agent must change the selection so that nothing is
   selected.</p>

   <p class="big-issue">We need some sort of way in which the user can
   make a selection without risk of script clobbering it.</p></dd>

   <dt>If the <var title="">commandID</var> is <dfn title="command-superscript"><code>superscript</code></dfn></dt>

   <dd><em>Editing hosts only.</em> The user agent must act as if the
   user had requested that the selection <a
   href="#contenteditable-wrapSemantic">be wrapped in the
   semantics</a> of the <code>sup</code> element (or unwrapped, or, if
   there is no selection, have that semantic inserted or removed
   &mdash; the exact behaviour is UA-defined).</dd>

   <dt>If the <var title="">commandID</var> is <dfn title="command-subscript"><code>subscript</code></dfn></dt>

   <dd><em>Editing hosts only.</em> The user agent must act as if the
   user had requested that the selection <a
   href="#contenteditable-wrapSemantic">be wrapped in the
   semantics</a> of the <em title=""><code>sub</code></em> element (or, again,
   unwrapped, or have that semantic inserted or removed, as defined by
   the UA).</dd>

   <dt>If the <var title="">commandID</var> is <dfn title="command-formatBlock"><code>formatBlock</code></dfn></dt>

   <dd><p><em>Editing hosts only.</em> This command changes the
   semantics of the blocks containing the selection.</p>

   <p>If there is no selection, then, where in the description below
   refers to the selection, the user agent must act as if the
   selection was an empty range at the caret position.</p>

   <p>If the <var title="">value</var> parameter is not specified or
   has a value other than one of the following literal strings:</p>
   <ul class="brief">
    <li><code title="">&lt;address&gt;</code></li>
    <li><code title="">&lt;aside&gt;</code></li>
    <li><code title="">&lt;h1&gt;</code></li>
    <li><code title="">&lt;h2&gt;</code></li>
    <li><code title="">&lt;h3&gt;</code></li>
    <li><code title="">&lt;h4&gt;</code></li>
    <li><code title="">&lt;h5&gt;</code></li>
    <li><code title="">&lt;h6&gt;</code></li>
    <li><code title="">&lt;nav&gt;</code></li>
    <li><code title="">&lt;p&gt;</code></li>
    <li><code title="">&lt;pre&gt;</code></li>
   </ul>
   <p>...then the user agent must do nothing.</p>

   <p>Otherwise, the user agent must, for every position in the
   selection, take the furthest <span title="block-level
   elements">block-level element</span> ancestor of that position that
   contains only <span>inline-level content</span> and is not being
   used as a <span title="structured inline-level elements">structured
   inline-level element</span>, and, if that element is a descendant
   of the editing host, rename it according to the <var
   title="">value</var>, by stripping the leading <code>&lt;</code>
   character and the trailing <code>&gt;</code> character and using
   the rest as the new tag name.</p></dd>

   <dt>If the <var title="">commandID</var> is <dfn title="command-delete"><code>delete</code></dfn></dt>

   <dd><em>Editing hosts only.</em> The user agent must act as if the
   user had performed <a href="#contenteditable-delete">a backspace
   operation</a>.</dd>

   <dt>If the <var title="">commandID</var> is <dfn title="command-forwardDelete"><code>forwardDelete</code></dfn></dt>

   <dd><em>Editing hosts only.</em> The user agent must act as if the
   user had performed <a href="#contenteditable-delete">a forward
   delete operation</a>.</dd>

   <dt>If the <var title="">commandID</var> is <dfn title="command-insertLineBreak"><code>insertLineBreak</code></dfn></dt>

   <dd><em>Editing hosts only.</em> The user agent must act as if the
   user had <a href="#contenteditable-br">requested a line
   separator</a>.</dd>

   <dt>If the <var title="">commandID</var> is <dfn title="command-insertParagraph"><code>insertParagraph</code></dfn></dt>

   <dd><em>Editing hosts only.</em> The user agent must act as if the
   user had performed a <a href="#contenteditable-breakBlock">break
   block</a> editing action.</dd>

   <dt>If the <var title="">commandID</var> is <dfn title="command-insertText"><code>insertText</code></dfn></dt>

   <dd><em>Editing hosts only.</em> The user agent must act as if the
   user had <a href="#contenteditable-insertText">inserted text</a>
   corresponding to the <var title="">value</var> parameter.</dd>

   <dt>If the <var title="">commandID</var> is <code><var title="">vendorID</var>-<var title="">customCommandID</var></code></dt>

   <dd>User agents may implement vendor-specific extensions to this
   API. Vendor-specific extensions to the list of commands should use
   the syntax <code><var title="">vendorID</var>-<var
   title="">customCommandID</var></code> so as to prevent clashes
   between extensions from different vendors and future additions to
   this specification.</dd>

   <dt>If the <var title="">commandID</var> is something else</dt>

   <dd>User agents must do nothing.</dd>

  </dl>


  <h3 id="selection"><span title="SCS">[SCS]</span> The text selection APIs</h3>

  <p>Every <span>browsing context</span> has <dfn title="the
  selection">a selection</dfn>. The selection may be empty, and the
  selection may have more than one range (a disjointed selection). The
  user should be able to change the selection. User agents are not
  required to let the user select more than one range, and may
  collapse multiple ranges in the selection to a single range when the
  user interacts with the selection. (But, of course, the user agent
  may let the user create selections with multiple ranges.)</p>

  <p>This one selection must be shared by all the content of the
  browsing context (though not by nested browsing contexts), including
  any editing hosts in the document. (Editing hosts that are not
  inside a document cannot have a selection.)</p>

  <p>If the selection is empty (collapsed, so that it has only one
  segment and that segment's start and end points are the same) then
  the selection's position should equal the caret position. When the
  selection is not empty, this specification does not define the caret
  position; user agents should follow platform conventions in deciding
  whether the caret is at the start of the selection, the end of the
  selection, or somewhere else.</p>

  <p>On some platforms (such as those using Wordstar editing
  conventions), the caret position is totally independent of the start
  and end of the selection, even when the selection is empty. On such
  platforms, user agents may ignore the requirement that the cursor
  position be linked to the position of the selection altogether.</p>

  <p>Mostly for historical reasons, in addition to the <span>browsing
  context</span>'s <span title="the selection">selection</span>, each
  <code>textarea</code> and <code>input</code> element has an
  independent selection. These are the <dfn title="text field
  selection">text field selections</dfn>.</p>

  <p>The <code>datagrid</code> and <code>select</code> elements also
  have selections, indicating which items have been picked by the
  user. These are not discussed in this section.</p>

  <p class="note">This specification does not specify how selections
  are presented to the user. The Selectors specification, in
  conjunction with CSS, can be used to style text selections using the
  <code>::selection</code> pseudo-element. <a
  href="#refsSELECTORS">[SELECTORS]</a> <a
  href="#refsCSS21">[CSS21]</a></p>

  <h4>APIs for the browsing context selection</h4>

  <p>The <dfn
  title="dom-getSelection"><code>getSelection()</code></dfn> method on
  the <code>Window</code> interface must return the
  <code>Selection</code> object representing <span>the
  selection</span> of that <code>Window</code> object's <span>browsing
  context</span>.

  <p>For historical reasons, the <dfn
  title="dom-document-getSelection"><code>getSelection()</code></dfn>
  method on the <code>HTMLDocument</code> interface must return the
  same <code>Selection</code> object.</p>
                                   
  <pre class="idl">interface <dfn>Selection</dfn> {
  readonly attribute Node <span title="dom-selection-anchorNode">anchorNode</span>;
  readonly attribute long <span title="dom-selection-anchorOffset">anchorOffset</span>;
  readonly attribute Node <span title="dom-selection-focusNode">focusNode</span>;
  readonly attribute long <span title="dom-selection-focusOffset">focusOffset</span>;
  readonly attribute boolean <span title="dom-selection-isCollapsed">isCollapsed</span>;
  void <span title="dom-selection-collapse">collapse</span>(in Node parentNode, in long offset);
  void <span title="dom-selection-collapseToStart">collapseToStart</span>();
  void <span title="dom-selection-collapseToEnd">collapseToEnd</span>();
  void <span title="dom-selection-selectAllChildren">selectAllChildren</span>(in Node parentNode);
  void <span title="dom-selection-deleteFromDocument">deleteFromDocument</span>();
  readonly attribute long <span title="dom-selection-rangeCount">rangeCount</span>;
  Range <span title="dom-selection-getRangeAt">getRangeAt</span>(in long index);
  void <span title="dom-selection-addRange">addRange</span>(in Range range);
  void <span title="dom-selection-removeRange">removeRange</span>(in Range range);
  void <span title="dom-selection-removeAllRanges">removeAllRanges</span>();
  DOMString <span title="dom-selection-toString">toString</span>();
};</pre>
<!--
  See also:
    http://lxr.mozilla.org/mozilla/source/content/base/public/nsISelection.idl
  This spec doesn't have everything from there yet, in particular
  selectionLanguageChange() and containsNode() are missing. They are missing
  because I couldn't work out how to define them in terms of Ranges.

  I also haven't included extend():

    void <span title="dom-selection-extend">extend</span>(in Node parentNode, in long offset);
    // raise if no range
    // raise WRONG_DOCUMENT_ERR if parentNode not in document
    // do something

  ...mostly because I can't work out how to describe what it does quickly.
-->

  <p>The <code>Selection</code> interface is represents a list of
  <code>Range</code> objects. The first item in the list has index 0,
  and the last item has index <var title="">count</var>-1, where
  <var title="">count</var> is the number of ranges in the list. <a
  href="#refsDOM2RANGE">[DOM2RANGE]</a></p>

  <p>All of the members of the <code>Selection</code> interface are
  defined in terms of operations on the <code>Range</code> objects
  represented by this object. These operations can raise exceptions,
  as defined for the <code>Range</code> interface; this can therefore
  result in the members of the <code>Selection</code> interface
  raising exceptions as well, in addition to any explicitly called out
  below.</p> <!--- XXX example -->

  <p>The <dfn
  title="dom-selection-anchorNode"><code>anchorNode</code></dfn>
  attribute must return the value returned by the <code
  title="">startContainer</code> attribute of the last
  <code>Range</code> object in the list, or null if the list is
  empty.</p>

  <p>The <dfn
  title="dom-selection-anchorOffset"><code>anchorOffset</code></dfn>
  attribute must return the value returned by the <code
  title="">startOffset</code> attribute of the last <code>Range</code>
  object in the list, or 0 if the list is empty.</p>

  <p>The <dfn
  title="dom-selection-focusNode"><code>focusNode</code></dfn>
  attribute must return the value returned by the <code
  title="">endContainer</code> attribute of the last
  <code>Range</code> object in the list, or null if the list is
  empty.</p>

  <p>The <dfn
  title="dom-selection-focusOffset"><code>focusOffset</code></dfn>
  attribute must return the value returned by the <code
  title="">endOffset</code> attribute of the last <code>Range</code>
  object in the list, or 0 if the list is empty.</p>

  <p>The <dfn
  title="dom-selection-isCollapsed"><code>isCollapsed</code></dfn>
  attribute must return true if there are zero ranges, or if there is
  exactly one range and its <code title="">collapsed</code> attribute
  is itself true. Otherwise it must return false.</p>

  <p>The <dfn
  title="dom-selection-collapse"><code>collapse(<var title="">parentNode</var>,
  <var title="">offset</var>)</code></dfn> method must raise a
  <code>WRONG_DOCUMENT_ERR</code> DOM exception if
  <var title="">parentNode</var>'s <code title="">ownerDocument</code> is not
  the <code>HTMLDocument</code> object with which the
  <code>Selection</code> object is associated. Otherwise it is, and
  the method must remove all the ranges in the <code>Selection</code>
  list, then create a new <code>Range</code> object, add it to the
  list, and invoke its <code title="">setStart()</code> and <code
  title="">setEnd()</code> methods with the <var title="">parentNode</var> and
  <var title="">offset</var> values as their arguments.</p>

  <p>The <dfn
  title="dom-selection-collapseToStart"><code>collapseToStart()</code></dfn>
  method must raise an <code>INVALID_STATE_ERR</code> DOM exception if
  there are no ranges in the list. Otherwise, it must invoke the <code
  title="dom-selection-collapse">collapse()</code> method with the
  <code title="">startContainer</code> and <code
  title="">startOffset</code> values of the first <code>Range</code>
  object in the list as the arguments.</p>

  <p>The <dfn
  title="dom-selection-collapseToEnd"><code>collapseToEnd()</code></dfn>
  method must raise an <code>INVALID_STATE_ERR</code> DOM exception if
  there are no ranges in the list. Otherwise, it must invoke the <code
  title="dom-selection-collapse">collapse()</code> method with the
  <code title="">endContainer</code> and <code
  title="">endOffset</code> values of the last <code>Range</code>
  object in the list as the arguments.</p>

  <p>The <dfn
  title="dom-selection-selectAllChildren"><code>selectAllChildren(<var title="">parentNode</var>)</code></dfn>
  method must invoke the <code
  title="dom-selection-collapse">collapse()</code> method with the
  <var title="">parentNode</var> value as the first argument and 0 as the
  second argument, and must then invoke the <code
  title="">selectNodeContents()</code> method on the first (and only)
  range in the list with the <var title="">parentNode</var> value as the
  argument.</p>

  <p>The <dfn
  title="dom-selection-deleteFromDocument"><code>deleteFromDocument()</code></dfn>
  method must invoke the <code title="">deleteContents()</code> method
  on each range in the list, if any, from first to last.</p>

  <p>The <dfn
  title="dom-selection-rangeCount"><code>rangeCount</code></dfn>
  attribute must return the number of ranges in the list.</p>

  <p>The <dfn
  title="dom-selection-getRangeAt"><code>getRangeAt(<var title="">index</var>)</code></dfn>
  method must return the <var title="">index</var>th range in the list. If
  <var title="">index</var> is less than zero or greater or equal to the value
  returned by the <code
  title="dom-selection-rangeCount">rangeCount</code> attribute, then
  the method must raise an <code>INDEX_SIZE_ERR</code> DOM
  exception.</p>

  <p>The <dfn
  title="dom-selection-addRange"><code>addRange(<var title="">range</var>)</code></dfn>
  method must add the given <var title="">range</var> Range object to the list
  of selections, at the end (so the newly added range is the new last
  range). Duplicates are not prevented; a range may be added more than
  once in which case it appears in the list more than once, which (for
  example) will cause <code
  title="dom-selection-toString">toString()</code> to return the
  range's text twice.</p> <!-- XXX how does this interact with
  deleteFromDocument() which acts on all ranges? -->

  <p>The <dfn
  title="dom-selection-removeRange"><code>removeRange(<var title="">range</var>)</code></dfn>
  method must remove the first occurrence of <var title="">range</var> in the
  list of ranges, if it appears at all.</p>

  <p>The <dfn
  title="dom-selection-removeAllRanges"><code>removeAllRanges()</code></dfn>
  method must remove all the ranges from the list of ranges, such that
  the <code title="dom-selection-rangeCount">rangeCount</code>
  attribute returns 0 after the <code
  title="dom-selection-removeAllRanges">removeAllRanges()</code>
  method is invoked (and until a new range is added to the list,
  either through this interface or via user interaction).</p>

  <p>The <dfn
  title="dom-selection-toString"><code>toString()</code></dfn> method
  must return a concatenation of the results of invoking the <code
  title="">toString()</code> method of the <code>Range</code> object
  on each of the ranges of the selection, in the order they appear in
  the list (first to last).</p>

  <p>In language bindings where this is supported, objects
  implementing the <code>Selection</code> interface must stringify to
  the value returned by the object's <code
  title="dom-selection-toString">toString()</code> method.</p>

  <div class="example">
   <p>In the following document fragment, the emphasised parts
   indicate the selection.</p>
   <pre>&lt;p>The cute girl likes <em>the </em>&lt;cite><em>Oxford English</em> Dictionary&lt;/cite>.&lt/p></pre>
   <p>If a script invoked <code
   title="">window.getSelection().toString()</code>, the return value
   would be "<code>the Oxford English</code>".</p>
  </div>

  <p class="note">The <code>Selection</code> interface has no relation
  to the <code>SelectedRowRanges</code> interface.</p>


  <h4>APIs for the text field selections</h4>

  <p class="big-issue">This section will refer to the IDLs for
  HTMLTextAreaElement and HTMLInputElement, most notably their
  select() method, the selectionStart and selectionEnd attributes, and
  the setSelectionRange() method.</p>

<!-- XXX text field selection APIs

| What do you do with characters such as a ZWJ, does it count in the
| length, what happens if you set the caret to its position etc.
|
| Also, when specifying this you need to be clear that you mean that
| the cursor should be before or after the character.

> Additionally, it would be easy to extract the text, given functions
> such as substring().

http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-48880622
http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-34677168
http://lxr.mozilla.org/mozilla/source/dom/public/idl/html/nsIDOMNSHTMLTextAreaElement.idl

-->

  <h3><span title="SCS">[SCS]</span> Client-side session and persistent storage</h3> <!-- local storage -->

  <h4>Introduction</h4>

  <p><em>This section is non-normative.</em></p>

  <p>This specification introduces two related mechanisms, similar to
  HTTP session cookies <a href="#refsRFC2965">[RFC2965]</a>, for
  storing structured data on the client side.</p>

  <p>The first is designed for scenarios where the user is carrying
  out a single transaction, but could be carrying out multiple
  transactions in different windows at the same time.</p>

  <p>Cookies don't really handle this case well. For example, a user
  could be buying plane tickets in two different windows, using the
  same site. If the site used cookies to keep track of which ticket
  the user was buying, then as the user clicked from page to page in
  both windows, the ticket currently being purchased would "leak" from
  one window to the other, potentially causing the user to buy two
  tickets for the same flight without really noticing.</p>

  <p>To address this, this specification introduces the <code
  title="dom-sessionStorage">sessionStorage</code> DOM attribute.
  Sites can add data to the session storage, and it will be accessible
  to any page from that domain opened in that window.</p>

  <div class="example">

   <p>For example, a page could have a checkbox that the user ticks to
   indicate that he wants insurance:</p>

   <pre>&lt;label>
 &lt;input type="checkbox" onchange="sessionStorage.insurance = checked">
 I want insurance on this trip.
&lt;/label></pre>

   <p>A later page could then check, from script, whether the user had
   checked the checkbox or not:</p>

   <pre>if (sessionStorage.insurance) { ... }</pre>

   <p>If the user had multiple windows opened on the site, each one
   would have its own individual copy of the session storage object.</p>

  </div>

  <!--

   sessionStorage.flightDeparture = 'OSL';
   sessionStorage.flightArrival = 'NYC';

   for (var i in forms[0].elements)
      sessionStorage["data_" + i.name] = i.value;

   if (!sessionStorage[documents])
     sessionStorage[documents] = {};
   sessionStorage[documents][filename] = <document/>;

  -->

  <p>The second storage mechanism is designed for storage that spans
  multiple windows, and lasts beyond the current session. In
  particular, Web applications may wish to store megabytes of user
  data, such as entire user-authored documents or a user's mailbox, on
  the clientside for performance reasons.</p>

  <p>Again, cookies do not handle this case well, because they are
  transmitted with every request.</p>

  <p>The <code title="dom-globalStorage">globalStorage</code> DOM
  attribute is used to access the global storage areas.</p>

  <div class="example">

   <p>The site at example.com can display a count of how many times
   the user has loaded its page by putting the following at the bottom
   of its page:</p>

   <pre>&lt;p>
  You have viewed this page
  &lt;span id="count">an untold number of&lt;/span>
  time(s).
&lt;/p>
&lt;script>
  var storage = globalStorage['example.com'];
  if (!storage.pageLoadCount)
    storage.pageLoadCount = 0;
  storage.pageLoadCount = parseInt(storage.pageLoadCount, 10) + 1;
  document.getElementById('count').textContent = storage.pageLoadCount;
&lt;/script></pre>

  </div>

  <p>Each domain and each subdomain has its own separate storage area.
  Subdomains can access the storage areas of parent domains, and
  domains can access the storage areas of subdomains.</p>

  <ul class="brief">
   <li><code>globalStorage['']</code> is accessible to all domains.</li>
   <li><code>globalStorage['com']</code> is accessible to all .com domains</li>
   <li><code>globalStorage['example.com']</code> is accessible to example.com and any of its subdomains</li>
   <li><code>globalStorage['www.example.com']</code> is accessible to www.example.com and example.com, but not www2.example.com.</li>
  </ul>

  <p>Storage areas (both session storage and global storage) store
  strings. To store structured data in a storage area, you must first
  convert it to a string.</p>


  <h4>The <code>Storage</code> interface</h4>

  <pre class="idl">
interface <dfn>Storage</dfn> {
  readonly attribute unsigned long <span title="dom-storage-length">length</span>;
  DOMString <span title="dom-storage-key">key</span>(in unsigned long index);
  <span>StorageItem</span> <span title="dom-storage-getItem">getItem</span>(in DOMString key);
  void <span title="dom-storage-setItem">setItem</span>(in DOMString key, in DOMString data);
  void <span title="dom-storage-removeItem">removeItem</span>(in DOMString key);
};</pre>

  <p>Each <code>Storage</code> object provides access to a list of
  key/value pairs, which are sometimes called items. Keys are strings,
  and any string (including the empty string) is a valid key. Values
  are strings with associated metadata, represented by
  <code>StorageItem</code> objects.</p>

  <p>Each <code>Storage</code> object is associated with a list of
  key/value pairs when it is created, as defined in the sections on
  the <code title="dom-sessionStorage">sessionStorage</code> and <code
  title="dom-globalStorage">globalStorage</code> attributes. Multiple
  separate objects implementing the <code>Storage</code> interface can
  all be associated with the same list of key/value pairs
  simultaneously.</p>

  <p>Key/value pairs have associated metadata. In particular, a
  key/value pair can be marked as either "safe only for secure
  content", or as "safe for both secure and insecure content".</p>

  <p>A key/value pair is <dfn title="accessible keys">accessible</dfn>
  if either it is marked as "safe for both secure and insecure
  content", or it is marked as "safe only for secure content" and the
  script in question is running in a <span title="secure scripting
  contexts">secure scripting context</span>.</p>

  <p>The <dfn title="dom-storage-length"><code>length</code></dfn>
  attribute must return the number of key/value pairs currently
  present and <span title="accessible keys">accessible</span> in the
  list associated with the object.</p>

  <p>The <dfn title="dom-storage-key"><code>key(<var
  title="">n</var>)</code></dfn> method must return the name of the
  <var title="">n</var>th <span>accessible</span> key in the list. The
  order of keys is user-agent defined, but must be consistent within
  an object between changes to the number of keys. (Thus, <span
  title="dom-storage-setItem">adding</span> or <span
  title="dom-storage-removeItem">removing</span> a key may change the
  order of the keys, but merely changing the value of an existing key
  must not.) <!--The order of keys may differ between instances of the
  <code>Storage</code> interface accessing the same list. [removed for
  now for clarity, but if people ask, put it back. this is part of the
  spec.]--> If <var title="">n</var> is less than zero or greater than
  or equal to the number of key/value pairs in the object, then this
  method must raise an <code>INDEX_SIZE_ERR</code> exception.</p>

  <p>The <dfn title="dom-storage-getItem"><code>getItem(<var
  title="">key</var>)</code></dfn> method must return the
  <code>StorageItem</code> object representing the key/value pair with
  the given <var title="">key</var>. If the given <var
  title="">key</var> does not exist in the list associated with the
  object, or is not <span>accessible</span>, then this method must
  return null. Subsequent calls to this method with the same key from
  scripts running in the same <span>security context</span> must
  return the same instance of the <code>StorageItem</code>
  interface. (Such instances must not be shared across security
  contexts, though.)</p> <!-- XXX define security context -->

  <p>The <dfn title="dom-storage-setItem"><code>setItem(<var
  title="">key</var>, <var title="">value</var>)</code></dfn> method
  must first check if a key/value pair with the given <var
  title="">key</var> already exists in the list associated with the
  object.</p>

  <p>If it does not, then a new key/value pair must be added to the
  list, with the given <var title="">key</var> and <var
  title="">value</var>, such that any current or future
  <code>StorageItem</code> objects referring to this key/value pair
  will return the value given in the <var title="">value</var>
  argument. If the script setting the value is running in a <span
  title="secure scripting contexts">secure scripting context</span>,
  then the key/value pair must be marked as "safe only for secure
  content", otherwise it must be marked as "safe for both secure and
  insecure content".</p>

  <p>If the given <var title="">key</var> <em>does</em> exist in the
  list, then, if the key/value pair with the given <var
  title="">key</var> is <span>accessible</span>, it must have its
  value updated so that any current or future <code>StorageItem</code>
  objects referring to this key/value pair will return the value given
  in the <var title="">value</var> argument. If it is <em>not</em>
  <span>accessible</span>, the method must raise a <span>security
  exception</span>.</p>

  <p>When the <code title="dom-storage-setItem">setItem()</code>
  method is successfully invoked (i.e. when it doesn't raise an
  exception), events are fired on other <code>HTMLDocument</code>
  objects that can access the newly stored data, as defined in the
  sections on the <code
  title="dom-sessionStorage">sessionStorage</code> and <code
  title="dom-globalStorage">globalStorage</code> attributes.</p> <!--
  not normative, see the sections below for the normative statement
  -->

  <p>The <dfn title="dom-storage-removeItem"><code>removeItem(<var
  title="">key</var>)</code></dfn> method must cause the key/value
  pair with the given <var title="">key</var> to be removed from the
  list associated with the object, if it exists and is
  <span>accessible</span>. If no item with that key exists, the method
  must do nothing. If an item with that key exists but is not
  <span>accessible</span>, the method must raise a <span>security
  exception</span>.</p>

  <p>The <code title="dom-storage-setItem">setItem()</code> and <code
  title="dom-storage-removeItem">removeItem()</code> methods must be
  atomic with respect to failure. That is, changes to the data storage
  area must either be successful, or the data storage area must not be
  changed at all.</p>

  <p>In the ECMAScript binding, enumerating a <code>Storage</code>
  object must enumerate through the currently stored and
  <span>accessible</span> keys in the list the object is associated
  with. (It must not enumerate the values or the actual members of the
  interface). In the ECMAScript binding, <code>Storage</code> objects
  must support dereferencing such that getting a property that is not
  a member of the object (i.e. is neither a member of the
  <code>Storage</code> interface nor of <code>Object</code>) must
  invoke the <code title="dom-storage-getItem">getItem()</code> method
  with the property's name as the argument, and setting such a
  property must invoke the <code
  title="dom-storage-setItem">setItem()</code> method with the
  property's name as the first argument and the given value as the
  second argument.</p>


  <h4>The <code>StorageItem</code> interface</h4>

  <p>Items in <code>Storage</code> objects are represented by objects
  implementing the <code>StorageItem</code> interface.</p>

  <pre class="idl">
interface <dfn>StorageItem</dfn> {
           attribute boolean <span title="dom-storageitem-secure">secure</span>;
           attribute DOMString <span title="dom-storageitem-value">value</span>;
};</pre>

  <p>In the ECMAScript binding, <code>StorageItem</code> objects must
  stringify to their <code title="dom-storageitem-value">value</code>
  attribute's value.</p>

  <p>The <dfn title="dom-storageitem-value"><code>value</code></dfn>
  attribute must return the current value of the key/value pair
  represented by the object. When the attribute is set, the user agent
  must invoke the <code title="dom-storage-setItem">setItem()</code>
  method of the <code>Storage</code> object that the
  <code>StorageItem</code> object is associated with, with the key
  that the <code>StorageItem</code> object is associated with as the
  first argument, and the new given value of the attribute as the
  second argument.</p>

  <p><code>StorageItem</code> objects must be <em>live</em>, meaning
  that as the underlying <code>Storage</code> object has its key/value
  pairs updated, the <code>StorageItem</code> objects must always
  return the actual value of the key/value pair they represent.</p>

  <p>If the key/value pair has been deleted, the
  <code>StorageItem</code> object must act as if its value was the
  empty string. On setting, the key/value pair will be recreated.</p>

  <p>The <dfn title="dom-storageitem-secure"><code>secure</code></dfn>
  attribute must raise an <code>INVALID_ACCESS_ERR</code> exception
  when accessed or set from a script whose script context is not <span
  title="secure scripting contexts">considered secure</span><!-- XXX
  xref -->. (Basically, if the page is not an SSL page.)</p>

  <p>If the scripting context <em>is</em> secure, then the <code
  title="dom-storageitem-secure">secure</code> attribute must return
  true if the key/value pair is considered "safe only for secure
  content", and false if it is considered "safe for both secure and
  insecure content". If it is set to true, then the key/value pair
  must be flagged as "safe only for secure content". If it is set to
  false, then the key/value pair must be flagged as "safe for both
  secure and insecure content".</p>

  <p>If a <code>StorageItem</code> object is obtained by a script that
  is not running in a <span title="secure scripting contexts">secure
  scripting context</span>, and the item is then marked with the "safe
  only for secure content" flag by a script that <em>is</em> running
  in a secure context, the <code>StorageItem</code> object must
  continue to be available to the first script, who will be able to
  read the value of the object. However, any attempt to <em>set</em>
  the value would then start raising exceptions as described in the
  previous section, and the key/value pair would no longer appear in
  the appropriate <code>Storage</code> object.</p>


  <h4>The <code title="dom-sessionStorage">sessionStorage</code> attribute</h4>

  <p>The <dfn
  title="dom-sessionStorage"><code>sessionStorage</code></dfn>
  attribute represents the storage area specific to the current
  <span>top-level browsing context</span>.</p>

  <p>Each <span>top-level browsing context</span> has a unique set of
  session storage areas, one for each domain.</p>

  <p>User agents should not expire data from a browsing context's
  session storage areas, but may do so when the user requests that
  such data be deleted, or when the UA detects that it has limited
  storage space, or for security reasons. User agents should always
  avoid deleting data while a script that could access that data is
  running. When a top-level browsing context is destroyed (and
  therefore permanently inaccessible to the user) the data stored in
  its session storage areas can be discarded with it, as the API
  described in this specification provides no way for that data to
  ever be subsequently retrieved.</p>

  <p class="note">The lifetime of a browsing context can be unrelated
  to the lifetime of the actual user agent process itself, as the user
  agent may support resuming sessions after a restart.</p>

  <p>When a new <code>HTMLDocument</code> is created, the user agent
  must check to see if the document's <span>top-level browsing
  context</span> has allocated a session storage area for that
  <span>document's domain</span>. If it has not, a new storage area
  for that document's domain must be created.</p>

  <p>The <code>Storage</code> object for the document's associated
  <code>Window</code> object's <code
  title="dom-sessionStorage">sessionStorage</code> attribute must then
  be associated with the domain's session storage area.</p>

  <p>When a new <span>top-level browsing context</span> is created by
  cloning an existing <span>browsing context</span>, the new browsing
  context must start with the same session storage areas as the
  original, but the two sets must from that point on be considered
  separate, not affecting each other in any way.</p>

  <p>When a new <span>top-level browsing context</span> is created by
  a script in an existing <span>browsing context</span>, or by the
  user following a link in an existing browsing context, or in some
  other way related to a specific <code>HTMLDocument</code>, then,
  if the new context's first <code>HTMLDocument</code> has the same
  <span title="document's domain">domain</span> as the
  <code>HTMLDocument</code> from which the new context was created,
  the new browsing context must start with a single session storage
  area. That storage area must be a copy of that domain's session
  storage area in the original browsing context, which from that point
  on must be considered separate, with the two storage areas not
  affecting each other in any way.</p>

  <!-- XXX define the case for window.open() -->

  <p id="sessionStorageEvent">When the <code
  title="dom-storage-setItem">setItem()</code> method is called on a
  <code>Storage</code> object <var title="">x</var> that is associated
  with a session storage area, then, if the method does not raise a
  security exception, in every <code>HTMLDocument</code> object
  whose <code>Window</code> object's <code
  title="dom-sessionStorage">sessionStorage</code> attribute's
  <code>Storage</code> object is associated with the same storage
  area, other than <var title="">x</var>, a <code
  title="event-storage">storage</code> event must be fired, as <span
  title="event-storage">described below</span>.</p>


  <h4>The <code title="dom-globalStorage">globalStorage</code> attribute</h4>

  <pre class="idl">interface <dfn>StorageList</dfn> {
  <span>Storage</span> <span title="dom-storagelist-namedItem">namedItem</span>(in DOMString domain);
};</pre>

  <p>The <dfn
  title="dom-globalStorage"><code>globalStorage</code></dfn>
  object provides a <code>Storage</code> object for each domain.</p>

  <p>In the ECMAScript binding, <code>StorageList</code> objects must
  support dereferencing such that getting a property that is not a
  member of the object (i.e. is neither a member of the
  <code>StorageList</code> interface nor of <code>Object</code>) must
  invoke the <code title="dom-storagelist-namedItem">namedItem()</code>
  method with the property's name as the argument.</p>

  <p>User agents must have a set of global storage areas, one for each
  domain.</p>

  <p>User agents should only expire data from the global storage areas
  for security reasons or when requested to do so by the user. User
  agents should always avoid deleting data while a script that could
  access that data is running. Data stored in global storage areas
  should be considered potentially user-critical. It is expected that
  Web applications will use the global storage areas for storing
  user-written documents.</p>

  <p>The <dfn title="dom-storagelist-namedItem"><code>namedItem(<var
  title="">domain</var>)</code></dfn> method tries to returns a
  <code>Storage</code> object associated with the given domain,
  according to the rules that follow.</p>

  <div id="splitDomain">

   <p>The <var title="">domain</var> must first be split into an array
   of strings, by splitting the string at "." characters (U+002E FULL
   STOP). If the <var title="">domain</var> argument is the empty
   string, then the array is empty as well. If the <var
   title="">domain</var> argument is not empty but has no dots, then
   the array has one item, which is equal to the <var
   title="">domain</var> argument. If the <var title="">domain</var>
   argument contains consecutive dots, there will be empty strings in
   the array (e.g. the string "hello..world" becomes split into the
   three strings "hello", "", and "world", with the middle one being
   the empty string).</p>

   <p>Each component of the array must then have the IDNA ToASCII
   algorithm applied to it, with both the AllowUnassigned and
   UseSTD3ASCIIRules flags set. <a href="#refsRFC3490">[RFC3490]</a>
   If ToASCII fails to convert one of the components of the string,
   e.g. because it is too long or because it contains invalid
   characters, then the user agent must raise a
   <code>SYNTAX_ERR</code> exception. <a
   href="#refsDOM3CORE">[DOM3CORE]</a> The components after this step
   consist of only US-ASCII characters.</p>

   <p>The components of the array must then be converted to lowercase.
   Since only US-ASCII is involved at this step, this only requires
   converting characters in the range A-Z to the corresponding
   characters in the range a-z.</p>

  </div>

  <p>The resulting array is used in a comparison with another array,
  as described below. In addition, its components are concatenated
  together, each part separated by a dot (U+002E), to form the
  <dfn>normalised requested domain</dfn>.</p>

  <p class="example">If the original <var title="">domain</var> was
  "&Aring;sg&aring;rd.Example.Com", then the resulting array would
  have the three items "xn--sgrd-poac", "example", and "com", and the
  normalised requested domain would be
  "xn--sgrd-poac.example.com".</p>

  <p>Next, the <span title="script's domain">script's own
  domain</span> is processed to find if it is allowed to access the
  requested domain.</p>

  <p>If the script's domain name in not known, e.g. if only the
  server's IP address is known, and the <span>normalised requested
  domain</span> is not the empty string, then the user agent must
  raise a <span>security exception</span>.</p>

  <p class="note">If the <span>normalised requested domain</span> is
  the empty string, then the rest of this algorithm can be skipped.
  This is because in that situation, the comparison of the two arrays
  below will always find them to be the same &mdash; the first array
  in such a situation is also empty and so permission to access that
  storage area will always be given.</p>

  <p>If the script's domain contains no dots (U+002E) then the string
  "<code>.localdomain</code>" must be appended to the script's
  domain.</p>

  <p>Then, the script's domain must be turned into an array, being
  split, converted to ASCII, and lowercased as described for the <var
  title="">domain</var> argument <a href="#splitDomain">above</a>.</p>

  <p>Of the two arrays, the longest one must then be shortened to the
  length of the shorter one, by dropping items from the start of the
  array.</p>

  <div class="example">

   <p>If the <var title="">domain</var> argument is "www.example.com"
   and the script's domain is "example.com" then the first array will be
   a three item array ("www", "example", "com"), and the second will
   be a two item array ("example", "com"). The first array is
   therefore shortened, dropping the leading parts, making both into
   the same array ("example", "com").</p>

  </div>

  <p>If the two arrays are not component-for-component identical in
  literal string comparisons, then the user agent must then raise a
  <span>security exception</span>.</p>

  <p>Otherwise, the user agent must check to see if it has allocated
  global storage area for the <span>normalised requested
  domain</span>. If it has not, a new storage area for that domain
  must be created.</p>

  <p>The user agent must then create a <code>Storage</code> object
  associated with that domain's global storage area, and return
  it.</p>

  <p>When the requested <var title="">domain</var> is a top level
  domain, or the empty string, or a country-specific sub-domain like
  "co.uk" or "ca.us", the associated global storage area is known as
  <dfn>public storage area</dfn></p>

  <div id="globalStorageEvent">

   <p>The <code title="dom-storage-setItem">setItem()</code> method
   might be called on a <code>Storage</code> object that is associated
   with a global storage area for a domain <var title="">d</var>,
   created by a <code>StorageList</code> object associated with a
   <code>Window</code> object <var title="">x</var>. Whenever this
   occurs, if the method didn't raise an exception, a <code
   title="event-storage">storage</code> event must be fired, as
   described below, in every <code>HTMLDocument</code> object that
   matches the following conditions:</p>

   <ul>

    <li>Its <code>Window</code> object is not <var title="">x</var>, and</li>

    <li>Its <code>Window</code> object's <code
    title="dom-sessionStorage">globalStorage</code> attribute's
    <code>StorageList</code> object's <code
    title="dom-storagelist-namedItem">namedItem()</code> method would not
    raise a <span>security exception</span> according to the rules above if it was
    invoked with the domain <var title="">d</var>.</li>

   </ul>

   <p>In other words, every other document that has access to that
   domain's global storage area is notified of the change.</p>

  </div>


  <h4>The <code title="event-storage">storage</code> event</h4>

  <p>The <dfn title="event-storage"><code>storage</code></dfn> event
  is fired in an <code>HTMLDocument</code> when a storage area
  changes, as described in the previous two sections (<a
  href="#sessionStorageEvent">for session storage</a>, <a
  href="#globalStorageEvent">for global storage</a>).</p>

  <p>When this happens, a <code>storage</code> event in the
  <code>http://www.w3.org/2001/xml-events</code> namespace, which
  bubbles, is not cancelable, has no default action, and which uses
  the <code>StorageEvent</code> interface described below, must be
  fired on <span>the <code>body</code> element</span>, or, if there
  isn't one, on the <code>HTMLDocument</code> object itself.</p>

  <p>However, it is possible (indeed, for session storage areas,
  likely) that the target <code>HTMLDocument</code> object is not
  active at that time. For example, it might not be the <span>current
  entry</span> in the session history; user agents typically stop
  scripts from running in pages that are in the history. In such
  cases, the user agent must instead delay the firing of the event
  until such time as the <code>HTMLDocument</code> object in
  question becomes active again.</p>

  <p>When there are multiple delayed <code>storage</code> events for
  the same <code>HTMLDocument</code> object, user agents should
  coalesce events with the same <code
  title="dom-storageevent-domain">domain</code> value (dropping
  duplicates).</p>

  <p>If the DOM of a page that has delayed <code>storage</code> events
  queued up is <span title="discard">discarded</span>, then the
  delayed events are dropped as well.</p>

  <pre class="idl">interface <dfn>StorageEvent</dfn> : Event {
  readonly attribute DOMString <span title="dom-storageEvent-domain">domain</span>;
  void               <span>initStorageEvent</span>(in DOMString typeArg, 
                                      in boolean canBubbleArg, 
                                      in boolean cancelableArg, 
                                      in DOMString domainArg);
  void               <span>initStorageEventNS</span>(in DOMString namespaceURIArg,
                                        in DOMString typeArg, 
                                        in boolean canBubbleArg, 
                                        in boolean cancelableArg, 
                                        in DOMString domainArg);
};</pre>

  <p>The <dfn><code>initStorageEvent()</code></dfn> and
  <dfn><code>initStorageEventNS()</code></dfn> methods must
  initialise the event in a manner analogous to the similarly-named
  methods in the DOM3 Events interfaces. <a
  href="#DOM3Events">[DOM3EVENTS]</a></p>

  <p>The <dfn
  title="dom-storageEvent-domain"><code>domain</code></dfn> attribute
  of the <code>StorageEvent</code> event object must be set to the
  name of the domain associated with the storage area that changed if
  that storage area is a global storage area, or the string
  "<code>#session</code>" if it was a session storage area.</p>

  <!-- XXX onstorage should be defined -->


  <h4>Miscellaneous implementation requirements for storage areas</h4>

  <h5>Disk space</h5>

  <p>User agents should limit the total amount of space allowed for a
  domain based on the domain of the page setting the value.</p>

  <p>User agents should not limit the total amount of space allowed on
  a per-storage-area basis, otherwise a site could just store data in
  any number of subdomains, e.g. storing up to the limit in
  a1.example.com, a2.example.com, a3.example.com, etc, circumventing
  per-domain limits.</p>

  <p>User agents should consider additional quota mechanisms (for
  example limiting the amount of space provided to a domain's
  subdomains as a group) so that hostile authors can't run scripts
  from multiple subdomains all adding data to the global storage area
  in an attempted denial-of-service attack.</p>

  <p>User agents may prompt the user when per-domain space quotas are
  reached, allowing the user to grant a site more space. This enables
  sites to store many user-created documents on the user's computer,
  for instance.</p>

  <p>User agents should allow users to see how much space each domain
  is using.</p>

  <p>If the storage area space limit is reached during a <code
  title="dom-storage-setItem">setItem()</code> call, the user agent
  should raise an exception.</p> <!-- XXX which one? -->

  <p>A mostly arbitrary limit of five megabytes per domain is
  recommended. Implementation feedback is welcome and will be used to
  update this suggestion in future.</p>


  <h5>Threads</h5>

  <p>Multiple browsing contexts must be able to access the global
  storage areas simultaneously in a predictable manner. Scripts must
  not be able to detect any concurrent script execution.</p>

  <p>This is required to guarentee that the <code
  title="dom-storage-length">length</code> attribute of a
  <code>Storage</code> object never changes while a script is
  executing, other than in a way that is predictable by the script
  itself.</p>

  <p>There are various ways of implementing this requirement. One is
  that if a script running in one browsing context accesses a global
  storage area, the UA blocks scripts in other browsing contexts when
  they try to access <em>any</em> global storage area until the first
  script has executed to completion. (Similarly, when a script in one
  browsing context accesses its session storage area, any scripts that
  have the same top level browsing context and the same domain would
  block when accessing their session storage area until the first
  script has executed to completion.) Another (potentially more
  efficient but probably more complex) implementation strategy is to
  use optimistic transactional script execution. This specification
  does not require any particular implementation strategy, so long as
  the requirement above is met.</p>


  <h4>Security and privacy</h4>

  <h5>User tracking</h5>

  <p>A third-party advertiser (or any entity capable of getting
  content distributed to multiple sites) could use a unique identifier
  stored in its domain's global storage area to track a user across
  multiple sessions, building a profile of the user's interests to
  allow for highly targetted advertising. In conjunction with a site
  that is aware of the user's real identity (for example an e-commerce
  site that requires authenticated credentials), this could allow
  oppressive groups to target individuals with greater accuracy than
  in a world with purely anonymous Web usage.</p>

  <p>The <code title="dom-globalStorage">globalStorage</code> object
  also introduces a way for sites to cooperate to track users over
  multiple domains, by storing identifying data in "<span
  title="public storage area">public</span>" top-level domain storage
  area, accessible by any domain.</p>

  <p>There are a number of techniques that can be used to mitigate the
  risk of user tracking:</p>

  <ul>

   <li>

    <p>Blocking third-party storage: user agents may restrict access
    to the <code title="dom-globalStorage">globalStorage</code> object
    to scripts originating at the domain of the top-level document of
    the <span>browsing context</span>.</p>

    <p>This blocks a third-party site from using its private storage
    area for tracking a user, but top-level sites could still
    cooperate with third parties to perferm user tracking by using the
    "<span title="public storage area">public</span>" storage area.</p>

   </li>
 
   <li>

    <p>Expiring stored data: user agents may automatically delete
    stored data after a period of time.</p>

    <p>For example, a user agent could treat the global storage area
    as session-only storage, deleting the data once the user had
    closed all the <span>browsing contexts</span> that could access
    it.</p>

    <p>This can restrict the ability of a site to track a user, as the
    site would then only be able to track the user across multiple
    sessions when he authenticates with the site itself (e.g. by
    making a purchase or logging in to a service).</p>

    <!-- XXX should there be an explicit way for sites to state when
    data should expire? as in
    globalStorage['example.com'].expireData(365); ? -->

   </li>

   <li>

    <p>Blocking access to the top-level domain ("<span title="public storage area">public</span>") storage
    areas: user agents may prevent domains from storing data in and
    reading data from the top-level domain entries in the <code
    title="dom-globalStorage">globalStorage</code> object.</p>

    <p>In practice this requires a detailed list of all the "public"
    second-level (and third-level) domains. For example, content at
    the domain <code>www.example.com</code> would be allowed to access
    <code>example.com</code> data but not <code>com</code> data;
    content at the domain <code>example.co.uk</code> would be allowed
    access to <code>example.co.uk</code> but not <code>co.uk</code> or
    <code>uk</code>; and content at
    <code>example.chiyoda.tokyo.jp</code> would be allowed access to
    <code>example.chiyoda.tokyo.jp</code> but not
    <code>chiyoda.tokyo.jp</code>, <code>tokyo.jp</code>, or
    <code>jp</code>, while content at
    <code>example.metro.tokyo.jp</code> would be allowed access to
    both <code>example.metro.tokyo.jp</code> and
    <code>metro.tokyo.jp</code> but not <code>tokyo.jp</code> or
    <code>jp</code>. The problem is even more convoluted when one
    considers private domains with third-party subdomains such as
    <code>dyndns.org</code> or <code>uk.com</code>.</p>

    <p>Blocking access to the "<span title="public storage area">public</span>" storage areas can also prevent
    innocent sites from cooperating to provide services beneficial to
    the user.</p>

   </li>

   <li>

    <p>Treating persistent storage as cookies: user agents may present
    the persistent storage feature to the user in a way that does not
    distinguish it from HTTP session cookies. <a
    href="#refsRFC2965">[RFC2965]</a></p>

    <p>This might encourage users to view persistent storage with
    healthy suspicion.</p>

   </li>

   <li>

    <p>Site-specific white-listing of access to "<span title="public storage area">public</span>" storage
    area: user agents may allow sites to access persistent storage
    for their own domain and subdomains in an unrestricted manner, but
    require the user to authorise access to the storage area of
    higher-level domains.</p>

    <p>For example, code at <code>example.com</code> would be always
    allowed to read and write data for <code>www.example.com</code>
    and <code>example.com</code>, but if it tried to access
    <code>com</code>, the user agent could display a non-modal message
    informing the user that the page requested access to
    <code>com</code> and offering to allow it.</p>

   </li>

   <li>

    <p>Origin-tracking of persistent storage data: user agents may
    record the domain of the script that caused data to be stored.</p>

    <p>If this information is then used to present the view of data
    currently in persistent storage, it would allow the user to make
    informed decisions about which parts of the persistent storage to
    prune. Combined with a blacklist ("delete this data and prevent
    this domain from ever storing data again"), the user can restrict
    the use of persistent storage to sites that he trusts.</p>

   </li>

   <li>

    <p>Shared blacklists: user agents may allow users to share their
    persistent storage domain blacklists.</p>

    <p>This would allow communities to act together to protect their
    privacy.</p>

   </li>

  </ul>

  <p>While these suggestions prevent trivial use of this API for user
  tracking, they do not block it altogether. Within a single domain, a
  site can continue to track the user across multiple sessions, and
  can then pass all this information to the third party along with any
  identifying information (names, credit card numbers, addresses)
  obtained by the site. If a third party cooperates with multiple
  sites to obtain such information, a profile can still be created.</p>

  <p>However, user tracking is to some extent possible even with no
  cooperation from the user agent whatsoever, for instance by using
  session identifiers in URIs, a technique already commonly used for
  innocuous purposes but easily repurposed for user tracking (even
  retroactively). This information can then be shared with other
  sites, using using visitors' IP addresses and other user-specific
  data (e.g. user-agent headers and configuration settings) to combine
  separate sessions into coherent user profiles.</p>

  <h5>Cookie resurrection</h5>

  <p>If the user interface for persistent storage presents data in the
  persistent storage feature separately from data in HTTP session
  cookies, then users are likely to delete data in one and not the
  other. This would allow sites to use the two features as redundant
  backup for each other, defeating a user's attempts to protect his
  privacy.</p>

  <h5>Integrity of "public" storage areas</h5>

  <p>Since the "<span title="public storage area">public</span>" global storage areas are accessible by content
  from many different parties, it is possible for third-party sites to
  delete or change information stored in those areas in ways that the
  originating sites may not expect.</p>

  <p>Authors must not use the "<span title="public storage area">public</span>" global storage areas for
  storing sensitive data. Authors must not trust information stored in
  "<span title="public storage area">public</span>" global storage areas.</p>

  <h5>Cross-protocol and cross-port attacks</h5>

  <p>This API makes no distinction between content served over HTTP,
  FTP, or other host-based protocols, and does not distinguish between
  content served from different ports at the same host.</p>

  <p>Thus, for example, data stored in the global persistent storage
  for domain "www.example.com" by a page served from HTTP port 80 will
  be available to a  page served in
  <code>http://example.com:18080/</code>, even if the latter is an
  experimental server under the control of a different user.</p>

  <p>Since the data is not sent over the wire by the user agent, this
  is not a security risk in its own right. However, authors must take
  proper steps to ensure that all hosts that have fully qualified host
  names that are subsets of hosts dealing with sensitive information
  are as secure as the originating hosts themselves.</p>

  <p>Similarly, authors must ensure that all Web servers on a host,
  regardless of the port, are equally trusted if any of them are to
  use persistent storage. For instance, if a Web server runs a
  production service that makes use of the persistent storage feature,
  then other users that have access to that machine and that can run a
  Web server on another port will be able to access the persistent
  storage added by the production service (assuming they can trick a
  user into visiting their page).</p>

  <p>However, if one is able to trick users into visiting a Web server
  with the same host name but on a different port as a production
  service used by these users, then one could just as easily fake the
  look of the site and thus trick users into authenticating with the
  fake site directly, forwarding the request to the real site and
  stealing the credentials in the process. Thus, the persistent
  storage feature is considered to only minimally increase the
  risk involved.</p>

  <h5>DNS spoofing attacks</h5>

  <p>Because of the potential for DNS spoofing attacks, one cannot
  guarentee that a host claiming to be in a certain domain really is
  from that domain. The <code
  title="dom-storageitem-secure">secure</code> attribute is provided
  to mark certain key/value pairs as only being accessible to pages
  that have been authenticated using secure certificates (or similar
  mechanisms).</p>

  <p>Authors must ensure that they do not mark sensitive items as
  "safe for both secure and insecure content". (To prevent the risk of
  a race condition, data stored by scripts in secure contexts default
  to being marked as "safe only for secure content".)</p>

  <h5>Cross-directory attacks</h5>

  <p>Different authors sharing one host name, for example users
  hosting content on <code>geocities.com</code>, all share one
  persistent storage object. There is no feature to restrict the
  access by pathname. Authors on shared hosts are therefore
  recommended to avoid using the persistent storage feature, as it
  would be trivial for other authors to read from and write to the
  same storage area.</p>

  <p class="note">Even if a path-restriction feature was made
  available, the usual DOM scripting security model would make it
  trivial to bypass this protection and access the data from any
  path.</p>


  <h5>Public storage areas corresponding to hosts</h5>

  <p>If a "<span title="public storage area">public</span>" global
  storage area corresponds to a host, as it typically does if for
  private domains with third-party subdomains such as dyndns.org or
  uk.com, the host corresponding to the "public" domain has access to
  all the storage areas of its third-party subdomains. In general,
  authors are discouraged from using the <code
  title="dom-globalStorage">globalStorage</code> API for sensitive
  data unless the operators of all the domains involved are
  trusted.</p>

  <p>User agents may mitigate this problem by preventing hosts
  corresponding to "<span title="public storage area">public</span>"
  global storage areas from accessing any storage areas other than
  their own.</p>


  <h5>Storage areas in the face of untrusted higher-level domains that do not correspond to public storage areas</h5>

  <p>Authors should not store sensitive data using the global storage
  APIs if there are hosts with fully-qualified domain names that are
  subsets of their own which they do not trust. For example, an author
  at <code>finance.members.example.net</code> should not store
  sensitive financial user data in the
  <code>finance.members.example.net</code> storage area if he does not
  trust the host that runs <code>example.net</code>.</p>


  <h5>Storage areas in the face of untrusted subdomains</h5>

  <p>If an author publishing content on one host,
  e.g. <code>example.com</code>, wishes to use the <code
  title="dom-globalStorage">globalStorage</code> API but does not wish
  any content on the host's subdomains to access the data, the author
  should use an otherwise non-existent subdomain name, e.g.,
  <code>private.example.com</code>, to store the data. This will be
  accessible only to that host (and its parent domains), and not to
  any of the real subdomains
  (e.g. <code>upload.example.com</code>).</p>


  <h5>Implementation risks</h5>

  <p>The two primary risks when implementing this persistent storage
  feature are letting hostile sites read information from other
  domains, and letting hostile sites write information that is then
  read from other domains.</p>

  <p>Letting third-party sites read data that is not supposed to be
  read from their domain causes <em>information leakage</em>, For
  example, a user's shopping wishlist on one domain could be used by
  another domain for targetted advertising; or a user's
  work-in-progress confidential documents stored by a word-processing
  site could be examined by the site of a competing company.</p>

  <p>Letting third-party sites write data to the storage areas of
  other domains can result in <em>information spoofing</em>, which is
  equally dangerous. For example, a hostile site could add items to a
  user's wishlist; or a hostile site could set a user's session
  identifier to a known ID that the hostile site can then use to track
  the user's actions on the victim site.</p>

  <p>A risk is also presented by servers on local domains having
  host names matching top-level domain names, for instance having a
  host called "com" or "net". Such hosts might, if implementations
  fail to correctly implement the <code>.localdomain</code> suffixing,
  <!-- XXX cross ref --> have full access to all the data stored in a
  UA's persistent storage for that top level domain.</p>

  <p>Thus, strictly following the model described in this
  specification is important for user security.</p>

  <p>In addition, a number of optional restrictions related to the
  "<span title="public storage area">public</span>" global storage
  areas are suggested in the previous sections. The design of this API
  is intended to be such that not supporting these restrictions, or
  supporting them less than perfectly, does not result in critical
  security problems. However, implementations are still encouraged to
  create and maintain a list of "<span title="public storage
  area">public</span>" domains, and apply the restrictions described
  above.</p>


  <h2>Multimedia</h2>

  <p class="big-issue"> should we move all the img, object, embed,
  iframe, etc, elements here? </p>

  <h3><span title="SCS">[SCS]</span> Dynamic graphics: The bitmap canvas</h3>

  <p class="big-issue">This needs to be reviewed for normative
  criteria. As it stands there is terrible abuse of the word "should",
  for example.</p>

  <p>The <dfn><code>canvas</code></dfn> element represents a
  resolution-dependent bitmap canvas, which can be used for rendering
  graphs, game graphics, or other visual images on the fly.</p>

  <p>When authors use the <code>canvas</code> element, they should
  also provide content that, when presented to the user, conveys
  essentially the same function or purpose as the bitmap canvas. This
  content may be placed as content of the <code>canvas</code>
  element.</p>

  <p>Authors should not use the <code>canvas</code> element in a
  document when a more suitable element is available. For example, it
  is inappropriate to use a <code>canvas</code> element to render a
  page heading: if the desired presentation of the heading is
  graphically intense, it should be marked up using appropriate
  elements (typically <code>h1</code>) and then styled using CSS and
  supporting technologies such as XBL.</p>

  <p>In non-visual media, and in visual media with scripting disabled,
  the <code>canvas</code> element should be treated as an ordinary
  block-level element and the fallback content should therefore be
  used instead.</p>

  <p>In non-interactive, static, visual media, if the
  <code>canvas</code> element has been previously painted on (e.g. if
  the page was viewed in an interactive visual media and is now being
  printed, or if some script that ran during the page layout process
  painted on the element), then the <code>canvas</code> element should
  be treated as a replaced inline-level element with the current image
  and size. Otherwise, the element should be treated as an ordinary
  inline-level element and the fallback content should therefore be
  used instead.</p>

  <p>In interactive visual media with scripting enabled, the canvas
  element is an inline-level replaced element.</p>

  <p>The <code>canvas</code> element has two attributes to control the
  size of the coordinate space: <code>height</code> and
  <code>width</code>. These attributes each take a positive integer
  value (one digit in the range 1-9 followed by zero or more digits in
  the range 0-9, interpreted in base ten). If an attribute is missing,
  or if it has a value that does not match this syntax, then its
  default value must be used instead. The <code>width</code> attribute
  defaults to 300, and the <code>height</code> attribute defaults to
  150.</p>

  <p>The intrinsic dimensions of the <code>canvas</code> element equal
  the size of the coordinate space, with the numbers interpreted in
  CSS pixels. However, the element can be sized arbitrarily by a
  style sheet. During rendering, the image is scaled to fit this layout
  size.</p>

  <p>The size of the coordinate space does not necessarily represent
  the size of the actual bitmap that the user agent will use
  internally or during rendering. On high-definition displays, for
  instance, the user agent may internally use a bitmap with two device
  pixels per unit in the coordinate space, so that the rendering
  remains at high quality throughout.</p>

  <p>If the <code>width</code> and <code>height</code> attributes are
  dynamically modified, the bitmap and any associated contexts must be
  cleared back to their initial state and reinitialised with the newly
  specified coordinate space dimensions.</p>

  <p>The canvas is initially fully transparent black. Whenever the
  <code>width</code> and <code>height</code> attributes are changed,
  the canvas must be cleared back to this state.</p> <!-- or should it
  be cropped? -->

  <p>As with any replaced element, the CSS background properties do
  apply to <code>canvas</code> elements; they are rendered below the
  canvas image.</p>

  <pre class="idl">interface <dfn>HTMLCanvasElement</dfn> : <span>HTMLElement</span> {

  // returns the values of the width and height attributes, or the assumed
  // defaults if the attributes were not specified or invalid
  // sets the relevant content attributes on setting
         attribute long                    width;
         attribute long                    height;

  // returns a data: URI representing the current image as a PNG
  DOMString <span>toDataURL()</span>;

  // returns a data: URI representing the current image in the specified format
  DOMString <span title="toDataURL-type">toDataURL</span>(in DOMString type);

  // returns the context with which to paint, see below
  DOMObject <span>getContext</span>(in DOMString contextID);
<!-- XXX?
  void showFallback();
-->
};</pre>

  <p>To draw on the canvas, authors must first obtain a reference to a
  <dfn>context</dfn> using the <dfn><code>getContext</code></dfn>
  method of the <code>canvas</code> element.</p>

  <p>This specification only defines one context, with the name
  "<code>2d</code>". If <code>getContext()</code> is called with that
  exact string, then the UA must return a reference to an object
  implementing <code>CanvasRenderingContext2D</code>. Other
  specifications may define their own contexts, which would return
  different objects.</p>

  <p>Vendors may also define experimental contexts using the syntax
  <code><var title="">vendorname</var>-<var title="">context</var></code>, for example,
  <code>moz-3d</code>.</p>

  <p>When the UA is passed an empty string or a string specifying a
  context that it does not support, then it must return null. String
  comparisons should be literal and case-sensitive.</p>

  <p class="note">A future version of this specification will probably
  define a <code>3d</code> context (probably based on the OpenGL ES
  API).</p>

  <p>The <dfn><code>toDataURL()</code></dfn> method must, when called
  with no arguments, return a <code>data:</code> URI containing a
  representation of the image as a PNG file. <a
  href="#refsPNG">[PNG]</a>.</p>

  <div class="proposal">

   <p>The <dfn
   title="toDataURL-type"><code>toDataURL(<var title="">type</var>)</code></dfn>
   method (when called with one <em>or more</em> arguments) must return
   a <code>data:</code> URI containing a representation of the image in
   the format given by <var title="">type</var>. The possible values are MIME
   types with no parameters, for example <code>image/png</code>,
   <code>image/jpeg</code>, or even maybe <code>image/svg+xml</code> if
   the implementation actually keeps enough information to reliably
   render an SVG image from the canvas.</p>

   <p>Only support for <code>image/png</code> is required. User agents
   may support other types. If the user agent does not support the
   requested type, it must return the image using the PNG format.</p>

   <p>User agents must convert the provided type to lower case before
   establishing if they support that type and before creating the
   <code>data:</code> URL.</p> <!-- XXX define "convert to lower case"
   -->

   <p class="note">When trying to use types other than
   <code>image/png</code>, authors can check if the image was really
   returned in the requested format by checking to see if the returned
   string starts with one the exact strings
   "<code>data:image/png,</code>" or "<code>data:image/png;</code>". If
   it does, the image is PNG, and thus the requested type was not
   supported.</p>

   <p>Arguments other than the <var title="">type</var> must be
   ignored, and must not cause the user agent to raise an exception (as
   would normally occur if a method was called with the wrong number of
   arguments). A future version of this specification will probably
   allow extra parameters to be passed to <code>toDataURL()</code> to
   allow authors to more carefully control compression settings, image
   metadata, etc.</p>

  </div>

  <p><strong>Security:</strong> To prevent <em>information
  leakage</em>, the <code>toDataURL()</code> and
  <code>getImageData()</code> methods should raise a <span>security
  exception</span> if the canvas ever had images painted on it that
  originate from a domain other than the <span title="script's
  domain">domain of the script</span> that painted the images onto the
  canvas.</p>

  <h4>The 2D context</h4>

  <p>When the <code>getContext()</code> method of a
  <code>canvas</code> element is invoked with
  <dfn><code>2d</code></dfn> as the argument, a
  <code>CanvasRenderingContext2D</code> object is returned.</p>

  <p>There is only one <code>CanvasRenderingContext2D</code> object
  per canvas, so calling the <code>getContext()</code> method with the
  <code>2d</code> argument a second time must return the same
  object.</p>

  <p>The 2D context represents a flat cartesian surface whose origin
  (0,0) is at the top left corner, with the coordinate space having x
  values increasing when going right, and y values increasing when
  going down.</p>

  <pre class="idl">interface <dfn>CanvasRenderingContext2D</dfn> {<!-- XXX xrefs from IDL -->

  // back-reference to the canvas
  readonly attribute <span>HTMLCanvasElement</span> <span>canvas</span>;

  // state
  void <span>save</span>(); // push state on state stack
  void <span>restore</span>(); // pop state stack and restore state

  // transformations (default transform is the identity matrix)
  void <span>scale</span>(in float x, in float y);
  void <span>rotate</span>(in float angle);
  void <span>translate</span>(in float x, in float y);
  void <span>transform</span>(in float m11, in float m12, in float m21, in float m22, in float dx, in float dy);
  void <span>setTransform</span>(in float m11, in float m12, in float m21, in float m22, in float dx, in float dy);<!--
  // XXX we've also received requests for:
  void skew(...);
  void reflect(...); // or mirror(...)
-->

  // compositing
           attribute float <span>globalAlpha</span>; // (default 1.0)
           attribute DOMString <span>globalCompositeOperation</span>; // (default over)

  // colours and styles
           attribute DOMObject <span>strokeStyle</span>; // (default black)
           attribute DOMObject <span>fillStyle</span>; // (default black)
  <span>CanvasGradient</span> <span>createLinearGradient</span>(in float x0, in float y0, in float x1, in float y1);
  <span>CanvasGradient</span> <span>createRadialGradient</span>(in float x0, in float y0, in float r0, in float x1, in float y1, in float r1);
  <span>CanvasPattern</span> <span>createPattern</span>(in HTMLImageElement image, DOMString repetition);
  <span>CanvasPattern</span> <span>createPattern</span>(in HTMLCanvasElement image, DOMString repetition);

  // line caps/joins
           attribute float <span>lineWidth</span>; // (default 1)
           attribute DOMString <span>lineCap</span>; // "butt", "round", "square" (default "butt")
           attribute DOMString <span>lineJoin</span>; // "round", "bevel", "miter" (default "miter")
           attribute float <span>miterLimit</span>; // (default 10)

  // shadows
           attribute float <span>shadowOffsetX</span>; // (default 0)
           attribute float <span>shadowOffsetY</span>; // (default 0)
           attribute float <span>shadowBlur</span>; // (default 0)
           attribute DOMString <span>shadowColor</span>; // (default black)

  // rects
  void <span>clearRect</span>(in float x, in float y, in float w, in float h);
  void <span>fillRect</span>(in float x, in float y, in float w, in float h);
  void <span>strokeRect</span>(in float x, in float y, in float w, in float h);

  // path API
  void <span>beginPath</span>();
  void <span>closePath</span>();
  void <span>moveTo</span>(in float x, in float y);
  void <span>lineTo</span>(in float x, in float y);
  void <span>quadraticCurveTo</span>(in float cpx, in float cpy, in float x, in float y);
  void <span>bezierCurveTo</span>(in float cp1x, in float cp1y, in float cp2x, in float cp2y, in float x, in float y);
  void <span>arcTo</span>(in float x1, in float y1, in float x2, in float y2, in float radius);
  void <span>rect</span>(in float x, in float y, in float w, in float h);
  void <span>arc</span>(in float x, in float y, in float radius, in float startAngle, in float endAngle, in boolean anticlockwise);
  void <span>fill</span>();
  void <span>stroke</span>();
  void <span>clip</span>();
  boolean <span>isPointInPath</span>(in float x, in float y);

  // drawing images
  void <span>drawImage</span>(in <span>HTMLImageElement</span> image, in float dx, in float dy);
  void <span>drawImage</span>(in <span>HTMLImageElement</span> image, in float dx, in float dy, in float dw, in float dh);
  void <span>drawImage</span>(in <span>HTMLImageElement</span> image, in float sx, in float sy, in float sw, in float sh, in float dx, in float dy, in float dw, in float dh);
  void <span>drawImage</span>(in <span>HTMLCanvasElement</span> image, in float dx, in float dy);
  void <span>drawImage</span>(in <span>HTMLCanvasElement</span> image, in float dx, in float dy, in float dw, in float dh);
  void <span>drawImage</span>(in <span>HTMLCanvasElement</span> image, in float sx, in float sy, in float sw, in float sh, in float dx, in float dy, in float dw, in float dh);

  // pixel manipulation
  <span>ImageData</span> <span>getImageData</span>(in float sx, in float sy, in float sw, in float sh);
  void <span>putImageData</span>(in <span>ImageData</span> image, in float dx, in float dy);

  // drawing text is not supported in this version of the API
  // (there is no way to predict what metrics the fonts will have,
  // which makes fonts very hard to use for painting)

};

interface <dfn>CanvasGradient</dfn> {
  // opaque object
  void <span>addColorStop</span>(in float offset, in DOMString color);
};

interface <dfn>CanvasPattern</dfn> {
  // opaque object
};

interface <dfn>ImageData</dfn> {
  readonly attribute long int <span title="dom-imagedata-width">width</span>;
  readonly attribute long int <span title="dom-imagedata-height">height</span>;
  readonly attribute Array <span title="dom-imagedata-data">data</span>;
};</pre>

  <p>The <dfn title="2d-context-canvas"><code>canvas</code></dfn>
  attribute returns the <code>canvas</code> element that the context
  paints on.</p>


  <h5>The canvas state</h5>

  <p>Each context maintains a stack of drawing states. <dfn
  title="drawing state">Drawing states</dfn> consist of:</p>

  <ul class="brief">
   <li>The current transformation matrix.</li>
   <li>The current clip region.</li>
   <li>The current values of the following attributes:
   <code>strokeStyle</code>, <code>fillStyle</code>,
   <code>globalAlpha</code>, <code>lineWidth</code>,
   <code>lineCap</code>, <code>lineJoin</code>,
   <code>miterLimit</code>, <code>shadowOffsetX</code>,
   <code>shadowOffsetY</code>, <code>shadowBlur</code>,
   <code>shadowColor</code>,
   <code>globalCompositeOperation</code>.</li>
  </ul>

  <p class="note">The current path and the current bitmap are not part
  of the drawing state. The current path is persistent, and can only
  be reset using the <code>beginPath()</code> method. The current
  bitmap is <span title="image">a property of the canvas</span>, not
  the context.</p>

  <p>The <dfn><code>save()</code></dfn> method pushes a copy of the
  current drawing state onto the drawing state stack.</p>

  <p>The <dfn><code>restore()</code></dfn> method pops the top entry
  in the drawing state stack, and resets the drawing state it
  describes. If there is no saved state, the method does nothing.</p>


  <h5><dfn>Transformations</dfn></h5>

  <p>The transformation matrix is applied to all drawing operations
  prior to their being rendered. It is also applied when creating the
  clip region.</p> <!-- conformance criteria for actual drawing are
  described in "drawing model" below -->

  <p>When the context is created, the transformation matrix must
  initially be the identity transform. It may then be adjusted using
  the three transformation methods.</p>

  <p>The transformations must be performed in reverse order. For
  instance, if a scale transformation that doubles the width is
  applied, followed by a rotation transformation that rotates drawing
  operations by a quarter turn, and a rectangle twice as wide as it is
  tall is then drawn on the canvas, the actual result will be a
  square.</p>

  <p>The <dfn title="scale"><code>scale(x, y)</code></dfn> method must
  add the scaling transformation described by the arguments to the
  transformation matrix. The <code>x</code> argument represents the
  scale factor in the horizontal direction and the <code>y</code>
  argument represents the scale factor in the vertical direction. The
  factors are multiples.</p>

  <p>The <dfn title="rotate"><code>rotate(angle)</code></dfn> method
  must add the rotation transformation described by the argument to
  the transformation matrix. The <code>angle</code> argument
  represents a clockwise rotation angle expressed in radians.</p>

  <p>The <dfn title="translate"><code>translate(x, y)</code></dfn>
  method must add the translation transformation described by the
  arguments to the transformation matrix. The <code>x</code> argument
  represents the translation distance in the horizontal direction and
  the <code>y</code> argument represents the translation distance in
  the vertical direction. The arguments are in coordinate space
  units.</p>

  <div class="proposal">

   <p>The <dfn title="transform"><code>transform(m11, m12, m21, m22, dx,
   dy)</code></dfn> method must multiply the current transformation
   matrix with the matrix described by:</p>

   <table class="matrix">
    <tr>
     <td>m11</td>
     <td>m12</td>
     <td>dx</td>
    </tr>
    <tr>
     <td>m21</td>
     <td>m22</td>
     <td>dy</td>
    </tr>
    <tr>
     <td>0</td>
     <td>0</td>
     <td>1</td>
    </tr>
   </table>

   <p>The <dfn title="setTransform"><code>setTransform(m11, m12, m21,
   m22, dx, dy)</code></dfn> method must reset the current transform to
   the identity matrix, and then invoke the <code>transform(m11, m12,
   m21, m22, dx, dy)</code> method with the same arguments.</p>

  </div>


  <h5>Compositing</h5>

  <p>All drawing operations are affected by the global compositing
  attributes, <code>globalAlpha</code> and
  <code>globalCompositeOperation</code>.</p>

  <!-- conformance criteria for painting are described in the "drawing
  model" section below -->

  <p>The <dfn><code>globalAlpha</code></dfn> attribute gives an alpha
  value that is applied to shapes and images before they are
  composited onto the canvas. The valid range of values is from 0.0
  (fully transparent) to 1.0 (no additional transparency). If an
  attempt is made to set the attribute to a value outside this range,
  the attribute must retain its previous value.  When the context is
  created, the <code>globalAlpha</code> attribute must initially have
  the value 1.0.</p>

  <p>The <dfn><code>globalCompositeOperation</code></dfn> attribute
  sets how shapes and images are drawn onto the existing bitmap, once
  they have had <code>globalAlpha</code> and the current
  transformation matrix applied. It may be set to any of the values in
  the following list. In the descriptions below, the source image is
  the shape or image being rendered, and the destination image is the
  current state of the bitmap.</p>

  <p class="issue">The source-* descriptions below don't define what
  should happen with semi-transparent regions.</p>

  <dl>

   <dt><dfn title="gcop-source-atop"><code>source-atop</code></dfn></dt>

   <dd>Display the source image wherever both images are opaque.
   Display the destination image wherever the destination image is
   opaque but the source image is transparent. Display transparency
   elsewhere.</dd>

   <dt><dfn title="gcop-source-in"><code>source-in</code></dfn></dt>

   <dd>Display the source image wherever both the source image and
   destination image are opaque. Display transparency elsewhere.</dd>

   <dt><dfn title="gcop-source-out"><code>source-out</code></dfn></dt>

   <dd>Display the source image wherever the source image is opaque
   and the destination image is transparent. Display transparency
   elsewhere.</dd>

   <dt><dfn title="gcop-source-over"><code>source-over</code></dfn> (default)</dt>

   <dd>Display the source image wherever the source image is opaque.
   Display the destination image elsewhere.</dd>


   <dt><dfn title="gcop-destination-atop"><code>destination-atop</code></dfn></dt>

   <dd>Same as <code>source-atop</code> but using the destination
   image instead of the source image and vice versa.</dd>

   <dt><dfn title="gcop-destination-in"><code>destination-in</code></dfn></dt>

   <dd>Same as <code>source-in</code> but using the destination
   image instead of the source image and vice versa.</dd>

   <dt><dfn title="gcop-destination-out"><code>destination-out</code></dfn></dt>

   <dd>Same as <code>source-out</code> but using the destination
   image instead of the source image and vice versa.</dd>

   <dt><dfn title="gcop-destination-over"><code>destination-over</code></dfn></dt>

   <dd>Same as <code>source-over</code> but using the destination
   image instead of the source image and vice versa.</dd>


   <dt><dfn title="gcop-darker"><code>darker</code></dfn></dt>

   <dd>Display the sum of the source image and destination images,
   with color values approaching 0 as a limit.</dd>

   <dt><dfn title="gcop-lighter"><code>lighter</code></dfn></dt>

   <dd>Display the sum of the source image and destination image,
   with color values approaching 1 as a limit.</dd>


   <dt><dfn title="gcop-copy"><code>copy</code></dfn></dt>

   <dd>Display the source image instead of the destination image.</dd>


   <dt><dfn title="gcop-xor"><code>xor</code></dfn></dt>

   <dd>Exclusive OR of the source and destination images.</dd>


   <dt><code><var title="">vendorName</var>-<var title="">operationName</var></code></dt>

   <dd>Vendor-specific extensions to the list of composition operators
   should use this syntax.</dd>

  </dl>

  <p>These values are all case-sensitive &mdash; they must be used
  exactly as shown. User agents must only recognise values that
  exactly match the values given above.</p>

  <p>On setting, if the user agent does not recognise the specified
  value, it must be ignored, leaving the value of
  <code>globalCompositeOperation</code> unaffected.</p>

  <p>When the context is created, the
  <code>globalCompositeOperation</code> attribute must initially have
  the value <code>source-over</code>.</p>


  <h5>Colours and styles</h5>

  <p>The <dfn><code>strokeStyle</code></dfn> attribute represents the
  colour or style to use for the lines around shapes, and the
  <dfn><code>fillStyle</code></dfn> attribute represents the colour or
  style to use inside the shapes.</p>

  <p>Both attributes can be either strings,
  <code>CanvasGradient</code>s, or <code>CanvasPattern</code>s. On
  setting, strings should be parsed as CSS &lt;color&gt; values.
  <a href="#refsCSS3COLOR">[CSS3COLOR]</a> If the value is a string
  but is not a valid colour, or is neither a string, a
  <code>CanvasGradient</code>, nor a <code>CanvasPattern</code>, then
  it must be ignored, and the attribute must retain its previous
  value.</p>

  <p>On getting, if the value is a color, then: if it has alpha equal
  to 1.0, then the colour must be returned as an uppercase six-digit
  hex value, prefixed with a "#" character (U+0023 NUMBER SIGN), with
  the first two digits representing the red component, the next two
  digits representing the green component, and the last two digits
  representing the blue component, the digits being in the range 0-9
  A-F (U+0030 to U+0039 and U+0041 to U+0046). If the value has alpha
  less than 1.0, then the value must instead be returned in the CSS
  <code>rgba()</code> functional-notation format: the literal string
  <code>rgba</code> (U+0072 U+0067 U+0062 U+0061) followed by a U+0028
  LEFT PARENTHESIS, a base-ten integer in the range 0-255 representing
  the red component (using digits 0-9, U+0030 to U+0039, in the
  shortest form possible), a literal U+002C COMMA and U+0020 SPACE, an
  integer for the green component, a comma and a space, an integer for
  the blue component, another comma and space, a U+0030 DIGIT ZERO, a
  U+002E FULL STOP (representing the decimal point), one or more
  digits in the range 0-9 (U+0030 to U+0039) representing the
  fractional part of the alpha value, and finally a U+0029 RIGHT
  PARENTHESIS.</p>

  <p>Otherwise, if it is not a color but a <code>CanvasGradient</code>
  or <code>CanvasPattern</code>, then an object supporting those
  interfaces must be returned. Such objects are opaque and therefore
  only useful for assigning to other attributes or for comparison to
  other gradients or patterns.</p>

  <p>When the context is created, the <code>strokeStyle</code> and
  <code>fillStyle</code> attributes must initially have the string
  value <code>#000000</code>.</p>

  <p>There are two types of gradients, linear gradients and radial
  gradients, both represented by objects implementing the opaque
  <dfn><code>CanvasGradient</code></dfn> interface.</p>

  <p>Once a gradient has been created (see below), stops must be
  placed along it to define how the colours are distributed along the
  gradient. Between each such stop, the colours and the alpha
  component are interpolated over the RGBA space to find the colour to
  use at that offset. Immediately before the 0 offset and immediately
  after the 1 offset, transparent black stops are assumed.</p>

  <p>The <dfn title="addColorStop"><code>addColorStop(offset,
  color)</code></dfn> method on the <code>CanvasGradient</code>
  interface adds a new stop to a gradient. If the <var title="">offset</var> is
  less than 0 or greater than 1 then an <code>INDEX_SIZE_ERR</code>
  exception is raised. If the <var title="">color</var> cannot be parsed as a
  CSS colour, then a <code>SYNTAX_ERR</code> exception is raised.
  Otherwise, the gradient is updated with the new stop
  information.</p>

  <p>The <dfn
  title="createLinearGradient"><code>createLinearGradient(x0, y0, x1,
  y1)</code></dfn> method takes four arguments, representing the start
  point (<var title="">x0</var>, <var title="">y0</var>) and end point (<var title="">x1</var>,
  <var title="">y1</var>) of the gradient, in coordinate space units, and
  returns a linear <code>CanvasGradient</code> initialised with that
  line.</p>

  <p>Linear gradients are rendered such that at the starting point on
  the canvas the colour at offset 0 is used, that at the ending
  point the color at offset 1 is used, that all points on a line
  perpendicular to the line between the start and end points have the
  colour at the point where those two lines cross, and that any points
  beyond the start or end points are a transparent black. (Of course,
  the colours are only painted where the shape they are being painted
  on needs them.)</p>

  <p>The <dfn
  title="createRadialGradient"><code>createRadialGradient(x0, y0, r0,
  x1, y1, r1)</code></dfn> method takes six arguments, the first three
  representing the start circle with origin (<var title="">x0</var>,
  <var title="">y0</var>) and radius <var title="">r0</var>, and the last three
  representing the end circle with origin (<var title="">x1</var>,
  <var title="">y1</var>) and radius <var title="">r1</var>. The values are in
  coordinate space units. The method returns a radial
  <code>CanvasGradient</code> initialised with those two circles.</p>

  <p>Radial gradients are rendered such that a cone is created from
  the two circles, so that at the circumference of the starting circle
  the colour at offset 0 is used, that at the circumference around the
  ending circle the color at offset 1 is used, that the circumference
  of a circle drawn a certain fraction of the way along the line
  between the two origins with a radius the same fraction of the way
  between the two radii has the colour at that offset, that the end
  circle appear to be above the start circle when the end circle is
  not completely enclosed by the start circle, and that any points not
  described by the gradient are a transparent black.</p>

  <p>If a gradient has no stops defined, then the gradient is treated
  as a solid transparent black. Gradients are, naturally, only painted
  where the stroking or filling effect requires that they be
  drawn.</p>

  <p>Support for actually painting gradients is optional. Instead of
  painting the gradients, user agents may instead just paint the first
  stop's colour. However, <code>createLinearGradient()</code> and
  <code>createRadialGradient()</code> must always return objects when
  passed valid arguments.</p>

  <p>Patterns are represented by objects implementing the opaque
  <dfn><code>CanvasPattern</code></dfn> interface.</p>

  <p>To create objects of this type, the <dfn
  title="createPattern"><code>createPattern(image,
  repetition)</code></dfn> method is used. The first argument gives
  the image to use as the pattern (either an
  <code>HTMLImageElement</code> or an <code>HTMLCanvasElement</code>).
  Modifying this image after calling the <code>createPattern()</code>
  method must not affect the pattern. The second argument must be a
  string with one of the following values: <code>repeat</code>,
  <code>repeat-x</code>, <code>repeat-y</code>,
  <code>no-repeat</code>. If the empty string or null is specified,
  <code>repeat</code> is assumed. If an unrecognised value is given,
  then the user agent must raise a <code>SYNTAX_ERR</code>
  exception. User agents must recognise the four values described
  above exactly (e.g. they must not do case folding). The method
  returns a <code>CanvasPattern</code> object suitably
  initialised.</p>

  <p>The <var title="">image</var> argument must be an instance of an
  <code>HTMLImageElement</code> or <code>HTMLCanvasElement</code>. If
  the <var title="">image</var> is of the wrong type, the
  implementation must raise a <code>TYPE_MISMATCH_ERR</code>
  exception.</p>

  <p>Patterns are painted so that the top left of the first image is
  anchored at the origin of the coordinate space, and images are then
  repeated horizontally to the left and right (if the
  <code>repeat-x</code> string was specified) or vertically up and
  down (if the <code>repeat-y</code> string was specified) or in all
  four directions all over the canvas (if the <code>repeat</code>
  string was specified). The images are not be scaled by this process;
  one CSS pixel of the image must be painted on one coordinate space
  unit. Of course, patterns must only actually painted where the
  stroking or filling effect requires that they be drawn, and are
  affected by the current transformation matrix.</p>

  <p>Support for patterns is optional. If the user agent doesn't
  support patterns, then <code>createPattern()</code> must return
  null.</p>


  <h5>Line styles</h5>

  <p>The <dfn><code>lineWidth</code></dfn> attribute gives the default
  width of lines, in coordinate space units. On setting, zero and
  negative values must be ignored, leaving the value unchanged.</p>

  <p>When the context is created, the <code>lineWidth</code> attribute
  must initially have the value <code>1.0</code>.</p>

  <p>The <dfn><code>lineCap</code></dfn> attribute defines the type of
  endings that UAs shall place on the end of lines. The three valid
  values are <code>butt</code>, <code>round</code>, and
  <code>square</code>. The <code>butt</code> value means that the end
  of each line is a flat edge perpendicular to the direction of the
  line. The <code>round</code> value means that a semi-circle with the
  diameter equal to the width of the line is then added on to the end
  of the line. The <code>square</code> value means that at the end of
  each line is a rectangle with the length of the line width and the
  width of half the line width, placed flat against the edge
  perpendicular to the direction of the line. On setting, any other
  value than the literal strings <code>butt</code>,
  <code>round</code>, and <code>square</code> must be ignored,
  leaving the value unchanged.</p>

  <p>When the context is created, the <code>lineCap</code> attribute
  must initially have the value <code>butt</code>.</p>

  <p>The <dfn><code>lineJoin</code></dfn> attribute defines the type
  of corners that that UAs shall place where two lines meet. The three
  valid values are <code>round</code>, <code>bevel</code>, and
  <code>miter</code>.</p>

  <p>On setting, any other value than the literal strings
  <code>round</code>, <code>bevel</code> and <code>miter</code> must
  be ignored, leaving the value unchanged.</p>

  <p>When the context is created, the <code>lineJoin</code> attribute
  must initially have the value <code>miter</code>.</p>

  <p>The <code>round</code> value means that a filled arc connecting
  the corners on the outside of the join, with the diameter equal to
  the line width, and the origin at the point where the inside edges
  of the lines touch, is rendered at the join. The <code>bevel</code>
  value means that a filled triangle connecting those two corners with
  a straight line, the third point of the triangle being the point
  where the lines touch on the inside of the join, is rendered at the
  join. The <code>miter</code> value means that a filled four- or
  five-sided polygon is placed at the join, with two of the lines
  being the perpendicular edges of the joining lines, and the other
  two being continuations of the outside edges of the two joining
  lines, as long as required to intersect without going over the miter
  limit.</p>

  <p>The miter length is the distance from the point where the lines
  touch on the inside of the join to the intersection of the line
  edges on the outside of the join. The miter limit is the maximum
  allowed ratio of the miter length to the line width. If the miter
  limit would be exceeded, then a fifth line is added to the polygon,
  connecting the two outside lines, such that the distance from the
  inside point of the join to the point in the middle of this fifth
  line is the maximum allowed value for the miter length.</p>

  <p>The miter limit ratio can be explicitly set using the
  <dfn><code>miterLimit</code></dfn> attribute. On setting, zero and
  negative values must be ignored, leaving the value unchanged.</p>

  <p>When the context is created, the <code>miterLimit</code>
  attribute must initially have the value <code>10.0</code>.</p>


  <h5><dfn>Shadows</dfn></h5>

  <p>All drawing operations are affected by the four global shadow
  attributes. Shadows form part of the source image during
  composition.</p>

  <p>The <dfn><code>shadowColor</code></dfn> attribute sets the colour
  of the shadow.</p>

  <p>When the context is created, the <code>shadowColor</code>
  attribute initially must be fully-transparent black.</p>

  <p>The <dfn><code>shadowOffsetX</code></dfn> and
  <dfn><code>shadowOffsetY</code></dfn> attributes specify the
  distance that the shadow should be offset in the positive horizontal
  and positive vertical distance respectively. Their values are in
  coordinate space units.</p>

  <p>When the context is created, the shadow offset
  attributes initially have the value <code>0</code>.</p>

  <p>The <dfn><code>shadowBlur</code></dfn> attribute specifies the
  number of coordinate space units that the blurring should cover. On
  setting, negative numbers must be ignored, leaving the attribute
  unmodified.</p>

  <p>When the context is created, the <code>shadowBlur</code>
  attribute must initially have the value <code>0</code>.</p>

  <p>Support for shadows is optional.</p>


  <h5>Simple shapes (rectangles)</h5>

  <p>There are three methods that immediately draw rectangles to the
  bitmap. They each take four arguments; the first two give the
  <var title="">x</var> and <var title="">y</var> coordinates of the top left of the
  rectangle, and the second two give the width and height of the
  rectangle, respectively.</p>

  <p>Shapes are painted without affecting the current path, and are
  subject to <span>transformations</span>, <span
  title="shadows">shadow effects</span>, <span
  title="globalAlpha">global alpha</span>, <span title="clipping
  path">clipping paths</span>, and <span
  title="globalCompositeOperation">global composition
  operators</span>.</p>

  <p>Negative values for width and height must cause the
  implementation to raise an <code>INDEX_SIZE_ERR</code>
  exception.</p>

  <p>The <dfn><code>clearRect()</code></dfn> method must clear the
  pixels in the specified rectangle to a fully transparent black,
  erasing any previous image. If either height or width are zero, this
  method has no effect.</p>

  <p>The <dfn><code>fillRect()</code></dfn> method must paint the
  specified rectangular area using the <code>fillStyle</code>. If
  either height or width are zero, this method has no effect.</p>

  <p>The <dfn><code>strokeRect()</code></dfn> method must draw a
  rectangular outline of the specified size using the
  <code>strokeStyle</code>, <code>lineWidth</code>,
  <code>lineJoin</code>, and (if appropriate) <code>miterLimit</code>
  attributes. <span title="issue">What should happen with zero heights
  or widths?</span></p>


  <h5>Complex shapes (paths)</h5>

  <p>The context always has a current path. There is only one current
  path, it is not part of the <span>drawing state</span>.</p>

  <p>A <dfn>path</dfn> has a list of subpaths and a current position.
  Each subpath consists of a list of points, some of which may be
  connected by straight and curved lines, and a flag indicating
  whether the subpath is closed or not.</p>

  <p>The <dfn><code>beginPath()</code></dfn> method resets the list of
  subpaths to an empty list, and calls <code>moveTo()</code> with the
  point (0,0). When the context is created, a call to
  <code>beginPath()</code> is implied.</p>

  <p>The <dfn title="moveTo"><code>moveTo(x, y)</code></dfn> method
  sets the current position to the given coordinate and creates a new
  subpath with that point as its first (and only) point. If there was
  a previous subpath, and it consists of just one point, then that
  subpath is removed from the path.</p>

  <p>The <dfn><code>closePath()</code></dfn> method adds a straight
  line from the current position to the first point in the last
  subpath and marks the subpath as closed, if the last subpath isn't
  closed, and if it has more than one point in its list of points. If
  the last subpath is not open or has only one point, it does
  nothing.</p>

  <p>The <dfn title="lineTo"><code>lineTo(x, y)</code></dfn> method
  adds the given coordinate (<var title="">x</var>, <var title="">y</var>) to the list
  of points of the subpath, and connects the current position to that
  point with a straight line. It then sets the current position to the
  given coordinate (<var title="">x</var>, <var title="">y</var>).</p>

  <p>The <dfn title="quadraticCurveTo"><code>quadraticCurveTo(cpx,
  cpy, x, y)</code></dfn> method adds the given coordinate
  (<var title="">x</var>, <var title="">y</var>) to the list of points of the subpath,
  and connects the current position to that point with a quadratic
  curve with control point (<var title="">cpx</var>, <var title="">cpy</var>). It then
  sets the current position to the given coordinate (<var title="">x</var>,
  <var title="">y</var>).</p>

  <p>The <dfn title="bezierCurveTo"><code>bezierCurveTo(cp1x, cp1y,
  cp2x, cp2y, x, y)</code></dfn> method adds the given coordinate
  (<var title="">x</var>, <var title="">y</var>) to the list of points of the subpath,
  and connects the two points with a bezier curve with control points
  (<var title="">cp1x</var>, <var title="">cp1y</var>) and (<var title="">cp2x</var>,
  <var title="">cp2y</var>). It then sets the current position to the given
  coordinate (<var title="">x</var>, <var title="">y</var>).</p>

  <p>The <dfn title="arcTo"><code>arcTo(x1, y1, x2, y2,
  radius)</code></dfn> method adds an arc to the current path. The arc
  is given by the circle that has one point tangent to the line from
  the current position to point (<var title="">x1</var>, <var title="">y1</var>), one
  point tangent to the line from from the point (<var title="">x1</var>,
  <var title="">y1</var>) to the point (<var title="">x2</var>, <var title="">y2</var>), and that
  has radius <var title="">radius</var>. The points at which this circle
  touches these two lines are called the start and end tangent points
  respectively.</p>

  <p>If the point (<var title="">x2</var>, <var title="">y2</var>) is on the line from
  the current position to point (<var title="">x1</var>, <var title="">y1</var>) then
  this method does nothing. Otherwise, the arc is the shortest path
  along the circle's circumference between those two points. If the
  first tangent point is not equal to the current position then the
  first tangent point is added to the list of points of the subpath
  and the current position is joined to that point by a straight line.
  Then, the second tangent point is added to the list of points and
  the two tangent points are joined by the arc described above.
  Finally, the current position is set to the second tangent
  point.</p>

  <p>Negative or zero values for <var title="">radius</var> must cause the
  implementation to raise an <code>INDEX_SIZE_ERR</code>
  exception.</p>

  <p>The <dfn title="arc"><code>arc(x, y, radius, startAngle,
  endAngle, anticlockwise)</code></dfn> method adds an arc to the
  current path. The arc is given by the circle that has its origin at
  (<var title="">x</var>, <var title="">y</var>) and that has radius
  <var title="">radius</var>. The points at <var
  title="">startAngle</var> and <var title="">endAngle</var> along the
  circle, measured in radians clockwise from the positive x-axis, are
  the start and end points. The arc is the path along the
  circumference of the circle from the start point to the end point
  going anti-clockwise if the <var title="">anticlockwise</var>
  argument is true, and clockwise otherwise.</p>

  <p>The start point is added to the list of points of the subpath and
  the current position is joined to that point by a straight line.
  Then, the end point is added to the list of points and these last
  two points are joined by the arc described above. Finally, the
  current position is set to the end point.</p>

  <p>Negative or zero values for <var title="">radius</var> must cause the
  implementation to raise an <code>INDEX_SIZE_ERR</code>
  exception.</p>

  <p>The <dfn title="rect"><code>rect(x, y, w, h)</code></dfn> method
  creates a new subpath containing just the rectangle with top left
  coordinate (<var title="">x</var>, <var title="">y</var>), width <var title="">w</var> and
  height <var title="">h</var>, and marks it as closed. It then calls
  <code>moveTo</code> with the point (0,0).</p>

  <p>Negative values for <var title="">w</var> and <var title="">h</var> must cause the
  implementation to raise an <code>INDEX_SIZE_ERR</code>
  exception.</p>

  <p>The <dfn><code>fill()</code></dfn> method fills each subpath of
  the current path in turn, using <code>fillStyle</code>, and using
  the non-zero winding number rule. Open subpaths are implicitly
  closed when being filled (without affecting the actual
  subpaths).</p>

  <p>The <dfn><code>stroke()</code></dfn> method strokes each subpath
  of the current path in turn, using the <code>strokeStyle</code>,
  <code>lineWidth</code>, <code>lineJoin</code>, and (if appropriate)
  <code>miterLimit</code> attributes.</p>

  <p>Paths, when filled or stroked, are painted without affecting the
  current path, and are subject to <span>transformations</span>, <span
  title="shadows">shadow effects</span>, <span
  title="globalAlpha">global alpha</span>, <span title="clipping
  path">clipping paths</span>, and <span
  title="globalCompositeOperation">global composition
  operators</span>.</p>

  <p>The <dfn><code>clip()</code></dfn> method creates a new
  <dfn>clipping path</dfn> by calculating the intersection of the
  current clipping path and the area described by the current path,
  using the non-zero winding number rule. Open subpaths are implicitly
  closed without affecting the actual subpaths).</p>

  <p>When the context is created, the initial clipping path is the
  rectangle with the top left corner at (0,0) and the width and height
  of the coordinate space.</p>

  <p class="proposal">The <dfn
  title="isPointInPath"><code>isPointInPath(<var>x</var>,
  <var>y</var>)</code></dfn> method must return true if the point
  given by the <var>x</var> and <var>y</var> coordinates passed to the
  method, when treated as coordinates in the canvas' coordinate space
  unaffected by the current transformation, is within the area of the
  canvas that is inside the current path; and must return false
  otherwise.</p>


  <h5>Images</h5>

  <p>To draw images onto the canvas, the
  <dfn><code>drawImage</code></dfn> method may be used.</p>

  <p>This method is overloaded with three variants:
  <code>drawImage(image, dx, dy)</code>, <code>drawImage(image, dx,
  dy, dw, dh)</code>, and <code>drawImage(image, sx, sy, sw, sh, dx,
  dy, dw, dh)</code>. (Actually it is overloaded with six; each of
  those three can take either an <code>HTMLImageElement</code> or an
  <code>HTMLCanvasElement</code> for the <var title="">image</var> argument.)
  If not specified, the <var title="">dw</var> and <var title="">dh</var> arguments
  default to the values of <var title="">sw</var> and <var title="">sh</var>,
  interpreted such that one CSS pixel in the image is treated as one
  unit in the canvas coordinate space. If the <var title="">sx</var>,
  <var title="">sy</var>, <var title="">sw</var>, and <var title="">sh</var> arguments are
  omitted, they default to 0, 0, the image's intrinsic width in image
  pixels, and the image's intrinsic height in image pixels,
  respectively.</p>

  <p>The <var title="">image</var> argument must be an instance of an
  <code>HTMLImageElement</code> or <code>HTMLCanvasElement</code>. If
  the <var title="">image</var> is of the wrong type, the implementation must
  raise a <code>TYPE_MISMATCH_ERR</code> exception. If one of the
  <var title="">sy</var>, <var title="">sw</var>, <var title="">sw</var>, and <var title="">sh</var>
  arguments is outside the size of the image, or if one of the
  <var title="">dw</var> and <var title="">dh</var> arguments is negative, the
  implementation must raise an <code>INDEX_SIZE_ERR</code>
  exception.</p>

  <p>When <code>drawImage</code> is invoked, the specified region of
  the image specified by the source rectangle (<var title="">sx</var>,
  <var title="">sy</var>, <var title="">sw</var>, <var
  title="">sh</var>) must be painted on the region of the canvas
  specified by the destination rectangle (<var title="">dx</var>, <var
  title="">dy</var>, <var title="">dw</var>, <var
  title="">dh</var>).</p>

  <p><img src="drawImage.png" alt=""></p> <!-- no alt="" text since
  the image is just repeating what was stated in the previous
  paragraph. -->

  <p>Images are painted without affecting the current path, and are
  subject to <span>transformations</span>, <span
  title="shadows">shadow effects</span>, <span
  title="globalAlpha">global alpha</span>, <span title="clipping
  path">clipping paths</span>, and <span
  title="globalCompositeOperation">global composition
  operators</span>.</p>

  <!-- XXX should somehow say that the image used is the actual image
  of the target element, not the rendered image (e.g. height/width
  attributes don't affect it -->

  <div class="proposal">

   <h5><dfn>Pixel manipulation</dfn></h5>

   <p>The <dfn title="getImageData"><code>getImageData(sx, sy, sw,
   sh)</code></dfn> method must return an <code>ImageData</code> object
   representing the underlying pixel data for the area of the canvas
   denoted by the rectangle which has one corner at the (<var>sx</var>,
   <var>sy</var>) coordinate, and that has width <var>sw</var> and
   height <var>sh</var>. Pixels outside the canvas must be returned as
   transparent black.</p>

   <p><code>ImageData</code> objects must be initialised so that their
   <dfn title="dom-imagedata-height"><code>height</code></dfn>
   attribute is set to <var>h</var>, the number of rows in the image
   data, their <dfn
   title="dom-imagedata-width"><code>width</code></dfn> attribute is
   set to <var>w</var>, the number of physical device pixels per row in
   the image data, and the <dfn
   title="dom-imagedata-data"><code>data</code></dfn> attribute is
   initialised to an array of <var>h</var>&times;<var>w</var>&times;4
   integers. The pixels must be represented in this array in
   left-to-right order, row by row, starting at the top left, with each
   pixel's red, green, blue, and alpha components being given in that
   order. Each component of each device pixel represented in this array
   must be in the range 0..255, representing the 8 bit value for that
   component.</p>

   <p>The <dfn title="putImageData"><code>putImageData(image, dx,
   dy)</code></dfn> method must take the given <code>ImageData</code>
   structure, and draw it at the specified location
   <var>dx</var>,<var>dy</var> in the canvas coordinate space, mapping
   each pixel represented by the <code>ImageData</code> structure into
   one device pixel.</p>

   <p>The handling of pixel rounding when the specified coordinates do
   not exactly map to the device coordinate space is not defined by
   this specification, except that the following must result in no
   visible changes to the rendering:</p>

   <pre>context.putImageData(context.getImageData(x, y, w, h), x, y);</pre>

   <p>...for any value of <var>x</var> and <var>y</var>. In other
   words, while user agents may round the arguments to the two methods
   so that they map to device pixel boundaries, any rounding performed
   must be performed consistently for both the
   <code>getImageData()</code> and <code>putImageData()</code>
   operations.)</p>

   <p>The current transformation matrix must not affect the
   <code>getImageData()</code> and <code>putImageData()</code>
   methods.</p>

  </div>

  <h5>Drawing model</h5>

  <p>When a shape or image is painted, user agents must follow these
  steps, in the order given (or act as if they do):</p>

  <ol>

   <li>The coordinates are transformed by the current transformation
   matrix.</li>

   <li>The shape or image is rendered, creating image <var
   title="">A</var>, as described in the previous sections. For
   shapes, the current fill, stroke, and line styles must be
   honoured.</li>

   <li>The shadow is rendered from image <var title="">A</var>, using
   the current shadow styles, creating image <var
   title="">B</var>.</li>

   <li>Image <var title="">A</var> is composited over image <var
   title="">B</var> creating the source image.</li>

   <li>The source image has its alpha adjusted by
   <code>globalAlpha</code>.</li>

   <li>Within the clip region (as affected by the current
   transformation matrix), the source image is composited over the
   current canvas bitmap using the current composition operator.</li>

  </ol>



  <h4>The 3D context</h4>

  <p class="big-issue">Well, one day.</p>



  <h3><span title="SCS">[SCS]</span> Sound</h3>

  <p>The <code>Audio</code> interface allows scripts to play sound
  clips. This interface is intended for sound effects, not for
  streaming audio or multimedia; for the latter, the
  <code>object</code> element is more appropriate. <span
  class="issue">We need to add an API for object to support pausing,
  etc, of streaming APIs.</span></p>

  <p>There is no markup element that corresponds to <code>Audio</code>
  objects, they are only accessible from script.</p>

  <p>User agents should allow users to dynamically enable and disable
  sound output, but doing so must not affect how <code>Audio</code>
  objects act in any way other than whether sounds are physically
  played back or not. For instance, sound files must still be
  downloaded, <code>load</code> and <code>error</code> events must
  still fire, and if two identical clips are started with a two second
  interval then when the sound is reenabled they must still be two
  seconds out of sync.</p>

  <p>When multiple sounds are played simultaneously, the user agent
  must mix the sounds together.</p>

  <pre class="idl">interface <dfn>Audio</dfn> {<!-- XXX xrefs -->
           attribute EventListener onload;
           attribute EventListener onerror;
  void play();
  void loop();
  void loop(in unsigned long playCount);
  void stop();
};</pre>

  <p><code>Audio</code> objects must also implement the
  <code>EventTarget</code> interface. <a
  href="#refsDOM3EVENTS">[DOM3EVENTS]</a>

<!-- XXXXXXX haven't checked conf stats below here -->

  <p>In ECMAScript, an instance of <code>Audio</code> can be created
  using the <code>Audio(<var title="">uri</var>)</code> constructor:</p>

  <pre class="example">var a = new Audio("test.wav");</pre>

  <p>The <dfn><code>Audio()</code> constructor</dfn> takes a single
  argument, a URI (or IRI), which is resolved using the script
  context's <code>window.location.href</code> value as the base, and
  which returns an <code>Audio</code> object that will, at the
  completion of the current script, start loading that URI.</p>

  <p>Once the URI is loaded, a <code>load</code> event must be fired
  on the <code>Audio</code> object.</p>

  <p><code>Audio</code> objects have a current position and a play
  count. Both are initially zero.</p>

  <p>The <code>Audio</code> interface has the following members:</p>

  <!-- XXX conf criteria -->
  <dl>

   <dt><dfn title="Audio.onload">onload</dfn></dt>

   <dd>An event listener that is invoked along with any other
   appropriate event listeners that are registered on this object when
   a <code>load</code> event is fired on it.</dd>

   <dt><dfn title="Audio.play">play()</dfn></dt>

   <dd>Begins playing the sound at the current position, setting the
   play count to 1.</dd>

   <dt><dfn title="Audio.loop">loop()</dfn></dt>

   <dd>Begins playing the sound at the current position, setting the
   play count to infinity.</dd>

   <dt><dfn title="Audio.loopN">loop(<var title="">playCount</var>)</dfn></dt>

   <dd>Begins playing the sound at the current position, setting the
   play count to <var title="">playCount</var>.</dd>

   <dt><dfn title="Audio.stop">stop()</dfn></dt>

   <dd>Stops playing the clip and resets the current position and
   play count to zero.</dd>

  </dl>

  <p>When playback of the sound reaches the end of the available data,
  its current position is reset to the start of the clip, and the play
  count is decreased by one (unless it is infinite). If the play count
  is greater than zero, then the sound is played again.</p>

<!--
   var sound = new Audio("URI relative to document URI");
   sound.onload = function() { } // onload event handler
   sound.play(); // play once
   sound.loop(); // loop forever
   sound.loop(2); // play twice
   sound.stop(); // stop (if playing) and rewind
-->

<!--
WANT
   sound.volume = 1.0; // 0.0 to 1.0
   sound.pause(); // stop at current position but don't rewind
   onerror

MAYBE WANT
   sound.seek(l/2); // seek to position, in seconds
   sound.pan = 0.0; // -1.0 (left) to 1.0 (right)
   l = sound.length; // length of clip in seconds
   onprogress
-->


  <h2>Communication</h2>

  <h3><span title="SCS">[SCS]</span> Server-sent DOM events</h3>

  <p>This section describes a mechanism for allowing servers to
  dispatch DOM events into documents that expect it.</p>

  <h4>The <dfn><code>event-source</code></dfn> element</h4>

  <p>To specify an event source in an HTML document authors use a new
  (empty) element <code>event-source</code>, with an attribute
  <code>src=""</code> that takes a URI (or IRI) to open as a stream
  and, if the data found at that URI is of the appropriate type, treat
  as an event source.</p>

  <p>The <code>event-source</code> element may also have an
  <code>onevent=""</code> attribute. If present, the attribute must be
  treated as script representing an event handler registered as
  non-capture listener of events with name <code>event</code> and the
  namespace <code>uuid:755e2d2d-a836-4539-83f4-16b51156341f</code> or
  null, that are targetted at or bubble through the element.</p>

  <p>UAs must also support all the common attributes on the
  <code>event-source</code> element.</p>

  <h4>The <dfn><code>RemoteEventTarget</code></dfn> interface</h4>

  <p>Any object that implements the <code>EventTarget</code> interface
  shall also implement the <code>RemoteEventTarget</code> interface.</p>

  <pre class="idl">interface <dfn>RemoteEventTarget</dfn> {
  void addEventSource(in DOMString src);
  void removeEventSource(in DOMString src);
};</pre>

  <p>The <dfn
  title="addEventSource"><code>addEventSource(<var title="">src</var>)</code></dfn>
  method shall register the URI (or IRI) specified in <var title="">src</var>
  as an event source on the object. The <dfn
  title="removeEventSource"><code>removeEventSource(<var title="">src</var>)</code></dfn>
  method shall remove the URI (or IRI) specified in <var title="">src</var>
  from the list of event sources for that object. If a single URI is
  added multiple times, each instance must be handled individually.
  Removing a URI must only remove one instance of that URI. If the
  specified URI cannot be added or removed, the method must return
  without doing anything or raising an exception.</p>

  <h4>Processing model</h4>

  <p>When an <code>event-source</code> element in a document has a
  <code>src</code> attribute set, the UA should fetch the resource
  indicated by the attribute's value.</p>

  <p>Similarly, when the <code>addEventSource()</code> method is
  invoked on an object, the UA should, at the completion of the
  script's current execution, fetch the resource identified by the
  method's argument (unless the <code>removeEventSource()</code> was
  called removing the URI from the list first).</p>

  <p>When an <code>event-source</code> element is removed from the
  document, or when an event source is removed from the list of event
  sources for an object using the <code>removeEventSource()</code>
  method, the relevant connection must be closed (and not reopened
  unless the element is returned to the document or the
  <code>addEventSource()</code> method is called with the same URI
  again).</p>

  <p class="issue">Should event-source elements be allowed to point to
  any remote server, or only origin hosts?</p>

  <p>Since connections established to remote servers for such
  resources are expected to be long-lived, UAs should ensure that
  appropriate buffering is used. In particular, while line buffering
  may be safe if lines are defined to end with a single U+000A LINE
  FEED character, block buffering or line buffering with different
  expected line endings can cause delays in event dispatch.</p>

  <p>In general, the semantics of the transport protocol specified by
  the "src" attribute must be followed. Clients should re-open
  <code>event-source</code> connections that get closed after a short
  interval (such as 5 seconds), unless they were closed due to
  problems that aren't expected to be resolved, as described in this
  section.</p>

  <p>DNS errors must be considered fatal, and cause the user agent to
  not open any connection for the event-source.</p>

  <p>HTTP 200 OK responses that have a Content-Type other than
  <code>application/x-dom-event-stream</code> must be ignored and must
  prevent the user agent from reopening the connection for that
  event-source. HTTP 200 OK responses with the right MIME type,
  however, should, when closed, be reopened after a small delay.</p>

  <p>Resource with the type
  <code>application/x-dom-event-stream</code> must be processed line
  by line <a href="#event-stream-interpretation">as described
  below</a>.</p>

  <p>HTTP 201 Created, 202 Accepted, 203 Non-Authoritative
  Information, and 206 Partial Content responses must be treated like
  HTTP 200 OK responses for the purposes of reopening event-source
  connections. They are, however, likely to indicate an error has
  occurred somewhere and may cause the user agent to emit a
  warning.</p>

  <p>HTTP 204 No Content, and 205 Reset Content responses must be
  treated as if they were 200 OK responses with the right MIME type
  but no content, and should therefore cause the user agent to reopen
  the connection after a short delay.</p>

  <p>HTTP 300 Multiple Choices responses should be handled
  automatically if possible (treating the responses as if they were
  302 Moved Permanently responses pointing to the appropriate
  resource), and otherwise must be treated as HTTP 404 responses.</p>

  <p>HTTP 301 Moved Permanently responses must cause the user agent to
  use the server specified URI instead of the one specified in the
  event-source's "src" attribute for future connections.</p>

  <p>HTTP 302 Found, 303 See Other, and 307 Temporary Redirect
  responses must cause the user agent to use the server specified URI
  instead of the one specified in the event-source's "src" attribute
  for the next connection, but if the user agent needs to reopen the
  connection at a later point, it must once again start from the "src"
  attribute (or the last URI given by a 301 Moved Permanently response
  in complicated cases where such responses are chained).</p>

  <p>HTTP 304 Not Modified responses should be handled like HTTP 200
  OK responses, with the content coming from the user agent cache. A
  new connection attempt should then be made after a short wait.</p>

  <p>HTTP 305 Use Proxy, HTTP 401 Unauthorized, and 407 Proxy Authentication
  Required should be treated transparently as for any other subresource.</p>

  <p>HTTP 400 Bad Request, 403 Forbidden, 404 Not Found, 405 Method Not
  Allowed, 406 Not Acceptable, 408 Request Timeout, 409 Conflict, 410 Gone,
  411 Length Required, 412 Precondition Failed, 413 Request Entity Too
  Large, 414 Request-URI Too Long, 415 Unsupported Media Type, 416 Requested
  Range Not Satisfiable, 417 Expectation Failed, 500 Internal Server Error,
  501 Not Implemented, 502 Bad Gateway, 503 Service Unavailable, 504 Gateway
  Timeout, and 505 HTTP Version Not Supported responses, and any other HTTP
  response code not listed here, should cause the user agent to stop trying
  to process this event-source element.</p>

  <p>For non-HTTP protocols, UAs should act in equivalent ways.</p>

  <h4>The event stream format</h4>

  <p>The event stream MIME type is <code>application/x-dom-event-stream</code>.</p>

  <p>The event stream must always be encoded as UTF-8. Line must
  always be terminated by a single U+000A LINE FEED character.</p>

  <p>The event stream format is (in pseudo-BNF):</p>

  <pre>&lt;stream&gt;  ::= &lt;event&gt;*
&lt;event&gt;   ::= [ &lt;comment&gt; | &lt;command&gt; | &lt;field&gt; ]* &lt;newline&gt;

&lt;comment&gt; ::= ';' &lt;data&gt; &lt;newline&gt;
&lt;command&gt; ::= ':' &lt;data&gt; &lt;newline&gt;
&lt;field&gt;   ::= &lt;name&gt; [ ':' &lt;space&gt;? &lt;data&gt; ]? &lt;newline&gt;

&lt;name&gt;    ::= one or more UNICODE characters other than ':', ';', and U+000A LINE FEED
&lt;data&gt;    ::= zero or more UNICODE characters other than U+000A LINE FEED
&lt;space&gt;   ::= a single U+0020 SPACE character (' ')
&lt;newline&gt; ::= a single U+000A LINE FEED character</pre>

  <p>Bytes that are not valid UTF-8 sequences must be interpreted as
  the U+FFFD REPLACEMENT CHARACTER.</p>

  <p>The stream is parsed by reading everything line by line, in
  blocks separated by blank lines (blank lines are those consisting of
  just a single lone line feed character). Comment lines (those
  starting with the character ';') and command lines (those starting
  with the character ':') are ignored. Command lines are reserved for
  future use and should not be used.</p>

  <p>For each non-blank, non-comment line, the field name is first
  taken. This is everything on the line up to but not including the
  first colon (':') or the line feed, whichever comes first. Then, if
  there was a colon, the data for that line is taken. This is
  everything after the colon, ignoring a single space after the colon
  if there is one, up to the end of the line. If there was no colon
  the data is the empty string.</p>

  <div class="example">
  <p>Examples:</p>
  <pre>Field name: Field data</pre>
  <pre>This is a blank field</pre>
  <pre>1. These two lines: have the same data
2. These two lines:have the same data</pre>
  <pre>1. But these two lines:  do not
2. But these two lines: do not</pre>
  </div>

  <p>If a field name occurs multiple times, the data values for those
  lines are concatenated with a newline between them.</p>

  <div class="example">
  <p>For example, the following:</p>
  <pre>Test: Line 1
Foo: Bar
Test: Line 2</pre>
  <p>...is treated as having two fields, one called <code>Test</code> with the
  value <code>Line 1\nLine 2</code> (where <code>\n</code> represents a newline), and one
  called <code>Foo</code> with the value <code> Bar</code>.</p>

  </div>

  <p class="note">Since any random stream of characters matches the above
  format, there is no need to define any error handling.</p>

  <h4 id="event-stream-interpretation">Event stream interpretation</h4>

  <p>Once the fields have been parsed, they are interpreted as follows
  (these are case-sensitive exact comparisons):</p>

  <ul>
   <li><p><code title="">Event</code> is the name of the event. For example,
   <code title="">load</code>, <code title="">DOMActivate</code>,
   <code title="">updateTicker</code>. If there is no field with this name,
   then no event will be synthesised, and the other data will be
   ignored.</p></li>

   <li><p><code title="">Namespace</code> is the DOM3 namespace for the event.
   For normal DOM events this would be
   <code title="">http://www.w3.org/2001/xml-events</code>. If it isn't
   specified the event namespace is null.</p></li>

   <li><p><code title="">Class</code> is the interface used for the event, for
   instance <code>Event</code>, <code>UIEvent</code>,
   <code>MutationEvent</code>, <code>KeyboardEvent</code>, etc. For
   compatibility with DOM3 Events, the values <code title="">UIEvents</code>,
   <code title="">MouseEvents</code>, <code title="">MutationEvents</code>, and
   <code title="">HTMLEvents</code> are valid values and must be treated
   respectively as meaning the interfaces <code>UIEvent</code>,
   <code>MouseEvent</code>, <code>MutationEvent</code>, and
   <code>Event</code>. (This value can therefore be used as the
   argument to <code title="">createEvent()</code>.) If the value is not
   specified it is defaulted based on the event name as follows:</p>

    <ul>
     <li><p>If <code title="">Namespace</code> is
     <code title="">http://www.w3.org/2001/xml-events</code> or null and the
     <code title="">Event</code> field exactly matches one of the events
     specified by DOM3 Events in <a
     href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-EventTypes-complete">section
     1.4.2 "Complete list of event types"</a>, then the Class defaults
     to the interface relevant for that event type. <a
     href="#refsDOM3EVENTS">[DOM3EVENTS]</a></p>
      <div class="example">
       <p>For example:</p>

       <pre>Event: click</pre>
       <p>...would cause <code title="">Class</code> to be treated as <code>MouseEvent</code>.</p>
      </div>
     </li>
     <li><p>If <code title="">Namespace</code> is
     <code>uuid:755e2d2d-a836-4539-83f4-16b51156341f</code> or null
     and the <code title="">Event</code> doesn't match any of the known events,
     then the <code>RemoteEvent</code> interface (described below) is
     used.</p></li>

     <li><p>Otherwise, if the UA doesn't have special knowledge of which
     class to use for the given event in the given namespace, then
     the <code>Event</code> interface is used.</p></li>
    </ul>

    <p>It is quite possible to give the wrong class for an event. This
    is equivalent to creating an event in the DOM using the DOM Event
    APIs, but using the wrong interface for it.</p>

   </li>

   <li><p><code title="">Bubbles</code> specifies whether the event is to bubble. If it is
   specified and has the value <code title="">No</code>, the event does not bubble. If
   it is specified and has any other value (including <code title="">no</code> or
   <code title="">No\n</code>) then the event bubbles. If it is not specified it is
   defaulted based on the event name as follows:</p>

    <ul>
     <li><p>If <code title="">Namespace</code> is <code title="">http://www.w3.org/2001/xml-events</code>
     or null and the <code title="">Event</code> field exactly matches one of the events
     specified by DOM3 Events in <a 
     href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-EventTypes-complete"
     >section 1.4.2 "Complete list of event types"</a>, then whether
     the event bubbles depends on whether the DOM3 Events spec specifies
     that that event should bubble or not.  <a
     href="#refsDOM3EVENTS">[DOM3EVENTS]</a></p>

      <div class="example">
       <p>For example:</p>
       <pre>Event: load</pre>
       <p>...would cause <code title="">Bubbles</code> to be treated as <code title="">No</code>.</p>
      </div>

     </li>
     <li><p>Otherwise, if the UA doesn't have special knowledge of which
     class to use for the given event in the given namespace, then
     the event bubbles.</p></li>
    </ul>
   </li>

   <li><p><code title="">Cancelable</code> specifies whether the event may have its default
   action prevented. If it is specified and has the value <code title="">No</code>, the
   event may not have its default action prevented. If it is
   specified and has any other value (including <code title="">no</code> or <code title="">No\n</code>)
   then the event may be canceled. If it is not specified it is
   defaulted based on the event name as follows:</p>

    <ul>
     <li><p>If <code title="">Namespace</code> is <code title="">http://www.w3.org/2001/xml-events</code>
     or null and the <code title="">Event</code> field exactly matches one of the events
     specified by DOM3 Events in <a 
     href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-EventTypes-complete"
     >section 1.4.2 "Complete list of event types"</a>, then whether
     the event is cancelable depends on whether the DOM3 Events spec
     specifies that that event should be cancelable or not.  <a
     href="#refsDOM3EVENTS">[DOM3EVENTS]</a></p>

      <div class="example">
       <p>For example:</p>
       <pre>Event: load</pre>
       <p>...would cause <code title="">Cancelable</code> to be treated as <code title="">No</code>.</p>
      </diV>

     </li>
     <li><p>Otherwise, if the UA doesn't have special knowledge of which
     class to use for the given event in the given namespace, then
     the event may be canceled.</p></li>
    </ul>
   </li>

   <li><p><code title="">Target</code> is the element that the event is to be dispatched on.
   If its value starts with a <code title="">#</code> character then the remainder of
   the value represents an ID, and the event must be dispatched on
   the same node as would be obtained by the <code title="">getElementById()</code>
   method on the ownerDocument of the event-source element
   responsible for the event being dispatched.</p>

    <div class="example">
     <p>For example,</p>
     <pre>Target: #test</pre>
     <p>...would target the element with ID <code title="">test</code>.</p>
    </div>
   <p>If the value does not start with a <code title="">#</code> but has the literal value
   <code>Document</code>, then the event is dispatched at the <code title="">ownerDocument</code> of
   the <code>event-source</code> element responsible for the event being dispatched.</p>

   <p>Otherwise, the event is dispatched at the <code>event-source</code> element
   itself.</p></li>

   <li><p>Other fields depend on the interface specified (or possibly
   implied) by the <code title="">Class</code> field. If the specified interface has an
   attribute that exactly matches the name of the field, and the
   value of the field can be converted (using the type conversions
   defined in ECMAScript) to the type of the attribute, then it
   must be used. Any attributes (other than the <code>Event</code> interface
   attributes) that do not have matching fields are initialised to
   zero, null, false, or the empty string.</p>

    <div class="example">
     <p>For example:</p>
     <pre>; ...some other fields...
Class: MouseEvent
button: 2</pre>
     <p>...would result in a MouseEvent event that had
     <code>button</code> set to <code title="">2</code> but
     <code>screenX</code>, <code>screenY</code>, etc, set to 0, false,
     or null as appropriate.</p>
    </div>

   <p>If a field does not match any of the attributes on the event, it
   is ignored.</p>

    <div class="example">
     <p>For example:</p>
     <pre>Event: keypress
Class: MouseEvent
keyIdentifier: 0</pre>
     <p>...would result in a <code>MouseEvent</code> event with its
     fields all at their default values, with the event name being
     <code title="">keypress</code>. The <code>ctrlKey</code> field would be
     ignored. (If the author had not included the <code title="">Class</code>
     field explicitly, it would have just worked, since the class
     would have defaulted as described above.)</p>
    </div>
   </li>

  </ul>

  <p>Once a blank line is reached, an event of the appropriate type is
  synthesized and dispatched to the appropriate node as described by
  the fields above. No event is dispatched until a blank line has
  been received.</p>

  <p>If the <code title="">Event</code> field was omitted, then no event is
  synthesised and the data is ignored.</p>

  <div class="example">

   <p>The following stream contains four blocks yet synthesises no
   events, since none of the blocks have a field called
   <code title="">Event</code>. (The first block has just a comment, the second
   block has two fields with names "load" and "Target" respectively,
   the third block is empty, and the fourth block has two
   comments.)</p>

   <pre>; test

load
Target: #image1


; if any real events follow this block, they will not be affected by
; the "Target" and "load" fields above.
</pre>
  </div>

  <h4>The <code>RemoteEvent</code> interface</h4>

  <p>The <code>RemoteEvent</code> interface is defined as follows:</p>

  <pre class="idl">interface <dfn>RemoteEvent</dfn> : <span>Event</span> {
  readonly attribute DOMString       data;
  void               initRemoteEvent(in DOMString typeArg,
                                     in boolean canBubbleArg,
                                     in boolean cancelableArg,
                                     in DOMString dataArg);
  void               initRemoteEventNS(in DOMString namespaceURI,
                                       in DOMString typeArg,
                                       in boolean canBubbleArg,
                                       in boolean cancelableArg,
                                       in DOMString dataArg);
};</pre><!-- XXX definitions missing in this section -->

  <p>Events that use the <code>RemoteEvent</code> interface never have any default
  action associated with them.</p>

  <h4>Example</h4>

  <div class="example">

  <p>The following event description, once followed by a blank line:</p>
  <pre>Event: stock change
data: YHOO
data: -2
data: 10</pre>
  <p>...would cause an event <code>stock change</code> with the interface
  <code>RemoteEvent</code> to be dispatched on the <code>event-source</code> element, which
  would then bubble up the DOM, and whose <code>data</code> attribute would
  contain the string <code>YHOO\n-2\n10</code> (where <code>\n</code> again represents a
  newline).</p>

  <p>This could be used as follows:
  <pre>&lt;event-source src="http://stocks.example.com/ticker.php" id="stock"&gt;
&lt;script type="text/javascript"&gt;
document.getElementById('stock').addEventListener('stock change',
  function () {
    var data = event.data.split('\n');
    updateStocks(data[0], data[1], data[2]);
  }, false);
&lt;/script&gt</pre>
  <p>...where updateStocks is a function defined as:
  <pre>function updateStocks(symbol, delta, value) { ... }</pre>
  <p>...or some such.</p>
  </div>


  <h3><span title="SCS">[SCS]</span> Network connections</h3>

  <p>To enable Web applications to communicate with each other in
  local area networks, and to maintain bidirectional communications
  with their originating server, this specification introduces the
  <code>Connection</code> interface.</p>

  <p>The <code>Window</code> interface provides three constructors for
  creating <code>Connection</code> objects: <code
  title="dom-TCPConnection">TCPConnection()</code>, for creating a
  direct (possibly encrypted) link to another node on the Internet
  using TCP/IP; <code
  title="dom-LocalBroadcastConnection">LocalBroadcastConnection()</code>,
  for creating a connection to any listening peer on a local network
  (which could be a local TCP/IP subnet using UDP, a Bluetooth PAN, or
  another kind of network infrastructure); and <code
  title="dom-PeerToPeerConnection">PeerToPeerConnection()</code>, for
  a direct peer-to-peer connection (which could again be over TCP/IP,
  Bluetooth, IrDA, or some other type of network).</p>

  <p class="note">This interface does not allow for raw access to the
  underlying network. For example, this interface could not be used to
  implement an IRC client without proxying messages through a custom
  server.</p>


  <h4>Introduction <span title="TBW">[TBW]</span></h4>

  <p><em>This section is non-normative.</em></p>

  <p class="big-issue">An introduction to the client-side and
  server-side of using the direct connection APIs.</p>

  <p class="big-issue">An example of a party-line implementation of a
  broadcast service, and direct peer-to-peer chat for direct local
  connections.</p>

<!--
    <div class="example">
     <p>The following script creates a connection to a local party
     line:</p>
     <pre>var a = new LocalBroadcastConnection();
  a.onread = function(e) { alert(e.source + ' wrote ' + e.data); }
  a.send('hello');</pre>
    </div>
-->

  <!--XXX
   Explain why we don't use HTTP instead of our own protocol: wouldn't
   work for peer-to-peer, too much work to implement server if you
   have to implement a compliant HTTP server as well, etc
  -->


  <h4>The <code>Connection</code> interface</h4>
 
  <pre class="idl">interface <dfn>Connection</dfn> {
  readonly attribute DOMString <span title="dom-connection-network">network</span>;
  readonly attribute DOMString <span title="dom-connection-peer">peer</span>;
  readonly attribute int <span title="dom-connection-readyState">readyState</span>;
           attribute EventListener <span title="dom-connection-onopen">onopen</span>;
           attribute EventListener <span title="dom-connection-onread">onread</span>;
           attribute EventListener <span title="dom-connection-onclose">onclose</span>;
  void <span title="dom-connection-send">send</span>(in DOMString data);
  void <span title="dom-connection-disconnect">disconnect</span>();
};</pre>

  <p><code>Connection</code> objects must also implement the
  <code>EventTarget</code> interface. <a
  href="#refsDOM3EVENTS">[DOM3EVENTS]</a>

  <p>When a <code>Connection</code> object is created, the UA must try
  to establish a connection, as described in the sections below
  describing each connection type.</p>

  <p>The <dfn
  title="dom-connection-network"><code>network</code></dfn> attribute
  represents the name of the network connection (the value depends on
  the kind of connection being established). The <dfn
  title="dom-connection-peer"><code>peer</code></dfn> attribute
  identifies the remote host for direct (non-broadcast)
  connections.</p>

  <p>The <code title="dom-connection-network">network</code> attribute
  must be set as soon as the <code>Connection</code> object is
  created, and keeps the same value for the lifetime of the object.
  The <code title="dom-connection-peer">peer</code> attribute must
  initially be set to the empty string and must be updated once, when
  the connection is established, after which point it must keep the
  same value for the lifetime of the object.</p>

  <p>The <dfn
  title="dom-connection-readyState"><code>readyState</code></dfn>
  attribute represents the state of the connection. When the object is
  created it must be set to 0. It can have the following values:</p>

  <dl>

   <dt>0 Connecting</dt>
   <dd>The connection has not yet been established.</dd>

   <dt>1 Connected</dt>
   <dd>The connection is established and communication is possible.</dd>

   <dt>2 Closed</dt>
   <dd>The connection has been closed.</dd>

  </dl>

  <p id="openConnection">Once a connection is established, the <code
  title="dom-connection-readyState">readyState</code> attribute's
  value must be changed to 1, and the <code
  title="event-connection-open">open</code> event must be fired on the
  <code>Connection</code> object.</p>

  <p>When data is received, the <code
  title="event-connection-read">read</code> event will be fired on the
  <code>Connection</code> object.</p> <!-- conf crit for this
  statement is in the various protocol-specific sections below. -->

  <p id="closeConnection">When the connection is closed, the <code
  title="dom-connection-readyState">readyState</code> attribute's
  value must be changed to 2, and the <code
  title="event-connection-close">close</code> event must be fired on
  the <code>Connection</code> object.</p>

  <p>The <dfn title="dom-connection-onopen"><code>onopen</code></dfn>,
  <dfn title="dom-connection-onread"><code>onread</code></dfn>, and
  <dfn title="dom-connection-onclose"><code>onclose</code></dfn>
  attributes must, when set, register their new value as an event
  listener for their respective events (namely <code
  title="event-connection-open">open</code>, <code
  title="event-connection-read">read</code>, and <code
  title="event-connection-close">close</code>), and unregister their
  previous value if any.</p>

  <p>The <dfn title="dom-connection-send"><code>send()</code></dfn>
  method transmits data using the connection. If the connection is not
  yet established, it must raise an <code>INVALID_STATE_ERR</code>
  exception. If the connection <em>is</em> established, then the
  behaviour depends on the connection type, as described below.</p>

  <p>The <dfn
  title="dom-connection-disconnect"><code>disconnect()</code></dfn>
  method must close the connection, if it is open. If the connection
  is already closed, it must do nothing. Closing the connection causes
  a <code title="event-connection-close">close</code> event to be
  fired and the <code
  title="dom-connection-readyState">readyState</code> attribute's
  value to change, as <a href="#closeConnection">described
  above</a>.</p>


  <h4>Connection Events</h4>

  <p>All the events described in this section are events in the
  <code>http://www.w3.org/2001/xml-events</code> namespace, which do
  not bubble, are not cancelable, and have no default action.</p>

  <p>The <dfn title="event-connection-open"><code>open</code></dfn>
  event is fired when the connection is established. UAs must use the
  normal <code>Event</code> interface when firing this event.</p>

  <p>The <dfn title="event-connection-close"><code>close</code></dfn>
  event is fired when the connection is closed (whether by the author,
  calling the <code
  title="dom-connection-disconnect">disconnect()</code> method, or by
  the server, or by a network error). UAs must use the normal
  <code>Event</code> interface when firing this event as well.</p>

  <p class="note">No information regarding why the connection was
  closed is passed to the application in this version of this
  specification.</p>

  <p>The <dfn title="event-connection-read"><code>read</code></dfn>
  event is fired when when data is received for a connection. UAs must
  use the <code>ConnectionReadEvent</code> interface for this
  event.</p>

  <pre class="idl">interface <dfn>ConnectionReadEvent</dfn> : <span>Event</span> {
  readonly attribute DOMString <span title="dom-connectionReadEvent-data">data</span>;
  readonly attribute DOMString <span title="dom-connectionReadEvent-source">source</span>;
  void               <span title="dom-connectionReadEvent-initConnectionReadEvent">initConnectionReadEvent</span>(in DOMString typeArg, 
                                            in boolean canBubbleArg, 
                                            in boolean cancelableArg, 
                                            in DOMString dataArg);
  void               <span title="dom-connectionReadEvent-initConnectionReadEventNS">initConnectionReadEventNS</span>(in DOMString namespaceURI, 
                                              in DOMString typeArg, 
                                              in boolean canBubbleArg, 
                                              in boolean cancelableArg, 
                                              in DOMString dataArg);
};
</pre>

  <p>The <dfn
  title="dom-connectionReadEvent-data"><code>data</code></dfn>
  attribute must contain the data that was transmitted from the
  peer.</p>

  <p>The <dfn
  title="dom-connectionReadEvent-source"><code>source</code></dfn>
  attribute must contain the name of the peer. This is primarily
  useful on broadcast connections; on direct connections it is equal
  to the <code title="dom-connection-peer">peer</code> attribute on
  the <code>Connection</code> object.</p>

  <!-- XXX check that the following three sections define "the data
  that was transmitted" and "the name of the peer" in terms that mean
  they fit into the above definitions ("for the purposes of the
  ConnectionReadEvent"). -->

  <!-- XXX should we have a Connection attribute on the event? -->

  <p>The <dfn
  title="dom-connectionReadEvent-initConnectionReadEvent"><code>initConnectionReadEvent()</code></dfn>
  and <dfn
  title="dom-connectionReadEvent-initConnectionReadEventNS"><code>initConnectionReadEventNS()</code></dfn>
  methods must initialise the event in a manner analogous to the
  similarly-named methods in the DOM3 Events interfaces. <a
  href="#DOM3Events">[DOM3EVENTS]</a></p>

  <p>Events that would be fired during script execution (e.g. between
  the connection object being created &mdash; and thus the connection
  being established &mdash; and the current script completing; or,
  during the execution of a <code
  title="event-connection-read">read</code> event handler) must be
  buffered, and those events queued up and each one individually fired
  after the script has completed.</p> <!-- XXX make this more generic -->

  <h4>TCP connections</h4>

  <p>The <dfn title="dom-TCPConnection"><code>TCPConnection(<var
  title="">subdomain</var>, <var title="">port</var>, <var
  title="">secure</var>)</code></dfn> constructor on the
  <code>Window</code> interface returns a new object implementing the
  <code>Connection</code> interface, set up for a direct connection to
  a specified host on the page's domain.</p>

  <p>When this constructor is invoked, the following steps must be
  followed.</p>

  <p>First, if the <span>script's domain</span> is not a host name
  (e.g. it is an IP address) then the UA must raise a <span>security
  exception</span>. <span class="issue">We currently don't allow
  connections to be set up back to an originating IP address, but we
  could, if the subdomain is the empty string.</span></p>

  <p>Then, if the <var title="">subdomain</var> argument is null or
  the empty string, the target host is the <span>script's
  domain</span>. Otherwise, the <var title="">subdomain</var> argument
  is prepended to the <span>script's domain</span> with a dot
  separating the two strings, and that is the target host.</p>

  <p>If the target host is not a valid host name, or if the <var
  title="">port</var> argument is not either equal to 80, 443, or
  greater than 1024 and less then 65537, then the UA must raise a
  <span>security exception</span>.</p> <!-- XXX we should have our own
  port for this too, e.g. 980 -->

  <p>Otherwise, the user agent must verify that the <span>the string
  representing the script's domain in IDNA format</span> can be
  obtained without errors. If it cannot, then the user agent must
  raise a <span>security exception</span>.</p>

  <p>The user agent may also raise a <span>security exception</span>
  at this time if, for some reason, permission to create a direct TCP
  connection to the relevant host is denied. Reasons could include the
  UA being instructed by the user to not allow direct connections, or
  the UA establishing (for instance using UPnP) that the network
  topology will cause connections on the specified port to be directed
  at the wrong host.</p>

  <p>If no exceptions are raised by the previous steps, then a new
  <code>Connection</code> object must be created, its <code
  title="dom-connection-peer">peer</code> attribute must be set to a
  string consisting of the name of the target host, a colon (U+003A
  COLON), and the port number as decimal digits, and its <code
  title="dom-connection-network">network</code> attribute must be set
  to the same value as the <code
  title="dom-connection-peer">peer</code> attribute.</p>

  <p>This object must then be returned.</p>

  <p>The user agent must then begin trying to establish a connection
  with the target host and specified port. (This typically would begin
  in the backgound, while the script continues to execute.)</p>

  <p>If the <var title="">secure</var> boolean argument is set to
  true, then the user agent must establish a secure connection with
  the target host and specified port using TLS or another protocol,
  negotiated with the server. <a href="#refsRFC2246">[RFC2246]</a> If
  this fails the user agent must act as if it had <a
  href="#closeConnection">closed the connection</a>.</p>

  <p>Once a secure connection is established, or if the <var
  title="">secure</var> boolean argument is not set to true, then the
  user agent must continue to connect to the server using the protocol
  described in the section entitled <span>clients connecting over
  TCP</span>. All data on connections made using TLS must be sent as
  "application data".</p>

  <p>Once the connection is established, the UA must act as described
  in the section entitled <span>sending and receiving data over
  TCP</span>.</p>

  <p>User agents should allow multiple TCP connections to be
  established per host. In particular, user agents should not apply
  per-host HTTP connection limits to connections established with the
  <code title="dom-TCPConnection">TCPConnection</code>
  constructor.</p>


  <h4>Broadcast connections</h4>

  <p>The <dfn
  title="dom-LocalBroadcastConnection"><code>LocalBroadcastConnection()</code></dfn>
  constructor on the <code>Window</code> interface returns a new
  object implementing the <code>Connection</code> interface, set up to
  broadcast on the local network.</p>

  <p>When this constructor is invoked, a new <code>Connection</code>
  object must be created.</p>

  <p>The <code title="dom-connection-network">network</code> attribute
  of the object must be set to <span>the string representing the
  script's domain in IDNA format</span>. If this string cannot be
  obtained, then the user agent must raise a <span>security
  exception</span> exception when the constructor is called.</p>

  <p>The <code title="dom-connection-peer">peer</code> attribute must
  be set to the empty string.</p>

  <p>The object must then be returned, unless, for some reason,
  permission to broadcast on the local network is to be denied. In the
  latter case, a <span>security exception</span> must be raised
  instead. User agents may deny such permission for any reason, for
  example a user preference.</p>

  <p>If the object is returned (i.e. if no exception is raised), the
  user agent must the begin broadcasting and listening on the local
  network, in the background, as described below. The user agent may
  define "the local network" in any way it considers appropriate and
  safe; for instance the user agent may ask the user which network
  (e.g. Bluetooth, IrDA, Ethernet, etc) the user would like to
  broadcast on before beginning broadcasting.</p>

  <p>UAs may broadcast and listen on multiple networks at once. For
  example, the UA could broadcast on both Bluetooth and Wifi at the
  same time.</p> <!-- XXX bridging? how do we handle one UA not seeing
  the same hosts as another UA? -->

  <p>As soon as the object is returned, the connection <a
  href="#openConnection">has been established</a>, which implies that
  the <code title="event-connection-open">open</code> event must be
  fired. Broadcast connections are never closed.</p>


  <h5>Broadcasting over TCP/IP</h5>

  <p class="big-issue">We need to register a UDP port for this. For
  now this spec refers to port 18080/udp.</p>

  <p class="note">Since this feature requires that the user agent
  listen to a particular port, typically only one user agent per IP
  address can use this feature at any one time.</p>

  <p>On TCP/IP networks, broadcast connections transmit data using UDP
  over port 18080.</p>

  <p>When the <code title="dom-connection-send">send(<var
  title="">data</var>)</code> method is invoked on a
  <code>Connection</code> object that was created by the <code
  title="dom-LocalBroadcastConnection">LocalBroadcastConnection()</code>
  constructor, the user agent must follow these steps:</p>

  <ol>

   <li>Create a string consisting of the value of the <code
   title="dom-connection-network">network</code> attribute of the
   <code>Connection</code> object, a U+0020 SPACE character, a U+0002
   START OF TEXT character, and the <var title="">data</var>
   argument.</li>

   <li>Encode the string as UTF-8.</li>

   <li>If the resulting byte stream is longer than 65487 bytes, raise
   an <code>INDEX_SIZE_ERR</code> DOM exception and stop.</li>

   <li>Create a UDP packet whose data is the byte stream, with the
   source and destination ports being 18080, and with appropriate
   length and checksum fields. Transmit this packet to IPv4 address
   255.255.255.255 or IPv6 address ff02::1, as appropriate. <span
   class="note">IPv6 applications will also have to enable reception
   from this address.</span></li>

  </ol>

  <p>When a broadcast connection is opened on a TCP/IP network, the
  user agent should listen for UDP packets on port 18080.</p>

  <p>When the user agent receives a packet on port 18080, the user
  agent must attempt to decode that packet's data as UTF-8. If the
  data is not fully correct UTF-8 (i.e. if there are decoding errors)
  then the packet must be ignored. Otherwise, the user agent must
  check to see if the decoded string contains a U+0020 SPACE
  character. If it does not, then the packet must again be ignored (it
  might be a peer discovery packet from a <code
  title="dom-PeerToPeerConnection">PeerToPeerConnection()</code>
  constructor). If it does then the user agent must split the the
  string at the first space character. All the characters before the
  space are then known as <var title="">d</var>, and all the
  characters after the space are known as <var title="">s</var>. If
  <var title="">s</var> is not at least one character long, or if the
  first character of <var title="">s</var> is not a U+0002 START OF
  TEXT character, then the packet must be ignored. (This allows for
  future extension of this protocol.)</p>

  <p>Otherwise, for each <code>Connection</code> object that was
  created by the <code
  title="dom-LocalBroadcastConnection">LocalBroascastConnection()</code>
  constructor and whose <code
  title="dom-connection-network">network</code> attribute exactly
  matches <var title="">d</var>, a <code
  title="event-connection-read">read</code> event must be fired on the
  <code>Connection</code> object. The string <var title="">s</var>,
  with the first character removed, must be used as the <code
  title="dom-connectionReadEvent-data">data</code>, and the source IP
  address of the packet as the <code
  title="dom-connectionReadEvent-source">source</code>.</p>

  <p class="big-issue">Making the source IP available means that if
  two or more machines in a private network can be made to go to a
  hostile page simultaneously, the hostile page can determine the IP
  addresses used locally (i.e. on the other side of any NAT
  router). Is there some way we can keep link-local IP addresses
  secret while still allowing for applications to distinguish between
  multiple participants?</p>


  <h5>Broadcasting over Bluetooth</h5>

  <p class="big-issue">Does anyone know enough about Bluetooth to
  write this section?</p>


  <h5>Broadcasting over IrDA</h5>

  <p class="big-issue">Does anyone know enough about IrDA to write
  this section?</p>


  <h4>Peer-to-peer connections</h4>

  <p>The <dfn
  title="dom-PeerToPeerConnection"><code>PeerToPeerConnection()</code></dfn>
  constructor on the <code>Window</code> interface returns a new
  object implementing the <code>Connection</code> interface, set up
  for a direct connection to a user-specified host.</p>

  <p>When this constructor is invoked, a new <code>Connection</code>
  object must be created.</p>

  <p>The <code title="dom-connection-network">network</code> attribute
  of the object must be set to <span>the string representing the
  script's domain in IDNA format</span>. If this string cannot be
  obtained, then the user agent must raise a <span>security
  exception</span> exception when the constructor is called.</p>

  <p>The <code title="dom-connection-peer">peer</code> attribute must
  be set to the empty string.</p>

  <p>The object must then be returned, unless, for some reason,
  permission to establish peer-to-peer connections is generally
  disallowed, for example due to administrator settings. In the latter
  case, a <span>security exception</span> must be raised instead.</p>

  <p>The user agent must then, typically while the script resumes
  execution, find a remote host to establish a connection to. To do
  this it must start broadcasting and listening for peer discovery
  messages and listening for incoming connection requests on all the
  supported networks. How this is performed depends on the type of
  network and is described below.</p>

  <p>The UA should inform the user of the clients that are detected,
  and allow the user to select one to connect to. UAs may also allow
  users to explicit specify hosts that were not detected, e.g. by
  having the user enter an IP address.</p>

  <p>If an incoming connection is detected before the user specifies a
  target host, the user agent should ask the user to confirm that this
  is the host they wish to connect to. If it is, the connection should
  be accepted and the UA will act as the <em>server</em> in this
  connection. (Which UA acts as the server and which acts as the
  client is not discernible at the DOM API level.)</p>

  <p>If no incoming connection is detected and if the user specifies a
  particular target host, a connection should be established to that
  host, with the UA acting as the <em>client</em> in the
  connection.</p>

  <p>No more than one connection must be established per
  <code>Connection</code> object, so once a connection has been
  established, the user agent must stop listening for further
  connections (unless, or until such time as, another
  <code>Connection</code> object is being created).</p>

  <p>If at any point the user cancels the connection process or the
  remote host refuses the connection, then the user agent must act as
  if it had <a href="#closeConnection">closed the connection</a>, and
  stop trying to connect.</p>


  <h5>Peer-to-peer connections over TCP/IP</h5>

  <p class="big-issue">We need to register ports for this. For now
  this spec refers to port 18080/udp and 18080/tcp.</p>

  <p class="note">Since this feature requires that the user agent
  listen to a particular port, typically only one user agent per IP
  address can use this feature at any one time.</p>

  <p>When using TCP/IP, broadcasting peer discovery messages must be
  done by creating UDP packets every few seconds containing as their
  data the value of the connection's <code
  title="dom-connection-network">network</code> attribute, encoded as
  UTF-8, with the source and destination ports being set to 18080 and
  appropriate length and checksum fields, and sending these packets to
  address (in IPv4) 255.255.255.255 or (in IPv6) ff02::1, as
  appropriate.</p>

  <p>Listening for peer discovery messages must be done by examining
  incoming UDP packets on port 18080. <span class="note">IPv6
  applications will also have to enable reception from the ff02::1
  address.</span> If their payload is exactly byte-for-byte equal to a
  UTF-8 encoded version of the value of the connection's <code
  title="dom-connection-network">network</code> attribute, then the
  source address of that packet represents the address of a host that
  is ready to accept a peer-to-peer connection, and it should
  therefore be offered to the user.</p>

  <p>Incoming connection requests must be listened for on TCP port
  18080. If an incoming connection is received, the UA acts as a
  <em>server</em>, as described in the section entitled <span>servers
  accepting connections over TCP</span>.</p>

  <p>If no incoming connection requests are accepted and the user
  instead specifies a target host to connect to, the UA acts as a
  <em>client</em>: the user agent must attempt to connect to the
  user-specified host on port 18080, as described in the section
  entitled <span>clients connecting over TCP</span>.</p>

  <p>Once the connection is established, the UA must act as described
  in the section entitled <span>sending and receiving data over
  TCP</span>.</p>

  <p class="note">This specification does not include a way to
  establish <em>secure</em> (encrypted) peer-to-peer connections at
  this time. <span class="big-issue">If you can see a good way to do
  this, let me know.</span></p>

  <h5>Peer-to-peer connections over Bluetooth</h5>

  <p class="big-issue">Does anyone know enough about Bluetooth to
  write this section?</p>


  <h5>Peer-to-peer connections over IrDA</h5>

  <p class="big-issue">Does anyone know enough about IrDA to write
  this section?</p>



<!--XXX
    <p>Prompts the user to select a connection to make, which could
    look like this:</p>

<pre>|:: New Connection :::::::::::::::::::::::::::::::::::::::::|
|                                                           |
|  Select the peer to connect to:                           |
|                                                           |
|    JohnSmith_Series60   via Bluetooth      (( Connect ))  |
|    Patrick's Phone      via Bluetooth       ( Connect )   |
|    John Smith           via UDP             ( Connect )   |
|                                                           |
|                                               ( Cancel )  |
|___________________________________________________________|
</pre>

    <p>While the prompt is displayed, the UA should broadcast on all
    supported networks, as described <span title="announcing peer
    connections">below</span>.</p>

    <p>Returns null if the prompt was canceled. Otherwise, returns a
    <code>Connection</code> object with its <code>network</code>
    attribute set to <var title="">topic</var> and its <code>peer</code>
    attribute set to a string uniquely identifying the selected peer,
    and opens a connection to that peer. (See: <span>peer connection
    formats</span>.)</p>


   |:: New Connection :::::::::::::::::::::::::::::::::::::::::|
   |                                                           |
   |  Would you like to open a connection called "Chess" for   |
   |  this Web site?:                                          |
   |                                                           |
   |    example.org                                            |
   |                                                           |
   |  Select connection to use: [ Bluetooth      | v ]         |
   |                                                           |
   |                        (( Open connection ))  ( Cancel )  |
   |___________________________________________________________|

  c = new LocalBroadcastConnection("Chess");
  c.onread = function(s, f) { alert("got message " + s + " from " + f); }
  c.send("hello, anybody there?");


   |:: New Connection :::::::::::::::::::::::::::::::::::::::::|
   |                                                           |
   |  Select the peer to connect to:                           |
   |                                                           |
   |    JohnSmith_Series60   via Bluetooth      (( Connect ))  |
   |    Patrick's Phone      via Bluetooth       ( Connect )   |
   |    John Smith           via UDP             ( Connect )   |
   |                                                           |
   |                                               ( Cancel )  |
   |___________________________________________________________|

  c = new LocalPeerConnection("Chess");
  // c.peer contains peer's name
  c.onread = function(s) { alert("got message " + s); } // second argument is c.peer
  c.send("hello");

  c = new TCPConnection("chess.example.com", 8089, false);
  // c.peer contains 'chess.example.com:8089'
  c.onread = function(s) { alert("got message " + s); } // second argument is c.peer
  c.send("hello");

> > Again, what else should we support? Should this have an HTML Element
> > backing it for more declarative authoring? What error handling do we need?
> > Should it automatically use bluetooth, TCP/IP broadcast, infrared, or
> > should it be under the control of the author or user?
-->


  <h4>The common protocol for TCP-based connections</h4>

  <p>The same protocol is used for <code
  title="dom-TCPConnection">TCPConnection</code> and <code
  title="dom-PeerToPeerConnection">PeerToPeerConnection</code>
  connection types. This section describes how such connections are
  established from the client and server sides, and then describes how
  data is sent and received over such connections (which is the same
  for both clients and servers).</p>


  <h5><dfn>Clients connecting over TCP</dfn></h5>

  <p>This section defines the client-side requirements of the protocol
  used by the <code title="dom-TCPConnection">TCPConnection</code> and
  <code title="dom-PeerToPeerConnection">PeerToPeerConnection</code>
  connection types.</p>

  <p>If a TCP connection to the specified target host and port cannot
  be established, for example because the target host is a domain name
  that cannot be resolved to an IP address, or because packets cannot
  be routed to the host, the user agent should retry creating the
  connection. If the user agent gives up trying to connect, the user
  agent must act as if it had <a href="#closeConnection">closed the
  connection</a>.</p>

  <p class="note">No information regarding the state of the connection
  is passed to the application while the connection is being
  established in this version of this specification.</p>

  <p>Once a TCP/IP connection to the remote host is established, the
  user agent must transmit the following sequence of bytes,
  represented here in hexadecimal form:</p>

  <pre>0x48 0x65 0x6C 0x6C 0x6F 0x0A</pre>

  <p class="note">This represents the string "Hello" followed by a
  newline, encoded in UTF-8.</p>

  <p>The user agent must then read all the bytes sent from the remote
  host, up to the first 0x0A byte (inclusive). That string of bytes is
  then compared byte-for-byte to the following string of bytes:</p>

  <pre>0x57 0x65 0x6C 0x63 0x6F 0x6E 0x65 0x0A</pre>

  <p class="note">This says "Welcome".</p>

  <p>If the server sent back a string in any way different to this,
  then the user agent must <a href="#closeConnection">close the
  connection</a> and give up trying to connect.</p>

  <p>Otherwise, the user agent must then take <span>the string
  representing the script's domain in IDNA format</span>, encode it as
  UTF-8, and send that to the remote host, followed by a 0x0A byte (a
  U+000A LINE FEED in UTF-8).</p>

  <p>The user agent must then read all the bytes sent from the remote
  host, up to the first 0x0A byte (inclusive). That string of bytes
  must then be compared byte-for-byte to the string that was just sent
  to the server (the one with the IDNA domain name and ending with a
  newline character). If the server sent back a string in any way
  different to this, then the user agent must <a
  href="#closeConnection">close the connection</a> and give up trying
  to connect.</p>

  <p>Otherwise, the connection <a href="#openConnection">has been
  established</a> (and events and so forth get fired, as described
  above).</p>

  <p>If at any point during this process the connection is closed
  prematurely, then the user agent must <a
  href="#closeConnection">close the connection</a> and give up trying
  to connect.</p> <!-- XXX we should support automatic reconnect -->


  <h5><dfn>Servers accepting connections over TCP</dfn></h5>

  <p>This section defines the server side of the protocol described in
  the previous section. For authors, it should be used as a guide for
  how to implement servers that can communicate with Web pages over
  TCP. For UAs these are the requirements for the server part of <code
  title="dom-PeerToPeerConnection">PeerToPeerConnection</code>s.</p>

  <p>Once a TCP/IP connection from a remote host is established, the
  user agent must transmit the following sequence of bytes,
  represented here in hexadecimal form:</p>

  <pre>0x57 0x65 0x6C 0x63 0x6F 0x6E 0x65 0x0A</pre>

  <p class="note">This says "Welcome" and a newline in UTF-8.</p>

  <p>The user agent must then read all the bytes sent from the remote
  host, up to the first 0x0A byte (inclusive). That string of bytes is
  then compared byte-for-byte to the following string of bytes:</p>

  <pre>0x48 0x65 0x6C 0x6C 0x6F 0x0A</pre>

  <p class="note">"Hello" and a newline.</p>

  <p>If the remote host sent back a string in any way different to
  this, then the user agent must <a href="#closeConnection">close the
  connection</a> and give up trying to connect.</p>

  <p>Otherwise, the user agent must then take <span>the string
  representing the script's domain in IDNA format</span>, encode it as
  UTF-8, and send that to the remote host, followed by a 0x0A byte (a
  U+000A LINE FEED in UTF-8).</p>

  <p>The user agent must then read all the bytes sent from the remote
  host, up to the first 0x0A byte (inclusive). That string of bytes
  must then be compared byte-for-byte to the string that was just sent
  to that host (the one with the IDNA domain name and ending with a
  newline character). If the remote host sent back a string in any way
  different to this, then the user agent must <a
  href="#closeConnection">close the connection</a> and give up trying
  to connect.</p>

  <p>Otherwise, the connection <a href="#openConnection">has been
  established</a> (and events and so forth get fired, as described
  above).</p>

  <p class="note">For author-written servers (as opposed to the server
  side of a peer-to-peer connection), the script's domain would be
  replaced by the hostname of the server. Alternatively, such servers
  might instead wait for the client to send its domain string, and
  then simply echo it back. This would allow connections from pages on
  any domain, instead of just pages originating from the same
  host. The client compares the two strings to ensure they are the
  same before allowing the connection to be used by author script.</p>

  <p>If at any point during this process the connection is closed
  prematurely, then the user agent must <a
  href="#closeConnection">close the connection</a> and give up trying
  to connect.</p> <!-- XXX we should support automatic reconnect -->


  <h5><dfn>Sending and receiving data over TCP</dfn></h5>

  <p>When the <code title="dom-connection-send">send(<var
  title="">data</var>)</code> method is invoked on the connection's
  corresponding <code>Connection</code> object, the user agent must
  take the <var title="">data</var> argument, replace any U+0000 NULL
  and U+0017 END OF TRANSMISSION BLOCK characters in it with U+FFFD
  REPLACEMENT CHARACTER characters, then transmit a U+0002 START OF
  TEXT character, this new <var title="">data</var> string and a
  single U+0017 END OF TRANSMISSION BLOCK character (in that order) to
  the remote host, all encoded as UTF-8.</p>

  <p>When the user agent receives bytes on the connection, the user
  agent must buffer received bytes until it receives a 0x17 byte (a
  U+0017 END OF TRANSMISSION BLOCK character). If the first buffered
  byte is not a 0x02 byte (a U+0002 START OF TEXT character encoded as
  UTF-8) then all the data up to the 0x17 byte, inclusive, must be
  dropped. (This allows for future extension of this protocol.)
  Otherwise, all the data from (but not including) the 0x02 byte and
  up to (but not including) the 0x17 byte must be taken, interpreted
  as a UTF-8 string, and a <code
  title="event-connection-read">read</code> event must be fired on the
  <code>Connection</code> object with that string as the <code
  title="dom-connectionReadEvent-data">data</code>. If that string
  cannot be decoded as UTF-8 without errors, the packet should be
  ignored.</p>

  <p class="note">This protocol does not yet allow binary data
  (e.g. an image or video data) to be efficiently transmitted. A
  future version of this protocol might allow this by using the prefix
  character U+001F INFORMATION SEPARATOR ONE, followed by binary data
  which uses a particular byte (e.g. 0xFF) to encode byte 0x17 somehow
  (since otherwise 0x17 would be treated as transmission end by
  down-level UAs).</p>

  <!--
    Specifically, replace all occurrences of 0xFF with 0xFF 0xFF and
    all occurrences of 0x17 with 0xFF 0x00, or similar.
   -->

  <h4>Security</h4>

  <p class="big-issue">Need to write this section.</p>

  <p class="big-issue">If you have an unencrypted page that is
  (through a man-in-the-middle attack) changed, it can access a secure
  service that is using IP authentication and then send that data back
  to the attacker. Ergo we should probably stop unencrypted pages from
  accessing encrypted services, on the principle that the actual level
  of security is zero. Then again, if we do that, we prevent insecure
  sites from using SSL as a tunneling mechanism.</p>

  <p class="big-issue">Should consider dropping the subdomain-only
  restriction. It doesn't seem to add anything, and prevents
  cross-domain chatter.</p>

  <h4>Relationship to other standards</h4>

  <p class="big-issue">Should have a section talking about the fact
  that we blithely ignoring IANA's port assignments here.</p>

  <p class="big-issue">Should explain why we are not reusing HTTP for
  this. (HTTP is too heavy-weight for such a simple need; requiring
  authors to implement an HTTP server just to have a party line is too
  much of a barrier to entry; cannot rely on prebuilt components;
  having a simple protocol makes it much easier to do RAD; HTTP
  doesn't fit the needs and doesn't have the security model
  needed; etc)</p>



  <h3 id="crossDocumentMessages"><span title="SCS">[SCS]</span> Cross-document messaging</h3>

  <p>Web browsers, for security and privacy reasons, prevent documents
  in different domains from affecting each other; that is, cross-site
  scripting is disallowed.</p>

  <p>While this is an important security feature, it prevents pages
  from different domains from communicating even when those pages are
  not hostile. This section introduces a messaging system that allows
  documents to communicate with each other regardless of their source
  domain, in a way designed to not enable cross-site scripting
  attacks.</p>

  <h4>Definitions</h4>

  <p>Any <code>Document</code> object that supports this
  cross-document messaging API must implement the
  <code>DocumentMessaging</code> interface.</p>

  <!-- XXX this method name is too generic -->
  <pre class="idl">interface <dfn>DocumentMessaging</dfn> {
  void <span>postMessage</span>(in DOMString message);
};</pre>

  <p>Such <code>Document</code> objects must also implement the
  <code>EventTarget</code> interface. <a
  href="#refsDOM3EVENTS">[DOM3EVENTS]</a></p>

  <p>The <span>postMessage()</span> method causes an event to be
  dispatched (as defined below). This event uses the following
  interface:</p>

  <pre class="idl">interface <dfn>CrossDocumentMessageEvent</dfn> : <span>Event</span> {
  readonly attribute DOMString <span title="CrossDocumentMessageEvent.data">data</span>;
  readonly attribute DOMString <span title="CrossDocumentMessageEvent.domain">domain</span>;
  readonly attribute DOMString <span title="CrossDocumentMessageEvent.uri">uri</span>;
  readonly attribute Document <span title="CrossDocumentMessageEvent.source">source</span>;
  void <span>initCrossDocumentMessageEvent</span>(in DOMString typeArg,
                                     in boolean canBubbleArg,
                                     in boolean cancelableArg,
                                     in DOMString dataArg,
                                     in DOMString domainArg,
                                     in DOMString uriArg,
                                     in Document documentArg);
  void <span>initCrossDocumentMessageEventNS</span>(in DOMString namespaceURI,
                                       in DOMString typeArg,
                                       in boolean canBubbleArg,
                                       in boolean cancelableArg,
                                       in DOMString dataArg,
                                       in DOMString domainArg,
                                       in DOMString uriArg,
                                       in Document documentArg);
};</pre>

  <h4>Processing model</h4>

  <p>When a script invokes the <dfn><code>postMessage()</code></dfn>
  method on a document, the user agent must create an event that uses
  the <code>CrossDocumentMessageEvent</code> interface, with the event
  name <dfn title="message-event"><code>message</code></dfn> in the
  <code>uuid:7f37e11a-3a5c-4f3d-a82e-83b611439f37</code> namespace,
  which bubbles, is cancelable, and has no default action. The <dfn
  title="CrossDocumentMessageEvent.data"><code>data</code></dfn>
  attribute must be set to the value passed as the argument to the
  <code>postMessage()</code> method, the <dfn
  title="CrossDocumentMessageEvent.domain"><code>domain</code></dfn>
  attribute must be set to the domain of the document that the script
  that invoked the methods is associated with, the <dfn
  title="CrossDocumentMessageEvent.uri"><code>uri</code></dfn>
  attribute must be set to the URI of that document, and the <dfn
  title="CrossDocumentMessageEvent.source"><code>source</code></dfn>
  attribute must be set to the object representing that document.</p>

  <p class="warning">Authors should check the <code
  title="CrossDocumentMessageEvent.domain">domain</code> attribute to
  ensure that messages are only accepted from domains that they expect
  to receive messages from. Otherwise, bugs in the author's message
  handling code could be exploited by hostile sites.</p>

  <div class="example">

   <p>For example, if document A contains an <code>object</code>
   element that contains document B, and script in document A calls
   <code>postMessage()</code> on document B, then a message event will
   be fired on that element, marked as originating from document A.
   The script in document A might look like:</p>

   <pre>var o = document.getElementsByTagName('object')[0];
o.<span>contentDocument</span>.<span>postMessage</span>('Hello world');
</pre>

   <p>To register an event handler for incoming events, the script
   would use <code>addEventListener()</code> (or similar mechanisms).
   For example, the script in document B might look like:</p>

   <pre>document.addEventListener('message', receiver, false);
function receiver(e) {
  if (e.domain == 'example.com') {
    if (e.data == 'Hello world') {
      e.source.postMessage('Hello');
    } else {
      alert(e.data);
    }
  }
}</pre>

   <p>This script first checks the domain is the expected domain, and
   then looks at the message, which it either displays to the user, or
   responds to by sending a message back to the document which sent
   the message in the first place.</p>

  </div>

  <p class="note">Implementors are urged to take extra care in the
  implementation of this feature. It allows authors to transmit
  information from one domain to another domain, which is normally
  disallowed for security reasons. It also requires that UAs be
  careful to allow access to certain properties but not others.</p>

  <p>The <dfn><code>initCrossDocumentMessageEvent()</code></dfn> and
  <dfn><code>initCrossDocumentMessageEventNS()</code></dfn> methods
  must initialise an event object in a manner analogous to other
  <code>initXXXEvent</code> metheds.</p>


  <h2>The HTML syntax</h2>

  <h3>Writing HTML documents <span title="TBW">[TBW]</span></h3>

  <p><em>This section only applies to authors and markup generators.</em></p>

  <p class="big-issue">This section needs writing.</p>

  <h3 id="parsing"><span title="SCS">[SCS]</span> Parsing HTML documents</h3>

  <p><em>This section only applies to user agents.</em></p>

  <p class="big-issue">Yet to be defined: how this integrates with
  document.open() and document.close() -- something about opening at
  the start and closing at the end, once all pending document.write()s
  have been processed. Interaction with tokeniser's EOF character is
  important, since the tokeniser can hit this character, emit a
  &lt;script> block causing more characters to be introduced, and then
  has to ignore the EOF it hit before.</p>
 
  <p>The rules for parsing <span>XHTML</span> documents into DOM trees
  are covered by the XML and Namespaces in XML specifications, and are
  out of scope of this specification. <a href="#refs"></a> <!-- XXX
  refs --></p>

  <p>For <span>HTML</span> documents, user agents must use the parsing
  rules described in this section to generate the DOM trees.</p>

  <div class="note">

   <p>While the HTML form of HTML5 bears a close resemblance to SGML
   and XML, it is a separate language with its own parsing rules.</p>

   <p>Some earlier versions of HTML (in particular from HTML2 to
   HTML4) were based on SGML and used SGML parsing rules. However, few
   (if any) web browsers ever implemented true SGML parsing for HTML
   documents; the only user agents to strictly handle HTML as an SGML
   application have historically been validators. The resulting
   confusion &mdash; with validators claiming documents to have one
   representation while widely deployed Web browsers interoperably
   implemented a different representation &mdash; has resulted in this
   version of HTML returning to a non-SGML basis.</p>

   <p>Authors interested in using SGML tools in their authoring
   pipeline are encouraged to use the XML serialisation of HTML5
   instead of the HTML serialisation.</p>

  </div>

  <p>This specification defines the parsing rules for HTML documents,
  whether they are syntactically valid or not. Certain points in the
  parsing algorithm are said to be <dfn title="parse error">parse
  errors</dfn>. The error handling for parse errors is well-defined:
  user agents must either act as described below when encountering
  such problems, or must abort processing at the first error that they
  encounter for which they do not wish to apply the rules described
  below.</p>

  <p>Conformance checkers must report at least one parse error
  condition to the user if one or more parse error conditions exist in
  the document and must not report parse error conditions if none
  exist in the document. Conformance checkers may report more than one
  parse error condition if more than one parse error conditions exist
  in the document. Conformance checkers are not required to recover
  from parse errors.</p>

  <p class="note">Parse errors are only errors with the
  <em>syntax</em> of HTML. In addition to checking for parse errors,
  conformance checkers will also verify that the document obeys all
  the other conformance requirements described in this
  specification.</p>

  <p>The input to the HTML parsing process consists of a stream of
  Unicode characters, which is passed through a
  <span>tokenisation</span> stage (lexical analysis) followed by a
  <span>tree construction</span> stage (semantic analysis). The output
  is a <code>Document</code> object.</p>

  <p class="note">Implementations that <a href="#non-scripted">do not
  support scripting</a> do not have to actually create a DOM
  <code>Document</code> object, but the DOM tree in such cases is
  still used as the model for the rest of the specification.</p>

  <p id="documentEncoding">For HTML, user agents must use the
  following algorithm in determining the character encoding of a
  document:</p>

  <ol>

   <li>If the transport layer specifies an encoding, use that.</li>

   <li>Otherwise, if the user agent can find a <code>meta</code>
   element that <a href="#charset">specifies character encoding
   information</a>, then use that. (The exact parsing rules for
   finding and using this information are not yet described in this
   specification.) <span class="big-issue">This needs to be fleshed
   out a whole heck of a lot more.</span></li> <!-- XXX -->

   <li>Otherwise, the user agent may attempt to autodetect the
   character encoding from applying frequency analysis or other
   algorithms to the data stream. If autodetection succeeds in
   determining a character encoding, then use that.</li> <!-- is it a
   parse error to reach this step? XXX -->

   <li>Otherwise, use an implementation-defined or user-specified
   default character encoding (<code>ISO-8859-1</code>,
   <code>windows-1252</code>, and <code>UTF-8</code> are recommended
   as defaults, and can in many cases be identified by inspection as
   they have different ranges of valid bytes).</li> <!-- only default
   to win1252? XXX -->

  </ol>

  <p class="note">For XHTML documents, the algorithm user agents must
  use to determine the character encoding is given by the XML
  specification. This section does not apply to XHTML documents. <a
  href="#refsXML">[XML]</a></p>

  <p>Bytes or sequences of bytes in the original byte stream that
  could not be converted to Unicode characters must be converted to
  U+FFFD REPLACEMENT CHARACTER code points.</p>

  <p>A leading U+FEFF BYTE ORDER MARK (BOM) must be dropped if
  present.</p>

  <p>All U+0000 NULL characters in the input must be replaced by
  U+FFFD REPLACEMENT CHARACTERs.</p>

  <p>U+000D CARRIAGE RETURN (CR) characters, and U+000A LINE FEED (LF)
  characters, are treated specially. Any CR characters that are
  followed by LF characters must be removed, and any CR characters not
  followed by LF characters must be converted to LF characters. Thus,
  newlines in HTML DOMs are represented by LF characters, and there
  are never any CR characters in the input to the
  <span>tokenisation</span> stage.</p>


  <h4><dfn>Tokenisation</dfn></h4>

  <p>Implementations must act as if they used the following state
  machine to tokenise HTML. The state machine must start in the
  <span>data state</span>. Most states consume a single character,
  which may have various side-effects, and either switches the state
  machine to a new state to <em>reconsume</em> the same character, or
  switches it to a new state (to consume the next character), or
  repeats the same state (to consume the next character). Some states
  have more complicated behaviour and can consume several characters
  before switching to another state.</p>

  <p>The "EOF" character in the tables below is a conceptual character
  representing the end of the input file. It is not a real character
  in the stream, but rather the lack of any further characters.</p>

  <p>The exact behaviour of certain states depends on a <dfn>content
  model flag</dfn> that is set after certain tokens are emitted. The
  flag has several states: <em title="">PCDATA</em>, <em
  title="">RCDATA</em>, <em title="">CDATA</em>, and <em
  title="">PLAINTEXT</em>. Initially it is in the PCDATA state.</p>

  <p>The output of the tokenisation step is a series of zero or more
  of the following tokens: DOCTYPE, start tag, end tag, comment,
  character, end-of-file. DOCTYPE tokens have names and can be either
  correct or in error.  Start and end tag tokens have a tagname and a
  list of attributes, each of which has a name and a value. Comment
  and character tokens have data.</p>

  <p>When a token is emitted, it must immediately be handled by the
  <span>tree construction</span> stage. The tree construction stage
  can affect the state of the <span>content model flag</span>, and can
  insert additional characters into the stream. (For example, the
  <code>script</code> element can result in scripts executing and
  using the <code title="">document.write()</code> API to insert
  characters into the stream being tokenised.)</p> <!-- XXXXXXXXXX d.w -->

  <dl>

   <dt><dfn>Data state</dfn></dt>

   <dd>

    <!-- XXXXXXXXXX d.w -->

    <p>Consume the next input character:</p>

    <dl class="switch">

     <dt>U+0026 AMPERSAND (&amp;)</dt>
     <dd>When the <span>content model flag</span> is set to one of the
     PCDATA or RCDATA states: switch to the <span>entity data
     state</span>.</dd>
     <dd>Otherwise: treat it as per the "anything else" entry below.</dd>

     <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
     <dd>When the <span>content model flag</span> is set to a state
     other than the PLAINTEXT state: switch to the <span>tag open
     state</span>.</dd>
     <dd>Otherwise: treat it as per the "anything else" entry
     below.</dd>

     <dt>EOF</dt>
     <dd>Emit an end-of-file token.</dd>

     <dt>Anything else</dt>
     <dd>Emit the input character as a character token. Stay in the
     <span>data state</span>.</dd>

    </dl>

   </dd>

   <dt><dfn>Entity data state</dfn></dt>

   <dd>

    <p><em>(This cannot happen if the <span>content model flag</span>
    is set to the CDATA state.)</em></p>

    <p>Attempt to <span>consume an entity</span>.</p>

    <p>If nothing is returned, emit a U+0026 AMPERSAND character
    token.</p>

    <p>Otherwise, emit the character token that was returned.</p>

    <p>Finally, switch to the <span>data state</span>.</p>

   </dd>

   <dt><dfn>Tag open state</dfn></dt>

   <dd>

    <p>The behaviour of this state depends on the <span>content model
    flag</span>.</p>

    <dl>

     <dt>If the <span>content model flag</span> is set to the RCDATA
     or CDATA states</dt>

     <dd>

      <p>If the next input character is a U+002F SOLIDUS (/)
      character, consume it and switch to the <span>close tag open
      state</span>. If the next input character is not a U+002F
      SOLIDUS (/) character, emit a U+003C LESS-THAN SIGN character
      token and reconsume the current input character in the
      <span>data state</span>.</p>

     </dd>

     <dt>If the <span>content model flag</span> is set to the PCDATA
     state</dt>

     <dd>

      <p>Consume the next input character:</p>

      <dl class="switch">

       <dt>U+0021 EXCLAMATION MARK (!)</dt>
       <dd>Switch to the <span>markup declaration open state</span>.</dd>

       <dt>U+002F SOLIDUS (/)</dt>
       <dd>Switch to the <span>close tag open state</span>.</dd>

       <dt>U+0041 LATIN CAPITAL LETTER A through to U+005A LATIN CAPITAL LETTER Z</dt>
       <dd>Create a new start tag token, set its tag name to the
       lowercase version of the input character (add 0x0020 to the
       character's codepoint), then switch to the <span>tag name
       state</span>. (Don't emit the token yet; further details will
       be filled in before it is emitted.)</dd>

       <dt>U+0061 LATIN SMALL LETTER A through to U+007A LATIN SMALL LETTER Z</dt>
       <dd>Create a new start tag token, set its tag name to the input
       character, then switch to the <span>tag name
       state</span>. (Don't emit the token yet; further details will
       be filled in before it is emitted.)</dd>

       <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
       <dd><span>Parse error</span>. Emit a U+003C LESS-THAN SIGN
       character token and a U+003E GREATER-THAN SIGN character
       token. Switch to the <span>data state</span>.</dd>

       <dt>U+003F QUESTION MARK (?)</dt>
       <dd><span>Parse error</span>. Switch to the <span>bogus
       comment state</span>.</dd>

       <dt>Anything else</dt>
       <dd><span>Parse error</span>. Emit a U+003C LESS-THAN SIGN
       character token and reconsume the current input character in the
       <span>data state</span>.</dd>

      </dl>

     </dd>

    </dl>

   </dd>

   <dt><dfn>Close tag open state</dfn></dt>

   <dd>

    <p>If the <span>content model flag</span> is set to the RCDATA or
    CDATA states then examine the next few characters. If they do not
    match the tag name of the last start tag token emitted (case
    insensitively), or if they do but they are not immediately
    followed by one of the following characters:</p>

    <ul class="brief">
     <li>U+0009 CHARACTER TABULATION</li>
     <li>U+000A LINE FEED (LF)</li>
     <li>U+000B LINE TABULATION</li>
     <li>U+000C FORM FEED (FF)</li>
     <!--<li>U+000D CARRIAGE RETURN (CR)</li>-->
     <li>U+0020 SPACE</li>
     <li>U+003E GREATER-THAN SIGN (&gt;)</li>
     <li>U+002F SOLIDUS (/)</li>
     <li>U+003C LESS-THAN SIGN (&lt;)</li>
     <li>EOF</li>
    </ul>

    <p>...then there is a <span>parse error</span>. Emit a
    U+003C LESS-THAN SIGN character token, a U+002F SOLIDUS character
    token, and reconsume the current input character in the <span>data
    state</span>.</p>

    <p>Otherwise, if the <span>content model flag</span> is set to the
    PCDATA state, or if the next few characters <em>do</em> match that tag
    name, consume the next input character:</p>

    <dl class="switch">

     <dt>U+0041 LATIN CAPITAL LETTER A through to U+005A LATIN CAPITAL LETTER Z</dt>
     <dd>Create a new end tag token, set its tag name to the lowercase
     version of the input character (add 0x0020 to the character's
     codepoint), then switch to the <span>tag name
     state</span>. (Don't emit the token yet; further details will be
     filled in before it is emitted.)</dd>

     <dt>U+0061 LATIN SMALL LETTER A through to U+007A LATIN SMALL LETTER Z</dt>
     <dd>Create a new end tag token, set its tag name to the input
     character, then switch to the <span>tag name state</span>. (Don't
     emit the token yet; further details will be filled in before it
     is emitted.)</dd>

     <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
     <dd><span>Parse error</span>. Switch to the <span>data
     state</span>.</dd>

     <dt>EOF</dt>
     <dd><span>Parse error</span>. Emit a U+003C LESS-THAN SIGN
     character token and a U+002F SOLIDUS character token.  Reconsume
     the EOF character in the <span>data state</span>.</dd>

     <dt>Anything else</dt>
     <dd><span>Parse error</span>. Switch to the <span>bogus
     comment state</span>.</dd>

    </dl>

   </dd>

   <dt><dfn>Tag name state</dfn></dt>

   <dd>

    <p>Consume the next input character:</p>

    <dl class="switch">

     <dt>U+0009 CHARACTER TABULATION</dt>
     <dt>U+000A LINE FEED (LF)</dt>
     <dt>U+000B LINE TABULATION</dt>
     <dt>U+000C FORM FEED (FF)</dt>
     <!--<dt>U+000D CARRIAGE RETURN (CR)</dt>-->
     <dt>U+0020 SPACE</dt>
     <dd>Switch to the <span>before attribute name state</span>.</dd>

     <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
     <dd>Emit the current tag token. Switch to the <span>data
     state</span>.</dd>

     <dt>U+0041 LATIN CAPITAL LETTER A through to U+005A LATIN CAPITAL LETTER Z</dt>
     <dd>Append the lowercase version of the current input character
     (add 0x0020 to the character's codepoint) to the current tag
     token's tag name. Stay in the <span>tag name state</span>.</dd>

     <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
     <dt>EOF</dt>
     <dd><span>Parse error</span>. Emit the current tag
     token. Reconsume the character in the <span>data
     state</span>.</dd>

     <dt>U+002F SOLIDUS (/)</dt>
     <dd><span>Parse error</span>. Switch to the <span>before
     attribute name state</span>.</dd>

     <dt>Anything else</dt>
     <dd>Append the current input character to the current tag token's
     tag name. Stay in the <span>tag name state</span>.</dd>

    </dl>

   </dd>

   <dt><dfn>Before attribute name state</dfn></dt>

   <dd>

    <p>Consume the next input character:</p>

    <dl class="switch">

     <dt>U+0009 CHARACTER TABULATION</dt>
     <dt>U+000A LINE FEED (LF)</dt>
     <dt>U+000B LINE TABULATION</dt>
     <dt>U+000C FORM FEED (FF)</dt>
     <!--<dt>U+000D CARRIAGE RETURN (CR)</dt>-->
     <dt>U+0020 SPACE</dt>
     <dd>Stay in the <span>before attribute name state</span>.</dd>

     <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
     <dd>Emit the current tag token. Switch to the <span>data
     state</span>.</dd>

     <dt>U+0041 LATIN CAPITAL LETTER A through to U+005A LATIN CAPITAL LETTER Z</dt>
     <dd>Start a new attribute in the current tag token. Set that
     attribute's name to the lowercase version of the current input
     character (add 0x0020 to the character's codepoint), and its
     value to the empty string. Switch to the <span>attribute name
     state</span>.</dd>

     <dt>U+002F SOLIDUS (/)</dt>
     <dd><span>Parse error</span>. Stay in the <span>before
     attribute name state</span>.</dd>

     <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
     <dt>EOF</dt>
     <dd><span>Parse error</span>. Emit the current tag
     token. Reconsume the character in the <span>data
     state</span>.</dd>
     
     <dt>Anything else</dt>
     <dd>Start a new attribute in the current tag token. Set that
     attribute's name to the current input character, and its value to
     the empty string. Switch to the <span>attribute name
     state</span>.</dd>

    </dl>

   </dd>

   <dt><dfn>Attribute name state</dfn></dt>

   <dd>

    <p>Consume the next input character:</p>

    <dl class="switch">

     <dt>U+0009 CHARACTER TABULATION</dt>
     <dt>U+000A LINE FEED (LF)</dt>
     <dt>U+000B LINE TABULATION</dt>
     <dt>U+000C FORM FEED (FF)</dt>
     <!--<dt>U+000D CARRIAGE RETURN (CR)</dt>-->
     <dt>U+0020 SPACE</dt>
     <dd>Switch to the <span>after attribute name state</span>.</dd>

     <dt>U+003D EQUALS SIGN (=)</dt>
     <dd>Switch to the <span>before attribute value state</span>.</dd>

     <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
     <dd>Emit the current tag token. Switch to the <span>data
     state</span>.</dd>

     <dt>U+0041 LATIN CAPITAL LETTER A through to U+005A LATIN CAPITAL LETTER Z</dt>
     <dd>Append the lowercase version of the current input character
     (add 0x0020 to the character's codepoint) to the current
     attribute's name. Stay in the <span>attribute name
     state</span>.</dd>

     <dt>U+002F SOLIDUS (/)</dt>
     <dd><span>Parse error</span>. Switch to the <span>before
     attribute name state</span>.</dd>

     <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
     <dt>EOF</dt>
     <dd><span>Parse error</span>. Emit the current tag
     token. Reconsume the character in the <span>data
     state</span>.</dd>

     <dt>Anything else</dt>
     <dd>Append the current input character to the current attribute's
     name. Stay in the <span>attribute name state</span>.</dd>

    </dl>

    <p>When the user agent leaves the attribute name state (and before
    emitting the tag token, if appropriate), the complete attribute's
    name must be compared to the other attributes on the same token;
    if it is a duplicate, then this is a <span>parse error</span> and
    it must be dropped, along with the value that gets associated with
    it (if any).</p>

   </dd>

   <dt><dfn>After attribute name state</dfn></dt>

   <dd>

    <p>Consume the next input character:</p>

    <dl class="switch">

     <dt>U+0009 CHARACTER TABULATION</dt>
     <dt>U+000A LINE FEED (LF)</dt>
     <dt>U+000B LINE TABULATION</dt>
     <dt>U+000C FORM FEED (FF)</dt>
     <!--<dt>U+000D CARRIAGE RETURN (CR)</dt>-->
     <dt>U+0020 SPACE</dt>
     <dd>Stay in the <span>after attribute name state</span>.</dd>

     <dt>U+003D EQUALS SIGN (=)</dt>
     <dd>Switch to the <span>before attribute value state</span>.</dd>

     <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
     <dd>Emit the current tag token. Switch to the <span>data
     state</span>.</dd>

     <dt>U+0041 LATIN CAPITAL LETTER A through to U+005A LATIN CAPITAL LETTER Z</dt>
     <dd>Start a new attribute in the current tag token. Set that
     attribute's name to the lowercase version of the current input character
     (add 0x0020 to the character's codepoint), and its value to
     the empty string. Switch to the <span>attribute name
     state</span>.</dd>

     <dt>U+002F SOLIDUS (/)</dt>
     <dd><span>Parse error</span>. Switch to the <span>before
     attribute name state</span>.</dd>

     <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
     <dt>EOF</dt>
     <dd><span>Parse error</span>. Emit the current tag
     token. Reconsume the character in the <span>data
     state</span>.</dd>

     <dt>Anything else</dt>
     <dd>Start a new attribute in the current tag token. Set that
     attribute's name to the current input character, and its value to
     the empty string. Switch to the <span>attribute name
     state</span>.</dd>

    </dl>

   </dd>

   <dt><dfn>Before attribute value state</dfn></dt>

   <dd>

    <p>Consume the next input character:</p>

    <dl class="switch">

     <dt>U+0009 CHARACTER TABULATION</dt>
     <dt>U+000A LINE FEED (LF)</dt>
     <dt>U+000B LINE TABULATION</dt>
     <dt>U+000C FORM FEED (FF)</dt>
     <!--<dt>U+000D CARRIAGE RETURN (CR)</dt>-->
     <dt>U+0020 SPACE</dt>
     <dd>Stay in the <span>before attribute value state</span>.</dd>

     <dt>U+0022 QUOTATION MARK (&quot;)</dt>
     <dd>Switch to the <span>attribute value (double-quoted) state</span>.</dd>

     <dt>U+0026 AMPERSAND (&amp;)</dt>
     <dd>Switch to the <span>attribute value (unquoted) state</span>
     and reconsume this input character.</dd>

     <dt>U+0027 APOSTROPHE (')</dt>
     <dd>Switch to the <span>attribute value (single-quoted) state</span>.</dd>

     <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
     <dd>Emit the current tag token. Switch to the <span>data
     state</span>.</dd>

     <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
     <dt>EOF</dt>
     <dd><span>Parse error</span>. Emit the current tag
     token. Reconsume the character in the <span>data
     state</span>.</dd>

     <dt>Anything else</dt>
     <dd>Append the current input character to the current attribute's
     value. Switch to the <span>attribute value (unquoted)
     state</span>.</dd>

    </dl>

   </dd>

   <dt><dfn>Attribute value (double-quoted) state</dfn></dt>

   <dd>

    <p>Consume the next input character:</p>

    <dl class="switch">

     <dt>U+0022 QUOTATION MARK (&quot;)</dt>
     <dd>Switch to the <span>before attribute name state</span>.</dd>

     <dt>U+0026 AMPERSAND (&amp;)</dt>
     <dd>Switch to the <span>entity in attribute value state</span>.</dd>

     <dt>EOF</dt>
     <dd><span>Parse error</span>. Emit the current tag
     token. Reconsume the character in the <span>data
     state</span>.</dd>

     <dt>Anything else</dt>
     <dd>Append the current input character to the current attribute's
     value. Stay in the <span>attribute value (double-quoted)
     state</span>.</dd>

    </dl>

   </dd>

   <dt><dfn>Attribute value (single-quoted) state</dfn></dt>

   <dd>

    <p>Consume the next input character:</p>

    <dl class="switch">

     <dt>U+0027 APOSTROPHE (')</dt>
     <dd>Switch to the <span>before attribute name state</span>.</dd>

     <dt>U+0026 AMPERSAND (&amp;)</dt>
     <dd>Switch to the <span>entity in attribute value state</span>.</dd>

     <dt>EOF</dt>
     <dd><span>Parse error</span>. Emit the current tag
     token. Reconsume the character in the <span>data
     state</span>.</dd>

     <dt>Anything else</dt>
     <dd>Append the current input character to the current attribute's
     value. Stay in the <span>attribute value (single-quoted)
     state</span>.</dd>

    </dl>

   </dd>

   <dt><dfn>Attribute value (unquoted) state</dfn></dt>

   <dd>

    <p>Consume the next input character:</p>

    <dl class="switch">

     <dt>U+0009 CHARACTER TABULATION</dt>
     <dt>U+000A LINE FEED (LF)</dt>
     <dt>U+000B LINE TABULATION</dt>
     <dt>U+000C FORM FEED (FF)</dt>
     <!--<dt>U+000D CARRIAGE RETURN (CR)</dt>-->
     <dt>U+0020 SPACE</dt>
     <dd>Switch to the <span>before attribute name state</span>.</dd>

     <dt>U+0026 AMPERSAND (&amp;)</dt>
     <dd>Switch to the <span>entity in attribute value state</span>.</dd>

     <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
     <dd>Emit the current tag token. Switch to the <span>data
     state</span>.</dd>

     <dt>U+003C LESS-THAN SIGN (&lt;)</dt>
     <dt>EOF</dt>
     <dd><span>Parse error</span>. Emit the current tag
     token. Reconsume the character in the <span>data
     state</span>.</dd>

     <dt>Anything else</dt>
     <dd>Append the current input character to the current attribute's
     value. Stay in the <span>attribute value (unquoted)
     state</span>.</dd>

    </dl>

   </dd>

   <dt><dfn>Entity in attribute value state</dfn></dt>

   <dd>

    <p>Attempt to <span>consume an entity</span>.</p>

    <p>If nothing is returned, append a U+0026 AMPERSAND character to
    the current attribute's value.</p>

    <p>Otherwise, append the returned character token to the current
    attribute's value.</p>

    <p>Finally, switch back to the attribute value state that you were
    in when were switched into this state.</p>

   </dd>

   <dt><dfn>Bogus comment state</dfn></dt>

   <dd>

    <p><em>(This can only happen if the <span>content model
    flag</span> is set to the PCDATA state.)</em></p>

    <p>Consume every character up to the first U+003E GREATER-THAN
    SIGN character (&gt;) or the end of the file (EOF), whichever
    comes first. Emit a comment token whose data is the concatenation
    of all the characters starting from and including the character
    that caused the state machine to switch into the bogus comment
    state, up to and including the last consumed character before the
    U+003E character, if any, or up to the end of the file
    otherwise. (If the comment was started by the end of the file
    (EOF), the token is empty.)</p>

    <p>Switch to the <span>data state</span>.</p>

    <p>If the end of the file was reached, reconsume the EOF
    character.</p>

   </dd>

   <dt><dfn>Markup declaration open state</dfn></dt>

   <dd>

    <p><em>(This can only happen if the <span>content model
    flag</span> is set to the PCDATA state.)</em></p>

    <p>If the next two characters are both U+002D HYPHEN-MINUS (-)
    characters, consume those two characters, create a comment token
    whose data is the empty string, and switch to the <span>comment
    state</span>.</p>

    <p>Otherwise if the next seven chacacters are a
    <span>case-insensitive</span><!-- XXX xref, ascii only --> match
    for the word "DOCTYPE", then consume those characters and switch
    to the <span>DOCTYPE state</span>.</p>

    <p>Otherwise, is is a <span>parse error</span>. Switch to the
    <span>bogus comment state</span>. The next character that is
    consumed, if any, is the first character that will be in the
    comment.</p>

   </dd>

   <dt><dfn id="comment">Comment state</dfn></dt>

   <dd>

    <p>Consume the next input character:</p>

    <dl class="switch">

     <dt>U+002D HYPHEN-MINUS (-)</dt>
     <dd>Switch to the <span>comment dash state</span></dd>

     <dt>EOF</dt>
     <dd><span>Parse error</span>. Emit the comment token. Reconsume
     the EOF character in the <span>data state</span>.</dd> <!-- For
     security reasons: otherwise, hostile user could put a <script> in
     a comment e.g. in a blog comment and then DOS the server so that
     the end tag isn't read, and then the commented <script> tag would
     be treated as live code -->

     <dt>Anything else</dt>
     <dd>Append the input character to the comment token's data. Stay
     in the <span>comment state</span>.</dd>

    </dl>

   </dd>

   <dt><dfn>Comment dash state</dfn></dt>

   <dd>

    <p>Consume the next input character:</p>

    <dl class="switch">

     <dt>U+002D HYPHEN-MINUS (-)</dt>
     <dd>Switch to the <span>comment end state</span></dd>

     <dt>EOF</dt>
     <dd><span>Parse error</span>. Emit the comment token. Reconsume
     the EOF character in the <span>data state</span>.</dd> <!-- For
     security reasons: otherwise, hostile user could put a <script> in
     a comment e.g. in a blog comment and then DOS the server so that
     the end tag isn't read, and then the commented <script> tag would
     be treated as live code -->

     <dt>Anything else</dt>
     <dd>Append a U+002D HYPHEN-MINUS (-) character and the input
     character to the comment token's data. Switch to the
     <span>comment state</span>.</dd>

    </dl>

   </dd>

   <dt><dfn>Comment end state</dfn></dt>

   <dd>

    <p>Consume the next input character:</p>

    <dl class="switch">

     <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
     <dd>Emit the comment token. Switch to the <span>data
     state</span>.</dd>

     <dt>U+002D HYPHEN-MINUS (-)</dt>
     <dd><span>Parse error</span>. Append a U+002D HYPHEN-MINUS
     (-) character to the comment token's data. Stay in the
     <span>comment end state</span>.</dd>

     <dt>EOF</dt>
     <dd><span>Parse error</span>. Emit the comment token. Reconsume
     the EOF character in the <span>data state</span>.</dd> <!-- For
     security reasons: otherwise, hostile user could put a <script> in
     a comment e.g. in a blog comment and then DOS the server so that
     the end tag isn't read, and then the commented <script> tag would
     be treated as live code -->

     <dt>Anything else</dt>
     <dd><span>Parse error</span>. Append two U+002D HYPHEN-MINUS (-)
     characters and the input character to the comment token's
     data. Switch to the <span>comment state</span>.</dd>

    </dl>

   </dd>

   <dt><dfn>DOCTYPE state</dfn></dt>

   <dd>

    <p>Consume the next input character:</p>

    <dl class="switch">

     <dt>U+0009 CHARACTER TABULATION</dt>
     <dt>U+000A LINE FEED (LF)</dt>
     <dt>U+000B LINE TABULATION</dt>
     <dt>U+000C FORM FEED (FF)</dt>
     <!--<dt>U+000D CARRIAGE RETURN (CR)</dt>-->
     <dt>U+0020 SPACE</dt>
     <dd>Switch to the <span>before DOCTYPE name state</span>.</dd>

     <dt>Anything else</dt>
     <dd><span>Parse error</span>. Reconsume the current
     character in the <span>before DOCTYPE name state</span>.</dd>

    </dl>

   </dd>

   <dt><dfn>Before DOCTYPE name state</dfn></dt>

   <dd>

    <p>Consume the next input character:</p>

    <dl class="switch">

     <dt>U+0009 CHARACTER TABULATION</dt>
     <dt>U+000A LINE FEED (LF)</dt>
     <dt>U+000B LINE TABULATION</dt>
     <dt>U+000C FORM FEED (FF)</dt>
     <!--<dt>U+000D CARRIAGE RETURN (CR)</dt>-->
     <dt>U+0020 SPACE</dt>
     <dd>Stay in the <span>before DOCTYPE name state</span>.</dd>

     <dt>U+0061 LATIN SMALL LETTER A through to U+007A LATIN SMALL LETTER Z</dt>
     <dd>Create a new DOCTYPE token. Set the token's name name to the
     uppercase version of the current input character (subtract 0x0020
     from the character's codepoint), and mark it as being in
     error. Switch to the <span>DOCTYPE name state</span>.</dd>

     <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
     <dd><span>Parse error</span>. Emit a DOCTYPE token whose
     name is the empty string and that is marked as being in
     error. Switch to the <span>data state</span>.</dd>

     <dt>EOF</dt>
     <dd><span>Parse error</span>. Emit a DOCTYPE token whose name is
     the empty string and that is marked as being in error. Reconsume
     the EOF character in the <span>data state</span>.</dd>

     <dt>Anything else</dt>
     <dd>Create a new DOCTYPE token. Set the token's name name to the
     current input character, and mark it as being in error. Switch to
     the <span>DOCTYPE name state</span>.</dd>

    </dl>

   </dd>

   <dt><dfn>DOCTYPE name state</dfn></dt>

   <dd>

    <p>Consume the next input character:</p>

    <dl class="switch">

     <dt>U+0009 CHARACTER TABULATION</dt>
     <dt>U+000A LINE FEED (LF)</dt>
     <dt>U+000B LINE TABULATION</dt>
     <dt>U+000C FORM FEED (FF)</dt>
     <!--<dt>U+000D CARRIAGE RETURN (CR)</dt>-->
     <dt>U+0020 SPACE</dt>
     <dd>Switch to the <span>after DOCTYPE name state</span>.</dd>

     <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
     <dd>Emit the current DOCTYPE token. Switch to the <span>data
     state</span>.</dd>

     <dt>U+0061 LATIN SMALL LETTER A through to U+007A LATIN SMALL LETTER Z</dt>
     <dd>Append the uppercase version of the current input character
     (subtract 0x0020 from the character's codepoint) to the current DOCTYPE
     token's name. Stay in the <span>DOCTYPE name state</span>.</dd>

     <dt>EOF</dt>
     <dd><span>Parse error</span>. Emit the current DOCTYPE token.
     Reconsume the EOF character in the <span>data state</span>.</dd>

     <dt>Anything else</dt>
     <dd>Append the current input character to the current DOCTYPE
     token's name. Stay in the <span>DOCTYPE name state</span>.</dd>

    </dl>

    <p>If the name of the DOCTYPE token is exactly the four letters
    "HTML", then mark the token as being correct. Otherwise, mark it
    as being in error.</p>

   </dd>

   <dt><dfn>After DOCTYPE name state</dfn></dt>

   <dd>

    <p>Consume the next input character:</p>

    <dl class="switch">

     <dt>U+0009 CHARACTER TABULATION</dt>
     <dt>U+000A LINE FEED (LF)</dt>
     <dt>U+000B LINE TABULATION</dt>
     <dt>U+000C FORM FEED (FF)</dt>
     <!--<dt>U+000D CARRIAGE RETURN (CR)</dt>-->
     <dt>U+0020 SPACE</dt>
     <dd>Stay in the <span>after DOCTYPE name state</span>.</dd>

     <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
     <dd>Emit the current DOCTYPE token. Switch to the <span>data
     state</span>.</dd>

     <dt>EOF</dt>
     <dd><span>Parse error</span>. Emit the current DOCTYPE token.
     Reconsume the EOF character in the <span>data state</span>.</dd>

     <dt>Anything else</dt>
     <dd><span>Parse error</span>. Mark the DOCTYPE token as
     being in error, if it is not already. Switch to the <span>bogus
     DOCTYPE state</span>.</dd>

    </dl>

   </dd>

   <dt><dfn>Bogus DOCTYPE state</dfn></dt>

   <dd>

    <p>Consume the next input character:</p>

    <dl class="switch">

     <dt>U+003E GREATER-THAN SIGN (&gt;)</dt>
     <dd>Emit the current DOCTYPE token. Switch to the <span>data
     state</span>.</dd>

     <dt>EOF</dt>
     <dd><span>Parse error</span>. Emit the current DOCTYPE token.
     Reconsume the EOF character in the <span>data state</span>.</dd>

     <dt>Anything else</dt>
     <dd>Stay in the <span>bogus DOCTYPE state</span>.</dd>

    </dl>

   </dd>

  </dl>


  <h5>Tokenising entities</h5>

  <p>This section defines how to <dfn>consume an entity</dfn>. This
  definition is used when parsing entities <span title="entity data
  state">in text</span> and <span title="entity in attribute value
  state">in attributes</span>.</p>

  <p>The behaviour depends on the identity of the next character (the
  one immediately after the U+0026 AMPERSAND character):</p>

  <dl class="switch">

   <dt>U+0023 NUMBER SIGN (#)</dt>

   <dd>

    <p>Consume the U+0023 NUMBER SIGN.</p>

    <p>The behaviour further depends on the character after the U+0023
    NUMBER SIGN:</p>

    <dl class="switch">

     <dt>U+0078 LATIN SMALL LETTER X</dt>
     <dt>U+0058 LATIN CAPITAL LETTER X</dt>

     <dd>

      <p>Consume the X.</p>

      <p>Follow the steps below, but using the range of characters
      U+0030 DIGIT ZERO through to U+0039 DIGIT NINE, U+0061 LATIN
      SMALL LETTER A through to U+007A LATIN SMALL LETTER Z, and
      U+0041 LATIN CAPITAL LETTER A, through to U+005A LATIN CAPITAL
      LETTER Z (in other words, 0-9, A-Z, a-z).</p>

      <p>When it comes to interpreting the number, interpret it as a
      hexadecimal number.</p>

     </dd>


     <dt>Anything else</dt>

     <dd>

      <p>Follow the steps below, but using the range of characters
      U+0030 DIGIT ZERO through to U+0039 DIGIT NINE (i.e. just
      0-9).</p>

      <p>When it comes to interpreting the number, interpret it as a
      decimal number.</p>

     </dd>

    </dl>

    <p>Consume as many characters as match the range of characters
    given above.</p>

    <p>If no characters match the range, then don't consume any
    characters (and unconsume the U+0023 NUMBER SIGN character and, if
    appropriate, the X character). This is a <span>parse
    error</span>; nothing is returned.</p>

    <p>Otherwise, if the next character is a U+003B SEMICOLON, consume
    that too. If it isn't, there is a <span>parse
    error</span>.</p>

    <p>If one or more characters match the range, then take them all
    and interpret the string of characters as a number (either
    hexadecimal or decimal as appropriate), and return a character
    token for the Unicode character whose codepoint is that number. If
    the number is not a valid Unicode character (e.g. if the number is
    higher than 1114111), or if the number is zero, then return a
    character token for the U+FFFD REPLACEMENT CHARACTER character
    instead.</p>

   </dd>

   <dt>Anything else</dt>

   <dd>

    <p>Consume the maximum number of characters possible, with the
    consumed characters case-sensitively matching one of the
    identifiers in the first column of the <span>entities</span>
    table.</p>

    <p>If no match can be made, then this is a <span>parse
    error</span>. No characters are consumed, and nothing is
    returned.</p>

    <p>Otherwise, if the next character is a U+003B SEMICOLON, consume
    that too. If it isn't, there is a <span>parse
    error</span>.</p>

    <p>Return a character token for the character corresponding to the
    entity name (as given by the second column of the
    <span>entities</span> table).</p>

   </dd>

  </dl>

  <p>When an end tag token is emitted, the <span>content model
  flag</span> must be switched to the PCDATA state.</p>

  <p>When an end tag token is emitted with attributes, that is a
  <span>parse error</span>.</p>


  <h4><dfn>Tree construction</dfn></h4>

  <p>The input to the tree construction stage is a sequence of tokens
  from the <span>tokenisation</span> stage. The tree construction
  stage must create a DOM <code>Document</code> object immediately
  upon being invoked. This is the only formal "output" of this stage;
  most of the real "output" consists of dynamically modifying or
  extending that document's DOM tree.</p>

  <p>The <code>Document</code> object must initially have null <code
  title="">doctype</code> and <code title="">documentElement</code>
  attributes, and its other attributes must be set such that the
  implementation is in conformance with DOM3 Core. <a
  href="#refsDOM3CORE">[DOM3CORE]</a></p>

  <p>Tree construction passes through several phases. Initially, UAs
  must act according to the steps described as being those of
  <span>the initial phase</span>.</p>

  <p>This specification does not define when an interactive user agent
  has to render the <code>Document</code> available to the user, or
  when it has to begin accepting user input.</p>

  <p>When the steps below require the UA to <dfn>append a
  character</dfn> to a node, the UA must collect it and all subsequent
  consecutive characters that would be appended to that node, and
  insert one <code>Text</code> node whose data is the concatenation of
  all those characters.</p>

  <p id="mutation-during-parsing">DOM mutation events must not fire
  for changes caused by the UA parsing the document. (Conceptually,
  the parser is not mutating the DOM, it is constructing it.) This
  includes the parsing of any content inserted using
  <code>document.write()</code> and <code>document.writeln()</code>
  calls.<!-- XXX xref --> <a
  href="#refsDOM3Events">[DOM3EVENTS]</a></p>

  <p class="note">Not all of the tag names mentioned below are
  conformant tag names in this specification; many are included to
  handle legacy content. They still form part of the algorithm that
  implementations are required to implement to claim conformance.</p>

  <p class="note">The algorithm described below places no limit on the
  depth of the DOM tree generated, or on the length of tag names,
  attribute names, attribute values, text nodes, etc. While
  implementators are encouraged to avoid arbitrary limits, it is
  recognised that <a href="#hardwareLimitations">practical
  concerns</a> will likely force user agents to impose nesting
  depths.</p>

  <h5><dfn>The initial phase</dfn></h5>

  <p>Initially, the tree construction phase must handle each token
  emitted from the <span>tokenisation</span> stage as follows:</p>

  <dl class="switch">

   <dt>A DOCTYPE token that is marked as being in error</dt>
   <dt>A comment token</dt>
   <dt>A start tag token</dt>
   <dt>An end tag token</dt>
   <dt>A character token that is not one of one of U+0009 CHARACTER
   TABULATION, U+000A LINE FEED (LF), U+000B LINE TABULATION, U+000C
   FORM FEED (FF), or U+0020 SPACE</dt>
   <dt>An end-of-file token</dt>

   <dd>

    <p>This specification does not define how to handle this case. In
    particular, user agents may ignore the entirety of this
    specification altogether for such documents, and instead invoke
    special parse modes with a greater emphasis on backwards
    compatibility.</p>

    <div class="note">
     <p>Browsers in particular have generally used DOCTYPE-based
     sniffing to invoke an "alternative conformance mode" known as
     <em>quirks mode</em> on certain documents. In this mode, emphasis
     is put on legacy compatibility rather than on standards
     compliance. This specification takes no position on this
     behaviour; documents without DOCTYPEs or with DOCTYPEs that do
     not conform to the syntax allowed by this specification are
     considered to be out of scope of this specification.</p>
    </div>

    <div class="big-issue">

     <p>As far as parsing goes, the quirks I know of are:</p>

     <ul>

      <li>Comment parsing is different.</li>

      <li>The following is considered one script block (!):
       <pre>&lt;script>&lt;!-- document.write('&lt;/script>'); -->&lt;/script></pre>
      </li>

      <li><code>&lt;/br></code> and <code>&lt;/p></code> do magical
      things.</li>

      <li><code>p</code> can contain <code>table</code></li>

      <li>Safari and IE have special parsing rules for &lt;% ... %&gt;
      (even in standards mode, though clearly this should be
      quirks-only).</li>

     </ul>

     <p>Maybe we should just adopt all those and be done with it. One
     parsing mode to rule them all. Or legitimise/codify the quirks
     mode parsing in some way.</p>

     <p>Would be interesting to do a search to see how many pages hit
     each of the above.</p> <!-- biased by page rank? -->

    </div>

   </dd>


   <dt>A DOCTYPE token marked as being correct</dt>
   <dd>

    <p>Append a <code>DocumentType</code> node to the
    <code>Document</code> node, with the <code title="">name</code>
    attribute set to the name given in the DOCTYPE token (which will
    be "HTML"), and the other attributes specific to
    <code>DocumentType</code> objects set to null, empty lists, or the
    empty string as appropriate.</p>

    <p>Then, switch to <span>the root element phase</span> of the tree
    construction stage.</p>

    <!-- XXX should set doctype on the Document object, too, unless
    spec is defined to already point to it if you append -->

   </dd>

   <dt>A character token that <em>is</em> one of one of U+0009
   CHARACTER TABULATION, U+000A LINE FEED (LF), U+000B LINE
   TABULATION, U+000C FORM FEED (FF), or U+0020 SPACE</dt>
   <dd>
    <p><span title="append a character">Append that character</span>
    to the <code>Document</code> node.</p>
   </dd>

  </dl>


  <h5><dfn>The root element phase</dfn></h5>

  <p>After <span>the initial phase</span>, as each token is emitted
  from the <span>tokenisation</span> stage, it must be processed as
  described in this section.</p>

  <dl class="switch">

   <dt>A DOCTYPE token</dt>
   <dd>
    <p><span>Parse error</span>. Ignore the token.</p>
   </dd>

   <dt>A comment token</dt>
   <dd>
    <p>Append a <code>Comment</code> node to the <code>Document</code>
    object with the <code title="">data</code> attribute set to the
    data given in the comment token.</p>
   </dd>

   <dt>A character token that is one of one of U+0009 CHARACTER
   TABULATION, U+000A LINE FEED (LF), U+000B LINE TABULATION, U+000C
   FORM FEED (FF), or U+0020 SPACE</dt>
   <dd>
    <p><span title="append a character">Append that character</span>
    to the <code>Document</code> node.</p>
   </dd>

   <dt>A character token that is <em>not</em> one of U+0009 CHARACTER
   TABULATION, U+000A LINE FEED (LF), U+000B LINE TABULATION, U+000C
   FORM FEED (FF), or U+0020 SPACE</dt>
   <dt>A start tag token</dt>
   <dt>An end tag token</dt>
   <dt>An end-of-file token</dt>
   <dd>
    <p>Create an <code>HTMLElement</code> node with the tag name
    <code>html</code>, in the <span>HTML namespace</span>. Append it
    to the <code>Document</code> object. Switch to <span>the main
    phase</span> and reprocess the current token.</p>
   </dd>

  </dl>

  <p>The root element can end up being removed from the
  <code>Document</code> object, e.g. by scripts; nothing in particular
  happens in such cases, content continues being appended to the nodes
  as described in the next section.</p>


  <h5><dfn>The main phase</dfn></h5>

  <p>After <span>the root element phase</span>, each token emitted
  from the <span>tokenisation</span> stage must be processed as
  described in <em>this</em> section. This is by far the most involved
  part of parsing an HTML document.</p>

  <p>The tree construction stage in this phase has several pieces of
  state: a <span>stack of open elements</span>, a <span>list of active
  formatting elements</span>, a <span><code title="">head</code>
  element pointer</span>, a <span><code title="">form</code> element
  pointer</span>, and an <span>insertion mode</span>.</p>


  <h6>The stack of open elements</h6>

  <p>Initially the <dfn>stack of open elements</dfn> contains just the
  <code>html</code> root element node created in the <span title="the
  root element phase">last phase</span> before switching to
  <em>this</em> phase. That's the topmost node of the stack. It never
  gets popped off the stack. (This stack grows downwards.)</p>

  <p>The <dfn>current node</dfn> is the bottommost node in this
  stack.</p>

  <p>Elements in the stack fall into the following categories:</p>

  <dl>

   <dt><dfn>Special</dfn></dt>
   <dd><p>The following HTML elements have varying levels of special
   parsing rules: <code>address</code>, <code>area</code>,
   <code>base</code>, <code>basefont</code>, <code>bgsound</code>,
   <code>blockquote</code>, <code>body</code>, <code>br</code>,
   <code>center</code>, <code>col</code>, <code>colgroup</code>,
   <code>dd</code>, <code>dir</code>, <code>div</code>,
   <code>dl</code>, <code>dt</code>, <code>embed</code>,
   <code>fieldset</code>, <code>form</code>, <code>frame</code>,
   <code>frameset</code>, <code>h1</code>, <code>h2</code>,
   <code>h3</code>, <code>h4</code>, <code>h5</code>, <code>h6</code>,
   <code>head</code>, <code>hr</code>, <code>iframe</code>,
   <code>image</code>, <code>img</code>, <code>input</code>,
   <code>isindex</code>, <code>li</code>, <code>link</code>,
   <code>listing</code>, <code>menu</code>, <code>meta</code>,
   <code>noembed</code>, <code>noframes</code>, <code>noframes</code>,
   <code>noscript</code>, <code>ol</code>, <code>optgroup</code>,
   <code>option</code>, <code>p</code>, <code>param</code>,
   <code>plaintext</code>, <code>pre</code>, <code>script</code>,
   <code>select</code>, <code>spacer</code>, <code>style</code>,
   <code>tbody</code>, <code>textarea</code>, <code>tfoot</code>,
   <code>thead</code>, <code>title</code>, <code>tr</code>, and
   <code>ul</code>.</p></dd>

   <dt><dfn>Scoping</dfn></dt>
   <dd><p>The following HTML elements introduce new <span title="has
   an element in scope">scopes</span> for various parts of the
   parsing: <code>button</code>, <code>caption</code>,
   <code>html</code>, <code>marquee</code>, <code>object</code>,
   <code>table</code>, <code>td</code> and <code>th</code>.</p></dd>

   <dt><dfn>Formatting</dfn></dt>
   <dd><p>The following HTML elements are those that end up in the
   <span>list of active formatting elements</span>: <code>a</code>,
   <code>b</code>, <code>big</code>, <code>em</code>,
   <code>font</code>, <code>i</code>, <code>nobr</code>,
   <code>s</code>, <code>small</code>, <code>strike</code>,
   <code>strong</code>, <code>tt</code>, <code>u</code>, and
   <code>wbr</code>.</p></dd>

   <dt><dfn>Phrasing</dfn></dt>
   <dd><p>All other elements found while parsing an HTML
   document.</p></dd>

  </dl>

  <p class="big-issue">Still need to add these new elements to the
  lists: <code>event-source</code>, <code>section</code>,
  <code>nav</code>, <code>article</code>, <code>aside</code>,
  <code>header</code>, <code>footer</code>, <code>datagrid</code>,
  <code>command</code></p>

  <p>The <span>stack of open elements</span> is said to <dfn
  title="has an element in scope">have an element in scope</dfn> or
  <dfn title="has an element in table scope">have an element in
  <em>table scope</em></dfn> when the following algorithm terminates
  in a match state:</p>

  <ol>

   <li><p>Initialise <var title="">node</var> to be the <span>current
   node</span> (the bottommost node of the stack).</p></li>

   <li><p>If <var title="">node</var> is the target node, terminate in a match
   state.</p></li>

   <li><p>Otherwise, if <var title="">node</var> is a <code>table</code>
   element, terminate in a failure state.</p></li>

   <li><p>Otherwise, if the algorithm is the "has an element in scope"
   variant (rather than the "has an element in table scope" variant),
   and <var title="">node</var> is one of the following, terminate in a failure
   state:</p>
    <ul class="brief">
     <li><code>caption</code></li>
     <li><code>td</code></li>
     <li><code>th</code></li>
     <li><code>button</code></li>
     <li><code>marquee</code></li>
     <li><code>object</code></li>
    </ul>
   </li>

   <li><p>Otherwise, if <var title="">node</var> is an <code>html</code>
   element, terminate in a failure state. (This can only happen if the
   <var title="">node</var> is the topmost node of the <span>stack of open
   elements</span>, and prevents the next step from being invoked if
   there are no more elements in the stack.)</p></li>

   <li><p>Otherwise, set <var title="">node</var> to the previous entry in the
   <span>stack of open elements</span> and return to step 2. (This
   will never fail, since the loop will always terminate in the
   previous step if the top of the stack is reached.)</p></li>

  </ol>

  <p>Nothing happens if at any time any of the elements in the
  <span>stack of open elements</span> is moved to a new location in,
  or removed from, the <code>Document</code> tree. In particular, the
  stack is not changed in this situation. This can cause, amongst
  other strange effects, content to be appended to nodes that are no
  longer in the DOM.</p>

  <p class="note">In some cases (namely, when <a
  href="#adoptionAgency">closing misnested formatting elements</a>),
  the stack is manipulated in a random-access fashion.</p>


  <h6>The list of active formatting elements</h6>

  <p>Initially the <dfn>list of active formatting elements</dfn> is
  empty. It is used to handle mis-nested <span
  title="formatting">formatting element tags</span>.</p>

  <p>The list contains elements in the <span>formatting</span>
  category, and scope markers. The scope markers are inserted when
  entering buttons, <code>object</code> elements, marquees, table
  cells, and table captions, and are used to prevent formatting from
  "leaking" into tables, buttons, <code>object</code> elements, and
  marquees.</p>

  <p>When the steps below require the UA to <dfn>reconstruct the
  active formatting elements</dfn>, the UA must perform the following
  steps:</p>

  <ol>

   <li>If the last (most recently added) entry in the <span>list of
   active formatting elements</span> is a marker, or if it is an
   element that is in the <span>stack of open elements</span>, then
   there is nothing to reconstruct; stop this algorithm.</li>

   <li>Let <var title="">entry</var> be the last (most recently added) element
   in the <span>list of active formatting elements</span>.</li>

   <li>Let <var title="">entry</var> be the entry one earlier than
   <var title="">entry</var> in the <span>list of active formatting
   elements</span>.</li>

   <li>If <var title="">entry</var> is neither a marker nor an element that is
   also in the <span>stack of open elements</span>, go to step 3.</li>

   <li>Let <var title="">entry</var> be the element one later than
   <var title="">entry</var> in the <span>list of active formatting
   elements</span>.</li>

   <li>Perform a shallow clone of the element <var title="">entry</var> to
   obtain <var title="">clone</var>. <a
   href="#refsDOM3CORE">[DOM3CORE]</a></li>

   <li>Append <var title="">clone</var> to the <span>current node</span> and
   push it onto the <span>stack of open elements</span> so that it is
   the new <span>current node</span>.</li>

   <li>Replace the entry for <var title="">entry</var> in the list with an
   entry for <var title="">clone</var>.</li>

   <li>If the entry for <var title="">clone</var> in the <span>list of active
   formatting elements</span> is not the last entry in the list,
   return to step 5.</li>

  </ol>

  <p>This has the effect of reopening all the formatting elements that
  were opened in the current body, cell, or caption (whichever is
  youngest) that haven't been explicitly closed.</p>

  <p class="note">The way this specification is written, the
  <span>list of active formatting elements</span> always consists of
  elements in chronological order with the least recently added
  element first and the most recently added element last (except for
  while steps 5 to 9 of the above algorithm are being executed, of
  course).</p>

  <p>When the steps below require the UA to <dfn>clear the list of
  active formatting elements up to the last marker</dfn>, the UA must
  perform the following steps:</p>

  <ol>

   <li>Let <var title="">entry</var> be the last (most recently added) entry in
   the <span>list of active formatting elements</span>.</li>

   <li>Remove <var title="">entry</var> from the <span>list of active
   formatting elements</span>.</li>

   <li>If <var title="">entry</var> was a marker, then stop the algorithm at
   this point. The list has been cleared up to the last marker.</li>

   <li>Go to step 1.</li>

  </ol>


  <h6>Inserting HTML elements</h6>

  <p>When the steps below require the UA to <dfn>insert an HTML
  element</dfn> for a token, the UA must create a node implementing
  the interface appropriate for that element type (as given in the
  section of this specification that defines that element, e.g. for an
  <code>a</code> element it would be the
  <code>HTMLAnchorElement</code> interface), with the tag name being
  the name of that element, with the node being in the <span>HTML
  namespace</span>, and with the attributes on the node being those
  given in the given token. The UA must then append this node to the
  <span>current node</span>, and push it onto the <span>stack of open
  elements</span> so that it is the new <span>current node</span>.</p>

  <p>The steps below may also require that the UA insert an HTML
  element in a particular place, in which case all the steps described
  in the previous paragraph must be followed with the exception that
  instead of appending the new node to the <span>current node</span>, the UA must
  insert or append the new node in the location specified. (This
  happens in particular during the parsing of tables with invalid
  content.)</p>

  <p>The interface appropriate for an element that is not defined in
  this specification is <code>HTMLElement</code>.</p>


  <h6>Closing elements that have implied end tags</h6>

  <p>When the steps below require the UA to <dfn>generate implied end
  tags</dfn>, then, if the <span>current node</span> is a
  <code>dd</code> element, a <code>dt</code> element, an
  <code>li</code> element, a <code>p</code> element, a <code>td</code>
  element, a <code>th</code> element, or a <code>tr</code> element,
  the UA must act as if an end tag with the respective tag name had
  been seen and then <span>generate implied end tags</span> again.</p>

  <p>The step that requires the UA to generate implied end tags but
  lists an element to exclude from the process, then the UA must
  perform the above steps as if that element was not in the list.</p>


  <h6>The element pointers</h6>

  <p>Initially the <dfn><code title="">head</code> element
  pointer</dfn> and the <dfn><code title="">form</code> element
  pointer</dfn> are both null.</p>

  <p>Once a <code>head</code> element has been parsed (whether
  implicitly or explicitly) the <span><code title="">head</code>
  element pointer</span> gets set to point to this node.</p>

  <p>The <span><code title="">form</code> element pointer</span>
  points to the last <code>form</code> element that was opened and
  whose end tag has not yet been seen. It is used to make form
  controls associate with forms in the face of dramatically bad
  markup, for historical reasons.</p>


  <h6>The insertion mode</h6>

  <p>Initially the <dfn>insertion mode</dfn> is "before head". It can
  change to "in head", "after head", "in body", "in table", "in
  caption", "in column group", "in table body", "in row", "in cell",
  "in select", "after body", "in frameset", and "after frameset"
  during the course of the parsing, as described below. It affects how
  certain tokens are processed.</p>

  <p>If the tree construction stage is switched from <span>the main
  phase</span> to <span>the trailing end phase</span> and back again,
  the various pieces of state are not reset; the UA must act as if the
  state was maintained.</p>

  <p>When the steps below require the UA to <dfn>reset the insertion
  mode appropriately</dfn>, it means the UA must follow these
  steps:</p>

  <ol>

   <li><p>If the <span>stack of open elements</span> <span title="has
   an element in table scope">has a <code>td</code> or
   <code>th</code> element in table scope</span>, then switch the
   <span>insertion mode</span> to "in cell".</p></li>

   <li><p>Otherwise, if the <span>stack of open elements</span> <span
   title="has an element in table scope">has a <code>tr</code>
   element in table scope</span>, then switch the <span>insertion
   mode</span> to "in row".</p></li>

   <li><p>Otherwise, if the <span>stack of open elements</span> <span
   title="has an element in table scope">has a
   <code>tbody</code>, <code>tfoot</code>, or <code>thead</code>
   element in table scope</span>, then switch the <span>insertion
   mode</span> to "in table body".</p></li>

   <li><p>Otherwise, if the <span>stack of open elements</span> <span
   title="has an element in table scope">has a
   <code>caption</code> element in table scope</span>, then
   switch the <span>insertion mode</span> to "in caption".</p></li>

   <!-- you can't reach this point with a colgroup element on the
   stack -->

   <li><p>Otherwise, if the <span>stack of open elements</span> <span
   title="has an element in table scope">has a <code>table</code>
   element in table scope</span>, then switch the <span>insertion
   mode</span> to "in table".</p></li>

   <li><p>Otherwise, switch the <span>insertion mode</span> to "in
   body".</p></li>

  </ol>


  <h6>How to handle tokens in the main phase</h6>

  <p>Tokens in the main phase must be handled as follows:</p>

  <dl class="switch">

   <dt>A DOCTYPE token</dt>
   <dd>
    <p><span>Parse error</span>. Ignore the token.</p>
   </dd>

   <dt>A start tag token with the tag name "html"</dt>
   <dd>
    <p>If this start tag token was not the first start tag token, then
    it is a <span>parse error</span>.</p>
    <p>For each attribute on the token, check to see if the attribute
    is already present on the top element of the <span>stack of open
    elements</span>. If it is not, add the attribute and its
    corresponding value to that element.</p>
   </dd>

   <dt>Anything else</dt>
   <dd>

    <p>Depends on the <span>insertion mode</span>:</p>

    <dl class="switch">

     <dt>If the <span>insertion mode</span> is "before head"</dt>
     <dd>

      <p>Handle the token as follows:</p>

      <dl class="switch">

       <dt>A character token that is one of one of U+0009
       CHARACTER TABULATION, U+000A LINE FEED (LF), U+000B LINE
       TABULATION, U+000C FORM FEED (FF), or U+0020 SPACE</dt>
       <dd>
        <p><span title="append a character">Append the character</span> to
        the <span>current node</span>.</p>
       </dd>

       <dt>A comment token</dt>
       <dd>
        <p>Append a <code>Comment</code> node to the <span>current
        node</span> with the <code title="">data</code> attribute set to
        the data given in the comment token.</p>
       </dd>

       <dt>A start tag token with the tag name "head"</dt>
       <dd>

        <p>Create a new <code>HTMLHeadElement</code> node with the tag
        name "head", in the <span>HTML namespace</span>, with the same
        attributes as on the token.</p>

        <p>Set the <span><code title="">head</code> element
        pointer</span> to this new element node.</p>

        <p>Append the new element to the <span>current node</span> and
        push it onto the <span>stack of open elements</span>.</p>

        <p>Change the <span>insertion mode</span> to "in head".</p>

       </dd>

       <dt>A start tag token whose tag name is one of: "base", "link",
       "meta", "script", "style", "title"</dt>

       <dd>

        <p>Act as if a start tag token with the tag name "head" and no
        attributes had been seen, then reprocess the current
        token.</p>

        <p class="note">This will result in a <code>head</code>
        element being generated, and with the current token being
        reprocessed in the "in head" <span>insertion mode</span>.</p>

       </dd>

       <dt>An end tag with the tag name "html"</dt>
       <dd>

        <p>Act as if a start tag token with the tag name "head" and no
        attributes had been seen, then reprocess the current
        token.</p>

       </dd>

       <dt>Any other end tag</dt>
       <dd>
        <p><span>Parse error</span>. Ignore the token.</p>
       </dd>

       <dt>Anything else</dt>
       <dd>

        <p>Act as if a start tag token with the tag name "head" and no
        attributes had been seen, then reprocess the current
        token.</p>

        <p class="note">This will result in an empty <code>head</code>
        element being generated, with the current token being reprocessed in the
        "after head" <span>insertion mode</span>.</p>

       </dd>

      </dl>

     </dd>


     <dt id="parsing-main-inhead">If the <span>insertion mode</span> is "in head"</dt>
     <dd>

      <p>Handle the token as follows.</p>

      <p class="note">The rules for handling "title", "style", and
      "script" start tags are similar, but not identical.</p>

      <dl class="switch">

       <dt>A character token that is one of one of U+0009
       CHARACTER TABULATION, U+000A LINE FEED (LF), U+000B LINE
       TABULATION, U+000C FORM FEED (FF), or U+0020 SPACE</dt>
       <dd>
        <p><span title="append a character">Append the character</span> to
        the <span>current node</span>.</p>
       </dd>

       <dt>A comment token</dt>
       <dd>
        <p>Append a <code>Comment</code> node to the <span>current
        node</span> with the <code title="">data</code> attribute set to
        the data given in the comment token.</p>
       </dd>

       <dt>A start tag with the tag name "title"</dt>
       <dd>

        <p>Create a new <code>HTMLElement</code> node with the tag
        name "title", in the <span>HTML namespace</span>, with the
        same attributes as on the token.</p>

        <p>Append the new element to the node pointed to by the
        <span><code title="">head</code> element pointer</span>.</p>

        <p>Switch the tokeniser's <span>content model flag</span> to
        the RCDATA state.</p>

        <p>Then, collect all the characters tokens that the tokeniser
        returns until it returns a token that is not a character
        token.</p>

        <p>If this process resulted in a collection of character
        tokens, append a single <code>Text</code> node to the
        <code>title</code> element node whose contents is the
        concatenation of all those tokens' characters.</p>

        <p>The tokeniser's <span>content model flag</span> will have
        switched back to the PCDATA state.</p>

        <p>If the next token is an end tag token with the tag name
        "title", ignore it. Otherwise, this is a <span>parse error</span>.</p>

       </dd>

       <dt>A start tag with the tag name "style"</dt>
       <dd>

        <p>Create a new <code>HTMLStyleElement</code> node with the
        tag name "style", in the <span>HTML namespace</span>, with the
        same attributes as on the token.</p>

        <p>Append the new element to the node pointed to by the
        <span><code title="">head</code> element pointer</span>.</p>

        <p>Switch the tokeniser's <span>content model flag</span> to
        the CDATA state.</p>

        <p>Then, collect all the characters tokens that the tokeniser
        returns until it returns a token that is not a character
        token, or until it stops tokenising.</p>

        <p>If this process resulted in a collection of character
        tokens, append a single <code>Text</code> node to the
        <code>style</code> element node whose contents is the
        concatenation of all those tokens' characters.</p>

        <p>The tokeniser's <span>content model flag</span> will have
        switched back to the PCDATA state.</p>

        <p>If the next token is an end tag token with the tag name
        "style", ignore it. Otherwise, this is a <span>parse error</span>.</p>

       </dd>

       <dt>A start tag with the tag name "script"</dt>
       <dd>

        <p>Create a new <code>HTMLScriptElement</code> node with the
        tag name "script", in the <span>HTML namespace</span>, with
        the same attributes as on the token.</p>

        <p>Switch the tokeniser's <span>content model flag</span> to
        the CDATA state.</p>

        <p>Then, collect all the characters tokens that the tokeniser
        returns until it returns a token that is not a character
        token, or until it stops tokenising.</p>

        <p>If this process resulted in a collection of character
        tokens, append a single <code>Text</code> node to the
        <code>script</code> element node whose contents is the
        concatenation of all those tokens' characters.</p>

        <p>The tokeniser's <span>content model flag</span> will have
        switched back to the PCDATA state.</p>

        <p>If the next token is not an end tag token with the tag name
        "script", then this is a <span>parse error</span>; mark the
        <code>script</code> element as <span>"already
        executed"</span>. Otherwise, the token is the
        <code>script</code> element's end tag, so ignore it. (Marking
        the <code>script</code> element as "already executed" prevents
        it from executing when it is inserted into the document in the
        next paragraph.)</p>

        <p>Append the new element to the <span>current node</span>,
        unless the <span>insertion mode</span> is "in head", in which
        case append it to the node pointed to by the <span><code
        title="">head</code> element pointer</span>. <!--
        <head></head><script><body> should put the script in the head,
        and does so by switching back to in head, but the head isn't
        the current node at that point (comments should go between the
        head and the body) --> This might cause some script to
        execute,<!-- XXX xref! --> and might cause new characters to
        be inserted into the tokeniser<!-- XXX xref -->.</p>

       </dd>

       <dt>A start tag with the tag name "base", "link", or "meta"</dt>
       <dd>

        <p>Create a new <code>HTMLBaseElement</code>,
        <code>HTMLLinkElement</code>, or <code>HTMLMetaElement</code>
        node (respectively) with the tag name "base", "link", or
        "meta" (respectively), in the <span>HTML namespace</span>,
        with the same attributes as on the token.</p>

        <p>Append the new element to the node pointed to by the
        <span><code title="">head</code> element pointer</span>.</p>

        <p class="big-issue">Need to cope with second and subsequent
        <code>base</code> elements affecting subsequent elements
        magically.</p>

       </dd>

       <dt>An end tag with the tag name "head"</dt>
       <dd>

        <p>If the <span>current node</span> is a <code>head</code>
        element, pop the <span>current node</span> off the <span>stack of open
        elements</span>. Otherwise, this is a <span>parse
        error</span>.</p>

        <p>Change the <span>insertion mode</span> to "after head".</p>

       </dd>

       <dt>An end tag with the tag name "html"</dt>
       <dd>

        <p>Act as described in the "anything else" entry below.</p>

       </dd>

       <dt>A start tag with the tag name "head"</dt>
       <dt>Any other end tag</dt>
       <dd>
        <p><span>Parse error</span>. Ignore the token.</p>
       </dd>

       <dt>Anything else</dt>
       <dd>

        <p>If the <span>current node</span> is a <code>head</code>
        element, act as if an end tag token with the tag name "head" had
        been seen.</p>

        <p>Otherwise, change the <span>insertion mode</span> to "after
        head".</p>

        <p>Then, reprocess the current token.</p>

<!-- XXXXXXX
 https://bugzilla.mozilla.org/attachment.cgi?id=180157&action=view -->


       </dd>

      </dl>

     </dd>


     <dt>If the <span>insertion mode</span> is "after head"</dt>
     <dd>

      <p>Handle the token as follows:</p>

      <dl class="switch">

       <dt>A character token that is one of one of U+0009
       CHARACTER TABULATION, U+000A LINE FEED (LF), U+000B LINE
       TABULATION, U+000C FORM FEED (FF), or U+0020 SPACE</dt>
       <dd>
        <p><span title="append a character">Append the character</span> to
        the <span>current node</span>.</p>
       </dd>

       <dt>A comment token</dt>
       <dd>
        <p>Append a <code>Comment</code> node to the <span>current
        node</span> with the <code title="">data</code> attribute set to
        the data given in the comment token.</p>
       </dd>

       <dt>A start tag token with the tag name "body"</dt>
       <dd>

        <p><span title="insert an HTML element">Insert a
        <code>body</code> element</span> for the token.</p>

        <p>Change the <span>insertion mode</span> to "in body".</p>

       </dd>

       <dt>A start tag token with the tag name "frameset"</dt>
       <dd>

        <p><span title="insert an HTML element">Insert a
        <code>frameset</code> element</span> for the token.</p>

        <p>Change the <span>insertion mode</span> to "in frameset".</p>

       </dd>

       <dt>A start tag token whose tag name is one of: "base", "link",
       "meta", "script", "style", "title"</dt>
       <dd>
        <p><span>Parse error</span>. Switch the <span>insertion
        mode</span> back to "in head" and reprocess the token.</p>
       </dd>

       <dt>Anything else</dt>
       <dd>
        <p>Act as if a start tag token with the tag name "body" and no
        attributes had been seen, and then reprocess the current
        token.</p>
       </dd>
      
      </dl>

     </dd>


     <dt id="parsing-main-inbody">If the <span>insertion mode</span> is "in body"</dt>
     <dd>

      <p>Handle the token as follows:</p>

      <dl class="switch">

       <dt>A character token</dt>
       <dd>

        <p><span>Reconstruct the active formatting elements</span>, if
        any.</p>

        <p><span title="append a character">Append the token's
        character</span> to the <span>current node</span>.</p>

       </dd>

       <dt>A comment token</dt>
       <dd>
        <p>Append a <code>Comment</code> node to the <span>current
        node</span> with the <code title="">data</code> attribute set to
        the data given in the comment token.</p>
       </dd>

       <dt>A start tag token whose tag name is "script"</dt>
       <dd>
        <p>Process the token as if the <span>insertion mode</span> had
        been "in head".</p>
       </dd>

       <dt>A start tag token whose tag name is one of: "base", "link",
       "meta", "style", "title"</dt>
       <dd>
        <p><span>Parse error</span>. Process the token as if the
        <span>insertion mode</span> had been "in head".</p>
       </dd>

       <dt>A start tag token with the tag name "body"</dt>
       <dd>
        <p><span>Parse error</span>.</p>
        <p>For each attribute on the token, check to see if the
        attribute is already present on the <code>body</code> element
        (the second element) on the <span>stack of open
        elements</span>. If it is not, add the attribute and its
        corresponding value to that element.</p>
       </dd>

       <dt>An end tag with the tag name "body"</dt>
       <dd>
        <p><span>Generate implied end tags.</span></p>
        <p>If the <span>current node</span> is not the
        <code>body</code> element, then this is a <span>parse
        error</span>.</p>
        <p>Change the <span>insertion mode</span> to "after body".</p>
       </dd>

       <dt>An end tag with the tag name "html"</dt>
       <dt>An end-of-file token</dt>
       <dd>
        <p>Act as if an end tag with tag name "body" had been seen,
        then reprocess the end-of-file token.</p>
       </dd>

       <dt>A start tag whose tag name is one of: "address",
       "blockquote", "center", "dir", "div", "dl", "fieldset", "h1",
       "h2", "h3", "h4", "h5", "h6", "listing", "menu", "ol", "p",
       "pre", "ul"</dt>
       <dd>

 <p class="big-issue">Need to make &lt;hx> close open Hx elements</p>

        <p>If the <span>stack of open elements</span> <span title="has
        an element in scope">has a <code>p</code> element in
        scope</span>, then act as if an end tag with the tag name
        <code>p</code> had been seen.</p>

        <p><span title="insert an html element">Insert an HTML
        element</span> for the token.</p>

       </dd>

       <dt>A start tag whose tag name is "form"</dt>
       <dd>

        <p>If the <span><code title="form">form</code> element
        pointer</span> is not null, ignore the token with a
        <span>parse error</span>.</p>

        <p>Otherwise:</p>

        <p>If the <span>stack of open elements</span> <span title="has
        an element in scope">has a <code>p</code> element in
        scope</span>, then act as if an end tag with the tag name
        <code>p</code> had been seen.</p>

        <p><span title="insert an html Element">Insert an HTML
        element</span> for the token, and set the <code
        title="form">form</code> element pointer to point to the
        element created.</p>

       </dd>

       <dt>A start tag whose tag name is "li"</dt>
       <dd>

        <p>If the <span>stack of open elements</span> <span title="has
        an element in scope">has a <code>p</code> element in
        scope</span>, then act as if an end tag with the tag name
        <code>p</code> had been seen.</p>

        <p>Run the following algorithm:</p>

        <ol>

         <li><p>Initialise <var title="">node</var> to be the <span>current
         node</span> (the bottommost node of the stack).</p></li>

         <li><p>If <var title="">node</var> is an <code>li</code> element, then
         pop all the nodes from the <span>current node</span> up to
         <var title="">node</var>, including <var title="">node</var>, then stop this
         algorithm.</p></li>

         <li><p>If <var title="">node</var> is not in the
         <span>formatting</span> category, and is not in the
         <span>phrasing</span> category, and is not an
         <code>address</code> or <code>div</code> element, then stop
         this algorithm.</p></li> <!-- an element <foo> is in this
         list if the following markup:

             <!DOCTYPE html><body><ol><li><foo><li>

         ...results in the second <li> not being (in any way) a
         descendant of the first <li>, or if <foo> is a formatting
         element that gets reopened later. -->

         <li><p>Otherwise, set <var title="">node</var> to the previous entry
         in the <span>stack of open elements</span> and return to step
         2.</p></li>

        </ol>

        <p>Finally, <span title="insert an html element">insert an
        <code>li</code> element</span>.</p>

       </dd>

       <dt>A start tag whose tag name is "dd" or "dt"</dt>
       <dd>

        <p>If the <span>stack of open elements</span> <span title="has
        an element in scope">has a <code>p</code> element in
        scope</span>, then act as if an end tag with the tag name
        <code>p</code> had been seen.</p>

        <p>Run the following algorithm:</p>

        <ol>

         <li><p>Initialise <var title="">node</var> to be the <span>current
         node</span> (the bottommost node of the stack).</p></li>

         <li><p>If <var title="">node</var> is a <code>dd</code> or
         <code>dt</code> element, then pop all the nodes from the
         <span>current node</span> up to <var title="">node</var>, including
         <var title="">node</var>, then stop this algorithm.</p></li>

         <li><p>If <var title="">node</var> is not in the
         <span>formatting</span> category, and is not in the
         <span>phrasing</span> category, and is not an
         <code>address</code> or <code>div</code> element, then stop
         this algorithm.</p></li> <!-- an element <foo> is in this
         list if the following markup:

             <!DOCTYPE html><body><ol><dt><foo><dt>

         ...results in the second <li> not being (in any way) a
         descendant of the first <li>, or if <foo> is a formatting
         element that gets reopened later. -->

         <li><p>Otherwise, set <var title="">node</var> to the previous entry
         in the <span>stack of open elements</span> and return to step
         2.</p></li>

        </ol>

        <p>Finally, <span title="insert an html element">insert an
        HTML element</span> with the same tag name as the token's.</p>

       </dd>

       <dt>A start tag token whose tag name is "plaintext"</dt>
       <dd>

        <p>If the <span>stack of open elements</span> <span title="has
        an element in scope">has a <code>p</code> element in
        scope</span>, then act as if an end tag with the tag name
        <code>p</code> had been seen.</p>

        <p><span title="insert an html element">Insert an HTML
        element</span> for the token.</p>

        <p>Switch the <span>content model flag</span> to the PLAINTEXT
        state.</p>

        <p class="note">Once a start tag with the tag name "plaintext"
        has been seen, that will be the last token ever seen other
        than character tokens (and the end of file token), there is no
        way to switch the <span>content model flag</span> out of the
        PLAINTEXT state.</p>

       </dd>

       <dt>An end tag whose tag name is one of: "address",
       "blockquote", "center", "dir", "div", "dl", "fieldset",
       "listing", "menu", "ol", "pre", "ul"</dt>
       <dd>

        <p>If the <span>stack of open elements</span> <span>has an
        element in scope</span> with the same tag name as that of the
        token, then <span>generate implied end tags</span>.</p>

        <p>Now, if the <span>current node</span> is not an element
        with the same tag name as that of the token, then this is a
        <span>parse error</span>.</p>

        <p>If the <span>stack of open elements</span> <span>has an
        element in scope</span> with the same tag name as that of the
        token, then pop elements from this stack until an element with
        that tag name has been popped from the stack.</p>

        <!-- XXX quirk (except for in certain cases?):
        <p>Otherwise, act as if a start tag with the tag name given in
        the token had been seen, then reprocess the current token.</p>
        -->

       </dd>

       <dt>An end tag whose tag name is "form"</dt>
       <dd>

        <p>If the <span>stack of open elements</span> <span>has an
        element in scope</span> with the same tag name as that of the
        token, then <span>generate implied end tags</span>.</p>

        <p>Now, if the <span>current node</span> is not an element
        with the same tag name as that of the token, then this is a
        <span>parse error</span>.</p>

        <p>If the <span>stack of open elements</span> <span>has an
        element in scope</span> with the same tag name as that of the
        token, then pop elements from this stack until an element with
        that tag name has been popped from the stack.</p>

        <p>In any case, set the <span><code title="">form</code>
        element pointer</span> to null.</p>

       </dd>

       <dt>An end tag whose tag name is "p"</dt>
       <dd>

        <p>If the <span>stack of open elements</span> <span title="has
        an element in scope">has a <code>p</code> element in
        scope</span>, then <span>generate implied end tags</span>,
        except for <code>p</code> elements.</p>

        <p>If the <span>current node</span> is not a <code>p</code>
        element, then this is a <span>parse error</span>.</p>

        <p>If the <span>stack of open elements</span> <span title="has
        an element in scope">has a <code>p</code> element in
        scope</span>, then pop elements from this stack until the
        stack no longer <span title="has an element in scope">has a
        <code>p</code> element in scope</span>.</p>

        <!-- XXX quirk:
        <p>Otherwise, act as if a start tag with the tag name
        <code>p</code> had been seen, then reprocess the current
        token.</p>
        -->

       </dd>

       <dt>An end tag whose tag name is "dd", "dt", or "li"</dt>
       <dd>

        <p>If the <span>stack of open elements</span> <span>has an
        element in scope</span> whose tag name matches the tag name of
        the token, then <span>generate implied end tags</span>, except
        for elements with the same tag name as the token.</p>

        <p>If the <span>current node</span> is not an element with the
        same tag name as the token, then this is a <span>parse
        error</span>.</p>

        <p>If the <span>stack of open elements</span> <span>has an
        element in scope</span> whose tag name matches the tag name of
        the token, then pop elements from this stack until an element
        with that tag name has been popped from the stack.</p>

       </dd>

       <dt>An end tag whose tag name is one of: "h1", "h2", "h3",
       "h4", "h5", "h6"</dt>
       <dd>

        <p>If the <span>stack of open elements</span> <span title="has
        an element in scope">has in scope</span> an element whose tag
        name is one of "h1", "h2", "h3", "h4", "h5", or "h6", then
        <span>generate implied end tags</span>.</p>

        <p>Now, if the <span>current node</span> is not an element
        with the same tag name as that of the token, then this is a
        <span>parse error</span>.</p>

        <p>If the <span>stack of open elements</span> <span title="has
        an element in scope">has in scope</span> an element whose tag
        name is one of "h1", "h2", "h3", "h4", "h5", or "h6", then pop
        elements from the stack until an element with one of those tag
        names has been popped from the stack.</p>

        <!-- XXX quirk:
        <p>Otherwise, act as if a start tag with the tag name given in
        the token had been seen, then reprocess the current token.</p>
        -->

       </dd>

       <!-- ADOPTION AGENCY ELEMENTS
            Mozilla-only: bdo blink del ins sub sup q
            Safari-only: code dfn kbd nobr samp var wbr
            Both: a b big em font i s small strike strong tt u -->

       <dt>A start tag whose tag name is one of: "a", "b", "big", "em",
       "font", "i", "nobr", "s", "small", "strike", "strong", "tt",
       "u", "wbr"</dt>
       <dd>

 <p class="big-issue">Need to make &lt;a> close open A elements</p>

        <p><span>Reconstruct the active formatting elements</span>, if
        any.</p>

        <p><span title="insert an html element">Insert an HTML
        element</span> for the token. Add that element to the
        <span>list of active formatting elements</span>.</p>

       </dd>

       <dt id="adoptionAgency">An end tag whose tag name is one of:
       "a", "b", "big", "em", "font", "i", "nobr", "s", "small",
       "strike", "strong", "tt", "u", "wbr"</dt>
       <dd>

        <p>Follow these steps:</p>

        <ol>

         <li>

          <p>Let the <var title="">formatting element</var> be the
          last element in the <span>list of active formatting
          elements</span> that:</p>

          <ul>

           <li>is between the end of the list and the last scope
           marker in the list, if any, or the start of the list
           otherwise, and</li>

           <li>has the same tag name as the token.</li>

          </ul>

          <p>If there is no such node, or, if that node is also in the
          <span>stack of open elements</span> but the element is not
          <span title="has an element in scope">in scope</span>, then
          this is a <span>parse error</span>. Abort these steps. The
          token is ignored.</p>

          <p>Otherwise, if there is such a node, but that node is not
          in the stack of open elements</span>, then this is a
          <span>parse error</span>; remove the element from the list,
          and abort these steps.</p>

          <p>Otherwise, there is a <var title="">formatting
          element</var> and that element is in <span title="stack of
          open elements">the stack</span> and is <span title="has an
          element in scope">in scope</span>. If the element is not the
          <span>current node</span>, this is a <span>parse
          error</span>. In any case, proceed with the algorithm as
          written in the following steps.</p>

         </li>

         <li><p>Let the <var title="">common ancestor</var> be the element
         immediately above the <var title="">formatting element</var> in the
         <span>stack of open elements</span>.</p></li>

         <li><p>Let the <var title="">nearest block</var> be the
         bottommost node in the <span>stack of open elements</span>
         that is lower in the stack than the <var title="">formatting
         element</var>, and is not an element in the
         <span>phrasing</span> or <span>formatting</span>
         categories.</p>

         <p>There might not be one; if there isn't, then the UA must
         skip the subsequent steps and instead just pop all the nodes
         from the bottom of the <span>stack of open elements</span>,
         from the <span>current node</span> up to the <var title="">formatting
         element</var>, and remove the <var title="">formatting element</var>
         from the <span>list of active formatting
         elements</span>.</p></li>

         <li><p>Let the <var title="">furthest block</var> be the
         topmost node in the <span>stack of open elements</span> that
         is lower in the stack than the <var title="">formatting
         element</var>, and is not an element in the
         <span>phrasing</span> or <span>formatting</span>
         categories. There will always be one (otherwise the UA would
         have bailed at the last step), but it might be the same as
         the <var title="">nearest block</var>.</p></li>

         <li><p>If the <var title="">furthest block</var> has a parent node,
         then remove the <var title="">furthest block</var> from its parent
         node.</p></li>

         <li><p>Let a bookmark note the position of the <var
         title="">formatting element</var> in the <span>list of active
         formatting elements</span> relative to the elements on either
         side of it in the list.</p></li>

         <li>

          <p>Let <var title="">node</var> and <var title="">last node</var> be the
          <var title="">furthest block</var>. Follow these steps:</p>

          <ol>

           <li>Let <var title="">node</var> be the element immediately prior to
           <var title="">node</var> in the <span>stack of open
           elements</span>.</li>

           <li>If <var title="">node</var> is the <var title="">formatting
           element</var>, then go to the next step in the overall
           algorithm. Otherwise:</li>

           <li>If <var title="">last node</var> is the <var title="">furthest
           block</var>, then move the aforementioned bookmark to be
           immediately after the <var title="">node</var> in the <span>list of
           active formatting elements</span>.</li>

           <li>If <var title="">node</var> has any children, perform a shallow
           clone of <var title="">node</var>, replace the entry for
           <var title="">node</var> in the <span>list of active formatting
           elements</span> with an entry for the clone, replace the
           entry for <var title="">node</var> in the <span>stack of open
           elements</span> with an entry for the clone, and let
           <var title="">node</var> be the clone.</li>

           <li>Insert <var title="">last node</var> into <var title="">node</var>.</li>

           <li>Let <var title="">last node</var> be <var title="">node</var>.</li>

           <li>Return to step 1 of this inner set of steps.</li>

          </ol>

         </li>

         <li><p>If the <var title="">furthest block</var> had a parent node in
         step 5, insert whatever <var title="">last node</var> ended up being
         in the previous step into the <var title="">common ancestor</var>
         node.</p></li>

         <li><p>Perform a shallow clone of the <var title="">formatting
         element</var>.</p></li>

         <li><p>Take all of the child nodes of the <var title="">furthest
         block</var> and append them to the clone created in the last
         step.</p></li>

         <li><p>Append that clone to the <var title="">furthest
         block</var>.</p></li>

         <li><p>Remove the <var title="">formatting element</var> from the
         <span>list of active formatting elements</span>, and insert
         the clone into the <span>list of active formatting
         elements</span> at the position of the aforementioned
         bookmark.</p></li>

         <li><p>Remove the <var title="">formatting element</var> from the
         <span>stack of open elements</span>, and insert the clone
         into the <span>stack of open elements</span> immediately
         after (i.e. in a more deeply nested position than) the
         position of the <var title="">furthest block</var> in that
         stack.</p></li>

         <li><p>Jump back to step 1 in this series of steps.</p></li>

        </ol>

        <p class="note">The way these steps are defined, only elements
        in the <span>formatting</span> category ever get cloned by
        this algorithm.</p>

<!--XXX
        <div class="example">
         <p class="big-issue">Need an example.</p>
        </div>
-->

        <p class="note">Because of the way this algorithm causes elements to
        change parents, it has been dubbed the "adoption agency algorithm"
        (in contrast with other possibly algorithms for dealing with
        misnested content, which included the "incest algorithm", the
        "secret affair algorithm", and the "Heisenberg algorithm").</p>

       </dd>

       <dt>A start tag token whose tag name is "button"</dt>
       <dd>
        
        <p>If the <span>stack of open elements</span> <span title="has
        an element in scope">has a <code>button</code> element in
        scope</span>, then this is a <span>parse error</span>;
        act as if an end tag with the tag name "button" had been seen,
        then reprocess the token.</p>

        <p>Otherwise:</p>

        <p><span>Reconstruct the active formatting elements</span>, if
        any.</p>

        <p><span>Insert an HTML element</span> for the token.</p>

        <p>Insert a marker at the end of the <span>list of active
        formatting elements</span>.</p>

       </dd>

       <dt>A start tag token whose tag name is one of: "marquee",
       "object"</dt>
       <dd>

        <p><span>Reconstruct the active formatting elements</span>, if
        any.</p>

        <p><span>Insert an HTML element</span> for the token.</p>

        <p>Insert a marker at the end of the <span>list of active
        formatting elements</span>.</p>

       </dd>

       <dt>An end tag token whose tag name is one of: "button",
       "marquee", "object"</dt>
       <dd>

        <p>If the <span>stack of open elements</span> <span title="has
        an element in scope">has in scope</span> an element whose tag
        name is the same as the tag name of the token, then
        <span>generate implied end tags</span>.</p>

        <p>Now, if the <span>current node</span> is not an element
        with the same tag name as the token, then this is a
        <span>parse error</span>.</p>

        <p>Now, if the <span>stack of open elements</span> <span>has
        an element in scope</span> whose tag name matches the tag name
        of the token, then pop elements from the stack until that
        element has been popped from the stack, and <span>clear the
        list of active formatting elements up to the last
        marker</span>.</p>

       </dd>

       <dt>A start tag token whose tag name is "xmp"</dt>
       <dd>

        <p><span>Reconstruct the active formatting elements</span>, if
        any.</p>

        <p><span>Insert an HTML element</span> for the token.</p>

        <p>Switch the <span>content model flag</span> to the CDATA
        state.</p>

       </dd>

       <dt>A start tag whose tag name is "table"</dt>
       <dd>

        <p>If the <span>stack of open elements</span> <span title="has
        an element in scope">has a <code>p</code> element in
        scope</span>, then act as if an end tag with the tag name
        <code>p</code> had been seen.</p> <!-- XXX quirks: don't do this -->

        <p><span>Insert an HTML element</span> for the token.</p>

        <p>Change the <span>insertion mode</span> to "in table".</p>

       </dd>

       <dt>A start tag whose tag name is one of: "area", "basefont",
       "bgsound", "br", "embed", "img", "param", "spacer"</dt>
       <dd>

        <p><span>Reconstruct the active formatting elements</span>, if
        any.</p>

        <p><span title="insert an html element">Insert an HTML
        element</span> for the token. Immediately pop the
        <span>current node</span> off the <span>stack of open
        elements</span>.</p>

       </dd>

       <dt>A start tag whose tag name is "hr"</dt>
       <dd>

        <p>If the <span>stack of open elements</span> <span title="has
        an element in scope">has a <code>p</code> element in
        scope</span>, then act as if an end tag with the tag name
        <code>p</code> had been seen.</p> <!-- XXX quirks: don't do this -->

        <p><span title="insert an html element">Insert an HTML
        element</span> for the token. Immediately pop the
        <span>current node</span> off the <span>stack of open
        elements</span>.</p>

       </dd>

       <dt>A start tag whose tag name is "image"</dt>
       <dd>
        <p><span>Parse error</span>. Change the token's tag name
        to "img" and reprocess it. (Don't ask.)</p> <!-- As of
        2005-12, studies showed that around 0.2% of pages used the
        <image> element. -->
       </dd>

       <dt>A start tag whose tag name is "input"</dt>
       <dd>

        <p><span>Reconstruct the active formatting elements</span>, if
        any.</p>

        <p><span title="insert an html element">Insert an
        <code>input</code> element</span> for the token.</p>

        <p>If the <span><code title="">form</code> element
        pointer</span> is not null, then <span>associate</span><!--XXX
        xref! --> the <code>input</code> element with the
        <code>form</code> element pointed to by the <span><code
        title="">form</code> element pointer</span>.</p>

        <p>Pop that <code>input</code> element off the <span>stack of
        open elements</span>.</p>

       </dd>

       <dt id="isindex">A start tag whose tag name is "isindex"</dt>
       <dd>
        <p><span>Parse error</span>.</p>
        <p>If the <span><code title="">form</code> element
        pointer</span> is not null, then ignore the token.</p>
        <p>Otherwise:</p>
        <p>Act as if a start tag token with the tag name "form" had been seen.</p>
        <p>Act as if a start tag token with the tag name "hr" had been seen.</p>
        <p>Act as if a start tag token with the tag name "p" had been seen.</p>
        <p>Act as if a start tag token with the tag name "label" had been seen.</p>
        <p>Act as if a stream of character tokens had been seen (see below for what they should say).</p>
        <p>Act as if a start tag token with the tag name "input" had been
        seen, with all the attributes from the "isindex" token, except
        with the "name" attribute set to the value "isindex" (ignoring
        any explicit "name" attribute).</p>
        <p>Act as if a stream of character tokens had been seen (see below for what they should say).</p>
        <p>Act as if an end tag token with the tag name "label" had been seen.</p>
        <p>Act as if an end tag token with the tag name "p" had been seen.</p>
        <p>Act as if a start tag token with the tag name "hr" had been seen.</p>
        <p>Act as if an end tag token with the tag name "form" had been seen.</p>

        <p>The two streams of character tokens together should,
        together with the <code>input</code> element, express the
        equivalent of "This is a searchable index. Insert your search
        keywords here: (input field)" in the user's preferred
        language.</p>

        <p class="big-issue">
        Then need to specify that if the form submission causes just a single
        form control, whose name is "isindex", to be submitted, then we submit
        just the value part, not the "isindex=" part.
        </p>

       </dd>

<!-- XXX keygen support; don't forget head element pointer!

       <dt>A start tag whose tag name is "keygen"</dt>
       <dd>
        ...
       </dd>
-->

       <dt>A start tag whose tag name is "textarea"</dt>
       <dd>

        <p>Create a new <code>HTMLTextareaElement</code> node with the
        tag name "textarea", in the <span>HTML namespace</span>, with
        the same attributes as on the token.</p>

        <p>If the <span><code title="">form</code> element
        pointer</span> is not null, then <span>associate</span><!--XXX
        xref! --> the <code>textarea</code> element with the
        <code>form</code> element pointed to by the <span><code
        title="">form</code> element pointer</span>.</p>

        <p>Append the new element to the <span>current
        node</span>.</p>

        <p>Switch the tokeniser's <span>content model flag</span> to
        the RCDATA state.</p>

        <p>Then, collect all the characters tokens that the tokeniser
        returns until it returns a token that is not a character
        token, or until it stops tokenising.</p>

        <p>If this process resulted in a collection of character
        tokens, append a single <code>Text</code> node, whose contents
        is the concatenation of all those tokens' characters, to the
        new element node.</p>

        <p>The tokeniser's <span>content model flag</span> will have
        switched back to the PCDATA state.</p>

        <p>If the next token is an end tag token with the tag name
        "textarea", ignore it.</p>

       </dd>

       <dt>A start tag whose tag name is one of: "iframe",
       "noembed", "noframes", "noscript"</dt>
       <dd>

        <p>Create a new node with the tag name given in the token, in
        the <span>HTML namespace</span>, with the same attributes as
        on the token.</p>

        <p>For "iframe" tags, the node must be an
        <code>HTMLIFrameElement</code> object, for the other tags it
        must be an <code>HTMLElement</code> object.</p>

        <p>Append the new element to the <span>current
        node</span>.</p>

        <p>Switch the tokeniser's <span>content model flag</span> to
        the CDATA state.</p>

        <p>Then, collect all the characters tokens that the tokeniser
        returns until it returns a token that is not a character
        token, or until it stops tokenising.</p>

        <p>If this process resulted in a collection of character
        tokens, append a single <code>Text</code> node, whose contents
        is the concatenation of all those tokens' characters, to the
        new element node.</p>

        <p>The tokeniser's <span>content model flag</span> will have
        switched back to the PCDATA state.</p>

        <p>If the next token is an end tag token with the same tag
        name as the start tag token, ignore it.</p>

        <p class="big-issue">Need something here for when scripting is
        disabled.</p>

       </dd>

       <dt>A start tag whose tag name is "select"</dt>
       <dd>

        <p><span>Reconstruct the active formatting elements</span>, if
        any.</p>

        <p><span>Insert an HTML element</span> for the token.</p>

        <p>Change the <span>insertion mode</span> to "in select".</p>

       </dd>

<!-- XXX quirks:
       <dt>An end tag whose tag name is "br"</dt>
       <dd>
        <p>Act as if a start tag token with the tag name "br" had been
        seen. Ignore the end tag token.</p>
       </dd>
-->

       <dt>A start or end tag whose tag name is one of: "caption",
       "col", "colgroup", "frame", "frameset", "head", "option",
       "optgroup", "tbody", "td", "tfoot", "th", "thead", "tr"</dt>
       <dt>An end tag whose tag name is one of: "area", "basefont",
       "bgsound", <!--XXX quirks: remove br-->"br", "embed", "hr",
       "iframe", "image", "img", "input", "isindex", "noembed",
       "noframes", "noscript", "param", "spacer", "table",
       "textarea"</dt> <!-- add keygen if we add the start tag -->
       <dd>
        <p><span>Parse error</span>. Ignore the token.</p>
       </dd>

       <dt>A start or end tag whose tag name is one of:
       "event-source", "section", "nav", "article", "aside", "header",
       "footer", "datagrid", "command"</dt>

       <dd>

        <!-- XXXX -->

        <p class="big-issue">Work in progress!</p>

       </dd>

       <dt>A start tag token not covered by the previous entries</dt>
       <dd>

        <p><span>Reconstruct the active formatting elements</span>, if
        any.</p>

        <p><span>Insert an HTML element</span> for the token.</p>

        <p class="note">This element will be a <span>phrasing</span>
        element.</p>

       </dd>

       <dt>An end tag token not covered by the previous entries</dt>
       <dd>

        <p>Run the following algorithm:</p>

        <ol>

         <li><p>Initialise <var title="">node</var> to be the <span>current
         node</span> (the bottommost node of the stack).</p></li>

         <li><p>If <var title="">node</var> has the same tag name as
         the end tag token, then:</p>

          <ol>

           <li><p><span>Generate implied end tags</span>.</p></li>

           <li><p>If the tag name of the end tag token does not match
           the tag name of the <span>current node</span>, this is a
           <span>parse error</span>.</p></li>

           <li><p>Pop all the nodes from the <span>current node</span>
           up to <var title="">node</var>, including <var title="">node</var>, then stop
           this algorithm.</p></li>

          </ol>

         </li>

         <li><p>Otherwise, if <var title="">node</var> is in neither
         the <span>formatting</span> category nor the
         <span>phrasing</span> category, then this is a <span>parse
         error</span>. Stop this algorithm. The end tag token is
         ignored.</p></li>

         <li><p>Set <var title="">node</var> to the previous entry in the
         <span>stack of open elements</span>.</p></li>

         <li><p>Return to step 2.</p></li>

        </ol>

       </dd>

      </dl>

     </dd>


     <dt id="parsing-main-intable">If the <span>insertion mode</span> is "in table"</dt>
     <dd>

      <dl class="switch">

       <dt>A character token that is one of one of U+0009
       CHARACTER TABULATION, U+000A LINE FEED (LF), U+000B LINE
       TABULATION, U+000C FORM FEED (FF), or U+0020 SPACE</dt>
       <dd>
        <p><span title="append a character">Append the character</span> to
        the <span>current node</span>.</p>
       </dd>

       <dt>A comment token</dt>
       <dd>
        <p>Append a <code>Comment</code> node to the <span>current
        node</span> with the <code title="">data</code> attribute set to
        the data given in the comment token.</p>
       </dd>

       <dt>A start tag whose tag name is "caption"</dt>
       <dd>

        <p><span>Clear the stack back to a table context</span>. (See
        below.)</p>

        <p>Insert a marker at the end of the <span>list of active
        formatting elements</span>.</p>

        <p><span>Insert an HTML element</span> for the token, then
        switch the <span>insertion mode</span> to "in caption".</p>

       </dd>

       <dt>A start tag whose tag name is "colgroup"</dt>
       <dd>

        <p><span>Clear the stack back to a table context</span>. (See
        below.)</p>

        <p><span>Insert an HTML element</span> for the token, then
        switch the <span>insertion mode</span> to "in column group".</p>

       </dd>

       <dt>A start tag whose tag name is "col"</dt>
       <dd>
        <p>Act as if a start tag token with the tag name "colgroup"
        had been seen, then reprocess the current token.</p>
       </dd>

       <dt>A start tag whose tag name is one of: "tbody", "tfoot", "thead"</dt>
       <dd>

        <p><span>Clear the stack back to a table context</span>. (See
        below.)</p>

        <p><span>Insert an HTML element</span> for the token, then
        switch the <span>insertion mode</span> to "in table body".</p>

       </dd>

       <dt>A start tag whose tag name is one of: "td", "th", "tr"</dt>
       <dd>
        <p>Act as if a start tag token with the tag name "tbody" had
        been seen, then reprocess the current token.</p>
       </dd>

       <dt>A start tag whose tag name is "table"</dt>
       <dd>
        <p><span>Parse error</span>. Act as if an end tag token
        with the tag name "table" had been seen, then reprocess the
        current token.</p>
       </dd>

       <dt>An end tag whose tag name is "table"</dt>
       <dd>

        <p><span>Generate implied end tags</span>.</p>

        <p>Now, if the <span>current node</span> is not a
        <code>table</code> element, then this is a <span>parse
        error</span>.</p>

        <p>Pop elements from this stack until a <code>table</code>
        element has been popped from the stack.</p>

        <p><span>Reset the insertion mode appropriately</span>.</p>

       </dd>

       <dt>An end tag whose tag name is one of: "body", "caption",
       "col", "colgroup", "html", "tbody", "td", "tfoot", "th",
       "thead", "tr"</dt>
       <dd>
        <p><span>Parse error</span>. Ignore the token.</p>
       </dd>

       <dt>An end-of-file token</dt>
       <dd>
        <p><span>Parse error</span>. Act as if an end tag with tag
        name "table" had been seen, then reprocess the end-of-file
        token.</p>
       </dd>

       <dt>Anything else</dt>
       <dd>

        <p><span>Parse error</span>. Process the token as if the
        <span>insertion mode</span> was "in body", with the following
        exception:</p>

        <p>If the <span>current node</span> is a <code>table</code>,
        <code>tbody</code>, <code>tfoot</code>, <code>thead</code>, or
        <code>tr</code> element, then, whenever a node would be
        inserted into the <span>current node</span>, it must instead
        be inserted into the element that comes immediately before the
        last <code>table</code> element in the <span>stack of open
        elements</span> (the <em>foster parent element</em>). If the
        last <code>table</code> element in the <span>stack of open
        elements</span> is a child of this foster parent element, then
        the new node must be inserted immediately before the last
        <code>table</code> element in the <span>stack of open
        elements</span> in this foster parent element, otherwise, the
        new node must be <em>appended</em> to this foster parent
        element.</p>

       </dd>

      </dl>

      <p>When the steps above require the UA to <dfn>clear the stack
      back to a table context</dfn>, it means that the UA must, while
      the <span>current node</span> is not a <code>table</code>
      element, pop elements from the <span>stack of open
      elements</span>. If this causes any elements to be popped from
      the stack, then this is a <span>parse error</span>.</p>

     </dd>


     <dt id="parsing-main-incaption">If the <span>insertion mode</span> is "in caption"</dt>
     <dd>

      <dl class="switch">

       <dt>An end tag whose tag name is "caption"</dt>
       <dd>

        <p><span>Generate implied end tags</span>.</p>

        <p>Now, if the <span>current node</span> is not a
        <code>caption</code> element, then this is a <span>parse
        error</span>.</p>

        <p>Pop elements from this stack until a <code>caption</code>
        element has been popped from the stack.</p>

        <p><span>Clear the list of active formatting elements up to
        the last marker</span>.</p>

        <p>Switch the <span>insertion mode</span> to "in table".</p>

       </dd>

       <dt>A start tag whose tag name is one of: "caption", "col",
       "colgroup", "tbody", "td", "tfoot", "th", "thead", "tr"</dt>
       <dt>An end tag whose tag name is "table"</dt>
       <dt>An end-of-file token</dt>
       <dd>
        <p><span>Parse error</span>. Act as if an end tag with
        the tag name "caption" had been seen, then reprocess the
        current token.</p>
       </dd>

       <dt>An end tag whose tag name is one of: "body", "col",
       "colgroup", "html", "tbody", "td", "tfoot", "th", "thead",
       "tr"</dt>
       <dd>
        <p><span>Parse error</span>. Ignore the token.</p>
       </dd>

       <dt>Anything else</dt>
       <dd>
        <p>Process the token as if the <span>insertion mode</span> was
        "in body".</p>
       </dd>

      </dl>

     </dd>


     <dt id="parsing-main-incolgroup">If the <span>insertion mode</span> is "in column group"</dt>
     <dd>

      <dl class="switch">

       <dt>A character token that is one of one of U+0009
       CHARACTER TABULATION, U+000A LINE FEED (LF), U+000B LINE
       TABULATION, U+000C FORM FEED (FF), or U+0020 SPACE</dt>
       <dd>
        <p><span title="append a character">Append the character</span> to
        the <span>current node</span>.</p>
       </dd>

       <dt>A comment token</dt>
       <dd>
        <p>Append a <code>Comment</code> node to the <span>current
        node</span> with the <code title="">data</code> attribute set to
        the data given in the comment token.</p>
       </dd>

       <dt>A start tag whose tag name is "col"</dt>
       <dd>
        <p><span title="insert an HTML element">Insert a
        <code>col</code> element</span> for the token. Immediately
        pop the <span>current node</span> off the <span>stack of open
        elements</span>.</p>
       </dd>

       <dt>An end tag whose tag name is "colgroup"</dt>
       <dd>
        <p>Pop the <span>current node</span> (which will be a
        <code>colgroup</code> element) from the <span>stack of open
        elements</span>. Switch the <span>insertion mode</span> to "in
        table".</p>
       </dd>

       <dt>An end tag whose tag name is "col"</dt>
       <dd>
        <p><span>Parse error</span>. Ignore the token.</p>
       </dd>

       <dt>Anything else</dt>
       <dd>
        <p>Act as if an end tag with the tag name "colgroup" had been
        seen, and then reprocess the current token.</p>
       </dd>

      </dl>

     </dd>


     <dt id="parsing-main-intbody">If the <span>insertion mode</span> is "in table body"</dt>
     <dd>

      <dl class="switch">

       <dt>A start tag whose tag name is "tr"</dt>
       <dd>

        <p><span>Clear the stack back to a table body
        context</span>. (See below.)</p>

        <p><span title="insert an HTML element">Insert a
        <code>tr</code> element</span> for the token, then switch the
        <span>insertion mode</span> to "in row".</p>

       </dd>

       <dt>A start tag whose tag name is one of: "th", "td"</dt>
       <dd>
        <p><span>Parse error</span>. Act as if a start tag with
        the tag name "tr" had been seen, then reprocess the current
        token.</p>
       </dd>

       <dt>An end tag whose tag name is one of: "tbody", "tfoot",
       "thead"</dt>
       <dd>

        <p>If the <span>stack of open elements</span> does not <span
        title="has an element in table scope">have an element in table
        scope</span> with the same tag name as the token, this is a
        <span>parse error</span>. Ignore the token.</p>

        <p>Otherwise:</p>

        <p><span>Clear the stack back to a table body
        context</span>. (See below.)</p>

        <p>Pop the <span>current node</span> from the <span>stack of
        open elements</span>. Switch the <span>insertion mode</span>
        to "in table".</p>

       </dd>

       <dt>A start tag whose tag name is one of: "caption", "col",
       "colgroup", "tbody", "tfoot", "thead"</dt>
       <dt>An end tag whose tag name is "table"</dt>
       <dt>An end-of-file token</dt>
       <dd>

        <p><span>Clear the stack back to a table body
        context</span>. (See below.)</p>

        <p>Act as if an end tag with the same tag name as the
        <span>current node</span> ("tbody", "tfoot", or "thead") had
        been seen, then reprocess the current token.</p>

       </dd>

       <dt>An end tag whose tag name is one of: "body", "caption",
       "col", "colgroup", "html", "td", "th", "tr"</dt>
       <dd>
        <p><span>Parse error</span>. Ignore the token.</p>
       </dd>

       <dt>Anything else</dt>
       <dd>
        <p>Process the token as if the <span>insertion mode</span> was
        "in table".</p>
       </dd>

      </dl>

      <p>When the steps above require the UA to <dfn>clear the stack
      back to a table body context</dfn>, it means that the UA must,
      while the <span>current node</span> is not a <code>tbody</code>,
      <code>tfoot</code>, or <code>thead</code> element, pop elements
      from the <span>stack of open elements</span>. If this causes any
      elements to be popped from the stack, then this is a <span>parse
      error</span>.</p>

     </dd>


     <dt id="parsing-main-intr">If the <span>insertion mode</span> is "in row"</dt>
     <dd>

      <dl class="switch">

       <dt>A start tag whose tag name is one of: "th", "td"</dt>
       <dd>

        <p><span>Clear the stack back to a table row
        context</span>. (See below.)</p>

        <p><span title="insert an HTML element">Insert an HTML
        element</span> for the token, then switch the <span>insertion
        mode</span> to "in cell".</p>

        <p>Insert a marker at the end of the <span>list of active
        formatting elements</span>.</p>

       </dd>

       <dt>An end tag whose tag name is "tr"</dt>
       <dd>

        <p><span>Clear the stack back to a table row
        context</span>. (See below.)</p>

        <p>Pop the <span>current node</span> (which will be a
        <code>tr</code> element) from the <span>stack of open
        elements</span>. Switch the <span>insertion mode</span> to "in
        table body".</p>

       </dd>

       <dt>A start tag whose tag name is one of: "caption", "col",
       "colgroup", "tbody", "tfoot", "thead", "tr"</dt>
       <dt>An end tag whose tag name is "table"</dt>
       <dt>An end-of-file token</dt>
       <dd>
        <p>Act as if an end tag with the tag name "tr" had been seen,
        then reprocess the current token.</p>
       </dd>

       <dt>An end tag whose tag name is one of: "tbody", "tfoot",
       "thead"</dt>
       <dd>

        <p>If the <span>stack of open elements</span> does not <span
        title="has an element in table scope">have an element in table
        scope</span> with the same tag name as the token, this is a
        <span>parse error</span>. Ignore the token.</p>

        <p>Otherwise, act as if an end tag with the tag name "tr" had
        been seen, then reprocess the current token.</p>

       </dd>

       <dt>An end tag whose tag name is one of: "body", "caption",
       "col", "colgroup", "html", "td", "th"</dt>
       <dd>
        <p><span>Parse error</span>. Ignore the token.</p>
       </dd>

       <dt>Anything else</dt>
       <dd>
        <p>Process the token as if the <span>insertion mode</span> was
        "in table".</p>
       </dd>

      </dl>

      <p>When the steps above require the UA to <dfn>clear the stack
      back to a table row context</dfn>, it means that the UA must,
      while the <span>current node</span> is not a <code>tr</code>
      element, pop elements from the <span>stack of open
      elements</span>. If this causes any elements to be popped from
      the stack, then this is a <span>parse error</span>.</p>

     </dd>


     <dt id="parsing-main-intd">If the <span>insertion mode</span> is "in cell"</dt>
     <dd>

      <dl class="switch">

       <dt>An end tag whose tag name is one of: "td", "th"</dt>
       <dd>

        <p>If the <span>stack of open elements</span> does not <span
        title="has an element in table scope">have an element in table
        scope</span> with the same tag name as that of the token, then
        this is a <span>parse error</span> and the token must be
        ignored.</p>

        <p>Otherwise:</p>

        <p><span>Generate implied end tags</span>, except for elements
        with the same tag name as the token.</p>

        <p>Now, if the <span>current node</span> is not a an element
        with the same tag name as the token, then this is a
        <span>parse error</span>.</p>

        <p>Pop elements from this stack until an element with the same
        tag name as the token has been popped from the stack.</p>

        <p><span>Clear the list of active formatting elements up to
        the last marker</span>.</p>

        <p>Switch the <span>insertion mode</span> to "in row". (The
        <span>current node</span> will be a <code>tr</code> element at
        this point.)</p>

       </dd>

       <dt>A start tag whose tag name is one of: "caption", "col",
       "colgroup", "tbody", "td", "tfoot", "th", "thead", "tr"</dt>
       <dd>
        <p><span>Close the cell</span> (see below) and reprocess the
        current token.</p>
       </dd>

       <dt>An end tag whose tag name is one of: "body", "caption",
       "col", "colgroup", "html"</dt>
       <dd>
        <p><span>Parse error</span>. Ignore the token.</p>
       </dd>

       <dt>An end tag whose tag name is one of: "table", "tbody",
       "tfoot", "thead", "tr"</dt>
       <dd>

        <p>If the <span>stack of open elements</span> does not <span
        title="has an element in table scope">have an element in table
        scope</span> with the same tag name as that of the token
        (which can only happen for "tbody", "tfoot" and "thead"), then
        this is a <span>parse error</span> and the token must be
        ignored.</p>

        <p>Otherwise, <span>close the cell</span> (see below) and
        reprocess the current token.</p>

       </dd>

       <dt>An end-of-file token</dt>
       <dd>
        <p><span>Close the cell</span> and reprocess the end-of-file
        token.</p>
       </dd>

       <dt>Anything else</dt>
       <dd>
        <p>Process the token as if the <span>insertion mode</span> was
        "in body".</p>
       </dd>

      </dl>

      <p>Where the steps above say to <dfn>close the cell</dfn>, they
      mean to follow the following algorithm:</p>

      <ol>

       <li><p>If the <span>stack of open elements</span> <span
       title="has an element in table scope">has a <code>td</code>
       element in table scope</span>, then act as if an end tag token
       with the tag name "td" had been seen.</p></li>

       <li><p>Otherwise, the <span>stack of open elements</span> will
       <span title="has an element in table scope">have a
       <code>th</code> element in table scope</span>; act as if an end
       tag token with the tag name "th" had been seen.</p></li>

      </ol>

      <p class="note">The <span>stack of open elements</span> cannot
      have both a <code>td</code> and a <code>th</code> element <span
      title="has an element in table scope">in table scope</span> at
      the same time, nor can it have neither when the <span>insertion
      mode</span> is "in cell".</p>

     </dd>


     <dt id="parsing-main-inselect">If the <span>insertion mode</span> is "in select"</dt>
     <dd>

      <p>Handle the token as follows:</p>

      <dl class="switch">

       <dt>A character token</dt>
       <dd>
        <p><span title="append a character">Append the token's
        character</span> to the <span>current node</span>.</p>
       </dd>

       <dt>A comment token</dt>
       <dd>
        <p>Append a <code>Comment</code> node to the <span>current
        node</span> with the <code title="">data</code> attribute set to
        the data given in the comment token.</p>
       </dd>

       <dt>A start tag token whose tag name is "optgroup"</dt>
       <dd>

        <p>If the <span>current node</span> is an <code>option</code>
        element, act as if an end tag with the tag name "option" had
        been seen.</p>

        <p><span>Insert an HTML element</span> for the token.</p>

       </dd>

       <dt>An end tag token whose tag name is "optgroup"</dt>
       <dd>

        <p>First, if the <span>current node</span> is an
        <code>option</code> element, and the node immediately before
        it in the <span>stack of open elements</span> is an
        <code>optgroup</code> element, then act as if an end tag with
        the tag name "option" had been seen.</p>

        <p>If the <span>current node</span> is an
        <code>optgroup</code> element, then pop that node from the
        <span>stack of open elements</span>. Otherwise, this is a
        <span>parse error</span>, ignore the token.</p>

       </dd>

       <dt>A start tag token whose tag name is "option"</dt>
       <dd>

        <p>If the <span>current node</span> is an <code>option</code>
        element, act as if an end tag with the tag name "option" had
        been seen, then reprocess the token.</p>

        <p><span>Insert an HTML element</span> for the token.</p>

       </dd>

       <dt>An end tag token whose tag name is "option"</dt>
       <dd>

        <p>If the <span>current node</span> is an <code>option</code>
        element, then pop that node from the <span>stack of open
        elements</span>. Otherwise, this is a <span>parse
        error</span>, ignore the token.</p>

       </dd>

       <dt>An end tag whose tag name is "select"</dt>
       <dd>

        <p>Pop elements from the <span>stack of open elements</span>
        until a <code>select</code> element has been popped from the
        stack.</p>

        <p><span>Reset the insertion mode appropriately</span>.</p>

       </dd>

       <dt>A start tag whose tag name is "select"</dt>
       <dd>

        <p><span>Parse error</span>. Act as if the token had been
        an end tag with the tag name "select" instead.</p>

       </dd>

       <dt>An end tag whose tag name is one of: "caption", "table",
       "tbody", "tfoot", "thead", "tr", "td", "th"</dt>
       <dd>

        <p><span>Parse error</span>.</p>

        <p>If the <span>stack of open elements</span> <span>has an
        element in table scope</span> with the same tag name as that
        of the token, then act as if an end tag with the tag name
        "select" had been seen, and reprocess the token. Otherwise,
        ignore the token.</p>

       </dd>

       <dt>An end-of-file token</dt>
       <dd>
        <p><span>Parse error</span>. Act as if an end tag token with
        the tag name "select" had been seen, then reprocess the
        current token.</p>
       </dd>

       <dt>Anything else</dt>
       <dd>
        <p><span>Parse error</span>. Ignore the token.</p>
       </dd>

      </dl>

     </dd>


     <dt id="parsing-main-afterbody">If the <span>insertion mode</span> is "after body"</dt>
     <dd>

      <p>Handle the token as follows:</p>

      <dl class="switch">

       <dt>A character token that is one of one of U+0009
       CHARACTER TABULATION, U+000A LINE FEED (LF), U+000B LINE
       TABULATION, U+000C FORM FEED (FF), or U+0020 SPACE</dt>
       <dd>
        <p><span title="append a character">Append the
        character</span> to the first element in the <span>stack of
        open elements</span> (the <code>html</code> element).</p>
       </dd>

       <dt>A comment token</dt>
       <dd>
        <p>Append a <code>Comment</code> node to the first element in
        the <span>stack of open elements</span> (the <code>html</code>
        element), with the <code title="">data</code> attribute set to
        the data given in the comment token.</p>
       </dd>

       <dt>An end tag with the tag name "html"</dt>
       <dd>
        <p>Switch to <span>the trailing end phase</span>.</p>
       </dd>

       <dt>An end-of-file token</dt>
       <dd>
        <p>Act as if an end tag with tag name "html" had been seen,
        then reprocess the end-of-file token.</p>
       </dd>

       <dt>Anything else</dt>
       <dd>
        <p><span>Parse error</span>. Set the <span>insertion
        mode</span> to "in body" and reprocess the token.</p>
       </dd>

      </dl>

     </dd>


     <dt id="parsing-main-inframeset">If the <span>insertion mode</span> is "in frameset"</dt>
     <dd>

      <p>Handle the token as follows:</p>

      <dl class="switch">

       <dt>A character token that is one of one of U+0009
       CHARACTER TABULATION, U+000A LINE FEED (LF), U+000B LINE
       TABULATION, U+000C FORM FEED (FF), or U+0020 SPACE</dt>
       <dd>
        <p><span title="append a character">Append the character</span> to
        the <span>current node</span>.</p>
       </dd>

       <dt>A comment token</dt>
       <dd>
        <p>Append a <code>Comment</code> node to the <span>current
        node</span> with the <code title="">data</code> attribute set to
        the data given in the comment token.</p>
       </dd>

       <dt>A start tag with the tag name "frameset"</dt>
       <dd>
        <p><span title="Insert an HTML element">Insert a
        <code>frameset</code> element</span> for the token.</p>
       </dd>

       <dt>An end tag with the tag name "frameset"</dt>
       <dd>
        <p>Pop the <span>current node</span> from the <span>stack of
        open elements</span>. If the <span>current node</span> is no
        longer a <code>frameset</code> element, then change the
        <span>insertion mode</span> to "after frameset".</p>
       </dd>

       <dt>A start tag with the tag name "frame"</dt>
       <dd>
        <p>Create an <code>HTMLFrameElement</code> node in the
        <span>HTML namespace</span> with the tag name given in the
        token, and with the attributes given in the token, and append
        it to the <span>current node</span>.</p>
       </dd>

       <dt>A start tag with the tag name "noframes"</dt>
       <dd>
        <p>Process the token as if the <span>insertion mode</span> had
        been "in body".</p>
       </dd>

       <dt>An end-of-file token</dt>
       <dd>

        <p><span>Parse error</span>.</p>

        <p>Pop the <span>current node</span> from the <span>stack of
        open elements</span> until the <span>current node</span> is no
        longer a <code>frameset</code> element, then change the
        <span>insertion mode</span> to "after frameset" and reprocess
        the end-of-file token.</p>

       </dd>

       <dt>Anything else</dt>
       <dd>
        <p><span>Parse error</span>. Ignore the token.</p>
       </dd>

      </dl>

     </dd>


     <dt id="parsing-main-afterframeset">If the <span>insertion mode</span> is "after frameset"</dt>
     <dd>

      <p>Handle the token as follows:</p>

      <dl class="switch">

       <dt>A character token that is one of one of U+0009
       CHARACTER TABULATION, U+000A LINE FEED (LF), U+000B LINE
       TABULATION, U+000C FORM FEED (FF), or U+0020 SPACE</dt>
       <dd>
        <p><span title="append a character">Append the character</span> to
        the <span>current node</span>.</p>
       </dd>

       <dt>A comment token</dt>
       <dd>
        <p>Append a <code>Comment</code> node to the <span>current
        node</span> with the <code title="">data</code> attribute set to
        the data given in the comment token.</p>
       </dd>

       <dt>An end tag with the tag name "html"</dt>
       <dd>
        <p>Switch to <span>the trailing end phase</span>.</p>
       </dd>

       <dt>A start tag with the tag name "noframes"</dt>
       <dd>
        <p>Process the token as if the <span>insertion mode</span> had
        been "in body".</p>
       </dd>

       <dt>An end-of-file token</dt>
       <dd>
        <p>Switch to <span>the trailing end phase</span>, and
        reprocess the token.</p>
       </dd>

       <dt>Anything else</dt>
       <dd>
        <p><span>Parse error</span>. Ignore the token.</p>
       </dd>

      </dl>

     </dd>

    </dl>

   </dd>

  </dl>

  <p class="big-issue">This doesn't handle UAs that don't support
  frames, or that do support frames but want to show the NOFRAMES
  content. Supporting the former is easy; supporting the latter is
  harder.</p>


  <h5><dfn>The trailing end phase</dfn></h5>

  <p>After <span>the main phase</span>, as each token is emitted from
  the <span>tokenisation</span> stage, it must be processed as
  described in this section.</p>

  <dl class="switch">

   <dt>A DOCTYPE token</dt>
   <dd>
    <p><span>Parse error</span>. Ignore the token.</p>
   </dd>

   <dt>A comment token</dt>
   <dd>
    <p>Append a <code>Comment</code> node to the <code>Document</code>
    object with the <code title="">data</code> attribute set to the
    data given in the comment token.</p>
   </dd>

   <dt>A character token that is one of one of U+0009 CHARACTER
   TABULATION, U+000A LINE FEED (LF), U+000B LINE TABULATION, U+000C
   FORM FEED (FF), or U+0020 SPACE</dt>
   <dd>
    <p><span title="append a character">Append that character</span>
    to the <code>Document</code> node.</p>
   </dd>

   <dt>A character token that is <em>not</em> one of U+0009 CHARACTER
   TABULATION, U+000A LINE FEED (LF), U+000B LINE TABULATION, U+000C
   FORM FEED (FF), or U+0020 SPACE</dt>
   <dt>A start tag token</dt>
   <dt>An end tag token</dt>
   <dd>
    <p><span>Parse error</span>. Switch back to <span>the main
    phase</span> and reprocess the token.</p>
   </dd>

   <dt>An end-of-file token</dt>
   <dd>
    <p>Ignore the token.</p>
    <p class="big-issue">Probably need to invoke document.close() here
    or something, or say something about the load event, or...</p>
   </dd>

  </dl>

<!--XXX need to handle
http://lxr.mozilla.org/mozilla/source/parser/htmlparser/src/CNavDTD.cpp#2354
2354           // Don't open transient styles if it makes the stack deep, bug 58917.
-->
<!--XXX
need to handle <table border>, <div contenteditable>, etc. (shorthand attributes with implied values)
-->
<!--XXX
define <script> in terms of insertion into the document, such that in
this section we don't need to define it here, just note that definition
-->

<!--XXX
http://lxr.mozilla.org/mozilla/source/parser/htmlparser/src/nsHTMLTokenizer.cpp#749
-->

<!--
newlines:
601             // result=aScanner.GetChar(aChar);       
602             if(kLF==theNextChar) {
603               // If the "\r" is followed by a "\n", don't replace it and 
604               // let it be ignored by the layout system
605               end.advance(2);
606               result=aScanner.GetChar(theNextChar);
607             }
608             else {
609               // If it standalone, replace the "\r" with a "\n" so that 
610               // it will be considered by the layout system
611               aScanner.ReplaceCharacter(end, kLF);
612               ++end;
613             }
http://lxr.mozilla.org/mozilla/source/parser/htmlparser/src/nsHTMLTokens.cpp#601

see also  CTextToken::ConsumeCharacterData()  for CDATA parsing?

1212                      1  Here's a tricky case from bug 22596:  <h5><li><h5>
1213                         How do we know that the 2nd <h5> should close the <LI> rather than nest inside the <LI>?
1214                         (Afterall, the <h5> is a legal child of the <LI>).
1215               
1216                         The way you know is that there is no root between the two, so the <h5> binds more
1217                         tightly to the 1st <h5> than to the <LI>.
1218                      2.  Also, bug 6148 shows this case: <SPAN><DIV><SPAN>
1219                         From this case we learned not to execute this logic if the parent is a block.
1220                     
1221                      3. Fix for 26583
1222                         Ex. <A href=foo.html><B>foo<A href-bar.html>bar</A></B></A>  <- A legal HTML
1223                         In the above example clicking on "foo" or "bar" should link to
1224                         foo.html or bar.html respectively. That is, the inner <A> should be informed
1225                         about the presence of an open <A> above <B>..so that the inner <A> can close out
1226                         the outer <A>. The following code does it for us.
1227                      
1228                      4. Fix for 27865 [ similer to 22596 ]. Ex: <DL><DD><LI>one<DD><LI>two
 - http://lxr.mozilla.org/mozilla/source/parser/htmlparser/src/CNavDTD.cpp#1211

815             // Here's a problem.  If theTag is legal in here, we don't move it
816             // out.  So if we're moving stuff out of here, the parent of theTag
817             // gets closed at this point.  But some things are legal
818             // _everywhere_ and hence would effectively close out misplaced
819             // content in tables.  This is undesirable, so treat them as
820             // illegal here so they'll be shipped out with their parents and
821             // siblings.  See bug 40855 for an explanation (that bug was for
822             // comments, but the same issues arise with whitespace, newlines,
823             // noscript, etc).  Script is special, though.  Shipping it out
824             // breaks document.write stuff.  See bug 243064.
 - http://lxr.mozilla.org/mozilla/source/parser/htmlparser/src/CNavDTD.cpp#825


1326     /**************************************************************************************
1327      *
1328      * Now a little code to deal with bug #49687 (crash when layout stack gets too deep)
1329      * I've also opened this up to any container (not just inlines): re bug 55095
1330      * Improved to handle bug 55980 (infinite loop caused when DEPTH is exceeded and
1331      * </P> is encountered by itself (<P>) is continuously produced.
1332      *
1333      **************************************************************************************/

1912               // Oh boy!! we found a "stray" tag. Nav4.x and IE introduce line break in
1913               // such cases. So, let's simulate that effect for compatibility.
1914               // Ex. <html><body>Hello</P>There</body></html>
http://lxr.mozilla.org/mozilla/source/parser/htmlparser/src/CNavDTD.cpp#1912

http://lxr.mozilla.org/seamonkey/search?string=nested
/parser/htmlparser/src/CNavDTD.cpp, line 791 - * 2. <CENTER><DL><DT><A><CENTER> allow nested <CENTER>
/parser/htmlparser/src/CNavDTD.cpp, line 792 - * 3. <TABLE><TR><TD><TABLE>... allow nested <TABLE>
/parser/htmlparser/src/CNavDTD.cpp, line 2562 - // Discard nested forms - bug 72639
/parser/htmlparser/src/nsElementTable.cpp, line 1453 - * 2. <CENTER><DL><DT><A><CENTER> allow nested <CENTER>
/parser/htmlparser/src/nsElementTable.cpp, line 1454 - * 3. <TABLE><TR><TD><TABLE>... allow nested <TABLE>
/parser/htmlparser/src/nsElementTable.cpp, line 1901 - // Ex: <H1><LI><H1><LI>. Inner LI has the potential of getting nested
-->

  <h3>Namespaces</h3>

  <p>The <dfn>HTML namespace</dfn> is: <code>http://www.w3.org/1999/xhtml</code></p>

  <h3><dfn>Entities</dfn></h3>

  <p>This table lists the entity names that are supported by HTML, and
  the codepoints to which they refer. It is referenced by the previous
  sections.</p>

<!--XXX
 entities: 
 94         // If an entity value is greater than 255 then:
 95         // Nav 4.x does not treat it as an entity,
 96         // IE treats it as an entity if terminated with a semicolon.
 97         // Resembling IE!!
http://lxr.mozilla.org/mozilla/source/parser/htmlparser/src/nsHTMLTokens.cpp#94
-->

  <table>
   <thead>
    <tr> <th> Entity Name </th> <th> Character </th> </tr>
   </thead>
   <tbody>
    <tr> <td> <code title="">AElig</code> </td> <td> U+00C6 </td> </tr>
    <tr> <td> <code title="">Aacute</code> </td> <td> U+00C1 </td> </tr>
    <tr> <td> <code title="">Acirc</code> </td> <td> U+00C2 </td> </tr>
    <tr> <td> <code title="">Agrave</code> </td> <td> U+00C0 </td> </tr>
    <tr> <td> <code title="">Alpha</code> </td> <td> U+0391 </td> </tr>
    <tr> <td> <code title="">Aring</code> </td> <td> U+00C5 </td> </tr>
    <tr> <td> <code title="">Atilde</code> </td> <td> U+00C3 </td> </tr>
    <tr> <td> <code title="">Auml</code> </td> <td> U+00C4 </td> </tr>
    <tr> <td> <code title="">Beta</code> </td> <td> U+0392 </td> </tr>
    <tr> <td> <code title="">Ccedil</code> </td> <td> U+00C7 </td> </tr>
    <tr> <td> <code title="">Chi</code> </td> <td> U+03A7 </td> </tr>
    <tr> <td> <code title="">Dagger</code> </td> <td> U+2021 </td> </tr>
    <tr> <td> <code title="">Delta</code> </td> <td> U+0394 </td> </tr>
    <tr> <td> <code title="">ETH</code> </td> <td> U+00D0 </td> </tr>
    <tr> <td> <code title="">Eacute</code> </td> <td> U+00C9 </td> </tr>
    <tr> <td> <code title="">Ecirc</code> </td> <td> U+00CA </td> </tr>
    <tr> <td> <code title="">Egrave</code> </td> <td> U+00C8 </td> </tr>
    <tr> <td> <code title="">Epsilon</code> </td> <td> U+0395 </td> </tr>
    <tr> <td> <code title="">Eta</code> </td> <td> U+0397 </td> </tr>
    <tr> <td> <code title="">Euml</code> </td> <td> U+00CB </td> </tr>
    <tr> <td> <code title="">Gamma</code> </td> <td> U+0393 </td> </tr>
    <tr> <td> <code title="">Iacute</code> </td> <td> U+00CD </td> </tr>
    <tr> <td> <code title="">Icirc</code> </td> <td> U+00CE </td> </tr>
    <tr> <td> <code title="">Igrave</code> </td> <td> U+00CC </td> </tr>
    <tr> <td> <code title="">Iota</code> </td> <td> U+0399 </td> </tr>
    <tr> <td> <code title="">Iuml</code> </td> <td> U+00CF </td> </tr>
    <tr> <td> <code title="">Kappa</code> </td> <td> U+039A </td> </tr>
    <tr> <td> <code title="">Lambda</code> </td> <td> U+039B </td> </tr>
    <tr> <td> <code title="">Mu</code> </td> <td> U+039C </td> </tr>
    <tr> <td> <code title="">Ntilde</code> </td> <td> U+00D1 </td> </tr>
    <tr> <td> <code title="">Nu</code> </td> <td> U+039D </td> </tr>
    <tr> <td> <code title="">OElig</code> </td> <td> U+0152 </td> </tr>
    <tr> <td> <code title="">Oacute</code> </td> <td> U+00D3 </td> </tr>
    <tr> <td> <code title="">Ocirc</code> </td> <td> U+00D4 </td> </tr>
    <tr> <td> <code title="">Ograve</code> </td> <td> U+00D2 </td> </tr>
    <tr> <td> <code title="">Omega</code> </td> <td> U+03A9 </td> </tr>
    <tr> <td> <code title="">Omicron</code> </td> <td> U+039F </td> </tr>
    <tr> <td> <code title="">Oslash</code> </td> <td> U+00D8 </td> </tr>
    <tr> <td> <code title="">Otilde</code> </td> <td> U+00D5 </td> </tr>
    <tr> <td> <code title="">Ouml</code> </td> <td> U+00D6 </td> </tr>
    <tr> <td> <code title="">Phi</code> </td> <td> U+03A6 </td> </tr>
    <tr> <td> <code title="">Pi</code> </td> <td> U+03A0 </td> </tr>
    <tr> <td> <code title="">Prime</code> </td> <td> U+2033 </td> </tr>
    <tr> <td> <code title="">Psi</code> </td> <td> U+03A8 </td> </tr>
    <tr> <td> <code title="">Rho</code> </td> <td> U+03A1 </td> </tr>
    <tr> <td> <code title="">Scaron</code> </td> <td> U+0160 </td> </tr>
    <tr> <td> <code title="">Sigma</code> </td> <td> U+03A3 </td> </tr>
    <tr> <td> <code title="">THORN</code> </td> <td> U+00DE </td> </tr>
    <tr> <td> <code title="">Tau</code> </td> <td> U+03A4 </td> </tr>
    <tr> <td> <code title="">Theta</code> </td> <td> U+0398 </td> </tr>
    <tr> <td> <code title="">Uacute</code> </td> <td> U+00DA </td> </tr>
    <tr> <td> <code title="">Ucirc</code> </td> <td> U+00DB </td> </tr>
    <tr> <td> <code title="">Ugrave</code> </td> <td> U+00D9 </td> </tr>
    <tr> <td> <code title="">Upsilon</code> </td> <td> U+03A5 </td> </tr>
    <tr> <td> <code title="">Uuml</code> </td> <td> U+00DC </td> </tr>
    <tr> <td> <code title="">Xi</code> </td> <td> U+039E </td> </tr>
    <tr> <td> <code title="">Yacute</code> </td> <td> U+00DD </td> </tr>
    <tr> <td> <code title="">Yuml</code> </td> <td> U+0178 </td> </tr>
    <tr> <td> <code title="">Zeta</code> </td> <td> U+0396 </td> </tr>
    <tr> <td> <code title="">aacute</code> </td> <td> U+00E1 </td> </tr>
    <tr> <td> <code title="">acirc</code> </td> <td> U+00E2 </td> </tr>
    <tr> <td> <code title="">acute</code> </td> <td> U+00B4 </td> </tr>
    <tr> <td> <code title="">aelig</code> </td> <td> U+00E6 </td> </tr>
    <tr> <td> <code title="">agrave</code> </td> <td> U+00E0 </td> </tr>
    <tr> <td> <code title="">alefsym</code> </td> <td> U+2135 </td> </tr>
    <tr> <td> <code title="">alpha</code> </td> <td> U+03B1 </td> </tr>
    <tr> <td> <code title="">amp</code> </td> <td> U+0026 </td> </tr>
    <tr> <td> <code title="">AMP</code> </td> <td> U+0026 </td> </tr>
    <tr> <td> <code title="">and</code> </td> <td> U+2227 </td> </tr>
    <tr> <td> <code title="">ang</code> </td> <td> U+2220 </td> </tr>
    <tr> <td> <code title="">apos</code> </td> <td> U+0027 </td> </tr>
    <tr> <td> <code title="">aring</code> </td> <td> U+00E5 </td> </tr>
    <tr> <td> <code title="">asymp</code> </td> <td> U+2248 </td> </tr>
    <tr> <td> <code title="">atilde</code> </td> <td> U+00E3 </td> </tr>
    <tr> <td> <code title="">auml</code> </td> <td> U+00E4 </td> </tr>
    <tr> <td> <code title="">bdquo</code> </td> <td> U+201E </td> </tr>
    <tr> <td> <code title="">beta</code> </td> <td> U+03B2 </td> </tr>
    <tr> <td> <code title="">brvbar</code> </td> <td> U+00A6 </td> </tr>
    <tr> <td> <code title="">bull</code> </td> <td> U+2022 </td> </tr>
    <tr> <td> <code title="">cap</code> </td> <td> U+2229 </td> </tr>
    <tr> <td> <code title="">ccedil</code> </td> <td> U+00E7 </td> </tr>
    <tr> <td> <code title="">cedil</code> </td> <td> U+00B8 </td> </tr>
    <tr> <td> <code title="">cent</code> </td> <td> U+00A2 </td> </tr>
    <tr> <td> <code title="">chi</code> </td> <td> U+03C7 </td> </tr>
    <tr> <td> <code title="">circ</code> </td> <td> U+02C6 </td> </tr>
    <tr> <td> <code title="">clubs</code> </td> <td> U+2663 </td> </tr>
    <tr> <td> <code title="">cong</code> </td> <td> U+2245 </td> </tr>
    <tr> <td> <code title="">copy</code> </td> <td> U+00A9 </td> </tr>
    <tr> <td> <code title="">COPY</code> </td> <td> U+00A9 </td> </tr>
    <tr> <td> <code title="">crarr</code> </td> <td> U+21B5 </td> </tr>
    <tr> <td> <code title="">cup</code> </td> <td> U+222A </td> </tr>
    <tr> <td> <code title="">curren</code> </td> <td> U+00A4 </td> </tr>
    <tr> <td> <code title="">dArr</code> </td> <td> U+21D3 </td> </tr>
    <tr> <td> <code title="">dagger</code> </td> <td> U+2020 </td> </tr>
    <tr> <td> <code title="">darr</code> </td> <td> U+2193 </td> </tr>
    <tr> <td> <code title="">deg</code> </td> <td> U+00B0 </td> </tr>
    <tr> <td> <code title="">delta</code> </td> <td> U+03B4 </td> </tr>
    <tr> <td> <code title="">diams</code> </td> <td> U+2666 </td> </tr>
    <tr> <td> <code title="">divide</code> </td> <td> U+00F7 </td> </tr>
    <tr> <td> <code title="">eacute</code> </td> <td> U+00E9 </td> </tr>
    <tr> <td> <code title="">ecirc</code> </td> <td> U+00EA </td> </tr>
    <tr> <td> <code title="">egrave</code> </td> <td> U+00E8 </td> </tr>
    <tr> <td> <code title="">empty</code> </td> <td> U+2205 </td> </tr>
    <tr> <td> <code title="">emsp</code> </td> <td> U+2003 </td> </tr>
    <tr> <td> <code title="">ensp</code> </td> <td> U+2002 </td> </tr>
    <tr> <td> <code title="">epsilon</code> </td> <td> U+03B5 </td> </tr>
    <tr> <td> <code title="">equiv</code> </td> <td> U+2261 </td> </tr>
    <tr> <td> <code title="">eta</code> </td> <td> U+03B7 </td> </tr>
    <tr> <td> <code title="">eth</code> </td> <td> U+00F0 </td> </tr>
    <tr> <td> <code title="">euml</code> </td> <td> U+00EB </td> </tr>
    <tr> <td> <code title="">euro</code> </td> <td> U+20AC </td> </tr>
    <tr> <td> <code title="">exist</code> </td> <td> U+2203 </td> </tr>
    <tr> <td> <code title="">fnof</code> </td> <td> U+0192 </td> </tr>
    <tr> <td> <code title="">forall</code> </td> <td> U+2200 </td> </tr>
    <tr> <td> <code title="">frac12</code> </td> <td> U+00BD </td> </tr>
    <tr> <td> <code title="">frac14</code> </td> <td> U+00BC </td> </tr>
    <tr> <td> <code title="">frac34</code> </td> <td> U+00BE </td> </tr>
    <tr> <td> <code title="">frasl</code> </td> <td> U+2044 </td> </tr>
    <tr> <td> <code title="">gamma</code> </td> <td> U+03B3 </td> </tr>
    <tr> <td> <code title="">ge</code> </td> <td> U+2265 </td> </tr>
    <tr> <td> <code title="">gt</code> </td> <td> U+003E </td> </tr>
    <tr> <td> <code title="">GT</code> </td> <td> U+003E </td> </tr>
    <tr> <td> <code title="">hArr</code> </td> <td> U+21D4 </td> </tr>
    <tr> <td> <code title="">harr</code> </td> <td> U+2194 </td> </tr>
    <tr> <td> <code title="">hearts</code> </td> <td> U+2665 </td> </tr>
    <tr> <td> <code title="">hellip</code> </td> <td> U+2026 </td> </tr>
    <tr> <td> <code title="">iacute</code> </td> <td> U+00ED </td> </tr>
    <tr> <td> <code title="">icirc</code> </td> <td> U+00EE </td> </tr>
    <tr> <td> <code title="">iexcl</code> </td> <td> U+00A1 </td> </tr>
    <tr> <td> <code title="">igrave</code> </td> <td> U+00EC </td> </tr>
    <tr> <td> <code title="">image</code> </td> <td> U+2111 </td> </tr>
    <tr> <td> <code title="">infin</code> </td> <td> U+221E </td> </tr>
    <tr> <td> <code title="">int</code> </td> <td> U+222B </td> </tr>
    <tr> <td> <code title="">iota</code> </td> <td> U+03B9 </td> </tr>
    <tr> <td> <code title="">iquest</code> </td> <td> U+00BF </td> </tr>
    <tr> <td> <code title="">isin</code> </td> <td> U+2208 </td> </tr>
    <tr> <td> <code title="">iuml</code> </td> <td> U+00EF </td> </tr>
    <tr> <td> <code title="">kappa</code> </td> <td> U+03BA </td> </tr>
    <tr> <td> <code title="">lArr</code> </td> <td> U+21D0 </td> </tr>
    <tr> <td> <code title="">lambda</code> </td> <td> U+03BB </td> </tr>
    <tr> <td> <code title="">lang</code> </td> <td> U+2329 </td> </tr>
    <tr> <td> <code title="">laquo</code> </td> <td> U+00AB </td> </tr>
    <tr> <td> <code title="">larr</code> </td> <td> U+2190 </td> </tr>
    <tr> <td> <code title="">lceil</code> </td> <td> U+2308 </td> </tr>
    <tr> <td> <code title="">ldquo</code> </td> <td> U+201C </td> </tr>
    <tr> <td> <code title="">le</code> </td> <td> U+2264 </td> </tr>
    <tr> <td> <code title="">lfloor</code> </td> <td> U+230A </td> </tr>
    <tr> <td> <code title="">lowast</code> </td> <td> U+2217 </td> </tr>
    <tr> <td> <code title="">loz</code> </td> <td> U+25CA </td> </tr>
    <tr> <td> <code title="">lrm</code> </td> <td> U+200E </td> </tr>
    <tr> <td> <code title="">lsaquo</code> </td> <td> U+2039 </td> </tr>
    <tr> <td> <code title="">lsquo</code> </td> <td> U+2018 </td> </tr>
    <tr> <td> <code title="">lt</code> </td> <td> U+003C </td> </tr>
    <tr> <td> <code title="">LT</code> </td> <td> U+003C </td> </tr>
    <tr> <td> <code title="">macr</code> </td> <td> U+00AF </td> </tr>
    <tr> <td> <code title="">mdash</code> </td> <td> U+2014 </td> </tr>
    <tr> <td> <code title="">micro</code> </td> <td> U+00B5 </td> </tr>
    <tr> <td> <code title="">middot</code> </td> <td> U+00B7 </td> </tr>
    <tr> <td> <code title="">minus</code> </td> <td> U+2212 </td> </tr>
    <tr> <td> <code title="">mu</code> </td> <td> U+03BC </td> </tr>
    <tr> <td> <code title="">nabla</code> </td> <td> U+2207 </td> </tr>
    <tr> <td> <code title="">nbsp</code> </td> <td> U+00A0 </td> </tr>
    <tr> <td> <code title="">ndash</code> </td> <td> U+2013 </td> </tr>
    <tr> <td> <code title="">ne</code> </td> <td> U+2260 </td> </tr>
    <tr> <td> <code title="">ni</code> </td> <td> U+220B </td> </tr>
    <tr> <td> <code title="">not</code> </td> <td> U+00AC </td> </tr>
    <tr> <td> <code title="">notin</code> </td> <td> U+2209 </td> </tr>
    <tr> <td> <code title="">nsub</code> </td> <td> U+2284 </td> </tr>
    <tr> <td> <code title="">ntilde</code> </td> <td> U+00F1 </td> </tr>
    <tr> <td> <code title="">nu</code> </td> <td> U+03BD </td> </tr>
    <tr> <td> <code title="">oacute</code> </td> <td> U+00F3 </td> </tr>
    <tr> <td> <code title="">ocirc</code> </td> <td> U+00F4 </td> </tr>
    <tr> <td> <code title="">oelig</code> </td> <td> U+0153 </td> </tr>
    <tr> <td> <code title="">ograve</code> </td> <td> U+00F2 </td> </tr>
    <tr> <td> <code title="">oline</code> </td> <td> U+203E </td> </tr>
    <tr> <td> <code title="">omega</code> </td> <td> U+03C9 </td> </tr>
    <tr> <td> <code title="">omicron</code> </td> <td> U+03BF </td> </tr>
    <tr> <td> <code title="">oplus</code> </td> <td> U+2295 </td> </tr>
    <tr> <td> <code title="">or</code> </td> <td> U+2228 </td> </tr>
    <tr> <td> <code title="">ordf</code> </td> <td> U+00AA </td> </tr>
    <tr> <td> <code title="">ordm</code> </td> <td> U+00BA </td> </tr>
    <tr> <td> <code title="">oslash</code> </td> <td> U+00F8 </td> </tr>
    <tr> <td> <code title="">otilde</code> </td> <td> U+00F5 </td> </tr>
    <tr> <td> <code title="">otimes</code> </td> <td> U+2297 </td> </tr>
    <tr> <td> <code title="">ouml</code> </td> <td> U+00F6 </td> </tr>
    <tr> <td> <code title="">para</code> </td> <td> U+00B6 </td> </tr>
    <tr> <td> <code title="">part</code> </td> <td> U+2202 </td> </tr>
    <tr> <td> <code title="">permil</code> </td> <td> U+2030 </td> </tr>
    <tr> <td> <code title="">perp</code> </td> <td> U+22A5 </td> </tr>
    <tr> <td> <code title="">phi</code> </td> <td> U+03C6 </td> </tr>
    <tr> <td> <code title="">pi</code> </td> <td> U+03C0 </td> </tr>
    <tr> <td> <code title="">piv</code> </td> <td> U+03D6 </td> </tr>
    <tr> <td> <code title="">plusmn</code> </td> <td> U+00B1 </td> </tr>
    <tr> <td> <code title="">pound</code> </td> <td> U+00A3 </td> </tr>
    <tr> <td> <code title="">prime</code> </td> <td> U+2032 </td> </tr>
    <tr> <td> <code title="">prod</code> </td> <td> U+220F </td> </tr>
    <tr> <td> <code title="">prop</code> </td> <td> U+221D </td> </tr>
    <tr> <td> <code title="">psi</code> </td> <td> U+03C8 </td> </tr>
    <tr> <td> <code title="">quot</code> </td> <td> U+0022 </td> </tr>
    <tr> <td> <code title="">QUOT</code> </td> <td> U+0022 </td> </tr>
    <tr> <td> <code title="">rArr</code> </td> <td> U+21D2 </td> </tr>
    <tr> <td> <code title="">radic</code> </td> <td> U+221A </td> </tr>
    <tr> <td> <code title="">rang</code> </td> <td> U+232A </td> </tr>
    <tr> <td> <code title="">raquo</code> </td> <td> U+00BB </td> </tr>
    <tr> <td> <code title="">rarr</code> </td> <td> U+2192 </td> </tr>
    <tr> <td> <code title="">rceil</code> </td> <td> U+2309 </td> </tr>
    <tr> <td> <code title="">rdquo</code> </td> <td> U+201D </td> </tr>
    <tr> <td> <code title="">real</code> </td> <td> U+211C </td> </tr>
    <tr> <td> <code title="">reg</code> </td> <td> U+00AE </td> </tr>
    <tr> <td> <code title="">REG</code> </td> <td> U+00AE </td> </tr>
    <tr> <td> <code title="">rfloor</code> </td> <td> U+230B </td> </tr>
    <tr> <td> <code title="">rho</code> </td> <td> U+03C1 </td> </tr>
    <tr> <td> <code title="">rlm</code> </td> <td> U+200F </td> </tr>
    <tr> <td> <code title="">rsaquo</code> </td> <td> U+203A </td> </tr>
    <tr> <td> <code title="">rsquo</code> </td> <td> U+2019 </td> </tr>
    <tr> <td> <code title="">sbquo</code> </td> <td> U+201A </td> </tr>
    <tr> <td> <code title="">scaron</code> </td> <td> U+0161 </td> </tr>
    <tr> <td> <code title="">sdot</code> </td> <td> U+22C5 </td> </tr>
    <tr> <td> <code title="">sect</code> </td> <td> U+00A7 </td> </tr>
    <tr> <td> <code title="">shy</code> </td> <td> U+00AD </td> </tr>
    <tr> <td> <code title="">sigma</code> </td> <td> U+03C3 </td> </tr>
    <tr> <td> <code title="">sigmaf</code> </td> <td> U+03C2 </td> </tr>
    <tr> <td> <code title="">sim</code> </td> <td> U+223C </td> </tr>
    <tr> <td> <code title="">spades</code> </td> <td> U+2660 </td> </tr>
    <tr> <td> <code title="">sub</code> </td> <td> U+2282 </td> </tr>
    <tr> <td> <code title="">sube</code> </td> <td> U+2286 </td> </tr>
    <tr> <td> <code title="">sum</code> </td> <td> U+2211 </td> </tr>
    <tr> <td> <code title="">sup</code> </td> <td> U+2283 </td> </tr>
    <tr> <td> <code title="">sup1</code> </td> <td> U+00B9 </td> </tr>
    <tr> <td> <code title="">sup2</code> </td> <td> U+00B2 </td> </tr>
    <tr> <td> <code title="">sup3</code> </td> <td> U+00B3 </td> </tr>
    <tr> <td> <code title="">supe</code> </td> <td> U+2287 </td> </tr>
    <tr> <td> <code title="">szlig</code> </td> <td> U+00DF </td> </tr>
    <tr> <td> <code title="">tau</code> </td> <td> U+03C4 </td> </tr>
    <tr> <td> <code title="">there4</code> </td> <td> U+2234 </td> </tr>
    <tr> <td> <code title="">theta</code> </td> <td> U+03B8 </td> </tr>
    <tr> <td> <code title="">thetasym</code> </td> <td> U+03D1 </td> </tr>
    <tr> <td> <code title="">thinsp</code> </td> <td> U+2009 </td> </tr>
    <tr> <td> <code title="">thorn</code> </td> <td> U+00FE </td> </tr>
    <tr> <td> <code title="">tilde</code> </td> <td> U+02DC </td> </tr>
    <tr> <td> <code title="">times</code> </td> <td> U+00D7 </td> </tr>
    <tr> <td> <code title="">trade</code> </td> <td> U+2122 </td> </tr>
    <tr> <td> <code title="">uArr</code> </td> <td> U+21D1 </td> </tr>
    <tr> <td> <code title="">uacute</code> </td> <td> U+00FA </td> </tr>
    <tr> <td> <code title="">uarr</code> </td> <td> U+2191 </td> </tr>
    <tr> <td> <code title="">ucirc</code> </td> <td> U+00FB </td> </tr>
    <tr> <td> <code title="">ugrave</code> </td> <td> U+00F9 </td> </tr>
    <tr> <td> <code title="">uml</code> </td> <td> U+00A8 </td> </tr>
    <tr> <td> <code title="">upsih</code> </td> <td> U+03D2 </td> </tr>
    <tr> <td> <code title="">upsilon</code> </td> <td> U+03C5 </td> </tr>
    <tr> <td> <code title="">uuml</code> </td> <td> U+00FC </td> </tr>
    <tr> <td> <code title="">weierp</code> </td> <td> U+2118 </td> </tr>
    <tr> <td> <code title="">xi</code> </td> <td> U+03BE </td> </tr>
    <tr> <td> <code title="">yacute</code> </td> <td> U+00FD </td> </tr>
    <tr> <td> <code title="">yen</code> </td> <td> U+00A5 </td> </tr>
    <tr> <td> <code title="">yuml</code> </td> <td> U+00FF </td> </tr>
    <tr> <td> <code title="">zeta</code> </td> <td> U+03B6 </td> </tr>
    <tr> <td> <code title="">zwj</code> </td> <td> U+200D </td> </tr>
    <tr> <td> <code title="">zwnj</code> </td> <td> U+200C </td> </tr>
   </tbody>
  </table>



  <h2>Rendering <span title="TBW">[TBW]</span></h2>

  <p class="big-issue">This section will probably include details on
  how to render DATAGRID, drag-and-drop, etc, in a visual media, in
  concert with CSS.</p>

  <p>CSS UAs in visual media must, when scrolling a page to a fragment
  identifier, align the top of the viewport with the target element's
  top border edge.</p> <!-- XXX horiz pos given bidi, and not
  scrolling when not required to? -->


  <h3>Rendering and the DOM</h3>

  <p class="big-issue">This section is wrong. mediaMode will end up on
  Window, I think. All views implement Window.</p>

  <p>Any object implement the <code>AbstractView</code> interface must
  also implement the <code>MediaModeAbstractView</code> interface.</p>

  <pre class="idl">interface <dfn>MediaModeAbstractView</dfn> {
  readonly attribute DOMString <span>mediaMode</span>;
};</pre>

  <p>The <dfn><code>mediaMode</code></dfn> attribute on objects
  implementing the <code>MediaModeAbstractView</code> interface must
  return the string that represents the canvas' current rendering mode
  (<code>screen</code>, <code>print</code>, etc). This is a lowercase
  string, as <a
  href="http://www.w3.org/TR/CSS21/media.html#media-types">defined by
  the CSS specification</a>. <a href="#refsCSS21">[CSS21]</a></p>

  <p>Some user agents may support multiple media, in which case there
  will exist multiple objects implementing the
  <code>AbstractView</code> interface. Only the default view
  implements the <code>Window</code> interface. The other views can be
  reached using the <code>view</code> attribute of the
  <code>UIEvent</code> inteface, during event propagation. There is no
  way currently to enumerate all the views.</p>

  <!-- XXX examples! -->



  <h2>Things that you can't do with this specification because they
  are better handled using other technologies that are further
  described herein</h2>

  <p><em>This section is non-normative.</em></p>

  <p>There are certain features that are not handled by this
  specification because a client side markup language is not the right
  level for them, or because the features exist in other languages
  that can be integrated into this one. This section covers some of
  the more common requests.</p>

  <h3>Localisation</h3>

  <p>If you wish to create localised versions of an HTML application,
  the best solution is to preprocess the files on the server, and then
  use HTTP content negotation to serve the appropriate language.</p>

  <!-- <p>XXX example here</p> -->

  <h3>Declarative 2D vector graphics and animation</h3>

  <p>Embedding vector graphics into XHTML documents is the domain of
  SVG.</p>

  <!-- <p>XXX example here</p> -->

  <h3>Declarative 3D scenes</h3>

  <p>Embedding 3D imagery into XHTML documents is the domain of X3D,
  or technologies based on X3D that are namespace-aware.</p>

  <!-- <p>XXX example here</p> -->


  <h3><span title="SCS">[SCS]</span> Alternate style sheets: the <code>DocumentStyle</code> interface</h3>

  <p>This section describes an extension to the
  <code>DocumentStyle</code> interface introduced in DOM2 Style. <a
  href="#refsDOM2STYLE">[DOM2STYLE]</a></p>

  <p>It is expected that this section will be moved to a W3C CSS
  working group or WebAPI working group specification in the next few
  months.</p>

<pre class="idl">// Introduced in DOM Level 2: <a href="#refsDOM2STYLE">[DOM2STYLE]</a>
interface <dfn>DocumentStyle</dfn> {
  readonly attribute StyleSheetList <span>styleSheets</span>;

  // New in this specification:
           attribute DOMString <span>selectedStyleSheetSet</span>;
  readonly attribute DOMString <span>lastStyleSheetSet</span>;
  readonly attribute DOMString <span>preferredStyleSheetSet</span>;
  readonly attribute DOMStringList <span>styleSheetSets</span>;
  void <span>enableStyleSheetsForSet</span>(in DOMString name);
};</pre>

  <p>Any object implementing the <code>HTMLDocument</code> interface
  must also implement the <code>DocumentStyle</code> interface.</p>

  <p>For this interface, the <code>DOMString</code> values "null" and
  "the empty string" are distinct, and must not be considered
  equivalent.</p>

  <p>A style sheet is said to <dfn>have a title</dfn> if the
  <code>title</code> attribute or pseudo-attribute of the DOM node
  that introduced the style sheet is present and has a non-empty value
  (i.e. if the <code>title</code> attribute of the
  <code>StyleSheet</code> object returned by the <code>sheet</code>
  attribute of the <code>LinkStyle</code> interface of that DOM node
  is neither null nor the empty string).</p>

  <p>The new members are defined as follows:</p>

  <dl>
   <dt><dfn><code>selectedStyleSheetSet</code></dfn> of type <code>DOMString</code></dt>
   <dd>

        <p>This attribute indicates which style sheet set (<a
        href="#refsHTML4">[HTML4]</a>) is in use. This attribute is
        <span>live</span>; changing the disabled attribute on style
        sheets directly will change the value of this attribute.</p>

        <p>If all the sheets that are enabled and <span>have a
        title</span> have the <em>same</em> title (by
        <span>case-sensitive</span><!--XXX xref --> comparisons)
        then the value of this attribute must be exactly equal to the
        title of the first enabled style sheet with a title in the
        <code>styleSheets</code> list. Otherwise, if style sheets from
        different sets are enabled, then the return value must be null
        (there is no way to determine what the currently selected
        style sheet set is in those conditions).  Otherwise, either
        all style sheets that <span>have a title</span> are disabled,
        or there are no alternate style sheets, and
        <code>selectedStyleSheetSet</code> must return the empty
        string.</p>

        <p>Setting this attribute to the null value must have no
        effect.</p>

        <p>Setting this attribute to a non-null value must call
        <code>enableStyleSheetsForSet()</code> with that value as the
        function's argument, and set <code>lastStyleSheetSet</code>
        to that value.</p>

        <p>From the DOM's perspective, all views have the same
        <code>selectedStyleSheetSet</code>. If a UA supports multiple
        views with different selected alternate style sheets, then this
        attribute (and the <code>StyleSheet</code> interface's
        <code>disabled</code> attribute) must return and set the value
        for the default view.</p>

    </dd>

    <dt><dfn><code>lastStyleSheetSet</code></dfn> of type <code>DOMString</code>, readonly</dt>
    <dd>

        <p>This property must initially have the value null. Its value
        changes when the <code>selectedStyleSheetSet</code> attribute
        is set.</p>

    </dd>

    <dt><dfn><code>preferredStyleSheetSet</code></dfn> of type <code>DOMString</code>, readonly</dt>
    <dd>

        <p>This attribute must return the preferred style sheet set as
        set by the author. It is determined from the order of style
        sheet declarations and the <code>Default-Style</code> HTTP
        headers, as eventually defined elsewhere in this
        specification<!-- XXX xref -->. If there is no preferred style
        sheet set, this attribute must return the empty string. The
        case of this attribute must exactly match the case given by
        the author where the preferred style sheet is specified or
        implied. This attribute must never return null.</p>

    </dd>

    <dt><dfn><code>styleSheetSets</code></dfn> of type <code>DOMStringList</code>, readonly</dt>
    <dd>

        <p>This must return the <span>live</span> list of the
        currently available style sheet sets. This list is constructed
        by enumerating all the style sheets for this document
        available to the implementation, in the order they are listed
        in the <code>styleSheets</code> attribute, adding the title of
        each style sheet with a title to the list, avoiding duplicates
        by dropping titles that match
        (<span>case-sensitively</span><!-- XXX xref -->) titles that
        have already been added to the list.</p>

    </dd>

    <dt><dfn title="enableStyleSheetsForSet()"><code>enableStyleSheetsForSet(<var title="">name</var>)</code></dfn>, method</dt>
    <dd>

        <p>Calling this method must change the <code>disabled</code>
        attribute on each <code>StyleSheet</code> object with a title
        attribute with a length greater than 0 in the
        <code>styleSheets</code> attribute, so that all those whose
        title matches the <var title="">name</var> argument are
        enabled, and all others are disabled. Title matches must be
        <span>case-sensitive</span><!-- XXX xref -->.  Calling this
        method with the empty string disables all alternate and
        preferred style sheets (but does not change the state of
        persistent style sheets, that is those with no title
        attribute).</p>

        <p>Calling this method with a null value must have no
        effect.</p>

        <p>Style sheets that do not <span>have a title</span> are
        never affected by this method. This method does not change the
        values of the <code>lastStyleSheetSet</code> or
        <code>preferredStyleSheetSet</code> attributes.</p>

    </dd>
   </dl>

  <h4>Dynamically adding new style sheets</h4>

  <p>If new style sheets with titles are added to the document, the UA must
  decide whether or not the style sheets should be initially enabled or
  not. How this happens depends on the exact state of the document at
  the time the style sheet is added, as follows.</p>

  <h5>Adding style sheets</h5>

  <p>First, if the style sheet is a preferred style sheet (it has a
  title, but is not marked as alternate), and there is no current
  preferred style sheet (the <code>preferredStyleSheetSet</code>
  attribute is equal to the empty string) then the
  <code>preferredStyleSheetSet</code> attribute is set to the exact
  value of this style sheet's title. (This changes the preferred
  style sheet set, which causes further changes &mdash; see below.)</p>

  <p>Then, for all sheets, if any of the following is true, then the
  style sheet must be enabled:</p>

  <ul>

     <li> The style sheet has an empty title.</li>

     <li> The <code>lastStyleSheetSet</code> is null, and the style
     sheet's title matches (by <span>case-sensitive</span><!-- XXX
     xref --> match) the value of the
     <code>preferredStyleSheetSet</code> attribute.</li>

     <li> The style sheet's title matches (by
     <span>case-sensitive</span><!-- XXX xref --> match) the value
     of the <code>lastStyleSheetSet</code> attribute.</li>

  </ul>

  <p>Otherwise, the style sheet must be disabled.</p>


  <h5>Changing the preferred style sheet set</h5>

  <p>The first time the preferred style sheet set is set, which is
  either before any alternate style sheets are seen (e.g. using a
  "Default-Style" HTTP header), or is the first time a titled,
  non-alternate style sheet is seen (in the absence of information to
  the contrary, the first titled non-alternate sheet sets the name of
  the preferred set), the <code>preferredStyleSheetSet</code>
  attribute's value must be set to the name of that preferred style
  sheet set. This does not change the <code>lastStyleSheetSet</code>
  attribute.</p>

  <p>If the UA has the preferred style sheet set changed, for example
  if it receives a "Default-Style:" HTTP header after it receives HTTP
  "Link:" headers implying another preferred style sheet, then the
  <code>preferredStyleSheetSet</code> attribute's value must be
  changed appropriately, and, if the <code>lastStyleSheetSet</code> is
  null, the <code>enableStyleSheetsForSet()</code> method must be
  called with the new <code>preferredStyleSheetSet</code> value. (The
  <code>lastStyleSheetSet</code> attribute is, again, not
  changed.)</p>


 <h5> Examples</h5>
<div class="example">
  <p>Thus, in the following HTML snippet:</p>

<pre>&lt;link rel="alternate stylesheet" title="foo" href="a"&gt;
&lt;link rel="alternate stylesheet" title="bar" href="b"&gt;
&lt;script&gt;
  document.selectedStyleSheetSet = 'foo';
  document.styleSheets[1].disabled = false;
&lt;/script&gt;
&lt;link rel="alternate stylesheet" title="foo" href="c"&gt;
&lt;link rel="alternate stylesheet" title="bar" href="d"&gt;</pre>

  <p>...the style sheets that end up enabled are style sheets "a", "b",
  and "c", the <code>selectedStyleSheetSet</code> attribute would
  return null, <code>lastStyleSheetSet</code> would return "foo", and
  <code>preferredStyleSheetSet</code> would return "".</p>

 <p> Similarly, in the following HTML snippet:</p>

<pre>&lt;link rel="alternate stylesheet" title="foo" href="a"&gt;
&lt;link rel="alternate stylesheet" title="bar" href="b"&gt;
&lt;script&gt;
  var before = document.preferredStyleSheetSet;
  document.styleSheets[1].disabled = false;
&lt;/script&gt;
&lt;link rel="stylesheet" title="foo" href="c"&gt;
&lt;link rel="alternate stylesheet" title="bar" href="d"&gt;
&lt;script&gt;
  var after = document.preferredStyleSheetSet;
&lt;/script&gt;</pre>

  <p>...the "before" variable will be equal to the empty string, the
  "after" variable will be equal to "foo", and style sheets "a" and "c"
  will be enabled. This is the case even though the first script block
  sets style sheet "b" to be enabled, because upon parsing the
  following <code>&lt;link&gt;</code> element, the
  <code>preferredStyleSheetSet</code> is set and the
  <code>enableStyleSheetsForSet()</code> method is called (since
  <code>selectedStyleSheetSet</code> was never set explicitly, leaving
  <code>lastStyleSheetSet</code> at null throughout), which changes
  which style sheets are enabled and which are not.</p>
</div>

  <h4>Interaction with the User Interface</h4>

  <p>The user interface of Web browsers that support style sheets
  should list the style sheet titles given in the
  <code>styleSheetSets</code> list, showing the
  <code>selectedStyleSheetSet</code> as the selected style sheet set,
  leaving none selected if it is null or the empty string, and
  selecting an extra option "Basic Page Style" (or similar) if it is
  the empty string and the <code>preferredStyleSheetSet</code> is the
  empty string as well.</p>

  <p>Selecting a style sheet from this list should set the
  <code>selectedStyleSheetSet</code> attribute. This (by definition)
  affects the <code>lastStyleSheetSet</code> attribute.</p>


  <h5>Persisting the selected style sheet set</h5>

  <p>If UAs persist the selected style sheet set, they should use the
  value of the <code>selectedStyleSheetSet</code> attribute, or if
  that is null, the <code>lastStyleSheetSet</code> attribute, when
  leaving the page (or at some other time) to determine the set name
  to store. If that is null then the style sheet set should not be
  persisted.</p>

  <p>When re-setting the style sheet set to the persisted value (which can
  happen at any time, typically at the first time the style sheets are
  needed for styling the document, after the <code>&lt;head&gt;</code> of the document has
  been parsed, after any scripts that are not dependent on computed
  style have executed), the style sheet set should be set by setting the
  <code>selectedStyleSheetSet</code> attribute as if the user had selected the set
  manually.

  <p class="note">This specification does not give any suggestions on
  how UAs should decide to persist the style sheet set or whether or
  how to persist the selected set across pages.</p>


  <h4>Future compatibility</h4>

  <p>Future versions of CSS may introduce ways of having alternate
  style sheets declared at levels lower than the top level, i.e.
  embedded within other style sheets. Implementations of this
  specification that also support this proposed declaration of
  alternate style sheets are expected to perform depth-first traversals
  of the <code>styleSheets</code> list, not simply enumerations of the
  <code>styleSheets</code> list that only contains the top level.</p>




  <h3><span title="SCS">[SCS]</span> Timers</h3>

  <p>This section is expected to be moved to the Window Object
  specification in due course.</p>

<pre class="idl">
interface <dfn>WindowTimers</dfn> {
  // timers
  long <span>setTimeout</span>(in <span>TimeoutHandler</span> handler, in long timeout);
  long <span>setTimeout</span>(in <span>TimeoutHandler</span> handler, in long timeout, <var title="">arguments...</var>);
  long <span>setTimeout</span>(in DOMString code, in long timeout);
  long <span>setTimeout</span>(in DOMString code, in long timeout, in DOMString language);
  void <span>clearTimeout</span>(in long handle);
  long <span>setInterval</span>(in <span>TimeoutHandler</span> handler, in long timeout);
  long <span>setInterval</span>(in <span>TimeoutHandler</span> handler, in long timeout, <var title="">arguments...</var>);
  long <span>setInterval</span>(in DOMString code, in long timeout);
  long <span>setInterval</span>(in DOMString code, in long timeout, in DOMString language);
  void <span>clearInterval</span>(in long handle);
};

interface <dfn>TimeoutHandler</dfn> {
  void handleEvent(<var title="">arguments...</var>);
};
</pre>

  <p>The <code>WindowTimers</code> interface must be obtainable from
  any <code>Window</code> object using binding-specific casting
  methods.</p>

  <p>The <code>setTimeout</code> and <code>setInterval</code> methods
  allow authors to schedule timer-based events.</p>

  <p>The <dfn title="setTimeout"><code>setTimeout(<var
  title="">handler</var>, <var title="">timeout</var>[, <var
  title="">arguments...</var>])</code></dfn> method takes a reference
  to a <code>TimeoutHandler</code> object and a length of time in
  milliseconds. It must return a handle to the timeout created, and
  then asynchronously wait <var title="">timeout</var> milliseconds
  and then invoke <code>handleEvent()</code> on the <var
  title="">handler</var> object. If any <var
  title="">arguments...</var> were provided, they must be passed to
  the <var title="">handler</var> as arguments to the
  <code>handleEvent()</code> function.</p>

  <p>In the ECMAScript DOM binding, the ECMAScript native
  <code>Function</code> type must implement the
  <code>TimeoutHandler</code> interface such that invoking the
  <code>handleEvent()</code> method of that interface on the object
  from another language binding invokes the function itself, with the
  arguments passed to <code>handleEvent()</code> as the arguments
  passed to the function. In the ECMAScript binding itself, however,
  the <code>handleEvent()</code> method of the interface is not
  directly accessible on <code>Function</code> objects. Such functions
  must be called in the global scope.</p>

  <p>Alternatively, <dfn title=""><code>setTimeout(<var
  title="">code</var>, <var title="">timeout</var>[, <var
  title="">language</var>])</code></dfn> may be used. This variant
  takes a string instead of a <code>TimeoutHandler</code> object. That
  string must be parsed using the specified <var title="">language</var>
  (defaulting to ECMAScript if the third argument is omitted) and
  executed in the global scope.</p>

  <p class="big-issue">Need to define <var title="">language</var> values.</p>

  <p>The <dfn><code>setInterval(...)</code></dfn> variants must work
  in the same way as the <code>setTimeout</code> variants except that
  the <var title="">handler</var> or <code>code</code> must be invoked
  again every <var title="">timeout</var> milliseconds, not just the
  once.</p>

  <p>The <dfn><code>clearTimeout()</code></dfn> and
  <dfn><code>clearInterval()</code></dfn> methods take one integer (the
  value returned by <code>setTimeout</code> and
  <code>setInterval</code> respectively) and must cancel the specified
  timeout. When called with a value that does not correspond to an
  active timeout or interval, the methods must return without doing
  anything.</p>

  <p>Timeouts must never fire while another script is executing. (Thus
  the HTML scripting model is strictly single-threaded and not
  reentrant.)</p>




  <h2 class="no-num" id="references">References <span title="TBW">[TBW]</span></h2>

  <p class="big-issue">This section will be written in a future
  draft.<!--XXX--></p>

  <h2 class="no-num">Acknowledgements</h2>

  <p>Thanks to Aankhen, Aaron Leventhal, Alexey Feldgendler, Anne van
  Kesteren, Asbj&oslash;rn Ulsberg, Ben Godfrey, Ben Meadowcroft,
  Bjoern Hoehrmann, Boris Zbarsky, Brad Fults, Brad Neuberg, Brendan
  Eich, Channy Yun, Christian Biesinger, Chriswa, Darin Fisher, David
  Baron, David Hyatt, Derek Featherstone, David Flanagan, Dimitri
  Glazkov, dolphinling, Doron Rosenberg, Eira Monstad, Erik Arvidsson,
  fantasai, Franck 'Shift' Qu&eacute;lain, Henri Sivonen, Henrik Lied,
  H&aring;kon Wium Lie, James Graham, James Perrett, Jan-Klaas
  Kollhof, Jasper Bryant-Greene, Jens Bannmann, J. King, Joel Spolsky,
  Johnny Stenback, Jon Perlow, Jukka K. Korpela, Kai Hendry, Kornel
  Lesinski, Lachlan Hunt, Larry Page, Laurens Holst, Lenny Domnitser,
  L&eacute;onard Bouchet, Maciej Stachowiak, Malcolm Rowe, Mark
  Nottingham, Mark Schenk, Martijn Wargers, Martin Honnen, Matthew
  Mastracci, Matthew Raymond, Matthew Thomas, Mattias Waldau, Max
  Romantschuk, Michael A. Nachbaur, Michael Gratton, Michael 'Ratt'
  Iannarelli, Mihai &#x015E;ucan<!-- from ROBO Design -->, Mike
  Shaver, Mikko Rantalainen, Neil Deakin, Olav Junker Kj&aelig;r,
  Rimantas Liubertas, Robert O'Callahan, Roman Ivanov, S. Mike
  Dierken, Shaun Inman, Simon Pieters, Steven Garrity, Stewart Brodie,
  Stuart Parmenter, Tantek &Ccedil;elik, Thomas O'Connor, Tim Altman,
  Vladimir Vuki&#x0107;evi&#x0107;, and everyone on the WHATWG mailing
  list for their useful and substantial comments.</p>

  <p>Special thanks to Richard Williamson for creating the first
  implementation of <code>canvas</code> in Safari, from which the
  canvas feature was designed.</p>

  <p>Special thanks also to the Microsoft employees who first
  implemented the the event-based drag-and-drop mechanism,
  <code>contenteditable</code>, and other features first widely
  deployed by the Windows Internet Explorer browser.</p>

  <p>Special thanks and $10,000 to David Hyatt who came up with a
  broken implementation of the <a href="#adoptionAgency">adoption
  agency algorithm</a> that the editor had to reverse engineer and fix
  before using it in the parsing section.</p>

  <p>Thanks also the Microsoft blogging community for some ideas, to
  the attendees of the W3C Workshop on Web Applications and Compound
  Documents for inspiration, and to the #mrt crew, the #mrt.no crew,
  and the cabal for their ideas and support.</p>

  <!-- Hopefully Kam won't notice he's covered by these
  acknowledgements three times! -->

<!--
 !  menus

<hyatt> the ability to get the current focused window in a window hierarchy

wizards
tabbed interface

Application object? http://longhorn.msdn.microsoft.com/lhsdk/ref/ns/msavalon.windows/c/application/application.aspx

<input type="text" menu="foo" icon="g.png"/> <menu id="foo"> <menuitem icon="g.png" onclick="engine('google')">Google</menuitem> ... </menu>

> One more aspect I want you think about - for "user interface systems" in
> general: The windowing system.
>   Different kinds of windows ("document", "browser (file-system/network or
> otherwise)", "palette", "application modal dialog", "system modal dialog"),
> the rules for layering them (appropriately flexible to allow different
> implementations, e.g. MacOS vs. X-Windows), and simplifications for handheld
> devices (which are sometimes single window devices anyway, but sometimes
> they are one "normal" window plus sometimes one "dialog" window on top.

window.open for dialogs


Thus, they lack things like proper windows, tree 
widgets, menu bars, rich text areas and so forth. This is what I would 
like XUL to solve. - Paul Prescod




Olav:
> <product> to indicate something you can buy, like a cd on amazon
> or a biker jacket at harleydavidson.com


Drop downs often have a title for when there is no selection.

http://www.w3.org/mid/BAY1-F150PNOkJvX41K000418e1@hotmail.com

http://crew.tweakers.net/crisp/newlayout/index.html
http://crew.tweakers.net/crisp/newlayout/list_topics.html
http://crew.tweakers.net/crisp/newlayout/list_messages.html
http://crew.tweakers.net/crisp/newlayout/list_messages_mod.html

http://mail.mozilla.org/private/gui-toolkit/2004-April/000041.html

> > > A standard for rich edit widgets would also be of interest to me.
> >
> > As in WYSIWIG editing? Of the bold/italic/underline/larger/smaller kind?
> > 
> > Or do you mean as in the bare bones to be able to build an editor on top
> > of? As in something that basically just gives you a cursor and the ability
> > to tell where the selection is and some way to hook into the Undo
> > functionality?
> 
> I have use cases for both...I have a more desperate business need for
> the latter (and have build apps using the gross APIs out there today)
> but there are a lot of circumstances where an editor that already has
> all standard HTML editing behaviour would be fine.
>
- Paul Prescod

 * a way of selecting rows, so that you can declaratively have buttons
   outside the template that move a "selected row" around. => web apps


Calendar with list of days that have events (think: blog calendars)

Find object at (x,y)
Find mouse position

Styling scrollbars:

   ::scrollbars { ... }


table of contents?


http://www.gadgetopia.com/2004/05/04/FileIconTag.html


on going back
on going forward
on came from back
on came from forward
better state serialisation for going back/forward


some sort of markup to tell google _not_ to index a particular part of the site

drop down menu with URIs to replace the silly <select> hacks.

http://www.cs.tut.fi/~jkorpela/html/em.html

<htmlarea>, <xmlarea>...

> 3) Extensible syntax highlighting (coloring). I am aware that a ton of
> code editors don't even do this well. The ability to load a syntax
> definition file and have it color a block of code would do wonders for
> making the web a more friendly place to script.
 - Ryan Johnson

toolbars, status bars. - Didier PH Martin

   * methods/properties for scrolling managing, especially in
   TextArea, such as .scrollTop and .scrollHeight in Mozilla and -


Robert Bateman:

   I've looked thru as many of the examples from around the web as I can find and
   don't see an obvious way to do date calculations.

   What I'm trying to do is populate an xsd:date field with now() plus 5 days as
   it's default value.  The field in question is a proposed "due date" for a
   work order.

   I've seen that I can get a "difference" between two dates, but no
   calculations.


Wladimir Palant pointed out problems with chunking with server-sent-events



> 2.  Some method of integration to allow Web apps to respond
>      to the browser's Cut, Copy, Paste, and Select All menu
>      items and keyboard equivalents. These work automatically
>      for text fields in any Web application; it would be
>      great if apps could make them work for stocks, address
>      book cards, message attachments, transactions, photos,
>      and so on too.
>
>      I'd add Undo and Redo to that list, but unfortunately
>      IE6 doesn't have Undo and Redo menu items.
 - mpt



>> maybe except for the server sent events and the clipboard
>> api (but even in those cases it might be possible).
>
> Clipboard API I don't really want to see, given the problems IE's
> implementation of such brought up. A better standardised drag-and-drop
> interface would be great though, as doing it with mouse events and IE's
> proprietary events is annoying-to-impossible to get right all the time.
>
> I really like the idea of server-side events, though I would prefer to
> have them set up by a scripting call rather than an HTML element.
 - Andrew Clover


    <html application="application">

...would, instead of showing the Web page itself, the first time, show
(inline in the browser):

  :::: Security Warning :::::::::::::::::::::::::::::::::::::
  ::                                                       ::
  ::  The Web page at this domain:                         ::
  ::                                                       ':
  ::     paypcl.com                                        
  ::                                                       
  ::  ...wishes to launch an application in a separate     
  ::  window. Do you trust this domain?                    
  ::                                                       
  ::  [x] Remember this decision.                          
  ::                                                       
  ::      (( Trust paypcl.com ))  ( Display as Web page )  
  ::                                                      
  :::::.
- (spurred on by Jose Dinuncio)


  :::: Security Warning :::::::::::::::::::::::::::::::::::::
  ::                                                       ::
  ::  This Web page wishes to launch an application in a   ::
  ::  separate window. Do you trust this domain?           ::
  ::                                                       ::
  ::     paypcl.com                                         '
  ::                                                       
  ::             ( Trust this site for now )
  ::
  ::              ( Always trust this site )
  ::
  ::              (( Display as Web page ))
  ::                                                      
  :::::.


breadcrumb navigation markup
other markup:
   http://www.stuffandnonsense.co.uk/archives/whats_in_a_name_pt2.html


common icons: http://www.intersmash.com/300images/


http://www.gadgetopia.com/2004/06/18/DoYouWantToSaveYourChanges.html#Comments

http://www.mojavelinux.com/cooker/demos/domTT/index.html

http://www.mozilla.org/projects/ui/accessibility/dynamic-accessibility.html

http://blog.colorstudy.com/ianb/weblog/2004/06/23.html
http://daringfireball.net/2004/06/location_field

listview/gridview API
http://www.activewidgets.com/grid/


> I would rather have it that changing the dom attribute 'value' or typing
> in the textarea, would also change the contents of the textnode in the
> textarea.
>
> In that way the dom level 2 traversal and range specification would not
> be useless for textarea's.
> 
> The same goes for input text controls and probably also for other form
> controls.
 - martijnw



1. point to an xml instance and cause the page to be filled in
2. serialise the site to a version of that xml instance

<menu>
 <li state="bar"/>
</menu>
<button state="bar"/>
<state id="bar" label="" disabled="" value=""/>

<input state="foo"/>
<input state="foo"/>
<input state="foo 2"/>
<input state="foo 2"/>
<state id="foo" model="x" ref="cat:orderLine[$v1]/cat:foo"/>

<instance src=""/>

<instance id="x">

<Order xmlns="urn:oasis:names:tc:ubl:Order:1.0:0.70" xmlns:cat="urn:oasis:names:tc:ubl:CommonAggregateTypes:1.0:0.70">
  <cat:ID/>
  <cat:IssueDate/>
  <cat:LineExtensionTotalAmount currencyID="USD"/>
  <cat:BuyerParty>
    <cat:ID/>
    <cat:PartyName>
      <cat:Name/>
    </cat:PartyName>
    <cat:Address>
      <cat:ID/>
      <cat:Street/>
      <cat:CityName/>
      <cat:PostalZone/>
      <cat:CountrySub-Entity/>
    </cat:Address>
    <cat:BuyerContact>
      <cat:ID/>
      <cat:Name/>
    </cat:BuyerContact>
  </cat:BuyerParty>
  <cat:SellerParty>
    <cat:ID/>
    <cat:PartyName>
      <cat:Name/>
    </cat:PartyName>
    <cat:Address>
      <cat:ID/>
      <cat:Street/>
      <cat:CityName/>
      <cat:CountrySub-Entity/>
    </cat:Address>
  </cat:SellerParty>
  <cat:DeliveryTerms>
    <cat:ID/>
    <cat:SpecialTerms/>
  </cat:DeliveryTerms>
  <cat:OrderLine>
    <cat:BuyersID/>
    <cat:SellersID/>
    <cat:LineExtensionAmount currencyID=""/>
    <cat:Quantity unitCode="">1</cat:Quantity>
    <cat:Item>
      <cat:ID/>
      <cat:Description>Enter description here</cat:Description>
      <cat:SellersItemIdentification>
        <cat:ID>Enter part number here</cat:ID>
      </cat:SellersItemIdentification>
      <cat:BasePrice>
        <cat:PriceAmount currencyID="">0.00</cat:PriceAmount>
      </cat:BasePrice>
    </cat:Item>
  </cat:OrderLine>
</Order> 

</instance>




  <h2>Tree and List Widgets</h2>
   click item to go uri
   doube click to submit form with value
   sort list by any column
   specify column headers, column sort types
   specify data inline, or out of band
   data can be linear or a one way tree
   rows can have an icon associated with them
   rows can have overlays associated with them

 progress meter

    http://www.gazingus.org/html/menuDropdown.html



Disclosure triangles


I think UAs should automatically highlight the accesskey (or add it in    
brackets if it isn't already in the string). I am thinking of writing some
text - optional, of course, since this wouldn't apply to all UAs or all  
platforms - that specifies this.

I also think that there should be an accesskey value which is basically   
"auto", and which picks a non-clashing access key based on the element    
content.



| adding HTTP authentication capabilities to HTML allow sites to:
|   - remove a site's authentication state from the browser when
|     activated (i.e., a "log out" interface)
|   - add user data to a site's authentication state in the browser
|     (i.e., "log on" interfaces)
|   - display the user's current authentication state
| 
| There are a few good reasons to do this. Many sites use cookies to
| authenticate users, because HTTP authentication doesn't have any
| mechanism to allow logging out (a key requirement of financial
| institutions and other sensitive applications), and because the UI for
| HTTP authentication can't be controlled, and doesn't offer an
| "anyonymous" / "not logged in" view.
| 
| By accommodating HTTP authentication in Web forms, it will be possible
| to have styled, custom "log on" interfaces as part of pages, as well
| as "log out" facilities, while still retaining the benefits of HTTP
| authentication.
| 
| Specifically, HTTP authentication is more secure than cookies (when
| Digest auth is used), and is more amenable to automated processes
| (agents, spiders, etc.) as well as alternate browsing devices (screen
| readers, etc.).


http://jogin.com/weblog/archives/2004/07/19/hierarchy


Yeah, <header> and <footer> or similar elements are almost certainly going
to be defined at some point, along with <content> (for the main body of
the page), <entry> or <post> or <article> to refer to a unit of text
bigger than a section but smaller than a page, <aside> to mean a
side bar, <note> to mean a note... and so forth. Suggestions welcome.     
We'll probably keep it to a minimum though. The idea is just to relieve   
the most common pseudo-semantic uses of <div>.


http://lxr.mozilla.org/seamonkey/source/dom/public/idl/base/nsIDOMWindow.idl
scrollBy, etc
http://lxr.mozilla.org/seamonkey/source/dom/public/idl/base/nsIDOMWindowInternal.idl
DOM level 0


DH: I was arguing that you should be able to get the CSS info for
document fragments if you had an owner document with CSS in it.



So maybe:

   var library = new ZipFile("data.zip");
   library.onload = function() {
      var sound1 = library.getAudio("sound1.wav"); // returns an Audio object
      var image1 = library.getImage("image1.png"); // returns an HTMLImageElement
      var doc1 = library.getXMLDocument("doc1.xml"); // returns a Document
      var doc2 = library.getHTMLDocument("doc1.html"); // returns an HTMLDocument
   }

Also maybe supporting more than one file at a time:

   var library = new ResourceLoader("data.zip");
   library.add("moredata.zip");
   library.onload = function() { ... }
   library.onloading = function() {
      reportLoadProgress(library.progress); // 0.0 .. 1.0
   }

...although I'm not sure how we would then deal with filename clashes.

   var library = new AudioZip("sounds.zip");
   library.onload = function() {
      var sound1 = library["sound1.wav"];
      sound.play();
   }


If we define onbeforeunload, then we have to say that the JS
implementation of EventListener::handleEvent checks for that event,
treating the return value as the string to use for the unload warning
message if there is a return value, and calling preventDefault if
there isn't.


> > > Schematic editors, layout editors, interactive maps, data 
> > > visualization for network flows, etc.
> Searching the web for the above keywords should find you a lot more.
 - Denis Bohm



Jens Meiert:
- For non-native English speakers, it's sometimes difficult to understand
the difference between <cite /> and <quote />, since citations often seem to
be quoted, too (this is a presentational aspect, I know).
- Is it right that the <dfn /> element [1] /must/ be used only in the
context of the definition of the enclosed term (as the example suggests)?
(If so, wouldn't it be useful to add this note, too?)
- Last, ain't it still kind of misleading that the definition list [2] is
called like this, though it rather seems like a kind of 'assigment' or
'attribution list'? (I always wondered about this a bit.)


http://secunia.com/advisories/9711/
In particular number 7. - Chris Hofmann


> [1] http://www.stopdesign.com/log/2004/08/25/microsoft-advances.html
> [2] http://www.stopdesign.com/articles/throwing_tables/


In other areas, however, the replacement is not a match in terms of functionality. Like it or not, but showModalDialog is a better way to provide feature-rich user feedback windows than window.confirm (which Firefox supports, even though there is NO PUBLIC STANDARD for it). With showModalDialog, I can pop a window offering "Yes," "No," or "Cancel" buttons that requires a response before proceeding. With window.confirm, I have to craft all my questions as something to which "OK" or "Cancel" makes sense, never mind asking for three, four, or five state responses.
- http://news.zdnet.com/2100-9588-5438955.html ( John Carroll )



> http://channel9.msdn.com/wiki/default.aspx/Channel9.InternetExplorerFeatureRequests
>    Alternate way of caching content
>    Avalon Integration
>    getData/setData improvement (clipboardData)
>    Input type=file improvements
>    HTML editing: Editing Tables
>    Input type=file improvements
>    .NET framework
>    
> http://channel9.msdn.com/wiki/default.aspx/Channel9.InternetExplorerOutrageous
>     Some decent controls
 - lachlan.hunt@lachy.id.au


http://lists.w3.org/Archives/Member/w3c-html-wg/2004JulSep/att-0135/role072704a.html


> I've encountered two situations where setting or retrieving the caret
> position would be useful.  The first is a situation where I'd like to
> apply an input mask to a text box.  For example, I'd like the ability to
> create a text box where the date delimiters (dashes or slashes) appear  
> automatically in a text box upon entering the field, and when the user  
> types in the field, it fills into the appropriate spaces in the input    
> box and sets the text selection to the next appropriate position, all    
> while allowing the user to reposition the cursor within the text box     
> with a keyboard or mouse without being able to edit or delete the
> delimiters (dashes or slashes).  This would be very similar to input
> mask features in certain native apps that I've used.
 - Greg Kilwein

> The second situation is an application that would like to highlight text  
> in a text box or textarea for the purposes of a spell check, thesaurus, 
> or search-and-replace operation.
 - Greg Kilwein




HTMLImageElement.click(x, y); (for Csaba Gabor)
or clickPoint, if click() can't be done in IE
can this be emulated in IE by posting a synthetic moue click event
with those X and Y coords?


<menulabel>, or rather menus in general, need an icon attribute and a
hide attribute, like the <command> element.


What about safe clipboard access.
As discussed before by others as well:
The user initiates a paste action as recognized by the UISystem the user is working in.
E.g pressing Ctrl-V or selecting paste from a context menu.
An event is fired and a Listener can now access the pasted data as part of the event object.
The same for cut and copy. The Listner can set data as part of the event object.
This is safe and will not allow any script to mess with the clipboard without the user specifically asking for it
by initiating a cut/copy/paste action.
 -  Jan-Klaas Kollhof


Need to say that NodeList's items are enumerable, so that for (var x in myNodeList) { } works.
 thank Dethe Elza

rel="" on submit buttons?

what does <label> _mean_? how about an empty one, one which contains
more than one control, no controls?


data: URIs and same-origin policy when navigated to from http:?
 - Hallvord Reiar Michaelsen Steen


need conformance section for editors, which says stuff like "can't be
conforming if editor has an "italics" button"

people want multiline tooltips with explicit line breaks



attributes of type ID that have no value beyond the empty string do
not give the element an ID of "".


ability for a web app to save a file to the local disk:
   var file = window.openFile(); // throws up UI
   file.read();
   var file = window.saveAsFile(); // throws up UI
   file.write();
...or something? Or use data: URIs and right-click-to-save?

http://lxr.mozilla.org/mozilla/source/dom/public/idl/html/nsIDOMNSHTMLDocument.idl


  <p><em>This section is non-normative.</em></p>


how to handle 404s and 500s and other non-OK responses when it comes
to <script>, <link>, <style>, etc.


normative classes:
  example
  note
  warning



<Hixie> vlad: you should define what the UA should do with out-of-order aDATs
<pav> its an error
<pav> pretty sure we say that somewhere
<Hixie> yes i know it's an error
<Hixie> but that doesn't say what the UA should do
<pav> error == image is invalid
<vlad> yep
<vlad> either broken image icon
<vlad> or display first frame (fall back to normal PNG)
<vlad> up to the UA
<Hixie> right
<Hixie> you should say which one
<pav> its up to the UA
<Hixie> why?
<vlad> "SHOULD display the first frame, but MAY display broken image icon if that's not convenient", in rfc parlance
<vlad> because it's not useful to specify that, IMO
<Hixie> up to the UA means one UA will implement something, it'll become a popular UA, then all the others will have to copy it.
<vlad> how a UA wants to handle image errors is up to the UA
<pav> we're designing an image format, not the html image tag
<pav> the html spec should say what to do with it


should we say that elements in HTML must be lowercase? (but with error
handling for uppercase tags, obviously)? If so, update examples.

<title> is for out of context headers
<h1> is for in-context headers

The parsing rules of HTML

media="" is case-insensitive
case-sensitivity of other attributes, and what it means

empty title attribute is equivalent to missing attribute for purposes
of alternate style sheet processing


<p>s that contain <ul><ol><table><dl><blockquote>? (did we get all those?)



> I'd like search engines to be able to show me the title of a page in the
> same consistent position in a search result, and the name of the site
> (if available) in the same consistent position in a search result, and
> the name of the author (if available) in the same consistent position in
> a search result.
>  
> For that to happen, it would help slightly if the HTML specification
> stopped SHOULD-ing the current <title> behavior. It would help more if
> the HTML specification contained clear, straightforward markup for
> author and site name (and encouraged UAs to present this information   
> when the document is taken out of context).

   <title site="" publisher="" author="">Page Title</title>
   <title>Page Title - <site></site> - <author></author> (<publisher></publisher>)</title>

   <title>Page Title</title>
   <link rel="top" title="" href="">
   <link rel="publisher" title="" href="">
   <link rel="author" title="" href="">


 h1 is styled appropriately, h2 to h6 are styled according to legacy.


[onclick] should make element focusable; enter should send onclick

define implied <html>, <head>, <body>, <p>, </p>, etc.

http://www.aujsproduction.com/samples/wishlist/revampedselector.asp


interactive elements can't be nested (as in <a><button><input></button></a>)


need a summary of all the content models and how they interact:
   a | interactive strictly inline-level element   | where inline-level content is expected | strictly inline-level content  | interactive elements must not be nested
   i | strictly inline-level element               | where inline-level content is expected | strictly inline-level content  |
  em | strictly inline-level element               | where inline-level content is expected | inline-level content           |
   p | block-level element, structured inline-     | where block-level content is expected, | inline-level content           | must not be nested
     | level element                               | where inline-level content is expected |                                |
...etc


need a summary of the differences between the HTML and XML serialisations.
e.g. how <p><ul> is allowed in one but not the other



Google suggest: oninput -> submit a form whose only contents is the
drop down list which you refresh (<datalist>).

Inline editing of <select multiple=""> boxes

image buttons shouldn't be used unless you want the coordinate

need for the spec to say something about sending proprietary data over
the network, e.j. in XMLHttpRequest and other data streams. Is it ok,
if the page is doing the translation?

built-in spell-checking in <input type="text">, <textarea>

author-driven highlighting of individual words in text fields


support access Array element via () instead of [] (IEism)
- https://bugzilla.mozilla.org/show_bug.cgi?id=289876


atom can do this:
       <author>
         <name>Mark Pilgrim</name>
         <uri>http://example.org/</uri>
         <email>f8dy@example.com</email>
       </author>
       <contributor>
         <name>Sam Ruby</name>
         <uri>http://intertwingly.net/blog/</uri>
       </contributor>
how do we do this in HTML5? (what's the use case?)

how to interpret an HTML5 document for syndication
http://hixie.ch/specs/hsf/hsf



section "rendering HTML" has to cope with:
 <q> element's quotes
 <section> <h1>
 default margins and paddings for <ul>, <form>, etc.

  <h4>The <code>q</code> element</h4>
  <p class="big-issue">Need to deal with the quotemark problem without
  adding verbose markup, breaking existing documents, or adding
  redundant elements.</p>



<Hixie> here's how <object> works (assuming you don't support ActiveX)
<Hixie> 1. look at the data="" attribute. If it's not there, go to the step i'll label "bail" below.
<Hixie> 2. fetch the file indicated by the data="" attribute.
<Hixie> 3. while waiting for the MIME type, treat <object> as a replaced element of transparent nothingness, intrinsic size zero.
<hyatt> (so we would honor width/height)
<hyatt> (because it's replaced)
<Hixie> (yes)
<Hixie> 4. if the MIME type is a long time coming (e.g. DNS is being slow) then jump to the "bail" step below until you have the MIME type, then jump back to step 5.
<Hixie> 5. Once you have the MIME type, examine it. If it's a plugin type, jump to the plugin step below. If it's an image, jump to the image step below. If it's a document type (HTML, XML, etc) jump to the iframe step below. Otherwise, you don't recognise it, and jump to the "bail" step.
<Hixie> plugin step: collect all the <param> element children in the <object>. instantiate the plugin and pass the params to it.
<Hixie> image step: render the <object> as if it was an <img>
<Hixie> document step: render the <object> as if it was an <iframe>
<Hixie> bail step: render the <object> as if it was a <span>
 - if there is no authoratative MIME type, then use the type="" attribute.
 - if type="" is something you know you don't support, you MAY not download it
 - if type="" is dynamically changed, do nothing
 - if data="" is dynamically changed, redo loop

<hyatt> apparently your url can come from <param>
<hyatt> not just the data attribute
<hyatt> our code looks for params with "src", "movie", "code" and "url"
<hyatt> and also tries to find the type on a param
<Hixie> oh that's you trying to have hacky activex support
<Hixie> opera does that too
<hyatt> yeah we support activex versions of plugins that are common
<hyatt> like flash and quicktime and realaudio
<Hixie> that would be a step 1b. if no data attribute, then look for a <param> to get you a URL instead.
<Hixie> and if you find one, carry on as if that was your data="".


XMDP or something should be at the end of profile="".



should have some text talking about the fact that it's ok if your page
passes through a period of non-conformance while script is running,
but that in between scripts it should be compliant.


how to handle 205 reset content responses and other HTTP codes in
response to link clicks, link clicks with target="" attributes,
window.open(), the user typing a URI in the URL bar, etc.

XXX Native code for fast sorting of many data?

http://www.microsoft.com/mind/1097/directanim.asp


events: onmousewheel
<hyatt> with a wheelDelta field on the WheelEvent (whcih comes off UIEvent)
<hyatt> but in OS X you can wheel horizontally 
<hyatt> so we actually added wheelX, wheelY, and wheelZ
<hyatt> with wheelDelta just mapping to wheelY for WinIE compat
<Hixie_> oh i don't mind wheelZ, maybe we can even say ctrl+wheel should map to it on some platforms (windows)
<hyatt> but if you hold down Shift+mouse wheel in mac apps on os x you'll wheel horizontally
wheelDelta is multiples of 120
http://msdn.microsoft.com/workshop/author/dhtml/reference/properties/wheeldelta.asp

events:
http://damowmow.com/temp/safari/WebCore-315/khtml/ecma/kjs_events.cpp

Need to resolve whether <a rel=""> should affect an out-of-band UI (or
whether it should just be a may), see
https://bugs.opera.com/show_bug.cgi?id=169791


should have appendix listing what was already implemented
- http://www.xml.com/pub/a/2005/04/27/deviant.html

| Hixie and Steven shared an item: in both XHTML2 and HTML5, it will
| be possible to have a list child of a paragraph. That's good, from a
| structural point of view. But that's bad, from a user's point of
| view. Imagine you have a paragraph, with red background color. And
| you have an unordered list in your clipboard. You place the caret at
| the end of the paragraph and paste your list. Where does it end up?
| In the paragraph or after it? Red background or not? I really fear
| that, once again, document model authors are completely neglecting
| the authoring side.
 - http://www.glazman.org/weblog/dotclear/index.php?2005/05/27/1055-adam-2

need to define how to process MIME types in <style> and <script> and so forth.

http://www.paulgraham.com/popular.html



  <p>In the ECMAScript binding, objects implementing this interface
  can also be dereferenced using square bracket notation (e.g.
  <code>foo[1]</code> or <code>foo["bar"]</code>). Dereferencing with
  an integer index is equivalent to invoking the <code>item()</code>
  method with that index, and dereferencing with a string index is
  equivalent to invoking the <code>namedItem()</code> method with that
  index.</p>


"you have mail": bubble notification; flash taskbar button, 
=> how do you stop advertisers?


XXX The term "HTML elements" is not defined, yet is used in
conformance requirements.


events should bubble from documents to Window

say something about events fired on <body> -> document -> window, like
onload? onpopstate is defined as body->html->doc->window; as is the
local storage event. What about the old ones, how do they work? load,
error, scroll, resize, etc?

If we assuming that bubbling events bubble from document to window,
then it seems reasonable for scroll events that bubble to be fired at
the document if the window is resized, and scroll events that don't
bubble to be fired at elements if they are scrolled. window.onscroll
and document.onscroll should both work.


[HIT TESTING TRANSPARENCY]
Definition: IE considers a point of an element "transparent" if any
one of the following are true:

 1. All of the following are true:
    a: The computed value of 'background-image' is 'none', and
    b: The computed value of 'background-color' is 'transparent', and
    c: The point is over a pixel of an AlphaImageLoader filter image
       that has an alpha value of 0 (fully transparent), or the
       element does not have an AlphaImageLoader filter applied;

 2. The point is outside the element's CSS clip rectangle;

 3. The computed value of 'visibility' is 'hidden';

 4. The element is a transparent IFRAME (in IE, an IFRAME with the
    custom attribute "allowtransparency");

 5. The element is an OBJECT with the custom attribute "wmode" set to 
    "transparent" and the point in question is fully transparent.

Given those definitions, when a mouse event occurs, IE finds the
target element as follows:

   A. Take the topmost node that is under the point where the pointer
      was for the event. For CSS boxes, borders, padding areas and
      content areas are considered part of the node, margins and
      leading generated by the 'line-height' property are not.

   B. If there is no node at that point, no event is fired. STOP.

   C. If the node is a text node, then the event is fired at the text
      node's nearest ancestor element node. STOP.

   D. If the node is not an element, assign the node's nearest
      ancestor element node to a variable X. Otherwise, assign the
      element node itself to X.

   E. If the element X is the BODY element or the HTML element and its
      document is not the document of a transparent IFRAME, goto step
      H. Similarly, if the element X is a TABLE element, or is an IMG
      element, goto step H.

   F. If the point where the pointer was is, per the above definition,
      a point that on the element X is transparent, then ignore that
      element and assign the element that is below that element in the
      stacking order to X. If there is no element below X, or if the
      point on X is not transparent and so the previous condition
      doesn't apply, then leave X as is and go straight to step H.

   G. Goto step E.

   H. If the element X is now a BODY or TABLE element, but the element
      assigned to X in step D was some other element, assign the
      element originally assigned in step D back to X.

   I. The event goes to X. STOP




XXX define "security exception".

mousedown's default action is focus, so cancelling mousedown stops focus transference.
e.g. on http://www.mozilla.org/editor/midasdemo/

xref all the _ERR exceptions to DOM3CORE


<select><option><hr> support


raising an exception when the wrong number of arguments is passed -
is that a language-specific thing, or what?

why |new XMLHttpRequest()| returns an object that .toStrings to
[object XMLHttpRequest], same with new TCPConnection(); what if a
constructor is called without using "new" in JS?


reload: fire an event when "reload" is pressed so that the page can
reload its data instead of the whole page. cancel the event cancels
the HTTP reload. Abuse prevention required, though.


load event: fire on body, document, window? or just let it bubble?


http://msdn.microsoft.com/workshop/author/dhtml/reference/methods/elementfrompoint.asp
http://msdn.microsoft.com/workshop/author/dhtml/reference/methods/showmodaldialog.asp


refs for TCP/IP (rfc793) and IPv6

http://www.joelonsoftware.com/items/2004/06/17.html
http://www.joelonsoftware.com/items/2004/06/18.html


<neutralise> block that kills scripting or anything dangerous?


XXXX need explanation of when to use undo/redo, and when to use back/forward

XXX "alternate style sheet" should be "alternative style sheet"




  <h5>Using the <code>a</code> element with the <code>command</code> attribute</h5>

  <p>If an <code>a</code> element has a <code
  title="command-attribute">command</code> attribute, then:</p>

  <p>If the element's <code>title</code> attribute is absent, then
  when the UA attempts to display the element's hint, it must instead
  use the specified command's Hint.</p>

  <p>Even if the element's <code>href</code> attribute is absent, the
  element must still match the CSS <code>:link</code> or
  <code>:visited</code> pseudo-classes. It must match the
  <code>:visited</code> pseudo-class if the command's action is to
  follow a link that has already been visited by the user, and must
  match the <code>:link</code> pseudo-class otherwise.</p>

  <p>If a <code>DOMActivate</code> event is dispatched on the element
  and is not canceled, and the event has no other default action, and
  the command's Disabled State is false (enabled), then the command's
  Action must be triggered as the default action.</p>

  <p class="note">The <code>DOMActivate</code> event is fired as the
  default action of the <code>click</code> event.</p>

  <p>If the command's Disabled State is true (disabled) then the
  element must be disabled and must therefore match the
  <code>:disabled</code> pseudo-class. UAs should style disabled links
  in such a way as to clearly convey their disabled state.</p>

  <p>The Label, Icon, Checked State and Type facets of the command are
  ignored by the <code>a</code> element (except for <a
  href="#pseudosAndCommands">matching CSS pseudo-classes</a>).</p>

  <h5>Using the <code>button</code> element with the <code>command</code> attribute</h5>

  <p>If a <code>button</code> element has a <code
  title="command-attribute">command</code> attribute, then:</p>

  <p>If the element's <code>title</code> attribute is absent, then
  when the UA attempts to display the element's hint, it must instead
  use the specified command's Hint.</p>

  <p>If a <code>DOMActivate</code> event is dispatched on the element
  and is not canceled, and the event has no other default action, and
  the command's Disabled State is false (enabled), and the button's
  <code>disabled</code> attribute is absent, then the command's Action
  must be triggered as the default action.</p>

  <p class="note">The <code>DOMActivate</code> event is fired as the
  default action of the <code>click</code> event.</p>

  <p>If the command's Disabled State is true (disabled) then the
  element must be disabled. The <code>button</code> element must also
  be disabled if the element's <code>disabled</code> attribute is
  set.</p>
 
  <p>The Label, Icon, Checked State and Type facets of the command are
  ignored by the <code>button</code> element (except for <a
  href="#pseudosAndCommands">matching CSS pseudo-classes</a>).</p>

  <h5>Using the <code>input</code> element with the <code>command</code> attribute</h5>

  <p>If an <code>input</code> element has no <code>type</code>
  attribute and no <code>name</code> attribute, and it has a <code
  title="command-attribute">command</code> attribute, then:</p>

  <p>If the command is of Type "command" then the element must
  generally be styled and behave as if it was of type
  <code>button</code>; if the Type of the command is "radio" then the
  element must generally be styled and behave as if it was of type
  <code>radio</code>; and if the Type of the command is "checkbox"
  then the element must generally be styled and behave as if it was of
  type <code>checkbox</code>.</p>

  <p>If the command is of Type "command" and the element's
  <code>value</code> attribute is absent, then when the UA attempts to
  display the element's caption, it must instead use the specified
  command's Label. The Label facet is ignored if the command is not of
  Type "command".</p>

  <p>The UA may use the Icon facet of the command to render an
  icon in the control, if appropriate for the UI used.</p>

  <p>If the element's <code>title</code> attribute is absent, then
  when the UA attempts to display the element's hint, it must instead
  use the specified command's Hint.</p>

  <p>If a <code>DOMActivate</code> event is dispatched on the element
  and is not canceled, and the event has no other default action, and
  the command's Disabled State is false (enabled), and the element's
  <code>disabled</code> attribute is absent, then the command's Action
  must be triggered as the default action.</p>

  <p class="note">The <code>DOMActivate</code> event is fired as the
  default action of the <code>click</code> event.</p>

  <p>If the command's Disabled State is true (disabled) then the
  element must be disabled. The <code>input</code> element must also
  be disabled if the element's <code>disabled</code> attribute is
  set.</p>

  <p>If the command's Checked State is true (checked) then the element
  must be checked. The <code>input</code> element must also be checked
  if the element's <code>checked</code> attribute is set.</p>




  <p>This element should not be directly displayed. In CSS-aware user
  agents, this should be achieved by including the following rules, or
  their equivalent, in the UA's user agent style sheet:</p>

  <pre>@namespace xh url(http://www.w3.org/1999/xhtml);
xh|command { display: none; }</pre>



  <h5 id="command-with-command">Using the <code>command</code> element with the <code>command</code> attribute</h5>

  <p>If a <code>command</code> element has a <code
  title="command-attribute">command</code> attribute, then:</p>

  <p>If the element's <code>label</code> attribute is absent, then
  when the UA attempts to display the element's caption, it must instead
  use the specified command's Label.</p>

  <p>If the element's <code>icon</code> attribute is absent, then
  when the UA attempts to display the element's icon, it must instead
  use the specified command's Icon.</p>

  <p>If the element's <code>title</code> attribute is absent, then
  when the UA attempts to display the element's hint, it must instead
  use the specified command's Hint.</p>

  <p>If a <code>click</code> event is dispatched on the element and is
  not canceled, and the command's Disabled State is false (enabled),
  and the element's own <code>disabled</code> attribute is absent,
  then the command's Action must be triggered as the default
  action.</p>

  <p>If the command's Disabled State is true (disabled) then the
  element must be disabled. The <code>command</code> element must also
  be disabled if the element's <code>disabled</code> attribute is
  set.</p>

  <p>If the command's Checked State is true (checked) then the
  element must be checked. The <code>command</code> element must also
  be checked if the element's <code>checked</code> attribute is
  set.</p>

  <p>When a <code title="command-element">command</code> element has a
  <code title="command-attribute">command</code> attribute, any <code
  title="attr-command-type">type</code> and <code
  title="attr-command-radiogroup">radiogroup</code> attribute is
  ignored.</p>



  <h4>The 'icon' property</h4>

  <p>UAs should use the command's Icon as the default generic icon
  provided by the user agent when the 'icon' property computes to
  'auto' on an element that either defines a command or refers to one
  using the <code title="command-attribute">command</code>
  attribute.</p>

  <h4 id="pseudosAndCommands">CSS pseudo-classes and commands</h4>

  <p>When an element uses the <code
  title="command-attribute">command</code> attribute, any UI
  pseudo-classes from the following list that apply to the element
  defining the command also apply to the elements that refer to that
  command.</p>

  <dl>

   <dt>:enabled, :disabled</dt>

   <dd>Matches commands whose Disabled State facet is False and True
   respectively.</dd>

   <dt>:checked</dt>

   <dd>Matches commands whose Type facet is either "radio" or
   "checkbox", and whose Checked State facet is true.</dd>

  </dl>



  <p><code>menu</code> elements with explicit <code>label</code>
  attributes, and <code>menu</code> elements following
  <code>menulabel</code> elements, should be hidden. In CSS-aware UAs,
  this effect should be achieved by including the following rules, or
  their equivalent, in the UA's user agent style sheet:</p>

  <pre>@namespace xh url(http://www.w3.org/1999/xhtml);
xh|menu[label], xh|menulabel + xh|menu { display: none; }</pre>

  <p>All other <code>menu</code> elements should be rendered
  identically to <code>ul</code> elements. In CSS-aware UAs, this
  effect may be achieved by including rules similar to the following
  in the UA's user agent style sheet:</p>

  <pre>@namespace xh url(http://www.w3.org/1999/xhtml);
xh|menu { display: block; margin: 0 0 0 40px; list-style: disc; }</pre>




  <h5>Displaying menus</h5>

  <p>When a <code>menu</code> element is activated, the associated
  menu should be constructed and shown. (For details on how a
  <code>menu</code> element can be activated, see the sections on
  <span>menu links</span> and <span>menu bars</span>.)</p>

  <p>The styles applied to each element in the <code>menu</code>
  element, as well as the element itself, may be applied when
  constructing a menu. UAs are recommended to not apply styling to
  context menus and menus for application menu bars, and to only use
  styles for in-page menus.</p>

  <p>If user agents support styling of menus, they should only support
  the '<code>background</code>', '<code>color</code>',
  '<code>border</code>', '<code>padding</code>' and
  '<code>font</code>' properties on menus and menu items. (This list
  might be incomplete; in general, properties that merely affect the
  appearance of the element should work, but properties that affect
  the layout should not.)</p>

  <p>As the user interacts with a menu, the elements from which the
  menu was created should have appropriate pseudo-classes (:hover,
  :focus, :active) applied.</p>

  <p>The menu items must only consider the computed styles of the
  elements from which they were derived, not other elements.</p>

  <div class="example">

   <p>For example, take this menu:</p>

   <pre>&lt;menu&gt;
&lt;li&gt;&lt;command label="a"/&gt;&lt;/li&gt;
&lt;menu&gt;</pre>

   <p>The menu has one menu item, labelled "a".</p>

   <p>Styles applied to the <code>li</code> element in this menu would
   have no effect on the rendered menu, except in so far as styles
   inherit from that element to the <code>command</code> element.</p>

   <p>Styles applied to the <code>command</code> element could affect
   the menu. While the user is hovering over the menu item, the
   <code>:hover</code> pseudo-class matches the <code>command</code>
   element and any appropriate newly matching rules could be
   applied.</p>

  </div>

  <p>When activated from a <span title="menu links">menu link</span>,
  a menu must be placed in an Appropriate Place. Specifically, if the
  <code>a</code> element is displayed as a vertically-stacked box (as
  is typically seen for elements with '<code>display: block</code>',
  '<code>list-item</code>', or '<code>table</code>'), then the menu
  should appear vertically below the element, anchored so that one of
  its top corners coincides with a bottom corner of the box so that
  the menu and the box each have a horizontal sides in common (or a
  bottom corner of the menu coincides with a top corner of the box, if
  there isn't enough room for the menu to drop down); otherwise, if
  the element is displayed as a horizontally stacked box
  ('<code>display: inline</code>', '<code>table-cell</code>', etc),
  the menu should appear to the <em>side</em> of the box in an
  analogous way. If the element is on the right of the page, the menu
  should drop to the left, and vice versa.</p>

  <p>UAs should implement the drop-down behaviour in more
  platform-appropriate ways if the platform conventions differ from
  the behaviour described above.</p>




  <h4>The <dfn title="command-attribute"><code>command</code></dfn>
  attribute</h4>

  <p>Any element that can define a command can also, instead, have a
  <code>command</code> attribute that specifies the ID of a command
  that the element should defer to. In this case the element does not
  define a command, but, in the absence of attributes to the contrary,
  reflects the state of the element specified.</p>

  <p>If the <code>command</code> attribute specifies an ID that is not
  the ID of an element that defines a command, then the
  <code>command</code> DOM attribute is set to the null value, and the
  element acts as if it was linked to an element that defined a
  command with no Label, no Hint, no Icon, no Action, that was not
  Hidden, not Disabled, not Checked, and that was of Type
  "command".</p>


replaceable DOM properties: http://lxr.mozilla.org/mozilla/source/dom/src/base/nsDOMClassInfo.cpp#5928
<       brendan>|Hixie: so yeah, lxr for JSRESOLVE_QUALIFIED

screen object:
screen contains top left width height pixelDepth colorDepth availWidth availHeight availLeft availTop



  <p>The most direct way to represent a command is by using the <code
  title="command-element">command</code> element. A <code
  title="command-element">command</code> element defines a command if
  it does not have a <code title="command-attribute">command</code>
  attribute.</p>

  <div class="example">
   <pre>...
 &lt;command id="c_stop" label="Emergency Stop" onclick="dostop()"/&gt;
 &lt;command id="c_go" label="Go" onclick="dogo()"/&gt;
 &lt;command id="c_lamp" label="Headlamps" onclick="dof2()" disabled="disabled"/&gt;
...</pre>
</div>

  <p>The <code>command</code> element, in addition to the core and
  internationalisation attributes, may have the following
  attributes specified:</p>

  <dl>

   <!-+- yes i know that some of these are core attributes. If you can
   give me a better introductory paragraph, I'm all for it. -+->

   <dt><dfn title="attr-command-type"><code>type</code></dfn></dt>

   <dd>The command's Type. If present, this attribute must either have
   the value <code>radio</code>, in which case the command is of Type
   "radio", or the value <code>checkbox</code>, in which case the
   command is (amazingly) of Type "checkbox". Any other value, or the
   absence of the attribute altogether, means that the command is of
   Type "command".</dd>

   <dt><dfn title="attr-command-id"><code>id</code></dfn></dt>

   <dd>The command's ID. If this attribute is not specified, then the
   command is anonymous.</dd>

   <dt><dfn title="attr-command-label"><code>label</code></dfn></dt>

   <dd>The command's Label. If the attribute is not specified, the
   command's Label is given by the element's <code>textContent</code>
   DOM attribute.</dd>

   <dt><dfn title="attr-command-title"><code>title</code></dfn></dt>

   <dd>The command's Hint. If the attribute is not specified, the
   command's Hint is the empty string.</dd>

   <dt><dfn title="attr-command-icon"><code>icon</code></dfn></dt>

   <dd>A URI to the command's Icon. If the attribute is not specified,
   then the command has no Icon.</dd>

   <dt><dfn title="attr-command-onclick"><code>onclick</code></dfn></dt>

   <dd>An event handler attribute that listens for <code>click</code>
   events.</dd>

   <dt><dfn title="attr-command-hide"><code>hide</code></dfn></dt>

   <dd>The command's Hidden State. If the attribute is present, the
   command is hidden (and also disabled, regardless of the value of
   the <code>disabled</code> attribute), otherwise, the command is
   shown. If the attribute is present, it should have the value
   "<code>hide</code>". <!-+-The name of the attribute reflects the
   fact that Hidden commands in menus are hidden.-+-></dd>

   <dt><dfn title="attr-command-disabled"><code>disabled</code></dfn></dt>

   <dd>The command's Disabled State. If the attribute is present, the
   command is disabled, otherwise, the command is enabled. If the
   attribute is present, it should have the value
   "<code>disabled</code>".</dd>

   <dt><dfn title="attr-command-checked"><code>checked</code></dfn></dt>

   <dd>The command's Checked State. If the attribute is present, the
   command is checked, otherwise, the command is not. If the attribute
   is present, it should have the value "<code>checked</code>".</dd>

   <dt><dfn title="attr-command-radiogroup"><code>radiogroup</code></dfn></dt>

   <dd>An attribute indicating the name of the group of commands that
   will be toggled when the command itself is toggled. (Described <a
   href="#radiocommand">below</a>.)</dd>

   <dt><dfn title="attr-command-default"><code>default</code></dfn></dt>

   <dd>An attribute indicating whether the command is the default
   command. If the attribute is present, the command is the default
   command, otherwise it is not. If it is set, it should have the
   value <code>default</code>. Used by context menus to indicate what
   the default option would be. The :default pseudo-class matches
   <code>command</code> elements with this attribute.</dd>

  </dl>

  <p>In addition, <code title="command-element">command</code>
  elements may also have a <code
  title="command-attribute">command</code> attribute, as <a
  href="#command-with-command">described below</a>.</p>

  <p>The Type, ID, Label, Hint, Icon, Hidden State, Disabled State,
  and Checked State of the command defined by a <code
  title="command-element">command</code> element are as described
  above. The Action of a <code title="command-element">command</code>
  element is that a <code>{"http://www.w3.org/2001/xml-events",
  "click"}</code> event is fired on the element.</p>

  <p>If the Type of the command is "checkbox", when a
  <code>click</code> event is dispatched on the element, user agents
  must toggle the value of the <code>checked</code> attribute before
  the event is dispatched in the document. (If the attribute is
  absent, then it is set to the value <code>checked</code>, and if the
  attribute is present, it is removed.) If the default action of the
  event is canceled, the value of the attribute must be changed back
  to the value it had before the event was dispatched.</p>

  <p id="radiocommand">If the Type of the command is "radio", when a
  <code>click</code> event is dispatched on the element, user agents
  must set the value of the <code>checked</code> attribute on the
  element to <code>checked</code>, and remove the attribute from any
  <code>command</code> elements with <code>type</code> set to
  <code>radio</code> and the same parent element and same
  <code>radiogroup</code> attribute, before the event is dispatched in
  the document. (If the element has no <code>radiogroup</code>
  attribute, then the elements "with the same <code>radiogroup</code>
  attribute" are those elements with <em>no</em>
  <code>radiogroup</code> attribute.) If the default action of the
  event is canceled, the value of the attributes that were changed
  must be changed back to the values they had before the event was
  dispatched.</p>

  <p>In HTML the <code>command</code> element is an empty element with
  no end tag.</p>

  <p>Authors should put <code>command</code> elements inside the
  <code>head</code> element, inside any element that may contain
  <span>block-level elements</span> or <span>inline-level
  content</span>, or inside <code>commandset</code> elements.</p> <!-+-
  should, because hey, if they want to put them elsewhere, why not.
  XXX -+->

  <p>Authors should not put elements or text inside
  <code>command</code> elements.</p>




  <p>The <code title="dom-command-ro-command">command</code> DOM attribute
  is defined with the <code title="attr-command">command</code>
  content attribute.</p>


Need to become consistent about whether or not to quote keyword
("<code title="">foo</code>" vs <code>foo</code>)



  XXX command icons in rendering section:

  If the element defining the command has no explicit icon, then the
  attribute must instead return the computed value of the CSS '<code
  title="">icon</code>' property on that element. <a
  href="#refsCSS3UI">[CSS3UI]</a>

  If the computed value of '<code title="">icon</code>' is
  '<code>auto</code>',


search for event-click and make them all point to:
<a href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#event-click"><code>click</code></a>
...or something.

<code>DOMActivate -> <code title="event-DOMActivate">DOMActivate


onclick="" only fires if it is a MouseEvent


<form> .submit definition - see http://lxr.mozilla.org/mozilla/source/content/html/content/src/nsHTMLFormElement.cpp#600
for how to handle multiple calls in series


http://lxr.mozilla.org/mozilla/source/content/html/content/src/nsHTMLFormElement.cpp#699

How events are handled:
http://lxr.mozilla.org/mozilla/ident?i=HandleDOMEvent

http://www.quirksmode.org/js/events_compinfo.html
e.g. mousedown mouseup click mousedown mouseup click dblclick

http://msdn.microsoft.com/library/default.asp?url=/workshop/author/dhtml/reference/events.asp



05:46 <            bz>|Hixie: let's put it this way
05:46 <            bz>|Hixie: 1)  A script is executed when its data is available
05:47 <            bz>|Hixie: 2) The data for an inline script is available when its </script> is seen
05:47 <            bz>|Hixie: 3) The data for a script with src is available when it finishes loading
05:47 <            bz>|Hixie: all good so far?
05:47 <         Hixie>|i'm waiting for the bit where src= causes blocking in the normal, non-d.w case
05:47 <            bz>|Hixie: 4) The data for a script with src starts loading when the <script> node is inserted into the DOM
05:48 <        shaver>|it causes parser blocking in the normal case
05:48 <            bz>|Hixie: 5)  When such a load starts, all further parsing is suspended until the load has completed and the script has executed.
05:48 <            bz>|Hixie: so if we forget document.write
05:48 <            bz>|Hixie: and look at the HTML:  <script src="foo"></script><div>
05:48 <            bz>|Hixie: the text "<div>" will nto be parsed until after the script runs
05:49 <            bz>|Hixie: this is needed so that if the script does document.write that text can be inserted _before_ the "<div>" text into the parser
05:49 <         Hixie>|sure
05:49 <         Hixie>|all this is fine
05:49 <            bz>|Hixie: ok.  So now let's look at our case
05:49 <         Hixie>|but how does document.write() know when to return?
05:49 -!- davel [davel@moz-4F4E281A.dsl.static.sonic.net] has quit [Quit: davel]
05:49 <            bz>|It gives the data to the parser, and tells the parser to parse it
05:49 <            bz>|Once the parser returns, document.write returns
05:50 <            bz>|The parser returns when it runs out of data to parse (it's parsed it all)
05:50 <            bz>|Or if it's explicitly suspended (eg by a <script src="">)
05:50 <         Hixie>|AH
05:50 <            bz>|All this in Gecko
05:50 <         Hixie>|ok that was the key piece of information i was missing
05:50 <         Hixie>|the "explicit suspension"
05:50 <         Hixie>|ok
but test IE on this...


XXX publish a "Valid HTML5!" button with a kitten on it. Made by an artist. (Doodle?)


XXX rename "Block-level" and "inline-level" to something else to
prevent terminology clash with CSS.

   Interaction with document.open/write/close is undefined
   How to determine the character encoding
   Integration with quirks mode problems
   <style> parsing needs tweaking if we want to exactly match IE
   <base> parsing needs tweaking to handle multiple <base>s
   <isindex> needs some prose in the form submission section
   No-frames and no-script modes aren't yet defined
   Execution of <script> is not yet defined
   New HTML5 elements aren't yet defined
   There are various cases (marked) where EOF handling is undefined
   Interaction with the "load" event is undefined


hsivonen:
> To make document conformance a more useful concept for the purpose of catching
> author errors, I suggest that the following attributes be made required:
> href and rel on link
> href on base
> name and content on meta (other than the encoding decl)
> src on img
> code, height and width on applet
> name and value on param
...
> To allow user agents see whether the author provided the empty string as the
> alternative text of whether the author just didn't care, I suggest that the
> alt attribute on img be made optional.
(i agree -ian)
...
> On the other hand, I have doubts about the requirement of significant
> inline content. When the W3C said that paragraphs mustn't be empty,
> various applications started emitting <p>&nbsp;</p>. If the WHAT WG says
> that paragraphs must contend significant inline content, are the
> developers of those applications suddenly going to decide not to allow
> them to paragraphs to be saved or are they going to come up with an even
> more crufty work-around to comply with the machine-checkable
> requirements of the spec?
(i agree, i think we should drop "significant inline content". -ian)


bjoern:
> If the concern here is what the specification should say, then that's
> what a valid state is, not what a valid document is, since the class of
> "predictably valid" documents does not cover many dynamic documents.



arv asks for: a way to track download progress of, e.g., images when
you are preloading 10 images; cf onprogress on XHR in mozilla


window.getAttention() or some similar API to let the user know the
page wants attention? How do you reduce the chance of irritation?
see also https://bugzilla.mozilla.org/show_bug.cgi?id=293412




ITEM

Items have:
 - parents, children
 - properties
 - commands that can apply to them



   <li>Inline markup for pop-up windows, for example for dialog boxes
   or tool palettes, so that dialogs need not be defined in separate
   files.</li>

   <li>Command updating: applications that have several access
   points for the same feature, for instance a menu item and a
   tool-bar button, would benefit from having to disable such
   commands only once, instead of having to keep each access point
   synchronized with the feature's availability at all times.
   Similarly menu items or tool-bar buttons that represent a toggle
   state could automatically stay synchronized whenever
   toggled.</li>

   <li>More device-independent DOM events: The DOM event set needs
   device-independent events, such as events that fire when a button
   or link is activated, whether via the mouse or the keyboard.
   <code>DOMActivate</code> is a start, but it lacks equivalent HTML
   attributes, and additional events may be needed.</li>

   <li>Richer widget set: the existing HTML controls are quite
   limited, some controls for commonly used types such as date
   controls and range controls would be useful.</li>

   <li>Sortable and multicolumn tree views and list views with rich
   formatting.</li>

   <li>Ability to define custom widgets cleanly, for example using
   XBL and APIs to query and control focus state, widget state, the
   position and state of input devices, etc.</li>

   <li>Rich text editing: an underlying architecture upon which
   domain-specific editors can be created, including things like
   control over the caret position.</li>

   <li>A predefined HTML editor based on the rich text editing
   architecture.</li>

   <li>Drag and drop APIs.</li>

   <li>Text selection manipulation APIs.</li>

   <li>Clipboard APIs (if the security and privacy concerns can be
   addressed).</li>

   <li>Flexible box model: The existing box model in CSS is designed
   largely for documents rather than user interface. We need a new
   box model designed for user interface which would relieve author
   complaints about other aspects of CSS and also reduce the need
   for tables for layout.</li>

   <li>Window-based state management (so that new windows don't
   interfere with existing sessions), for example implemented as a
   per-domain, per-window "file system". This would allow multiple
   instances of the same application (from the same site) to run
   without the instances overwriting each other's cookies.</li>

   <li>Markup to denote <span>mutually exclusive sections</span> (as
   in the commonly seen wizard interfaces).</li>

   <li>An improved CSS object model, for example with better APIs
   for animation, simpler ways to navigate the rendered content, a
   way to find the position of an element, methods to list the
   elements under a coordinate, etc.</li>

   <li>Better defined user authentication state handling. (Being able
   to "log out" of sites reliably, for instance, or being able to
   integrate the HTTP authentication model into the Web page.)</li>


-->


 </body>
</html>
